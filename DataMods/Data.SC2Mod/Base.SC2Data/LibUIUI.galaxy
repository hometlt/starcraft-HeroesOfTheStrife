include "TriggerLibs/NativeLib"
include "LibCore_h"
include "LibGame_h"
include "LibMeta_h"
include "LibSprt_h"
include "LibMapM_h"
include "LibSond_h"

include "LibUIUI_h"

//--------------------------------------------------------------------------------------------------
// Library: UI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libUIUI_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMeta_InitVariables();
    libSprt_InitVariables();
    libMapM_InitVariables();
    libSond_InitVariables();
}

// Variable Initialization
bool libUIUI_InitVariables_completed = false;

void libUIUI_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (libUIUI_InitVariables_completed) {
        return;
    }

    libUIUI_InitVariables_completed = true;

    libUIUI_gv_uITimeLabelUpdateTimer = TimerCreate();
    libUIUI_gv_uIDamageFlashUI.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashLowHPThreshold = 30.0;
    libUIUI_gv_uIDebugPanelForcedMinionWaveCompIndex = 1;
    libUIUI_gv_deathRecapPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_deathRecapPanel.lv_tabScreenButton = c_invalidDialogControlId;
    libUIUI_gv_deathRecapPanel.lv_openDeathRecapButton = c_invalidDialogControlId;
    libUIUI_gv_deathRecapPanel.lv_mainGraphLabel = c_invalidDialogControlId;
    libUIUI_gv_deathRecapPanel.lv_highestDamagersPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersPlayerNameLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_highestDamagersProgressBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBars[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarTooltips[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarProgressBars[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilAmountLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_deathRecapPanel.lv_abilitiesPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealingBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelDamageBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIconBorders[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarTimeLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_deathRecapPanel.lv_abilitiesPanelStartingHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_uICombatFloatingElementsRemoveDelayTicks = (libUIUI_gv_uICombatFloatingElementsRemoveDelay / 0.0625);
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[init_i] = TimerCreate();
    }
    libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_victoryFrame = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_defeatFrame = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_defeatLabel = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_leaveButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameUI = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_consolePanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_helpButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameMenuButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameUIContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_pingButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_minimapPanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_disableMinimapCommandsButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_enableMinimapCommandsButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_serverLabel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameVersionLabel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_matchIDLabel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIVisibility = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C; init_j += 1) {
            libUIUI_gv_uIHealingFountainsHelpText[init_i][init_j].lv_textTag = c_textTagNone;
            libUIUI_gv_uIHealingFountainsHelpText[init_i][init_j].lv_cooldown = c_textTagNone;
        }
    }
    libUIUI_gv_uIHeroConsole.lv_heroConsolePanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIHeroConsoleUnitStatusMaximum; init_i1 += 1) {
        libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUIPortrait = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUICommandPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUICommandCardPanelFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_buffBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_debuffBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_neutralBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_statsContainer = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_talentsContainer = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_deathRecapContainer = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsContainerPlayer[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIHeroLeaderboard.lv_sortButtonKills = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_sortButtonAssists = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDeaths = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_sortButtonSiegeDamage = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHeroDamage = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHealedAndAbsorbed = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDamageTaken = c_invalidDialogControlId;
    libUIUI_gv_uIHeroLeaderboard.lv_sortButtonXPContribution = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_playerFramePlayerName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsKillsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsKillsFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsAssistsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsAssistsFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsDeathsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsDeathsFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsSiegeDamageLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsSiegeDamageFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsHeroDamageLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsHeroDamageFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsHealedandAbsorbedLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsHealedandAbsorbedFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsDamageTakenLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsDamageTakenFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsXPContributionFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsMapMechanicImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_statsMapMechanicLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentIcon[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentQuestProgressBar[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltip[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipNameLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipInfoLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipDescriptionLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentTiers; init_j1 += 1) {
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipQuestProgressionLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_uIHeroLeaderboardSortButton = libUIUI_ge_UIHeroLeaderboardSortButton_Kills;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[init_i] = libUIUI_ge_UIHeroLeaderboardSortingSortingType_DefaultSorting;
    }
    libUIUI_gv_heroSelection.lv_dialog = c_invalidDialogId;
    libUIUI_gv_heroSelection.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_countdownLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_finalCountdownFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_titleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_selectedHeroPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_selectedHeroName = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_selectedHeroRole = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_pickHeroPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_talents_MaxPrepickedTalentProfiles_C; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_buildButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBorder[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersEmpty[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe3[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersThinking[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_heroSelection.lv_teamPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroRole[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroRoleBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroEmpty[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroBorder[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroLocked[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroLockedAnimation[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroSelectedAlly[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroThinking[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroPlayerName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroHeroName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_heroContainerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_heroCutsceneFrame[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_brawlButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_lockButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_debugCrazyBtn = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_debugRerollBtn = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelCloseButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelHeroContainerFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelAbilitiesTileList = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListName = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPairedHeroesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPairedHeroesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItem = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelector = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItem = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelector = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelCloseButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelHeroContainerFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTierButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelectionSetting.lv_countdownTimer = TimerCreate();
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_heroSelectionSetting.lv_talentTierPressedButton[init_i1] = 1;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero; init_j1 += 1) {
            libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledBasic[init_i1][init_j1] = 1;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledActive[init_i1] = 1;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledPassive[init_i1] = 1;
    }
    libUIUI_gv_hSUILoadout.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_loadoutButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_closeButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_previewPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelName = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelDescription = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseCurrencySelectPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanelConfirmButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanelCancelButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxListItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldownListItem[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelNameEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_bannersButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_spraysButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_announcerPacksButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_voiceLinesButton = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxSkinItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanelScrollEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanelSelectedContentLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxListItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldownListItem[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_mountsPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxMountItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelScrollEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelSelectedContentLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxListItemCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldownListItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C; init_i1 += 1) {
        libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItem = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemIcon = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltip = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipDescriptionLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_selectedPanel = libUIUI_ge_HSUIPanelType_None;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerSkinCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerMountCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerSkinMaxLaneCount = 1;
        libUIUI_gv_hSUILoadoutPlayer[init_i].lv_laneControllerMountMaxLaneCount = 1;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_playerNameLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_heroNameLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_botDifficultyLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_botStatusLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicFrame = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicIcon = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicCount = c_invalidDialogControlId;
    }
    libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_offscreenUnit[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_arrow[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libUIUI_gv_jCIInfo[init_i].lv_dialog = c_invalidDialogId;
        libUIUI_gv_jCIInfo[init_i].lv_mainPanel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_campTimerLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_campEliteLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_campTitleLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_playerNameLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_campDescriptionLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_debugLabel = c_invalidDialogControlId;
    }
    libUIUI_gv_killLogPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libUIUI_gv_killLogMaxItemCountD0A1; init_i += 1) {
        libUIUI_gv_killLogItems[init_i].lv_timer = TimerCreate();
        libUIUI_gv_killLogItems[init_i].lv_frame = c_invalidDialogControlId;
    }
    libUIUI_gv_killLogDebugPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_killLogDebugPanel.lv_closeButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxEnginePlayerCount; init_i1 += 1) {
        libUIUI_gv_killLogDebugPanel.lv_killButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_killLogDebugPanel.lv_questButtons[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_killLogDebugPanel.lv_killCheckbox = c_invalidDialogControlId;
    libUIUI_gv_killLogDebugPanel.lv_questCheckbox = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer = TimerCreate();
    libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons;
    libUIUI_gv_notificationDisplay.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_coreNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_coreNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_singleKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_singleKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle2 = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel2 = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel3 = c_invalidDialogControlId;
    libUIUI_gv_partyFrameDeathUpdateTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libUIUI_gv_teamXPPartySpamLockoutTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libUIUI_gv_teamXPPartyFrameDecrementPingCountTimer[init_i] = TimerCreate();
    }
    libUIUI_gv_uIPartyFrame.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamHeroPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPanels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroTargetFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusBarsSeparateShields[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroExtendedDeathIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroCondensedDeathIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroOnFireCutscene[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_playerBoostEffect[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPetOwner[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPet[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonA[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonB[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPartyButtonC[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[init_i1] = TimerCreate();
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[init_i1][init_j1] = TimerCreate();
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxAlternateHeroes; init_j1 += 1) {
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_uIPartyFrame.lv_gameTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamLevelLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamNextLevelTalentIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamNextLevelNoTalentIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamXPVeterancyBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIPartyFrame.lv_coreHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_uIPartyFrame.lv_xPContributionClickableButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_heroXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_mercenaryXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_minionXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_passiveXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_structureXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIPartyFrame.lv_totalXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_pingInputSuppressionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_pingLockoutTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_pingCountResetTime[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_pingPlayerHearthstonePing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_hearthPingTextLockoutTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uIOnMyWayPingPathDisplayTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libUIUI_gv_uIPingTargetMaxCount_C; init_i += 1) {
        libUIUI_gv_pingPingTarget[init_i].lv_pingSoundAlliedTarget = SoundLink("EditorDefaultSound", -1);
        libUIUI_gv_pingPingTarget[init_i].lv_pingSoundEnemyTarget = SoundLink("EditorDefaultSound", -1);
    }
    libUIUI_gv_preloadPanel.lv_dialog = c_invalidDialogId;
    libUIUI_gv_preloadPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_preloadPanel.lv_backgroundImage = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_container = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_tabControl = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_closeButton = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_teamLevelLabelBlue = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_teamLevelLabelRed = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_teamKillsLabelBlue = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_teamKillsLabelRed = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uITalentsPrepickedSelectedBuild[init_i] = 1;
    }
    libUIUI_gv_uITalentsChoicePanel.lv_talentsPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_talents_MaxPrepickedTalentProfiles_C; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_buildButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_talentButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_talentIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_talentName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_tooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_tooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsPerTier; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_tooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonIconFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentTiers; init_i1 += 1) {
        libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonQuestProgressBar[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionIndicatorContainer = c_invalidDialogControlId;
    libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionToggleButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uITalentsChoicePanelPlayer[init_i].lv_selectedTier = 1;
    }
    libUIUI_gv_teamStatusPanel.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_teamStatusPanel.lv_topChevron = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_topChevronEmpty = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_teamColorBar[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicImage = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicImageTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImage = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImageTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImageBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBarLabel[init_i1] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer (int lp_hotkeyDialogItem, int lp_hotkeyType, int lp_player) {
    // Automatic Variable Declarations
    int autoE0EE62BE_val;

    // Implementation
    autoE0EE62BE_val = lp_hotkeyType;
    if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Heroic) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyHeroic");
    }
    else if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Active) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyActive");
    }
    else if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Passive) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyPassive");
    }
    else {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyAbility");
    }
}

void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup (int lp_hotkeyDialogItem, int lp_hotkeyType, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    int auto4E3B6BAB_val;

    // Implementation
    auto4E3B6BAB_val = lp_hotkeyType;
    if (auto4E3B6BAB_val == libCore_ge_HeroTalentType_Heroic) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HeroAbilHotkeyFrame", "HotkeyHeroic");
    }
    else if (auto4E3B6BAB_val == libCore_ge_HeroTalentType_Active) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HeroAbilHotkeyFrame", "HotkeyActive");
    }
    else if (auto4E3B6BAB_val == libCore_ge_HeroTalentType_Passive) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HeroAbilHotkeyFrame", "HotkeyPassive");
    }
    else {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HeroAbilHotkeyFrame", "HotkeyAbility");
    }
}

void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer (int lp_hotkeyType, int lp_hotkeyDialogItem, int lp_player) {
    // Automatic Variable Declarations
    int auto59946560_val;

    // Implementation
    auto59946560_val = lp_hotkeyType;
    if (auto59946560_val == libUIUI_ge_HotkeyHotkeyType_HotkeyMissing) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyMissing");
    }
    else if (auto59946560_val == libUIUI_ge_HotkeyHotkeyType_HotkeyNormal) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyNormal");
    }
    else if (auto59946560_val == libUIUI_ge_HotkeyHotkeyType_HotkeyQuest) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyQuesting");
    }
    else if (auto59946560_val == libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyUpgrade");
    }
    else {
    }
}

void libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayerGroup (int lp_hotkeyType, int lp_hotkeyDialogItem, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    int autoF0F7E3D7_val;

    // Implementation
    autoF0F7E3D7_val = lp_hotkeyType;
    if (autoF0F7E3D7_val == libUIUI_ge_HotkeyHotkeyType_HotkeyMissing) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HotkeyType", "HotkeyMissing");
    }
    else if (autoF0F7E3D7_val == libUIUI_ge_HotkeyHotkeyType_HotkeyNormal) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HotkeyType", "HotkeyNormal");
    }
    else if (autoF0F7E3D7_val == libUIUI_ge_HotkeyHotkeyType_HotkeyQuest) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HotkeyType", "HotkeyQuesting");
    }
    else if (autoF0F7E3D7_val == libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade) {
        DialogControlSetAnimationState(lp_hotkeyDialogItem, lp_playerGroup, "HotkeyType", "HotkeyUpgrade");
    }
    else {
    }
}

void libUIUI_gf_UIUpdateTimeLabels () {
    // Variable Declarations
    text lv_timeLabelText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_D7097D5E", "A", StringToText(StringSub(libCore_gf_GetTimeStamp(TimerGetRemaining(libGame_gv_openTheGatesTimer)), 1, 5)));
        lv_timeLabelText = TextExpressionAssemble("Param/Expression/lib_UIUI_D7097D5E");
    }
    else {
        lv_timeLabelText = StringToText(StringSub(libCore_gf_GetTimeStamp((TimerGetElapsed(libGame_gv_gameTimer)+libSprt_gv_debug_GameTimeDelta*60)), 1, 5));
    }
    libUIUI_gf_UIPartyFrameGameTimerUpdate(lv_timeLabelText);
    libUIUI_gf_UIPartyFrameHeroicTalentCooldownUpdate();
    TimerStart(libUIUI_gv_uITimeLabelUpdateTimer, libUIUI_gv_partyFrameTimersUpdateDelay_C, false, c_timeGame);
}

void libUIUI_gf_UISetDialogItemToSelectedOrObserved (int lp_dialogItem) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetObservedType(lp_dialogItem, c_triggerObservedTypeSelectedOrObservedPlayerId);
    DialogControlSetVisible(lp_dialogItem, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(lp_dialogItem, libCore_gv_nPCPlayers, false);
}

void libUIUI_gf_UIShowHideStormGameUIAndWorldForPlayer2 (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(lp_showHide, lp_player);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeMinimapPanel, lp_showHide);
}

void libUIUI_gf_UIShowHideStormGameUIAndWorldForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        CameraLockInput(lp_player, false);
    }
    else {
        CameraLockInput(lp_player, true);
    }
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(lp_showHide, lp_player);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeMinimapPanel, lp_showHide);
    UISetWorldVisible(libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_lastUsedDialogItemTime[lp_player] = GameGetMissionTime();
}

fixed libUIUI_gf_GetLastUsedDialogItemTime (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libUIUI_gv_lastUsedDialogItemTime[lp_player];
}

bool libUIUI_gf_CanUseDialogItemTime (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_lastUsedDialogItemTime[lp_player] <= GameGetMissionTime())) {
        return true;
    }

    return false;
}

void libUIUI_gf_InitPathingLines (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lp_player], lp_unit);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectInstant, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectTarget, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilArmMagazine, c_abilClassFilterExcluded);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "assets\\Textures\\Storm_Waypointline.dds");
    PathSetMinimumStepCount(PathLastCreated(), 0);
    PathSetMinimumTravelDistance(PathLastCreated(), 3.0);
    PathSetMinimumLinearDistance(PathLastCreated(), 3.0);
    libGame_gv_players[lp_player].lv_path = PathLastCreated();
}

void libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_player].lv_lowHPSoundPlaying == false)) {
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.0, 50.0);
        libGame_gv_players[lp_player].lv_lowHPSoundPlaying = true;
        TriggerEnable(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, true);
        if ((libGame_gv_players[lp_player].lv_lowHPStartSound == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealth_Warning_Start", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPStartSound = SoundLastPlayed();
        }

        if ((libGame_gv_players[lp_player].lv_lowHPBreathLoop == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealthWarning_Breath_Loop", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPBreathLoop = SoundLastPlayed();
        }

        if ((libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealthWarning_HeartBeat_Loop", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop = SoundLastPlayed();
        }

    }

}

void libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_players[lp_player].lv_lowHPSoundPlaying = false;
    DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.625, 100.0);
    if ((libGame_gv_players[lp_player].lv_lowHPStartSound != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPStartSound, true);
        libGame_gv_players[lp_player].lv_lowHPStartSound = null;
    }

    if ((libGame_gv_players[lp_player].lv_lowHPBreathLoop != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPBreathLoop, true);
        libGame_gv_players[lp_player].lv_lowHPBreathLoop = null;
    }

    if ((libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop, true);
        libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop = null;
    }

}

void libUIUI_gf_UILowHPSetSoundChannelsForLowHealth (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAlert, 0.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryBuild, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryCombat, 60.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDeath, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDialogue, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDoodad, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFlames, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFoley, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryGather, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryME, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMission, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovement, 35.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovie, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMusic, 80.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryOther, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryReady, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySAmbient, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySEmitters, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySPieces, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpell, 60.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTV, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUI, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 100.0, 2.0);
}

void libUIUI_gf_UILowHPSetSoundChannelsForSilence (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAlert, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryBuild, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryCombat, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDeath, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDialogue, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDoodad, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFlames, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFoley, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryGather, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryME, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMission, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovement, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovie, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMusic, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryOther, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryReady, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySAmbient, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySEmitters, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySPieces, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpell, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTV, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUI, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 30.0, 1.0);
}

void libUIUI_gf_UILowHPSetSoundChannelsForNormal (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, libCore_gv_playerGroupFromPlayer[lp_player], 1.5);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 100.0, 1.0);
}

void libUIUI_gf_DeathRecapShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }
    DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_DeathRecapShowHideToastButtonForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }
    if ((lp_showHide == true)) {
        TimerStart(libGame_gv_players[lp_player].lv_deathToastTimer, libGame_gv_heroDeathToastDisplayTime, false, c_timeGame);
    }
    else {
        libNtve_gf_StopTimer(libGame_gv_players[lp_player].lv_deathToastTimer);
    }
}

text libUIUI_gf_DeathRecapCreateTooltipTextNoSentence (int lp_deadPlayer, int lp_effectIndex) {
    // Variable Declarations
    int lv_effectAmount;
    int lv_effectOverkill;
    int lv_effectShielded;
    text lv_effectorText;
    text lv_abilityText;
    text lv_abilityTooltipText;
    text lv_shieldAmountText;
    text lv_damageAmountText;
    text lv_simpleTooltip;
    text lv_finalText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_effectAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amount;
    lv_effectShielded = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amountAbsorbed;
    lv_effectOverkill = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amountOverkill;
    TextExpressionSetToken("Param/Expression/lib_UIUI_DB341940", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "SimpleDisplayText", c_playerAny)));
    lv_simpleTooltip = TextExpressionAssemble("Param/Expression/lib_UIUI_DB341940");
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_isHeal == true)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_07BA6471", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "Name", c_playerAny)));
        lv_abilityText = TextExpressionAssemble("Param/Expression/lib_UIUI_07BA6471");
        TextExpressionSetToken("Param/Expression/lib_UIUI_2813FF5E", "A", IntToText(lv_effectAmount));
        lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_2813FF5E");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_E50ACCA5", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "Name", c_playerAny)));
        lv_abilityText = TextExpressionAssemble("Param/Expression/lib_UIUI_E50ACCA5");
        if ((lp_effectIndex == 1)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_B4600397", "A", IntToText(lv_effectAmount));
            TextExpressionSetToken("Param/Expression/lib_UIUI_B4600397", "B", IntToText(lv_effectOverkill));
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_B4600397");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_A286320C", "A", IntToText(lv_effectAmount));
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_A286320C");
        }
        if ((lv_effectShielded > 0)) {
            TriggerDebugOutput(1, StringToText(("Shielded Amount: " + IntToString(lv_effectShielded))), false);
            TextExpressionSetToken("Param/Expression/lib_UIUI_979D3A36", "A", IntToText(lv_effectShielded));
            lv_shieldAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_979D3A36");
            TextExpressionSetToken("Param/Expression/lib_UIUI_96D1FF5B", "A", IntToText(lv_effectAmount));
            TextExpressionSetToken("Param/Expression/lib_UIUI_96D1FF5B", "B", lv_shieldAmountText);
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_96D1FF5B");
        }
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_2B46C8C4", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_unitType, "Name", c_playerAny)));
    lv_effectorText = TextExpressionAssemble("Param/Expression/lib_UIUI_2B46C8C4");
    TextExpressionSetToken("Param/Expression/lib_UIUI_421FC6D5", "A", lv_effectorText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_421FC6D5", "D", lv_abilityText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_421FC6D5", "E", lv_damageAmountText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_421FC6D5", "F", lv_simpleTooltip);
    lv_finalText = TextExpressionAssemble("Param/Expression/lib_UIUI_421FC6D5");
    return lv_finalText;
}

void libUIUI_gf_DeathRecapPopulateEffectInstancesForAbilitiesPanel (int lp_deadPlayer) {
    // Variable Declarations
    int lv_effectBarSize;
    int lv_healthBarSize;
    int lv_highestHealthPercent;
    int lv_thirtyPercentHealth;
    int lv_itEffect;
    int lv_totalDamage;
    int lv_postEffectHealth;
    int lv_effectAmount;
    int lv_deadHeroHighestHealth;
    int lv_deadHeroMaxHealth;
    int lv_help;

    // Automatic Variable Declarations
    int auto577EF4BA_ae;
    const int auto577EF4BA_ai = 1;
    int autoA66EE888_ae;
    const int autoA66EE888_ai = 1;
    const int autoBE84021F_ae = libGame_gv_deathRecap_MaxEffectsBars_C;
    const int autoBE84021F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }
    DialogControlSetEnabled(libUIUI_gv_deathRecapPanel.lv_tabScreenButton, libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth <= 0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_AA7F1CED", "A", IntToText(lp_deadPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_AA7F1CED"), true);
        return ;
    }
    lv_deadHeroHighestHealth = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth;
    lv_deadHeroMaxHealth = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroMaxHealth;
    lv_highestHealthPercent = FixedToInt(Round((IntToFixed(lv_deadHeroHighestHealth) / IntToFixed(lv_deadHeroMaxHealth) * 100)));
    if ((lv_highestHealthPercent <= libUIUI_gv_deathRecap_MPercentLifeReference_C)) {
        lv_thirtyPercentHealth = FixedToInt((IntToFixed(lv_deadHeroMaxHealth) * 0.3));
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelStartingHealthLabel, IntToText(libUIUI_gv_deathRecap_MPercentLifeReference_C), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        autoA66EE888_ae = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
        lv_itEffect = 1;
        for ( ; ( (autoA66EE888_ai >= 0 && lv_itEffect <= autoA66EE888_ae) || (autoA66EE888_ai < 0 && lv_itEffect >= autoA66EE888_ae) ) ; lv_itEffect += autoA66EE888_ai ) {
            lv_effectAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
            lv_postEffectHealth = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_postEffectHealth;
            lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C *lv_effectAmount / lv_thirtyPercentHealth);
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * (lv_postEffectHealth - lv_effectAmount) / lv_thirtyPercentHealth);
                if ((lv_healthBarSize < 2)) {
                    lv_healthBarSize = 2;
                }
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "Heal");
            }
            else {
                lv_totalDamage += lv_effectAmount;
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C *lv_postEffectHealth / lv_thirtyPercentHealth);
                if ((lv_healthBarSize < 2)) {
                    lv_healthBarSize = 2;
                }
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "Damage");
            }
        }
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelStartingHealthLabel, IntToText(lv_highestHealthPercent), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        auto577EF4BA_ae = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
        lv_itEffect = 1;
        for ( ; ( (auto577EF4BA_ai >= 0 && lv_itEffect <= auto577EF4BA_ae) || (auto577EF4BA_ai < 0 && lv_itEffect >= auto577EF4BA_ae) ) ; lv_itEffect += auto577EF4BA_ai ) {
            lv_effectAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
            lv_postEffectHealth = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_postEffectHealth;
            lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * lv_effectAmount / lv_deadHeroHighestHealth);
            if ((lv_effectBarSize <= 1)) {
                lv_effectBarSize = 2;
            }
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * (lv_postEffectHealth - lv_effectAmount) / lv_deadHeroHighestHealth);
                if ((lv_healthBarSize < 2)) {
                    lv_healthBarSize = 2;
                }
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "Heal");
            }
            else {
                lv_totalDamage += lv_effectAmount;
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C *lv_postEffectHealth / lv_deadHeroHighestHealth);
                if ((lv_healthBarSize < 2)) {
                    lv_healthBarSize = 2;
                }
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "Damage");
            }
        }
    }
    libUIUI_gf_DeathRecapPopulateAbilityandHeroDataForAbilitiesPanel(lp_deadPlayer);
    TextExpressionSetToken("Param/Expression/lib_UIUI_2E8AC5C8", "A", IntToText(lv_totalDamage));
    TextExpressionSetToken("Param/Expression/lib_UIUI_2E8AC5C8", "B", FixedToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount].lv_time, 1));
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_mainGraphLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_2E8AC5C8"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    lv_itEffect = (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount + 1);
    for ( ; ( (autoBE84021F_ai >= 0 && lv_itEffect <= autoBE84021F_ae) || (autoBE84021F_ai < 0 && lv_itEffect >= autoBE84021F_ae) ) ; lv_itEffect += autoBE84021F_ai ) {
        DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "DamageHealState", "NoData");
    }
}

void libUIUI_gf_DeathRecapPopulateAbilityandHeroDataForAbilitiesPanel (int lp_deadPlayer) {
    // Variable Declarations
    int lv_effectPlayer;
    int lv_itEffect;
    text lv_effectTooltipText;
    text lv_effectAmountText;

    // Automatic Variable Declarations
    int auto2D5993C6_ae;
    const int auto2D5993C6_ai = 1;

    // Variable Initialization

    // Implementation
    auto2D5993C6_ae = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
    lv_itEffect = 1;
    for ( ; ( (auto2D5993C6_ai >= 0 && lv_itEffect <= auto2D5993C6_ae) || (auto2D5993C6_ai < 0 && lv_itEffect >= auto2D5993C6_ae) ) ; lv_itEffect += auto2D5993C6_ai ) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIcons[lv_itEffect], (CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_button, "Icon", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_nPCSource == true)) {
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_structureSource == true)) {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[lv_itEffect], "assets\\Icons\\Common_General\\Icon_General_NPC_Structure.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
            else {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[lv_itEffect], "assets\\Icons\\Common_General\\Icon_General_NPC_Unit.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
        }
        else {
            lv_effectPlayer = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_effectPlayer;
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[lv_itEffect], libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_effectPlayer].lv_heroIndex].lv_portrait, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        }
        lv_effectTooltipText = libUIUI_gf_DeathRecapCreateTooltipTextNoSentence(lp_deadPlayer, lv_itEffect);
        libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTooltipFrame[lv_itEffect], lv_effectTooltipText, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        if ((lv_itEffect == 1)) {
            DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "KillingBlowState", "IsKillingBlow");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_2077C173", "A", FixedToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_time, 1));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarTimeLabels[lv_itEffect], TextExpressionAssemble("Param/Expression/lib_UIUI_2077C173"), PlayerGroupAll());
        }
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_combinedNumOfEvents > 1)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_3520A0C6", "A", IntToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_combinedNumOfEvents));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[lv_itEffect], TextExpressionAssemble("Param/Expression/lib_UIUI_3520A0C6"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        }
    }
}

void libUIUI_gf_DeathRecapPopulateHighestDamagersForPlayer (int lp_deadPlayer) {
    // Variable Declarations
    int lv_itHighestDamager;
    int lv_itHighestDamagerAbilities;
    int lv_itEffect;
    int lv_totalDamage;
    int lv_highestDamagePlayer;
    int lv_highestDamagerPercent;

    // Automatic Variable Declarations
    const int autoA9EE3B8B_ae = libGame_gv_deathRecap_MaxEffectsBars_C;
    const int autoA9EE3B8B_ai = 1;
    int auto0CC92995_ae;
    const int auto0CC92995_ai = 1;
    const int auto8B6BC4B2_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
    const int auto8B6BC4B2_ai = 1;
    const int auto37C3B207_ae = libGame_gv_deathRecap_MaxMaxDamagers_C;
    const int auto37C3B207_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }
    lv_itEffect = 1;
    for ( ; ( (autoA9EE3B8B_ai >= 0 && lv_itEffect <= autoA9EE3B8B_ae) || (autoA9EE3B8B_ai < 0 && lv_itEffect >= autoA9EE3B8B_ae) ) ; lv_itEffect += autoA9EE3B8B_ai ) {
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == false)) {
            lv_totalDamage += libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }
    }
    lv_highestDamagerPercent = ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_amount / lv_totalDamage) * 100);
    auto0CC92995_ae = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount;
    lv_itHighestDamager = 1;
    for ( ; ( (auto0CC92995_ai >= 0 && lv_itHighestDamager <= auto0CC92995_ae) || (auto0CC92995_ai < 0 && lv_itHighestDamager >= auto0CC92995_ae) ) ; lv_itHighestDamager += auto0CC92995_ai ) {
        lv_highestDamagePlayer = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_player;
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], FixedToText((IntToFixed(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_amount) / IntToFixed(lv_totalDamage) * 100), 0), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_deathRecapPanel.lv_highestDamagersProgressBars[lv_itHighestDamager], (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_amount / IntToFixed(lv_totalDamage) * 100), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lv_highestDamagePlayer) == true)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_highestDamagersImages[lv_itHighestDamager], libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_highestDamagePlayer].lv_heroIndex].lv_heroSelectScreenButtonPortrait, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            if ((PlayerType(lv_highestDamagePlayer) == c_playerTypeUser)) {
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersPlayerNameLabels[lv_itHighestDamager], libGame_gv_players[lv_highestDamagePlayer].lv_playerName, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "HighestDamagerState", "Player");
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[lv_itHighestDamager], libGame_gv_players[lv_highestDamagePlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
            else {
                DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "HighestDamagerState", "AI");
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[lv_itHighestDamager], libGame_gv_players[lv_highestDamagePlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecapPanel.lv_highestDamagersImages[lv_itHighestDamager], "assets\\Icons\\Common_General\\Icon_General_NPC_Unit.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[lv_itHighestDamager], StringExternal("Param/Value/lib_UIUI_14DE28C1"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "HighestDamagerState", "NPC");
        }
        lv_itHighestDamagerAbilities = 1;
        for ( ; ( (auto8B6BC4B2_ai >= 0 && lv_itHighestDamagerAbilities <= auto8B6BC4B2_ae) || (auto8B6BC4B2_ai < 0 && lv_itHighestDamagerAbilities >= auto8B6BC4B2_ae) ) ; lv_itHighestDamagerAbilities += auto8B6BC4B2_ai ) {
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itHighestDamager].lv_maxDamageAbils[lv_itHighestDamagerAbilities].lv_amount > 0)) {
                libUIUI_gf_DeathRecapPopulateHighestDamagersAbilities(lp_deadPlayer, lv_itHighestDamager, lv_itHighestDamagerAbilities);
            }
            else {
                DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityFrame[lv_itHighestDamager][lv_itHighestDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            }
        }
    }
    lv_itHighestDamager = (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount+1);
    for ( ; ( (auto37C3B207_ai >= 0 && lv_itHighestDamager <= auto37C3B207_ae) || (auto37C3B207_ai < 0 && lv_itHighestDamager >= auto37C3B207_ae) ) ; lv_itHighestDamager += auto37C3B207_ai ) {
        DialogControlSetAnimationState(libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itHighestDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], "HighestDamagerState", "NoData");
    }
}

void libUIUI_gf_DeathRecapPopulateHighestDamagersAbilities (int lp_deadPlayer, int lp_highestDamager, int lp_highestDamagerAbilities) {
    // Variable Declarations
    string lv_highestDamagerButton;
    text lv_simpleTooltip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_highestDamagerButton = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_highestDamager].lv_maxDamageAbils[lp_highestDamagerAbilities].lv_button;
    TextExpressionSetToken("Param/Expression/lib_UIUI_B1925A06", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_highestDamagerButton, "SimpleDisplayText", c_playerAny)));
    lv_simpleTooltip = TextExpressionAssemble("Param/Expression/lib_UIUI_B1925A06");
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityLabels[lp_highestDamager][lp_highestDamagerAbilities], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_highestDamagerButton, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilAmountLabels[lp_highestDamager][lp_highestDamagerAbilities], IntToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_highestDamager].lv_maxDamageAbils[lp_highestDamagerAbilities].lv_amount), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    DialogControlSetSize(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarProgressBars[lp_highestDamager][lp_highestDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], FixedToInt((IntToFixed(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_highestDamager].lv_maxDamageAbils[lp_highestDamagerAbilities].lv_amount) / IntToFixed(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_highestDamager].lv_amount) * 248.0)), 24);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarTooltips[lp_highestDamager][lp_highestDamagerAbilities], lv_simpleTooltip, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    DialogControlSetVisible(libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityFrame[lp_highestDamager][lp_highestDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
}

void libUIUI_gf_UICombatFloatingElementsDamage (unit lp_triggeringUnit, unit lp_damagingUnit, string lp_damagingEffect, fixed lp_amount) {
    // Variable Declarations
    bool lv_isCrit;
    string lv_style;
    int lv_damageType;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageType = c_unitDamageTypeAny;

    // Implementation
    lv_damageType = libCore_gf_CombatDamageTypeFromEffect(lp_damagingEffect);
    lv_isCrit = libCore_gf_CombatCheckDamageCriticalState(lp_triggeringUnit, lp_damagingUnit, lp_damagingEffect, lv_damageType);
    if ((lv_damageType == c_unitDamageTypeRanged)) {
        if ((lv_isCrit == true)) {
            lv_style = "FCT_Basic_Crit";
        }
        else {
            lv_style = "FCT_Basic_Greater";
        }
    }
    else if ((lv_damageType == c_unitDamageTypeSpell)) {
        if ((lv_isCrit == true)) {
            lv_style = "FCT_Ability_Crit";
        }
        else {
            lv_style = "FCT_Ability_Greater";
        }
    }
    else if ((lv_damageType == c_unitDamageTypeMelee)) {
        if ((lv_isCrit == true)) {
            lv_style = "FCT_Percent_Normal";
        }
        else {
            lv_style = "FCT_Percent_Crit";
        }
    }
    lv_horizOffset = RandomFixed(0.0001, 0.2);
    if (((PointGetX(UnitGetPosition(lp_damagingUnit)) - PointGetX(UnitGetPosition(lp_triggeringUnit))) > 0.0)) {
        lv_horizOffset *= -1.0;
    }

    libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(lp_triggeringUnit, FixedToText(lp_amount, 0), libCore_gv_playerGroupFromPlayer[UnitGetOwner(lp_damagingUnit)], lv_style, libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
}

void libUIUI_gf_UICombatFloatingElementsLeashing (unit lp_unit) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_targetPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto41D0CC3A_g;

    // Variable Initialization
    lv_targetPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((UnitIsValid(lp_unit) == true) && (libUIUI_gv_uICombatFloatingElementsSuppressLeashingText == false)) {
        auto41D0CC3A_g = libCore_gv_activeHumanPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto41D0CC3A_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, lv_itPlayer) == true)) {
                PlayerGroupAdd(lv_targetPlayerGroup, lv_itPlayer);
            }

        }
        if ((PlayerGroupCount(lv_targetPlayerGroup) > 0)) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_unit, StringExternal("Param/Value/lib_UIUI_8BBD4899"), lv_targetPlayerGroup, "FCT_Basic_Normal", libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
        }

    }

}

int libUIUI_gf_UICombatFloatingElementsUnitDialog (unit lp_unit) {
    // Variable Declarations
    int lv_dialog;
    int lv_unitTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_unitTag = UnitGetTag(lp_unit);

    // Implementation
    lv_dialog = DataTableGetDialog(true, (IntToString(lv_unitTag) + "#FCTDialog"));
    return lv_dialog;
}

int libUIUI_gf_UICombatFloatingElementsUnitDialogAnchorItem (unit lp_unit) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_unitTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_unitTag = UnitGetTag(lp_unit);

    // Implementation
    lv_dialogItem = libNtve_gf_ValueFromDataTableDialogItem(true, (IntToString(lv_unitTag) + "#FCTDialogAnchor"));
    return lv_dialogItem;
}

unit libUIUI_gf_UICombatFloatingElementsUnitDialogUnit (unit lp_unit) {
    // Variable Declarations
    int lv_unitTag;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTag = UnitGetTag(lp_unit);

    // Implementation
    lv_unit = DataTableGetUnit(true, (IntToString(lv_unitTag) + "#FCTUnit"));
    return lv_unit;
}

void libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayers (point lp_displayPoint, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed, bool lp_thread) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_thread == true)) {
        libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread(lp_displayPoint, lp_displayText, lp_style, lp_direction, lp_displayPlayers, lp_yOffset, lp_animationSpeed);
    }
    else {
        libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEW(lp_displayPoint, lp_displayText, lp_style, lp_direction, lp_displayPlayers, lp_yOffset, lp_animationSpeed);
    }
}

void libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayers (unit lp_displayUnit, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed, bool lp_thread) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_thread == true)) {
        libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread(lp_displayUnit, lp_displayText, lp_style, lp_direction, lp_displayPlayers, lp_yOffset, lp_animationSpeed);
    }
    else {
        libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecial(lp_displayUnit, lp_displayText, lp_style, lp_direction, lp_displayPlayers, 0, lp_animationSpeed);
    }
}

void libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroup (point lp_displayPoint, playergroup lp_displayPlayers) {
    // Variable Declarations
    int lv_fCTFrame;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;
    unit lv_locUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fCTFrame = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }

    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleUnit", c_unitCreateIgnorePlacement, PlayerGroupPlayer(lp_displayPlayers, 1), lp_displayPoint);
    UnitSetPosition(UnitLastCreated(), PointWithOffset(lp_displayPoint, 1.0, 0.0), false);
    lv_locUnit = UnitLastCreated();
    DialogSetPositionRelativeToUnitWithAnchor(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", c_anchorCenter, 0, -25);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), lp_displayPlayers, 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypePanel, "FloatingCombatElements/FloatingQuestFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), lp_displayPlayers, true);
    lv_fCTFrame = DialogControlLastCreated();
    DialogControlSetPositionRelative(lv_fCTFrame, lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlSendAnimationEvent(lv_fCTFrame, lp_displayPlayers, "OnQuestCreation");
    Wait(libUIUI_gv_uICombatFloatingElementsRemoveDelay, c_timeGame);
    DialogControlDestroy(lv_fCTFrame);
    DialogDestroy(lv_locAnchorDialog);
    UnitRemove(lv_locUnit);
}

trigger auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_Trigger = null;
point auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_lp_displayPoint;
playergroup auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_lp_displayPlayers;

void libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread (point lp_displayPoint, playergroup lp_displayPlayers) {
    auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_lp_displayPoint = lp_displayPoint;
    auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_lp_displayPlayers = lp_displayPlayers;

    if (auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_Trigger == null) {
        auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_Trigger = TriggerCreate("auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_Trigger, false, false);
}

bool auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_TriggerFunc (bool testConds, bool runActions) {
    point lp_displayPoint = auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_lp_displayPoint;
    playergroup lp_displayPlayers = auto_libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroupThread_lp_displayPlayers;

    // Variable Declarations
    int lv_fCTFrame;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;
    unit lv_locUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fCTFrame = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return true;
    }

    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleUnit", c_unitCreateIgnorePlacement, PlayerGroupPlayer(lp_displayPlayers, 1), lp_displayPoint);
    UnitSetPosition(UnitLastCreated(), PointWithOffset(lp_displayPoint, 1.0, 0.0), false);
    lv_locUnit = UnitLastCreated();
    DialogSetPositionRelativeToUnitWithAnchor(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", c_anchorCenter, 0, -25);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), lp_displayPlayers, true);
    DialogControlSetSize(DialogControlLastCreated(), lp_displayPlayers, 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypePanel, "FloatingCombatElements/FloatingQuestFrame");
    lv_fCTFrame = DialogControlLastCreated();
    DialogControlSetPositionRelative(lv_fCTFrame, lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlSendAnimationEvent(lv_fCTFrame, lp_displayPlayers, "OnQuestCreation");
    Wait(libUIUI_gv_uICombatFloatingElementsRemoveDelay, c_timeGame);
    DialogControlDestroy(lv_fCTFrame);
    DialogDestroy(lv_locAnchorDialog);
    UnitRemove(lv_locUnit);
    return true;
}

void libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroup (point lp_displayPoint, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    // Variable Declarations
    int lv_fCTFrame;
    int lv_textFrame;
    int lv_xOffsetActual;
    int lv_yOffsetActual;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;
    unit lv_locUnit;
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fCTFrame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }

    lv_yOffsetActual = (-300 - lp_yOffset);
    lv_xOffsetActual = -200;
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleUnit", c_unitCreateIgnorePlacement, PlayerGroupPlayer(lp_displayPlayers, 1), lp_displayPoint);
    lv_locUnit = UnitLastCreated();
    libCore_gf_DialogSetPositionRelativeToUnitWithAnchor(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", c_anchorCenter, 0, 0);
    DialogSetPositionRelativeToUnit(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", lv_xOffsetActual, lv_yOffsetActual);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), lp_displayPlayers, 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypePanel, "FloatingCombatElements/FloatingTextFrame");
    lv_fCTFrame = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_fCTFrame, c_triggerControlTypeLabel, "DisplayText");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_fCTFrame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_fCTFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    Wait(libUIUI_gv_uICombatFloatingElementsRemoveDelay, c_timeGame);
    DialogControlDestroy(lv_fCTFrame);
    DialogControlDestroy(lv_locAnchorPointDialogItem);
    DialogDestroy(lv_locAnchorDialog);
    UnitRemove(lv_locUnit);
}

trigger auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_Trigger = null;
point auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayPoint;
text auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayText;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_style;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_direction;
playergroup auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayPlayers;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_yOffset;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_animationSpeed;

void libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread (point lp_displayPoint, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayPoint = lp_displayPoint;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayText = lp_displayText;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_style = lp_style;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_direction = lp_direction;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayPlayers = lp_displayPlayers;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_yOffset = lp_yOffset;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_animationSpeed = lp_animationSpeed;

    if (auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_Trigger == null) {
        auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_Trigger = TriggerCreate("auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_Trigger, false, false);
}

bool auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_TriggerFunc (bool testConds, bool runActions) {
    point lp_displayPoint = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayPoint;
    text lp_displayText = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayText;
    string lp_style = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_style;
    int lp_direction = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_direction;
    playergroup lp_displayPlayers = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_displayPlayers;
    int lp_yOffset = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_yOffset;
    string lp_animationSpeed = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupThread_lp_animationSpeed;

    // Variable Declarations
    int lv_fCTFrame;
    int lv_textFrame;
    int lv_xOffsetActual;
    int lv_yOffsetActual;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_locDialogItem;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;
    unit lv_locUnit;
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fCTFrame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_locDialogItem = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return true;
    }

    lv_yOffsetActual = (-300 - lp_yOffset);
    lv_xOffsetActual = -200;
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleUnit", c_unitCreateIgnorePlacement, PlayerGroupPlayer(lp_displayPlayers, 1), lp_displayPoint);
    lv_locUnit = UnitLastCreated();
    DialogSetPositionRelativeToUnit(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", lv_xOffsetActual, lv_yOffsetActual);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), lp_displayPlayers, 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypePanel, "FloatingCombatElements/FloatingTextFrame");
    lv_fCTFrame = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_fCTFrame, c_triggerControlTypeLabel, "DisplayText");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_fCTFrame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_fCTFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    Wait(libUIUI_gv_uICombatFloatingElementsRemoveDelay, c_timeGame);
    DialogControlDestroy(lv_textFrame);
    DialogDestroy(lv_locAnchorDialog);
    UnitRemove(lv_locUnit);
    return true;
}

void libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEW (point lp_displayPoint, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    // Variable Declarations
    int lv_fCTFrame;
    int lv_textFrame;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_unitStatus;
    unit lv_anchorUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fCTFrame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_unitStatus = c_invalidDialogControlId;

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleUnit", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lp_displayPoint);
    lv_anchorUnit = UnitLastCreated();
    UnitSetPropertyFixed(lv_anchorUnit, c_unitPropHeight, 1.0);
    Wait(0.0625, c_timeGame);
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "Frame", lv_anchorUnit);
    lv_unitStatus = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_unitStatus, c_triggerControlTypePanel, "FloatingCombatElements/FloatingTextFrame");
    lv_fCTFrame = DialogControlLastCreated();
    DialogControlHookup(lv_fCTFrame, c_triggerControlTypeLabel, "DisplayText");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_fCTFrame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_fCTFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    Wait(libUIUI_gv_uICombatFloatingElementsRemoveDelay, c_timeGame);
    UnitRemove(lv_anchorUnit);
}

trigger auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_Trigger = null;
point auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayPoint;
text auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayText;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_style;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_direction;
playergroup auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayPlayers;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_yOffset;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_animationSpeed;

void libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread (point lp_displayPoint, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayPoint = lp_displayPoint;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayText = lp_displayText;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_style = lp_style;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_direction = lp_direction;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayPlayers = lp_displayPlayers;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_yOffset = lp_yOffset;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_animationSpeed = lp_animationSpeed;

    if (auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_Trigger == null) {
        auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_Trigger = TriggerCreate("auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_Trigger, false, false);
}

bool auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_TriggerFunc (bool testConds, bool runActions) {
    point lp_displayPoint = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayPoint;
    text lp_displayText = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayText;
    string lp_style = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_style;
    int lp_direction = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_direction;
    playergroup lp_displayPlayers = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_displayPlayers;
    int lp_yOffset = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_yOffset;
    string lp_animationSpeed = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatPointForPlayerGroupNEWThread_lp_animationSpeed;

    // Variable Declarations
    int lv_fCTFrame;
    int lv_textFrame;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_unitStatus;
    unit lv_anchorUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fCTFrame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_unitStatus = c_invalidDialogControlId;

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleUnit", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lp_displayPoint);
    lv_anchorUnit = UnitLastCreated();
    UnitSetPropertyFixed(lv_anchorUnit, c_unitPropHeight, 1.0);
    Wait(0.0625, c_timeGame);
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "Frame", lv_anchorUnit);
    lv_unitStatus = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_unitStatus, c_triggerControlTypePanel, "FloatingCombatElements/FloatingTextFrame");
    lv_fCTFrame = DialogControlLastCreated();
    DialogControlHookup(lv_fCTFrame, c_triggerControlTypeLabel, "DisplayText");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_fCTFrame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_fCTFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    Wait(libUIUI_gv_uICombatFloatingElementsRemoveDelay, c_timeGame);
    UnitRemove(lv_anchorUnit);
    return true;
}

void libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecial (unit lp_displayUnit, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    // Variable Declarations
    int lv_fCTFrame;
    int lv_textFrame;
    int lv_locAnchorPointDialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fCTFrame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }

    lv_locAnchorPointDialogItem = libUIUI_gf_UICombatFloatingElementsUnitDialogAnchorItem(lp_displayUnit);
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypePanel, "FloatingCombatElements/FloatingTextFrame");
    lv_fCTFrame = DialogControlLastCreated();
    DialogControlSetPositionRelative(lv_fCTFrame, lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_fCTFrame, c_triggerControlTypeLabel, "DisplayText");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    libUIUI_gf_UICombatFloatingElementsApplyDirectionWithSpeed(lv_fCTFrame, lp_direction, lp_displayPlayers, lp_animationSpeed);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_fCTFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    Wait(libUIUI_gv_uICombatFloatingElementsRemoveDelay, c_timeGame);
    DialogControlDestroy(lv_fCTFrame);
}

trigger auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_Trigger = null;
unit auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayUnit;
text auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayText;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_style;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_direction;
playergroup auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayPlayers;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_yOffset;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_animationSpeed;

void libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread (unit lp_displayUnit, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayUnit = lp_displayUnit;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayText = lp_displayText;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_style = lp_style;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_direction = lp_direction;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayPlayers = lp_displayPlayers;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_yOffset = lp_yOffset;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_animationSpeed = lp_animationSpeed;

    if (auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_Trigger == null) {
        auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_Trigger = TriggerCreate("auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_Trigger, false, false);
}

bool auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_TriggerFunc (bool testConds, bool runActions) {
    unit lp_displayUnit = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayUnit;
    text lp_displayText = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayText;
    string lp_style = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_style;
    int lp_direction = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_direction;
    playergroup lp_displayPlayers = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_displayPlayers;
    int lp_yOffset = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_yOffset;
    string lp_animationSpeed = auto_libUIUI_gf_UICombatFloatingElementsCreateTextTagatUnitForPlayerGroupSpecialThread_lp_animationSpeed;

    // Variable Declarations
    int lv_fCTFrame;
    int lv_textFrame;
    int lv_locAnchorPointDialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fCTFrame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return true;
    }

    lv_locAnchorPointDialogItem = libUIUI_gf_UICombatFloatingElementsUnitDialogAnchorItem(lp_displayUnit);
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypePanel, "FloatingCombatElements/FloatingTextFrame");
    lv_fCTFrame = DialogControlLastCreated();
    DialogControlSetPositionRelative(lv_fCTFrame, lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_fCTFrame, c_triggerControlTypeLabel, "DisplayText");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_fCTFrame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_fCTFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    Wait(libUIUI_gv_uICombatFloatingElementsRemoveDelay, c_timeGame);
    DialogControlDestroy(lv_fCTFrame);
    return true;
}

void libUIUI_gf_UICombatFloatingElementsApplyDirection (int lp_frame, int lp_direction) {
    // Variable Declarations
    int lv_indexH;
    int lv_indexV;
    string lv_directionH;
    string lv_directionV;

    // Automatic Variable Declarations
    int autoD80FB111_val;

    // Variable Initialization
    lv_directionH = "";
    lv_directionV = "";

    // Implementation
    autoD80FB111_val = lp_direction;
    if (autoD80FB111_val == libUIUI_ge_UIFCTDirection_Right) {
        lv_indexH = RandomInt(0, 3);
        lv_indexV = RandomInt(0, 3);
    }
    else if (autoD80FB111_val == libUIUI_ge_UIFCTDirection_Left) {
        lv_indexH = RandomInt(4, 7);
        lv_indexV = RandomInt(0, 3);
    }
    else if (autoD80FB111_val == libUIUI_ge_UIFCTDirection_Middle) {
        lv_indexH = RandomInt(8, 11);
        lv_indexV = RandomInt(1, 3);
    }
    else if (autoD80FB111_val == libUIUI_ge_UIFCTDirection_Vertical) {
        lv_indexH = 12;
        lv_indexV = 4;
    }
    else if (autoD80FB111_val == libUIUI_ge_UIFCTDirection_Random) {
        lv_indexH = RandomInt(0, 11);
        lv_indexV = RandomInt(0, 3);
    }
    else if (autoD80FB111_val == libUIUI_ge_UIFCTDirection_LeftOrRight) {
        lv_indexH = RandomInt(0, 7);
        lv_indexV = RandomInt(0, 3);
    }
    else {
    }
    lv_directionH = ("FloatingCombatElementsTemplates/H" + libCore_gf_ConvertIntegerToStringDoubleDigit(lv_indexH));
    lv_directionV = ("FloatingCombatElementsTemplates/V" + libCore_gf_ConvertIntegerToStringDoubleDigit(lv_indexV));
    DialogControlCreateInPanelFromTemplate(lp_frame, c_triggerControlTypePanel, lv_directionH);
    DialogControlCreateInPanelFromTemplate(lp_frame, c_triggerControlTypePanel, lv_directionV);
}

void libUIUI_gf_UICombatFloatingElementsApplyDirectionWithSpeed (int lp_frame, int lp_direction, playergroup lp_displayPlayers, string lp_animationSpeed) {
    // Variable Declarations
    int lv_indexH;
    int lv_indexV;
    string lv_directionH;
    string lv_directionV;

    // Automatic Variable Declarations
    int autoE924A0DB_val;

    // Variable Initialization
    lv_directionH = "";
    lv_directionV = "";

    // Implementation
    autoE924A0DB_val = lp_direction;
    if (autoE924A0DB_val == libUIUI_ge_UIFCTDirection_Right) {
        lv_indexH = RandomInt(0, 3);
        lv_indexV = RandomInt(0, 3);
    }
    else if (autoE924A0DB_val == libUIUI_ge_UIFCTDirection_Left) {
        lv_indexH = RandomInt(4, 7);
        lv_indexV = RandomInt(0, 3);
    }
    else if (autoE924A0DB_val == libUIUI_ge_UIFCTDirection_Middle) {
        lv_indexH = RandomInt(8, 11);
        lv_indexV = RandomInt(1, 3);
    }
    else if (autoE924A0DB_val == libUIUI_ge_UIFCTDirection_Vertical) {
        lv_indexH = 12;
        lv_indexV = 4;
    }
    else if (autoE924A0DB_val == libUIUI_ge_UIFCTDirection_Random) {
        lv_indexH = RandomInt(0, 11);
        lv_indexV = RandomInt(0, 3);
    }
    else if (autoE924A0DB_val == libUIUI_ge_UIFCTDirection_LeftOrRight) {
        lv_indexH = RandomInt(0, 7);
        lv_indexV = RandomInt(0, 3);
    }
    else {
    }
    lv_directionH = ((lp_animationSpeed) + "H" + libCore_gf_ConvertIntegerToStringDoubleDigit(lv_indexH));
    lv_directionV = ((lp_animationSpeed) + "V" + libCore_gf_ConvertIntegerToStringDoubleDigit(lv_indexV));
    DialogControlSendAnimationEvent(lp_frame, lp_displayPlayers, lv_directionH);
    DialogControlSendAnimationEvent(lp_frame, lp_displayPlayers, lv_directionV);
}

void libUIUI_gf_UICombatFloatingElementsApplyAnimation (int lp_frame, string lp_style, playergroup lp_displayPlayers, string lp_animationSpeed) {
    // Automatic Variable Declarations
    string autoD468F112_val;

    // Implementation
    autoD468F112_val = lp_style;
    if (autoD468F112_val == "FCT_Ability_Crit") {
        DialogControlSetAnimationState(lp_frame, lp_displayPlayers, "FloatingCombatStates", "AbilityStateCritical");
    }
    else if (autoD468F112_val == "FCT_Basic_Crit") {
        DialogControlSetAnimationState(lp_frame, lp_displayPlayers, "FloatingCombatStates", "BasicStateCritical");
    }
    else if (autoD468F112_val == "FCT_Heal_Crit") {
        DialogControlSetAnimationState(lp_frame, lp_displayPlayers, "FloatingCombatStates", "HealStateCritical");
    }
    else if (autoD468F112_val == "FCT_Mana_Crit") {
        DialogControlSetAnimationState(lp_frame, lp_displayPlayers, "FloatingCombatStates", "ManaStateCritical");
    }
    else if (autoD468F112_val == "FCT_Percent_Crit") {
        DialogControlSetAnimationState(lp_frame, lp_displayPlayers, "FloatingCombatStates", "PercentStateCritical");
    }
    else if (autoD468F112_val == "FCT_Shield_Crit") {
        DialogControlSetAnimationState(lp_frame, lp_displayPlayers, "FloatingCombatStates", "ShieldStateCritical");
    }
    else if (autoD468F112_val == "FCT_XP_Crit") {
        DialogControlSetAnimationState(lp_frame, lp_displayPlayers, "FloatingCombatStates", "XPStateCritical");
    }
    else {
    }
    DialogControlSendAnimationEvent(lp_frame, lp_displayPlayers, lp_animationSpeed);
}

void libUIUI_gf_UIFloatingCombatTextCreateTextTag (unit lp_displayUnit, text lp_displayText, playergroup lp_displayPlayers, string lp_style, fixed lp_duration, fixed lp_heightOffset, fixed lp_horizontalOffset) {
    // Variable Declarations
    text lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_129E15B7", "A", StringToText(lp_style));
    lv_fontStyle = TextExpressionAssemble("Param/Expression/lib_UIUI_129E15B7");
    TextExpressionSetToken("Param/Expression/lib_UIUI_974E8199", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_UIUI_974E8199", "B", lp_displayText);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_974E8199"), 15, UnitGetPosition(lp_displayUnit), lp_heightOffset, true, false, lp_displayPlayers);
    if (((lp_style == "FCT_Ability_Crit") || (lp_style == "FCT_Basic_Crit") || (lp_style == "FCT_Heal_Crit") || (lp_style == "FCT_Mana_Crit") || (lp_style == "FCT_Shield_Crit"))) {
        TextTagSetVelocity(TextTagLastCreated(), 1.25, 90.0);
        TextTagShowBackground(TextTagLastCreated(), true);
        TextTagSetBackgroundImage(TextTagLastCreated(), "assets\\Textures\\Storm_UI_Ingame_Fct_Crit.dds", false);
    }
    else {
        TextTagSetVelocity(TextTagLastCreated(), 1.25, 90.0);
    }
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional (unit lp_displayUnit, text lp_displayText, playergroup lp_displayPlayers, string lp_style, fixed lp_duration, fixed lp_heightOffset, fixed lp_horizontalOffset) {
    // Variable Declarations
    text lv_fontStyle;
    fixed lv_degreesFromHorizontal;
    fixed lv_speed;
    fixed lv_heightOffsetRandomness;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_degreesFromHorizontal = (90.0 + RandomFixed(-30.0, 30.0));
    lv_speed = (1.25 + RandomFixed(-0.5, 0.5));
    lv_heightOffsetRandomness = (lp_heightOffset + RandomFixed(-0.5, 0.5));

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_CA58C5B5", "A", StringToText(lp_style));
    lv_fontStyle = TextExpressionAssemble("Param/Expression/lib_UIUI_CA58C5B5");
    TextExpressionSetToken("Param/Expression/lib_UIUI_2CF33830", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_UIUI_2CF33830", "B", lp_displayText);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_2CF33830"), 15, UnitGetPosition(lp_displayUnit), lv_heightOffsetRandomness, true, false, lp_displayPlayers);
    TextTagSetVelocity(TextTagLastCreated(), lv_speed, lv_degreesFromHorizontal);
    if (((lp_style == "FCT_Ability_Crit") || (lp_style == "FCT_Basic_Crit") || (lp_style == "FCT_Heal_Crit") || (lp_style == "FCT_Mana_Crit") || (lp_style == "FCT_Shield_Crit"))) {
        TextTagShowBackground(TextTagLastCreated(), true);
        TextTagSetBackgroundImage(TextTagLastCreated(), "assets\\Textures\\Storm_UI_Ingame_Fct_Crit.dds", false);
    }

    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libUIUI_gf_UIFloatingCombatTextCreateQuestTag (unit lp_displayUnit, playergroup lp_displayPlayers) {
    // Variable Declarations
    text lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_3B48F97E", "A", StringToText("FCT_Quest_Normal"));
    lv_fontStyle = TextExpressionAssemble("Param/Expression/lib_UIUI_3B48F97E");
    TextExpressionSetToken("Param/Expression/lib_UIUI_4BC63216", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_UIUI_4BC63216", "B", StringToText("1!"));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_4BC63216"), 15, UnitGetPosition(lp_displayUnit), 1.5, true, false, lp_displayPlayers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetBackgroundImage(TextTagLastCreated(), "assets\\Textures\\Storm_UI_Quest_Indicator_Frame.dds", false);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 2.0, 2.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.1);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.0);
}

void libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroHasCustomDeathDisableDeathCutscene") == true)) {
        return ;
    }
    else {
        if ((lp_showHide == true)) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], false);
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], true);
            TimerPause(libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lp_player], true);
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
            TimerStart(libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lp_player], libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimerDuration_C, false, c_timeGame);
        }
    }
}

void libUIUI_gf_FullscreenOverlaysStopSpecialOverlay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lp_player) == false)) {
        return ;
    }

    DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
    TimerStart(libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lp_player], libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimerDuration_C, false, c_timeGame);
}

void libUIUI_gf_FullscreenOverlaysShowSpecialOverlay (string lp_cutscene, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lp_player) == false)) {
        return ;
    }

    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lp_player], true);
    TimerPause(libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lp_player], true);
}

void libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer (int lp_player, fixed lp_cCDuration) {
    // Variable Declarations
    fixed lv_fadeTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fadeTime = 0.25;

    // Implementation
    libNtve_gf_SetDialogItemColor(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, Color(0.00, 0.00, 100.00), libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.0, 0.0);
    if ((lp_cCDuration > lv_fadeTime) && (lp_cCDuration < 32765.0)) {
        Wait((lp_cCDuration - lv_fadeTime), c_timeGame);
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_fadeTime, 100.0);
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], (lv_fadeTime / 2.0), 100.0);
    }
}

void libUIUI_gf_FullscreenOverlayAddItemForPlayer (int lp_player, int lp_priority, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_itQueuePosition;
    int lv_priorityInt;
    int lv_desiredPosition;

    // Automatic Variable Declarations
    playergroup autoE06D250F_g;
    int autoE06D250F_var;
    int auto20E11348_ae;
    const int auto20E11348_ai = 1;
    int autoCF65A1FC_ae;
    const int autoCF65A1FC_ai = 1;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lp_player) == false)) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) {
        autoE06D250F_g = PlayerGroupAlliance(c_playerGroupAlly, lp_player);
        autoE06D250F_var = -1;
        while (true) {
            autoE06D250F_var = PlayerGroupNextPlayer(autoE06D250F_g, autoE06D250F_var);
            if (autoE06D250F_var < 0) { break; }
            if ((UnitHasBehavior2(libGame_gv_players[autoE06D250F_var].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true)) {
                libUIUI_gf_FullscreenOverlayAddItemForPlayer(autoE06D250F_var, lp_priority, lp_cutscene, lp_behavior);
            }

        }
    }

    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue >= libUIUI_gv_fullscreenOverlayMaxQueueSize_C)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_285F47E8", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_285F47E8"), true);
        return ;
    }

    auto20E11348_ae = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    lv_itQueuePosition = 1;
    for ( ; ( (auto20E11348_ai >= 0 && lv_itQueuePosition <= auto20E11348_ae) || (auto20E11348_ai < 0 && lv_itQueuePosition >= auto20E11348_ae) ) ; lv_itQueuePosition += auto20E11348_ai ) {
        if ((lp_behavior == libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition])) {
            return ;
        }

    }
    lv_priorityInt = (lp_priority);
    lv_desiredPosition = 0;
    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue == 0)) {
        lv_desiredPosition = 1;
    }
    else {
        autoCF65A1FC_ae = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
        lv_itQueuePosition = 1;
        for ( ; ( (autoCF65A1FC_ai >= 0 && lv_itQueuePosition <= autoCF65A1FC_ae) || (autoCF65A1FC_ai < 0 && lv_itQueuePosition >= autoCF65A1FC_ae) ) ; lv_itQueuePosition += autoCF65A1FC_ai ) {
            if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition] > lv_priorityInt)) {
                lv_desiredPosition = lv_itQueuePosition;
                break;
            }

        }
        if ((lv_desiredPosition == 0)) {
            lv_desiredPosition = (libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue + 1);
        }

    }
    libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer(lp_player, lp_priority, lv_desiredPosition, lp_cutscene, lp_behavior);
    if ((lp_behavior == libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[1])) {
        libUIUI_gf_FullscreenOverlayPlayCutscene(lp_player, lp_cutscene);
    }

}

void libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_desiredInsertPosition, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_itQueuePosition;
    int lv_insertPosition;

    // Automatic Variable Declarations
    int auto5A3380DE_ae;
    const int auto5A3380DE_ai = -1;

    // Variable Initialization

    // Implementation
    if ((lp_desiredInsertPosition > libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue)) {
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    }
    else {
        auto5A3380DE_ae = lp_desiredInsertPosition;
        lv_itQueuePosition = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
        for ( ; ( (auto5A3380DE_ai >= 0 && lv_itQueuePosition <= auto5A3380DE_ae) || (auto5A3380DE_ai < 0 && lv_itQueuePosition >= auto5A3380DE_ae) ) ; lv_itQueuePosition += auto5A3380DE_ai ) {
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition];
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_itQueuePosition];
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition];
        }
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = lp_desiredInsertPosition;
    }
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_insertPosition] = (lp_priority);
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_insertPosition] = lp_cutscene;
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_insertPosition] = lp_behavior;
}

void libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer (int lp_player, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_numberOfItemsInQueue;
    int lv_positionInQueue;
    int lv_itQueuePosition;

    // Automatic Variable Declarations
    playergroup autoA9B7F6D7_g;
    int autoA9B7F6D7_var;
    int autoFDECC8C7_ae;
    const int autoFDECC8C7_ai = 1;
    int autoB306ACFD_ae;
    const int autoB306ACFD_ai = 1;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lp_player) == false)) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) {
        autoA9B7F6D7_g = PlayerGroupAlliance(c_playerGroupAlly, lp_player);
        autoA9B7F6D7_var = -1;
        while (true) {
            autoA9B7F6D7_var = PlayerGroupNextPlayer(autoA9B7F6D7_g, autoA9B7F6D7_var);
            if (autoA9B7F6D7_var < 0) { break; }
            if ((UnitHasBehavior2(libGame_gv_players[autoA9B7F6D7_var].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true)) {
                libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(autoA9B7F6D7_var, lp_cutscene, lp_behavior);
            }

        }
    }

    lv_numberOfItemsInQueue = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    autoFDECC8C7_ae = lv_numberOfItemsInQueue;
    lv_itQueuePosition = 1;
    for ( ; ( (autoFDECC8C7_ai >= 0 && lv_itQueuePosition <= autoFDECC8C7_ae) || (autoFDECC8C7_ai < 0 && lv_itQueuePosition >= autoFDECC8C7_ae) ) ; lv_itQueuePosition += autoFDECC8C7_ai ) {
        if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition] == lp_behavior)) {
            lv_positionInQueue = lv_itQueuePosition;
            break;
        }

    }
    if ((lv_positionInQueue == 0)) {
        return ;
    }

    if ((lv_numberOfItemsInQueue == 1)) {
        DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue -= 1;
        return ;
    }

    autoB306ACFD_ae = lv_numberOfItemsInQueue;
    lv_itQueuePosition = (lv_positionInQueue+1);
    for ( ; ( (autoB306ACFD_ai >= 0 && lv_itQueuePosition <= autoB306ACFD_ae) || (autoB306ACFD_ai < 0 && lv_itQueuePosition >= autoB306ACFD_ae) ) ; lv_itQueuePosition += autoB306ACFD_ai ) {
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition];
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_itQueuePosition];
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition];
    }
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue -= 1;
    if ((lv_positionInQueue == 1)) {
        libUIUI_gf_FullscreenOverlayPlayCutscene(lp_player, libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[1]);
        return ;
    }

}

void libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer (int lp_player) {
    // Variable Declarations
    int lv_numberOfItemsInQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue > 0)) {
        DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue = 0;
    }

}

void libUIUI_gf_FullscreenOverlayPlayCutscene (int lp_player, string lp_cutscene) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Start");
}

void libUIUI_gf_GameOverSplashDisplayForAllPlayers (int lp_winningTeam) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_GameOverSplashShowHideForAllPlayers(true, lp_winningTeam);
}

void libUIUI_gf_GameOverSplashShowHideForAllPlayers (bool lp_showHide, int lp_winningTeam) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto4360BE41_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto4360BE41_ai = 1;
    int autoC2ED41CE_val;
    int auto4AD4343C_val;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto4360BE41_ai >= 0 && lv_itPlayer <= auto4360BE41_ae) || (auto4360BE41_ai < 0 && lv_itPlayer >= auto4360BE41_ae) ) ; lv_itPlayer += auto4360BE41_ai ) {
        autoC2ED41CE_val = libGame_gv_players[lv_itPlayer].lv_victoryDefeat;
        if (autoC2ED41CE_val == c_gameOverVictory) {
            DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_victoryFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        }
        else if (autoC2ED41CE_val == c_gameOverDefeat) {
            DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        }
        else {
        }
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        if ((lp_showHide == true)) {
            UnitStatusBarOverride(libGame_gv_players[lv_itPlayer].lv_heroUnit, -1);
        }
        else {
            UnitStatusBarOverride(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitStatusGroupAll);
        }
    }
    auto4AD4343C_val = lp_winningTeam;
    if (auto4AD4343C_val == libGame_gv_teamOrderIndex_C) {
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_victoryFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else if (auto4AD4343C_val == libGame_gv_teamChaosIndex_C) {
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else if (auto4AD4343C_val == 0) {
        if ((lp_showHide == true)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_gameOverSplash.lv_defeatLabel, StringExternal("Param/Value/lib_UIUI_8708F157"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }

        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_UIGameUIToggleMinimapCommandsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_UIGameUIChangeModeMinimapCommandsForPlayer(lp_player);
}

void libUIUI_gf_UIGameUIChangeModeMinimapCommandsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

}

void libUIUI_gf_UIGameUITurnOnFactionStateForPlayer (int lp_faction, int lp_player) {
    // Automatic Variable Declarations
    int auto9C671E8C_val;

    // Implementation
    auto9C671E8C_val = lp_faction;
    if (auto9C671E8C_val == libGame_ge_Faction_Order) {
        DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_gameUI, libCore_gv_playerGroupFromPlayer[lp_player], "Team", "TeamOrder");
    }
    else if (auto9C671E8C_val == libGame_ge_Faction_Chaos) {
        DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_gameUI, libCore_gv_playerGroupFromPlayer[lp_player], "Team", "TeamChaos");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_gameUI, libCore_gv_playerGroupFromPlayer[lp_player], "Team", "TeamOrder");
    }
}

void libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam (int lp_team) {
    // Variable Declarations
    unitgroup lv_healingFountainsGroup;
    int lv_itTextTag;
    unit lv_itU;
    text lv_helpLabel;

    // Automatic Variable Declarations
    unitgroup autoC4DBCF89_g;
    int autoC4DBCF89_u;
    unitgroup auto9D4B9789_g;
    int auto9D4B9789_u;

    // Variable Initialization
    lv_healingFountainsGroup = UnitGroupEmpty();

    // Implementation
    autoC4DBCF89_g = UnitGroup(null, libGame_gv_teams[lp_team].lv_nPCPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4DBCF89_u = UnitGroupCount(autoC4DBCF89_g, c_unitCountAll);
    for (;; autoC4DBCF89_u -= 1) {
        lv_itU = UnitGroupUnitFromEnd(autoC4DBCF89_g, autoC4DBCF89_u);
        if (lv_itU == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(lv_itU), c_unitFlagTownStructureMoonwell) == true)) {
            UnitGroupAdd(lv_healingFountainsGroup, lv_itU);
        }

    }
    lv_helpLabel = StringExternal("Param/Value/lib_UIUI_CC40B72C");
    auto9D4B9789_g = lv_healingFountainsGroup;
    auto9D4B9789_u = UnitGroupCount(auto9D4B9789_g, c_unitCountAll);
    for (;; auto9D4B9789_u -= 1) {
        lv_itU = UnitGroupUnitFromEnd(auto9D4B9789_g, auto9D4B9789_u);
        if (lv_itU == null) { break; }
        lv_itTextTag += 1;
        TextTagCreate(lv_helpLabel, 24, UnitGetPosition(lv_itU), libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C, false, false, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libUIUI_gv_uIHealingFountainsHelpText[lp_team][lv_itTextTag].lv_textTag = TextTagLastCreated();
        libUIUI_gv_uIHealingFountainsHelpText[lp_team][lv_itTextTag].lv_healingFountain = lv_itU;
    }
}

void libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer (int lp_player, bool lp_showHide) {
    // Variable Declarations
    int lv_itTextTag;
    int lv_arrayToUse;

    // Automatic Variable Declarations
    const int autoC8570ACF_ae = libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C;
    const int autoC8570ACF_ai = 1;

    // Variable Initialization
    lv_arrayToUse = libGame_gf_PlayerGetPlayerTeam(lp_player);

    // Implementation
    if ((lp_showHide == true)) {
        libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lp_player] = true;
    }
    else {
        libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lp_player] = false;
    }
    lv_itTextTag = 1;
    for ( ; ( (autoC8570ACF_ai >= 0 && lv_itTextTag <= autoC8570ACF_ae) || (autoC8570ACF_ai < 0 && lv_itTextTag >= autoC8570ACF_ae) ) ; lv_itTextTag += autoC8570ACF_ai ) {
        if ((libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_textTag == c_textTagNone)) {
            break;
        }
        else {
            if (((lp_showHide == false) || (UnitIsAlive(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_healingFountain) == true))) {
                TextTagShow(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_textTag, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            }

        }
    }
}

void libUIUI_gf_UIHeroConsoleShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroConsolePanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_gameUIPortrait, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeCommandPanel, lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeInventoryPanel, lp_showHide);
}

void libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer (bool lp_showHide, int lp_player) {
    // Variable Declarations
    int lv_itUnitStatusFrame;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itUnitStatusFrame = (libUIUI_gf_UIHeroConsoleUnitStatusFrameOfUnit(libGame_gv_players[lp_player].lv_heroUnit));
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[lv_itUnitStatusFrame], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer2 (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroConsoleSetUpForPlayer (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    int autoD1B7D4B5_ae;
    string autoC0C3FEB0_val;

    // Variable Initialization

    // Implementation
    autoD1B7D4B5_ae = libUIUI_gv_uIHeroConsoleUnitStatusMaximum;
    lv_heroIndex = 1;
    for ( ; lv_heroIndex <= autoD1B7D4B5_ae ; lv_heroIndex += 1 ) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[lv_heroIndex], lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    autoC0C3FEB0_val = UnitGetType(lp_unit);
    if (autoC0C3FEB0_val == "HeroKatarina") {
        libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer(libUIUI_ge_UIHeroConsoleUnitStatus_Orange, lp_player);
    }
    else if (autoC0C3FEB0_val == "HeroTalandar") {
        libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer(libUIUI_ge_UIHeroConsoleUnitStatus_Orange, lp_player);
    }
    else {
        if ((UnitGetPropertyFixed(lp_unit, c_unitPropEnergyMax, c_unitPropNormal) > 0.0)) {
            libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer(libUIUI_ge_UIHeroConsoleUnitStatus_Default, lp_player);
        }
        else {
            libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer(libUIUI_ge_UIHeroConsoleUnitStatus_NoEnergy, lp_player);
        }
    }
}

void libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer (int lp_unitStatus, int lp_player) {
    // Variable Declarations
    int lv_itUnitStatusFrame;

    // Automatic Variable Declarations
    int auto7C8999BC_ae;

    // Variable Initialization

    // Implementation
    auto7C8999BC_ae = libUIUI_gv_uIHeroConsoleUnitStatusMaximum;
    lv_itUnitStatusFrame = 1;
    for ( ; lv_itUnitStatusFrame <= auto7C8999BC_ae ; lv_itUnitStatusFrame += 1 ) {
        if (((lp_unitStatus) == lv_itUnitStatusFrame)) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[lv_itUnitStatusFrame], libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[lv_itUnitStatusFrame], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
}

int libUIUI_gf_UIHeroConsoleUnitStatusFrameOfUnit (unit lp_unit) {
    // Variable Declarations
    int lv_unitStatusFrame;

    // Automatic Variable Declarations
    string auto5913400A_val;

    // Variable Initialization

    // Implementation
    auto5913400A_val = UnitGetType(lp_unit);
    if (auto5913400A_val == "HeroKatarina") {
        return libUIUI_ge_UIHeroConsoleUnitStatus_Orange;
    }
    else if (auto5913400A_val == "HeroTalandar") {
        return libUIUI_ge_UIHeroConsoleUnitStatus_Orange;
    }
    else {
        if ((UnitGetPropertyFixed(lp_unit, c_unitPropEnergyMax, c_unitPropNormal) > 0.0)) {
            return libUIUI_ge_UIHeroConsoleUnitStatus_Default;
        }
        else {
            return libUIUI_ge_UIHeroConsoleUnitStatus_NoEnergy;
        }
    }
}

void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar (string lp_newBehavior, unit lp_heroUnit) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_heroUnit);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_player) == false)) {
        return ;
    }

    if ((lp_heroUnit != libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lv_player])) {
        return ;
    }

    if ((lp_newBehavior == "Dead")) {
        libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player] = lp_newBehavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_A9FAF5F2"), libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, "@UI/HUD_Bar_DeathStun_Icon_Stun", libCore_gv_playerGroupFromPlayer[lv_player]);
    }
    else {
        if ((UnitBehaviorDuration(lp_heroUnit, lp_newBehavior) >= UnitBehaviorDuration(lp_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player]))) {
            libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player] = lp_newBehavior;
            libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_DBC1DCF2"), libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_newBehavior, "InfoIcon", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_player]);
        }

    }
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lv_player], true);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lp_player] = lp_unit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_behaviorDurationRemaining;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_behaviorDurationRemaining = UnitBehaviorDuration(libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lp_player], libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lp_player]);
    if ((lv_behaviorDurationRemaining > 0.0)) {
        if ((lv_behaviorDurationRemaining < 32767.0)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel, FixedToText(lv_behaviorDurationRemaining, 1), libCore_gv_playerGroupFromPlayer[lp_player]);
            DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel, libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    lv_behaviorDurationRemaining = UnitBehaviorDuration(libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lp_player], libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player]);
    if ((lv_behaviorDurationRemaining <= 0.0)) {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

}

void libUIUI_gf_UIHeroLeaderboardSetUpPlayeronLeaderboard (int lp_player) {
    // Variable Declarations
    int lv_l;
    int lv_p;
    int lv_allyTeam;
    int lv_enemyTeam;
    int lv_slot;
    int lv_enemySlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_slot = libGame_gv_players[lp_player].lv_playerAllySlot;
    lv_enemySlot = libGame_gv_players[lp_player].lv_playerEnemySlot;
    lv_allyTeam = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_allyTeam);
    DialogControlSetVisible(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_slot], libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_enemySlot], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_playerFramePlayerName[lv_slot], libGame_gv_players[lp_player].lv_playerName, libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroName[lv_slot], libGame_gv_players[lp_player].lv_heroName, libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroIconImage[lv_slot], libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_leaderboardImage, libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers);
    DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_slot], libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers, "PlayerTypeState", "AllyPlayer");
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_playerFramePlayerName[lv_enemySlot], libGame_gv_players[lp_player].lv_playerName, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroName[lv_enemySlot], libGame_gv_players[lp_player].lv_heroName, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroIconImage[lv_enemySlot], libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_leaderboardImage, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_enemySlot], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, "PlayerTypeState", "EnemyPlayer");
    DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_slot], libCore_gv_playerGroupFromPlayer[lp_player], "PlayerTypeState", "LocalPlayer");
}

void libUIUI_gf_UIHeroLeaderboardSortingChangeState (int lp_player, int lp_sortingType) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lp_player] != lp_sortingType)) {
        libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lp_player] = lp_sortingType;
    }
    else {
        libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lp_player] = libUIUI_ge_UIHeroLeaderboardSortingSortingType_DefaultSorting;
    }
    libUIUI_gf_UIHeroLeaderboardSortingChangeButtonAvailability(lp_player, libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lp_player]);
}

void libUIUI_gf_UIHeroLeaderboardSortingSetDefaultState (int lp_triggeringPlayer) {
    // Variable Declarations
    int lv_allyTeam;
    int lv_enemyTeam;
    int lv_allySlot;
    int lv_enemySlot;
    int lv_itPlayer;
    int lv_slot;
    string lv_image;
    playergroup lv_heroPlayers;

    // Automatic Variable Declarations
    playergroup autoBFF06AE0_g;

    // Variable Initialization
    lv_heroPlayers = PlayerGroupEmpty();

    // Implementation
    lv_allyTeam = libGame_gf_PlayerGetPlayerTeam(lp_triggeringPlayer);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_allyTeam);
    lv_heroPlayers = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    autoBFF06AE0_g = lv_heroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoBFF06AE0_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_allySlot = libGame_gv_players[lv_itPlayer].lv_playerAllySlot;
        lv_enemySlot = libGame_gv_players[lv_itPlayer].lv_playerEnemySlot;
        if ((PlayerGroupHasPlayer(libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroup, lv_itPlayer) == true)) {
            lv_slot = libGame_gv_players[lv_itPlayer].lv_playerAllySlot;
            if ((lv_itPlayer == lp_triggeringPlayer)) {
                DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_slot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "LocalPlayer");
            }
            else {
                DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_slot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "AllyPlayer");
            }
        }
        else {
            lv_slot = libGame_gv_players[lv_itPlayer].lv_playerEnemySlot;
            DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_slot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "EnemyPlayer");
        }
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_playerFramePlayerName[lv_slot], libGame_gv_players[lv_itPlayer].lv_playerName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroName[lv_slot], libGame_gv_players[lv_itPlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroIconImage[lv_slot], libCore_gv_dataHeroesHeroData[libCore_gf_HeroIndexOfPlayerHero(lv_itPlayer)].lv_leaderboardImage, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsKillsLabel[lv_slot], StringToText(libUIUI_gf_UIHeroLeaderboardSortingGetStringKADValueForPlayer(lv_itPlayer, libGame_gv_scoreValues[lv_itPlayer].lv_mainKills)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsAssistsLabel[lv_slot], StringToText(libUIUI_gf_UIHeroLeaderboardSortingGetStringKADValueForPlayer(lv_itPlayer, libGame_gv_scoreValues[lv_itPlayer].lv_mainAssists)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsDeathsLabel[lv_slot], StringToText(libUIUI_gf_UIHeroLeaderboardSortingGetStringKADValueForPlayer(lv_itPlayer, libGame_gv_scoreValues[lv_itPlayer].lv_mainDeaths)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsSiegeDamageLabel[lv_slot], FormatNumber(FixedToInt(libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsHeroDamageLabel[lv_slot], FormatNumber(FixedToInt(libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsHealedandAbsorbedLabel[lv_slot], FormatNumber(FixedToInt(libGame_gv_scoreValues[lv_itPlayer].lv_support)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsDamageTakenLabel[lv_slot], FormatNumber(FixedToInt(libGame_gv_scoreValues[lv_itPlayer].lv_tank)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsXPContributionLabel[lv_slot], FormatNumber(FixedToInt(libGame_gv_scoreValues[lv_itPlayer].lv_individualXP)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsKillsFrame[lv_slot], libUIUI_ge_UIHeroLeaderboardSortButton_Kills, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsAssistsFrame[lv_slot], libUIUI_ge_UIHeroLeaderboardSortButton_Assists, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsDeathsFrame[lv_slot], libUIUI_ge_UIHeroLeaderboardSortButton_Deaths, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsSiegeDamageFrame[lv_slot], libUIUI_ge_UIHeroLeaderboardSortButton_SiegeDamage, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsHeroDamageFrame[lv_slot], libUIUI_ge_UIHeroLeaderboardSortButton_HeroDamage, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsHealedandAbsorbedFrame[lv_slot], libUIUI_ge_UIHeroLeaderboardSortButton_HealedandAbsorbed, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsDamageTakenFrame[lv_slot], libUIUI_ge_UIHeroLeaderboardSortButton_DamageTaken, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsXPContributionFrame[lv_slot], libUIUI_ge_UIHeroLeaderboardSortButton_XPContribution, lp_triggeringPlayer, lv_itPlayer);

    }
}

void libUIUI_gf_UIHeroLeaderboardSortingSetNonDefaultState (int lp_triggeringPlayer, int lp_sortingType) {
    // Variable Declarations
    int lv_highPlayerInSlot;
    int lv_sortedPlayer;
    int lv_itSlot;
    playergroup lv_heroPlayers;
    playergroup lv_alreadySortedPlayers;
    int lv_allyTeam;

    // Automatic Variable Declarations
    int auto34434AB9_ae;
    playergroup auto4964AE64_g;

    // Variable Initialization
    lv_heroPlayers = PlayerGroupEmpty();
    lv_alreadySortedPlayers = PlayerGroupEmpty();

    // Implementation
    lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lp_triggeringPlayer);
    lv_heroPlayers = PlayerGroupCopy(libCore_gv_heroPlayersIncludeAIHeroPlayers);
    auto34434AB9_ae = PlayerGroupCount(lv_heroPlayers);
    lv_itSlot = 1;
    for ( ; lv_itSlot <= auto34434AB9_ae ; lv_itSlot += 1 ) {
        lv_highPlayerInSlot = PlayerGroupPlayer(lv_heroPlayers, 1);
        auto4964AE64_g = lv_heroPlayers;
        lv_sortedPlayer = -1;
        while (true) {
            lv_sortedPlayer = PlayerGroupNextPlayer(auto4964AE64_g, lv_sortedPlayer);
            if (lv_sortedPlayer < 0) { break; }
            if ((lp_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_Kills) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_mainKills > libGame_gv_scoreValues[lv_highPlayerInSlot].lv_mainKills)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_Assists) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_mainAssists > libGame_gv_scoreValues[lv_highPlayerInSlot].lv_mainAssists)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_Deaths) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_mainDeaths > libGame_gv_scoreValues[lv_highPlayerInSlot].lv_mainDeaths)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_SiegeDamage) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_siegeDamage > libGame_gv_scoreValues[lv_highPlayerInSlot].lv_siegeDamage)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_HeroDamage) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_heroDamage > libGame_gv_scoreValues[lv_highPlayerInSlot].lv_heroDamage)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_HealedandAbsorbed) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_support > libGame_gv_scoreValues[lv_highPlayerInSlot].lv_support)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_DamageTaken) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_tank > libGame_gv_scoreValues[lv_highPlayerInSlot].lv_tank)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_XPContribution) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_individualXP > libGame_gv_scoreValues[lv_highPlayerInSlot].lv_individualXP)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
        }
        libUIUI_gf_UIHeroLeaderboardSortingMoveSortedPlayerToSlot(lp_triggeringPlayer, lv_itSlot, lv_highPlayerInSlot);
        PlayerGroupRemove(lv_heroPlayers, lv_highPlayerInSlot);
    }
}

void libUIUI_gf_UIHeroLeaderboardSortingDoSorting (int lp_player) {
    // Variable Declarations
    int lv_sortingType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sortingType = libUIUI_gv_uIHeroLeaderboardSortingPlayerCurrentSort[lp_player];

    // Implementation
    if ((lv_sortingType == libUIUI_ge_UIHeroLeaderboardSortingSortingType_DefaultSorting)) {
        libUIUI_gf_UIHeroLeaderboardSortingSetDefaultState(lp_player);
    }
    else {
        libUIUI_gf_UIHeroLeaderboardSortingSetNonDefaultState(lp_player, lv_sortingType);
    }
}

void libUIUI_gf_UIHeroLeaderboardSortingMoveSortedPlayerToSlot (int lp_triggeringPlayer, int lp_slotIndex, int lp_sortedPlayer) {
    // Variable Declarations
    int lv_allyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lp_triggeringPlayer);
    if ((libGame_gf_PlayerGetPlayerTeam(lp_sortedPlayer) == libGame_gf_PlayerGetPlayerTeam(lp_triggeringPlayer))) {
        DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lp_slotIndex], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "AllyPlayer");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lp_slotIndex], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "EnemyPlayer");
    }
    if ((lp_sortedPlayer == lp_triggeringPlayer)) {
        DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lp_slotIndex], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "LocalPlayer");
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_playerFramePlayerName[lp_slotIndex], libGame_gv_players[lp_sortedPlayer].lv_playerName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroName[lp_slotIndex], libGame_gv_players[lp_sortedPlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroIconImage[lp_slotIndex], libCore_gv_dataHeroesHeroData[libCore_gf_HeroIndexOfPlayerHero(lp_sortedPlayer)].lv_leaderboardImage, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsKillsLabel[lp_slotIndex], StringToText(libUIUI_gf_UIHeroLeaderboardSortingGetStringKADValueForPlayer(lp_sortedPlayer, libGame_gv_scoreValues[lp_sortedPlayer].lv_mainKills)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsAssistsLabel[lp_slotIndex], StringToText(libUIUI_gf_UIHeroLeaderboardSortingGetStringKADValueForPlayer(lp_sortedPlayer, libGame_gv_scoreValues[lp_sortedPlayer].lv_mainAssists)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsDeathsLabel[lp_slotIndex], StringToText(libUIUI_gf_UIHeroLeaderboardSortingGetStringKADValueForPlayer(lp_sortedPlayer, libGame_gv_scoreValues[lp_sortedPlayer].lv_mainDeaths)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsSiegeDamageLabel[lp_slotIndex], FormatNumber(FixedToInt(libGame_gv_scoreValues[lp_sortedPlayer].lv_siegeDamage)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsHeroDamageLabel[lp_slotIndex], FormatNumber(FixedToInt(libGame_gv_scoreValues[lp_sortedPlayer].lv_heroDamage)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsHealedandAbsorbedLabel[lp_slotIndex], FormatNumber(FixedToInt(libGame_gv_scoreValues[lp_sortedPlayer].lv_support)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsDamageTakenLabel[lp_slotIndex], FormatNumber(FixedToInt(libGame_gv_scoreValues[lp_sortedPlayer].lv_tank)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_statsXPContributionLabel[lp_slotIndex], FormatNumber(FixedToInt(libGame_gv_scoreValues[lp_sortedPlayer].lv_individualXP)), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsKillsFrame[lp_slotIndex], libUIUI_ge_UIHeroLeaderboardSortButton_Kills, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsAssistsFrame[lp_slotIndex], libUIUI_ge_UIHeroLeaderboardSortButton_Assists, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsDeathsFrame[lp_slotIndex], libUIUI_ge_UIHeroLeaderboardSortButton_Deaths, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsSiegeDamageFrame[lp_slotIndex], libUIUI_ge_UIHeroLeaderboardSortButton_SiegeDamage, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsHeroDamageFrame[lp_slotIndex], libUIUI_ge_UIHeroLeaderboardSortButton_HeroDamage, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsHealedandAbsorbedFrame[lp_slotIndex], libUIUI_ge_UIHeroLeaderboardSortButton_HealedandAbsorbed, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsDamageTakenFrame[lp_slotIndex], libUIUI_ge_UIHeroLeaderboardSortButton_DamageTaken, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIHeroLeaderboard.lv_statsXPContributionFrame[lp_slotIndex], libUIUI_ge_UIHeroLeaderboardSortButton_XPContribution, lp_triggeringPlayer, lp_sortedPlayer);
}

void libUIUI_gf_UIHeroLeaderboardSortingChangeButtonAvailability (int lp_player, int lp_sortingType) {
    // Variable Declarations
    bool lv_acceptMouseState;
    bool lv_toggledState;

    // Automatic Variable Declarations
    int autoF7A0A9A7_val;

    // Variable Initialization

    // Implementation
    if ((lp_sortingType != libUIUI_ge_UIHeroLeaderboardSortingSortingType_DefaultSorting)) {
        lv_acceptMouseState = false;
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonKills, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonAssists, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDeaths, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonSiegeDamage, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHeroDamage, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHealedAndAbsorbed, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDamageTaken, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonXPContribution, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        autoF7A0A9A7_val = lp_sortingType;
        if (autoF7A0A9A7_val == libUIUI_ge_UIHeroLeaderboardSortingSortingType_Kills) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonKills, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIHeroLeaderboardSortingSortingType_Assists) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonAssists, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIHeroLeaderboardSortingSortingType_Deaths) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDeaths, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIHeroLeaderboardSortingSortingType_SiegeDamage) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonSiegeDamage, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIHeroLeaderboardSortingSortingType_HeroDamage) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHeroDamage, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIHeroLeaderboardSortingSortingType_HealedandAbsorbed) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHealedAndAbsorbed, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIHeroLeaderboardSortingSortingType_DamageTaken) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDamageTaken, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIHeroLeaderboardSortingSortingType_XPContribution) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonXPContribution, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
        }
    }
    else {
        lv_acceptMouseState = true;
        lv_toggledState = false;
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonKills, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonAssists, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDeaths, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonSiegeDamage, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHeroDamage, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHealedAndAbsorbed, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDamageTaken, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonXPContribution, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonKills, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonAssists, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDeaths, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonSiegeDamage, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHeroDamage, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHealedAndAbsorbed, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDamageTaken, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIHeroLeaderboard.lv_sortButtonXPContribution, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

string libUIUI_gf_UIHeroLeaderboardSortingGetStringKADValueForPlayer (int lp_player, fixed lp_value) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";

    // Implementation
    lv_string = FixedToString(lp_value, 2);
    lv_string = StringReplaceWord(lv_string, ".", " ", c_stringReplaceAll, c_stringCase);
    if ((StringWord(lv_string, 2) == "00")) {
        return StringWord(lv_string, 1);
    }

    return lv_string;
}

void libUIUI_gf_UIHeroLeaderboardSortingChangeBestValueTypeOfFrameForPlayer (int lp_bestValueType, int lp_dialogItem, int lp_triggeringPlayer) {
    // Variable Declarations
    int lv_valueFrame;

    // Automatic Variable Declarations
    int autoFB3070C6_val;

    // Variable Initialization
    lv_valueFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lp_dialogItem, c_triggerControlTypePanel, "ScoreValueFrame0");
    lv_valueFrame = DialogControlLastCreated();
    autoFB3070C6_val = lp_bestValueType;
    if (autoFB3070C6_val == libUIUI_ge_UIHeroLeaderboardSortingBestValue_AllyBestValue) {
        DialogControlSendAnimationEvent(lv_valueFrame, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "AllyBestValue");
    }
    else if (autoFB3070C6_val == libUIUI_ge_UIHeroLeaderboardSortingBestValue_AllyNotBestValue) {
        DialogControlSendAnimationEvent(lv_valueFrame, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "AllyNotBestValue");
    }
    else if (autoFB3070C6_val == libUIUI_ge_UIHeroLeaderboardSortingBestValue_EnemyBestValue) {
        DialogControlSendAnimationEvent(lv_valueFrame, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "EnemyBestValue");
    }
    else if (autoFB3070C6_val == libUIUI_ge_UIHeroLeaderboardSortingBestValue_EnemyNotBestValue) {
        DialogControlSendAnimationEvent(lv_valueFrame, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "EnemyNotBestValue");
    }
    else {
    }
}

void libUIUI_gf_UIHeroLeaderboardSortingCalculateBestSortingPlayerForBothTeams () {
    // Variable Declarations
    int lv_itTeam;
    int lv_itSorting;
    int lv_allyTeam;
    int lv_enemyTeam;
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto082768D7_ae;
    int autoE89094AD_ae;
    playergroup autoAEC200BE_g;

    // Variable Initialization

    // Implementation
    auto082768D7_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto082768D7_ae ; lv_itTeam += 1 ) {
        lv_allyTeam = lv_itTeam;
        lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_allyTeam);
        autoE89094AD_ae = libUIUI_gv_uIHeroLeaderboardMaxSortingButtons;
        lv_itSorting = 3;
        for ( ; lv_itSorting <= autoE89094AD_ae ; lv_itSorting += 1 ) {
            autoAEC200BE_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(autoAEC200BE_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((lv_itSorting == libUIUI_ge_UIHeroLeaderboardSortButton_HeroDamage)) {
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam]);
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam]);
                }
                else if ((lv_itSorting == libUIUI_ge_UIHeroLeaderboardSortButton_SiegeDamage)) {
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam]);
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam]);
                }
                else if ((lv_itSorting == libUIUI_ge_UIHeroLeaderboardSortButton_DamageTaken)) {
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_tank, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam]);
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_tank, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam]);
                }
                else if ((lv_itSorting == libUIUI_ge_UIHeroLeaderboardSortButton_HealedandAbsorbed)) {
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_support, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam]);
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_support, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam]);
                }
                else if ((lv_itSorting == libUIUI_ge_UIHeroLeaderboardSortButton_XPContribution)) {
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_individualXP, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam]);
                    libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayer].lv_individualXP, libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam]);
                }
            }
        }
    }
}

void libUIUI_gf_UIHeroLeaderboardSortingUpdateBestValueOfSortedPlayer (int lp_dialogItem, int lp_sortingType, int lp_triggeringPlayer, int lp_sortedPlayer) {
    // Variable Declarations
    int lv_sortedPlayerTeam;
    int lv_triggeringPlayerTeam;
    fixed lv_valueReal;

    // Automatic Variable Declarations
    int autoD1DA03A3_val;

    // Variable Initialization

    // Implementation
    lv_sortedPlayerTeam = libGame_gf_PlayerGetPlayerTeam(lp_sortedPlayer);
    lv_triggeringPlayerTeam = libGame_gf_PlayerGetPlayerTeam(lp_triggeringPlayer);
    autoD1DA03A3_val = lp_sortingType;
    if (autoD1DA03A3_val == libUIUI_ge_UIHeroLeaderboardSortButton_HeroDamage) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_heroDamage;
    }
    else if (autoD1DA03A3_val == libUIUI_ge_UIHeroLeaderboardSortButton_SiegeDamage) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_siegeDamage;
    }
    else if (autoD1DA03A3_val == libUIUI_ge_UIHeroLeaderboardSortButton_HealedandAbsorbed) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_support;
    }
    else if (autoD1DA03A3_val == libUIUI_ge_UIHeroLeaderboardSortButton_DamageTaken) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_tank;
    }
    else if (autoD1DA03A3_val == libUIUI_ge_UIHeroLeaderboardSortButton_XPContribution) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_individualXP;
    }
    else {
    }
    if ((lv_sortedPlayerTeam == libGame_gf_PlayerGetPlayerTeam(lp_triggeringPlayer))) {
        if ((lv_valueReal > 0.0) && (lv_valueReal == libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_sortedPlayerTeam][(lp_sortingType)][lv_triggeringPlayerTeam])) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeBestValueTypeOfFrameForPlayer(libUIUI_ge_UIHeroLeaderboardSortingBestValue_AllyBestValue, lp_dialogItem, lp_triggeringPlayer);
        }
        else {
            libUIUI_gf_UIHeroLeaderboardSortingChangeBestValueTypeOfFrameForPlayer(libUIUI_ge_UIHeroLeaderboardSortingBestValue_AllyNotBestValue, lp_dialogItem, lp_triggeringPlayer);
        }
    }
    else {
        if ((lv_valueReal > 0.0) && (lv_valueReal == libUIUI_gv_uIHeroLeaderboardSortingBestValueOfSort[lv_sortedPlayerTeam][(lp_sortingType)][lv_triggeringPlayerTeam])) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeBestValueTypeOfFrameForPlayer(libUIUI_ge_UIHeroLeaderboardSortingBestValue_EnemyBestValue, lp_dialogItem, lp_triggeringPlayer);
        }
        else {
            libUIUI_gf_UIHeroLeaderboardSortingChangeBestValueTypeOfFrameForPlayer(libUIUI_ge_UIHeroLeaderboardSortingBestValue_EnemyNotBestValue, lp_dialogItem, lp_triggeringPlayer);
        }
    }
}

void libUIUI_gf_UIHeroLeaderboardTalentsSetupStartQuestOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_allySlot;
    int lv_enemySlot;
    playergroup lv_allyPlayerGroup;
    playergroup lv_enemyPlayerGroup;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allySlot = libGame_gv_players[lp_player].lv_playerAllySlot;
    lv_enemySlot = libGame_gv_players[lp_player].lv_playerEnemySlot;
    lv_allyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false);
    lv_enemyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(lp_player), false);
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataIsQuest == true)) {
        DialogControlSetVisible(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_allySlot][0], lv_allyPlayerGroup, true);
        DialogControlSetVisible(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_enemySlot][0], lv_enemyPlayerGroup, true);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipNameLabel[lv_allySlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataName, lv_allyPlayerGroup);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipNameLabel[lv_enemySlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataName, lv_enemyPlayerGroup);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipDescriptionLabel[lv_allySlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTooltipText[lp_player], lv_allyPlayerGroup);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipDescriptionLabel[lv_enemySlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTooltipText[lp_player], lv_enemyPlayerGroup);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentIcon[lv_allySlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataIcon, lv_allyPlayerGroup);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentIcon[lv_enemySlot][0], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataIcon, lv_enemyPlayerGroup);
        libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, 0, "HasQuest");
        libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierStateOfPlayer(lp_player, "TalentTierSelected", 0);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_allySlot][0], lv_allyPlayerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_enemySlot][0], lv_enemyPlayerGroup, false);
    }
}

void libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentTierOfPlayer (int lp_targetPlayer, int lp_talentTier) {
    // Variable Declarations
    int lv_allySlot;
    int lv_enemySlot;
    playergroup lv_allyPlayerGroup;
    playergroup lv_enemyPlayerGroup;
    int lv_talentIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allySlot = libGame_gv_players[lp_targetPlayer].lv_playerAllySlot;
    lv_enemySlot = libGame_gv_players[lp_targetPlayer].lv_playerEnemySlot;
    lv_allyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_targetPlayer), false);
    lv_enemyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(lp_targetPlayer), false);

    // Implementation
    lv_talentIndex = libGame_gv_talentChoices[lp_targetPlayer][lp_talentTier].lv_choosedTalentIndex;
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentIcon[lv_allySlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, lv_allyPlayerGroup);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentIcon[lv_enemySlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, lv_enemyPlayerGroup);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipNameLabel[lv_allySlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonName, lv_allyPlayerGroup);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipNameLabel[lv_enemySlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonName, lv_enemyPlayerGroup);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipInfoLabel[lv_allySlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText, lv_allyPlayerGroup);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipInfoLabel[lv_enemySlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText, lv_enemyPlayerGroup);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipDescriptionLabel[lv_allySlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lp_targetPlayer], lv_allyPlayerGroup);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipDescriptionLabel[lv_enemySlot][lp_talentTier], libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lp_targetPlayer], lv_enemyPlayerGroup);
}

void libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsAvailabilityOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTalentTier;
    string lv_talentTierState;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int autoC03A52D0_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoC03A52D0_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    lv_itTalentTier = 1;
    for ( ; ( (autoC03A52D0_ai >= 0 && lv_itTalentTier <= autoC03A52D0_ae) || (autoC03A52D0_ai < 0 && lv_itTalentTier >= autoC03A52D0_ae) ) ; lv_itTalentTier += autoC03A52D0_ai ) {
        if ((UnitLevel(libGame_gv_players[lp_player].lv_heroUnit) >= libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTalentTier])) {
            if ((libGame_gf_TalentChoicesIsHeroicTalentTierOfHero(lv_itTalentTier, lv_heroIndex) == true)) {
                if ((libGame_gv_talentChoices[lp_player][lv_itTalentTier].lv_choosedTalentIndex > 0)) {
                    lv_talentTierState = "UltimateTierSelected";
                }
                else {
                    lv_talentTierState = "UltimateTierAvailable";
                }
            }
            else {
                if ((libGame_gv_talentChoices[lp_player][lv_itTalentTier].lv_choosedTalentIndex > 0)) {
                    lv_talentTierState = "TalentTierSelected";
                }
                else {
                    lv_talentTierState = "TalentTierAvailable";
                }
            }
        }
        else {
            if ((libGame_gf_TalentChoicesIsHeroicTalentTierOfHero(lv_itTalentTier, libGame_gv_players[lp_player].lv_heroIndex) == true)) {
                lv_talentTierState = "UltimateTierNotAvailable";
            }
            else {
                lv_talentTierState = "TalentTierNotAvailable";
            }
        }
        libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierStateOfPlayer(lp_player, lv_talentTierState, lv_itTalentTier);
    }
}

void libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsQuestsOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTier;
    int lv_talentIndex;
    int lv_questIndex;
    int lv_currentCount;
    int lv_targetCount;
    int lv_maxCount;
    string lv_questTokenCounterBehavior;

    // Automatic Variable Declarations
    const int auto8C50657B_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto8C50657B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior != null)) {
        lv_questTokenCounterBehavior = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior;
        lv_currentCount = libGame_gf_QuestTokenGetCurrentTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
        lv_targetCount = libGame_gf_QuestTokenGetTargetTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
        lv_maxCount = libGame_gf_QuestTokenGetMaximumTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
        libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestProgressOfPlayer(lv_currentCount, lv_targetCount, lp_player, 0);
        if ((lv_currentCount < lv_targetCount)) {
            libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, 0, "HasQuest");
        }
        else {
            if ((lv_targetCount == lv_maxCount)) {
                libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, 0, "FinishedQuest");
            }
            else {
                libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, 0, "FinishedUnlimitedQuest");
            }
        }
    }
    lv_itTier = 1;
    for ( ; ( (auto8C50657B_ai >= 0 && lv_itTier <= auto8C50657B_ae) || (auto8C50657B_ai < 0 && lv_itTier >= auto8C50657B_ae) ) ; lv_itTier += auto8C50657B_ai ) {
        if ((libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex == 0)) {
            libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, lv_itTier, "NoQuest");
            continue;
        }

        lv_talentIndex = libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex;
        if ((libCore_gv_talentData[lv_talentIndex].lv_questTokenCounterBehavior == null)) {
            libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, lv_itTier, "NoQuest");
            continue;
        }
        lv_questTokenCounterBehavior = libCore_gv_talentData[lv_talentIndex].lv_questTokenCounterBehavior;
        lv_currentCount = libGame_gf_QuestTokenGetCurrentTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
        lv_targetCount = libGame_gf_QuestTokenGetTargetTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
        lv_maxCount = libGame_gf_QuestTokenGetMaximumTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
        libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestProgressOfPlayer(lv_currentCount, lv_targetCount, lp_player, lv_itTier);
        if ((lv_currentCount < lv_targetCount)) {
            libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, lv_itTier, "HasQuest");
        }
        else {
            if ((lv_targetCount == lv_maxCount)) {
                libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, lv_itTier, "FinishedQuest");
            }
            else {
                libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer(lp_player, lv_itTier, "FinishedUnlimitedQuest");
            }
        }
    }
}

void libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierStateOfPlayer (int lp_targetPlayer, string lp_talentTierState, int lp_talentTier) {
    // Variable Declarations
    int lv_allySlot;
    int lv_enemySlot;
    playergroup lv_allyPlayerGroup;
    playergroup lv_enemyPlayerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allySlot = libGame_gv_players[lp_targetPlayer].lv_playerAllySlot;
    lv_enemySlot = libGame_gv_players[lp_targetPlayer].lv_playerEnemySlot;
    lv_allyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_targetPlayer), false);
    lv_enemyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(lp_targetPlayer), false);

    // Implementation
    DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_allySlot][lp_talentTier], lv_allyPlayerGroup, "TalentTierState", (lp_talentTierState));
    DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_enemySlot][lp_talentTier], lv_enemyPlayerGroup, "TalentTierState", (lp_talentTierState));
}

void libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestStateOfPlayer (int lp_targetPlayer, int lp_talentTier, string lp_talentTierQuestState) {
    // Variable Declarations
    int lv_allySlot;
    int lv_enemySlot;
    playergroup lv_allyPlayerGroup;
    playergroup lv_enemyPlayerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allySlot = libGame_gv_players[lp_targetPlayer].lv_playerAllySlot;
    lv_enemySlot = libGame_gv_players[lp_targetPlayer].lv_playerEnemySlot;
    lv_allyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_targetPlayer), false);
    lv_enemyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(lp_targetPlayer), false);

    // Implementation
    DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_allySlot][lp_talentTier], lv_allyPlayerGroup, "TalentQuestProgress", (lp_talentTierQuestState));
    DialogControlSetAnimationState(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_enemySlot][lp_talentTier], lv_enemyPlayerGroup, "TalentQuestProgress", (lp_talentTierQuestState));
}

void libUIUI_gf_UIHeroLeaderboardTalentsSetTalentTierQuestProgressOfPlayer (int lp_currentValue, int lp_maxValue, int lp_targetPlayer, int lp_talentTier) {
    // Variable Declarations
    int lv_allySlot;
    int lv_enemySlot;
    playergroup lv_allyPlayerGroup;
    playergroup lv_enemyPlayerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allySlot = libGame_gv_players[lp_targetPlayer].lv_playerAllySlot;
    lv_enemySlot = libGame_gv_players[lp_targetPlayer].lv_playerEnemySlot;
    lv_allyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_targetPlayer), false);
    lv_enemyPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(lp_targetPlayer), false);

    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentQuestProgressBar[lv_allySlot][lp_talentTier], IntToFixed(lp_currentValue), lv_allyPlayerGroup);
    libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentQuestProgressBar[lv_enemySlot][lp_talentTier], IntToFixed(lp_currentValue), lv_enemyPlayerGroup);
    libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentQuestProgressBar[lv_allySlot][lp_talentTier], IntToFixed(lp_maxValue), lv_allyPlayerGroup);
    libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentQuestProgressBar[lv_enemySlot][lp_talentTier], IntToFixed(lp_maxValue), lv_enemyPlayerGroup);
}

void libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup (bool lp_enableDisable, int lp_row, int lp_column, playergroup lp_playerGroup, bool lp_desaturated) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_heroButtons[lp_row][lp_column], lp_playerGroup, lp_enableDisable);
    if ((lp_enableDisable == true)) {
        libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelection.lv_heroButtonImage[lp_row][lp_column], false, lp_playerGroup);
    }
    else {
        if ((lp_desaturated == true)) {
            libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelection.lv_heroButtonImage[lp_row][lp_column], true, lp_playerGroup);
            libNtve_gf_SetDialogItemDesaturationColor(libUIUI_gv_heroSelection.lv_heroButtonImage[lp_row][lp_column], Color(78.43, 78.43, 78.43), lp_playerGroup);
        }
        else {
            libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelection.lv_heroButtonImage[lp_row][lp_column], false, lp_playerGroup);
        }
    }
}

void libUIUI_gf_HeroSelectionSelectHeroForPlayer (int lp_player, int lp_heroRow, int lp_heroCol) {
    // Variable Declarations
    string lv_selectedHero;
    int lv_itPlayer;
    int lv_heroIndex;

    // Automatic Variable Declarations
    playergroup auto350E073E_g;

    // Variable Initialization

    // Implementation
    if ((lp_heroCol == libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player]) && (lp_heroRow == libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player])) {
        return ;
    }

    lv_selectedHero = libUIUI_gv_heroSelectionCurateHeroSelections[lp_heroRow][lp_heroCol];
    libUIUI_gv_heroSelectionPairedHeroForm[lp_player] = false;
    if ((lv_selectedHero == null)) {
        return ;
    }

    lv_heroIndex = libCore_gf_HeroIndexOfHeroLink(lv_selectedHero);
    if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lp_player] == true)) {
        return ;
    }

    auto350E073E_g = libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(lp_player)].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto350E073E_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_heroRow) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_heroCol) && (lv_itPlayer != lp_player)) {
            return ;
        }

    }
    SoundPlayForPlayer(SoundLink("UI_BNet_HeroChoose", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player] = lp_heroRow;
    libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player] = lp_heroCol;
    libGame_gv_players[lp_player].lv_heroIndex = lv_heroIndex;
    libUIUI_gf_HSUIUpdateHeroButtons();
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_selectedHeroName, StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_selectedHero, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_selectedHeroRole, libCore_gf_RoleGetHeroRoleofHeroText(lv_selectedHero), libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_selectedHeroPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    if ((lp_heroCol > 0) && (lp_heroRow > 0)) {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_abilitiesButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_talentsButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetEnabled(libUIUI_gv_hSUILoadout.lv_loadoutButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }

    if ((libUIUI_gf_HSUIGoodToLockIn(lp_player) == true)) {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    libUIUI_gf_HSUIUpdateTalentsTierNumbersForPlayer(lp_player);
    libUIUI_gf_HSUIUpdateTalentsOfTierForPlayer(lp_player, 1);
    libUIUI_gf_UITalentsPrepickedSelectBuildButtonForPlayerHeroSelection(lp_player, 1);
    libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lp_player);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[1], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[1], libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[2], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[2], libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList, libCore_gv_playerGroupFromPlayer[lp_player], true);
    libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer(lp_player, false);
    libUIUI_gf_HSUILoadBankDataForPlayer(lp_player);
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_selectedPanel == libUIUI_ge_HSUIPanelType_None)) {
        libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer(libUIUI_ge_HSUIPanelType_SkinPanel, lp_player);
    }

    libUIUI_gf_HSUIVariationsSelectVariationForPlayer(libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex, lp_player);
    libUIUI_gf_HSUIUpdateLoadoutPanelOnVariationSelectionForPlayer(lp_player);
}

int libUIUI_gf_HeroSelectionSelectRandomHeroForPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;
    int lv_itColumn;
    int lv_itRow;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_allowedHeroesArray;
    int lv_int_DummyPlayerIndex;
    int[5] lv_lockedHeroes;
    int lv_itHeroIndex;
    int lv_int_HeroDummyIndex;
    int lv_playerHeroIndex;

    // Automatic Variable Declarations
    playergroup autoD9B1B884_g;
    int autoD9B1B884_var;
    int autoF5553D29_ae;
    int auto3F9A9BE7_ae;
    int auto890507B8_ae;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    autoD9B1B884_g = libCore_gf_PlayerGroupExceptOfPlayer(libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, lp_player);
    autoD9B1B884_var = -1;
    while (true) {
        autoD9B1B884_var = PlayerGroupNextPlayer(autoD9B1B884_g, autoD9B1B884_var);
        if (autoD9B1B884_var < 0) { break; }
        if ((libGame_gv_players[autoD9B1B884_var].lv_heroIndex > 0)) {
            lv_int_DummyPlayerIndex += 1;
            lv_lockedHeroes[lv_int_DummyPlayerIndex] = libCore_gf_HeroIndexOfHeroLink(libCore_gv_dataHeroesHeroData[libGame_gv_players[autoD9B1B884_var].lv_heroIndex].lv_heroLink);
        }
    }
    autoF5553D29_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_itHeroIndex = 1;
    for ( ; lv_itHeroIndex <= autoF5553D29_ae ; lv_itHeroIndex += 1 ) {
        if ((lv_itHeroIndex != lv_lockedHeroes[1]) && (lv_itHeroIndex != lv_lockedHeroes[2]) && (lv_itHeroIndex != lv_lockedHeroes[3]) && (lv_itHeroIndex != lv_lockedHeroes[4])) {
            lv_int_HeroDummyIndex += 1;
            lv_allowedHeroesArray[lv_int_HeroDummyIndex] = lv_itHeroIndex;
        }
    }
    lv_playerHeroIndex = lv_allowedHeroesArray[RandomInt(1, lv_int_HeroDummyIndex)];
    auto3F9A9BE7_ae = libUIUI_gv_heroSelectionNumberofRows;
    lv_itRow = 1;
    for ( ; lv_itRow <= auto3F9A9BE7_ae ; lv_itRow += 1 ) {
        auto890507B8_ae = libUIUI_gv_heroSelectionNumberofCols;
        lv_itColumn = 1;
        for ( ; lv_itColumn <= auto890507B8_ae ; lv_itColumn += 1 ) {
            if ((libUIUI_gv_heroSelectionCurateHeroSelections[lv_itRow][lv_itColumn] == libCore_gv_dataHeroesHeroData[lv_playerHeroIndex].lv_heroLink)) {
                libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player] = lv_itRow;
                libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player] = lv_itColumn;
                libUIUI_gf_HSUIUpdateHeroButtons();
                DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_selectedHeroName, StringExternal(CatalogFieldValueGet(c_gameCatalogHero, libCore_gv_dataHeroesHeroData[lv_playerHeroIndex].lv_heroLink, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_selectedHeroRole, libCore_gf_RoleGetHeroRoleofHeroText(libCore_gv_dataHeroesHeroData[lv_playerHeroIndex].lv_heroLink), libCore_gv_playerGroupFromPlayer[lp_player]);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_selectedHeroPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
                libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lp_player] = lv_itRow;
                libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lp_player] = lv_itColumn;
                libUIUI_gv_heroSelectionSetting.lv_lockedIn[lp_player] = true;
                break;
            }

        }
    }
    return lv_playerHeroIndex;
}

bool libUIUI_gf_HeroSelectionHeroSelectedByTeam (int lp_heroIndex, int lp_team) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;

    // Automatic Variable Declarations
    playergroup auto617A54BA_g;

    // Variable Initialization

    // Implementation
    auto617A54BA_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto617A54BA_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_itRow = libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer];
        lv_itCol = libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer];
        if ((libCore_gf_HeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[lv_itRow][lv_itCol]) == lp_heroIndex)) {
            return true;
        }
    }
    return false;
}

bool libUIUI_gf_HSUIGoodToLockIn (int lp_player) {
    // Automatic Variable Declarations
    playergroup autoDC2C247D_g;
    int autoDC2C247D_var;

    // Implementation
    if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lp_player] == true)) {
        return false;
    }

    if (((libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player] <= 0) || (libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player] <= 0))) {
        return false;
    }

    autoDC2C247D_g = libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(lp_player)].lv_teamPlayerGroupNoNPCPlayers;
    autoDC2C247D_var = -1;
    while (true) {
        autoDC2C247D_var = PlayerGroupNextPlayer(autoDC2C247D_g, autoDC2C247D_var);
        if (autoDC2C247D_var < 0) { break; }
        if ((autoDC2C247D_var != lp_player) && (libUIUI_gv_heroSelectionSetting.lv_lockedIn[autoDC2C247D_var] == true) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player] == libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[autoDC2C247D_var]) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player] == libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[autoDC2C247D_var])) {
            return false;
        }

    }
    return true;
}

void libUIUI_gf_lockunlockherochoise (int lp_player, bool lp_lockUnlock) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_heroSelectionSetting.lv_finalCountDownStarted == true)) {
        return ;
    }

    if ((lp_lockUnlock == true) && (libUIUI_gf_HSUIGoodToLockIn(lp_player) == false)) {
        return ;
    }

    libUIUI_gv_heroSelectionSetting.lv_lockedIn[lp_player] = lp_lockUnlock;
    if ((lp_lockUnlock == true)) {
        libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lp_player] = libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player];
        libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lp_player] = libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player];
    }

    libUIUI_gf_HSUIUpdateHeroButtons();
    if ((lp_lockUnlock == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_lockButton, StringExternal("UI/HeroSelection/LockButtonUnlock"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_lockButton, StringExternal("UI/HeroSelection/LockButtonLock"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    if ((TimerIsPaused(libUIUI_gv_heroSelectionSetting.lv_countdownTimer) == false) && (libUIUI_gf_HSUIAllPlayersLockedIn() == true)) {
        TriggerExecute(libUIUI_gt_HSUICountdownTimerExpires, true, false);
    }

}

bool libUIUI_gf_HSUIAllPlayersLockedIn () {
    // Automatic Variable Declarations
    const int autoED63157B_ae = libCore_gv_bALMaxPlayers;
    int autoED63157B_var;

    // Implementation
    autoED63157B_var = 1;
    for ( ; autoED63157B_var <= autoED63157B_ae; autoED63157B_var += 1 ) {
        if ((PlayerStatus(autoED63157B_var) != c_playerStatusUnused) && (libUIUI_gv_heroSelectionSetting.lv_lockedIn[autoED63157B_var] == false)) {
            if ((PlayerType(autoED63157B_var) == c_playerTypeUser)) {
                return false;
            }

        }

    }
    return true;
}

void libUIUI_gf_HSUIUpdateHeroButtons () {
    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;
    int lv_itViewer;

    // Automatic Variable Declarations
    int auto766AF023_ae;
    playergroup auto0DEE2741_g;
    int auto8E981979_ae;
    int auto97123400_ae;
    playergroup autoD6F59D4C_g;
    playergroup auto468F19C5_g;
    int auto11C81FB7_ae;
    int auto64A62863_ae;
    int auto252CB916_val;

    // Variable Initialization

    // Implementation
    auto766AF023_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto766AF023_ae ; lv_itTeam += 1 ) {
        auto0DEE2741_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
        lv_itViewer = -1;
        while (true) {
            lv_itViewer = PlayerGroupNextPlayer(auto0DEE2741_g, lv_itViewer);
            if (lv_itViewer < 0) { break; }
            auto8E981979_ae = libUIUI_gv_heroSelectionNumberofRows;
            lv_itRow = 1;
            for ( ; lv_itRow <= auto8E981979_ae ; lv_itRow += 1 ) {
                auto97123400_ae = libUIUI_gv_heroSelectionNumberofCols;
                lv_itCol = 1;
                for ( ; lv_itCol <= auto97123400_ae ; lv_itCol += 1 ) {
                    if ((libUIUI_gv_heroSelectionCurateHeroSelections[lv_itRow][lv_itCol] == null)) {
                        continue;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe3[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersThinkingVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersThinking[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersThinkingVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                }
            }
            autoD6F59D4C_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(autoD6F59D4C_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((lv_itViewer != lv_itPlayer)) {
                    if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly1[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly2[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                        if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersThinking[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                            libUIUI_gv_heroSelection.lv_heroButtonBordersThinkingVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                        }

                    }

                }

            }
            auto468F19C5_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto468F19C5_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((lv_itPlayer != lv_itViewer) && (libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                    if ((libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] > 0)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly1[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly2[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                    }

                }

            }
            if ((PlayerGroupHasPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, lv_itViewer) == true) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer] > 0)) {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe1[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe2[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe3[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]] = true;
            }

            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itViewer] == true) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itViewer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itViewer] > 0)) {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe1[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe2[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]] = true;
            }

            auto11C81FB7_ae = libUIUI_gv_heroSelectionNumberofRows;
            lv_itRow = 1;
            for ( ; lv_itRow <= auto11C81FB7_ae ; lv_itRow += 1 ) {
                auto64A62863_ae = libUIUI_gv_heroSelectionNumberofCols;
                lv_itCol = 1;
                for ( ; lv_itCol <= auto64A62863_ae ; lv_itCol += 1 ) {
                    if ((libUIUI_gv_heroSelectionCurateHeroSelections[lv_itRow][lv_itCol] == null)) {
                        continue;
                    }

                    auto252CB916_val = libUIUI_gf_HSUIGetCellState(lv_itViewer, lv_itRow, lv_itCol, lv_itTeam);
                    if (auto252CB916_val == libUIUI_ge_HSUICellState_LockedByMe) {
                        libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                    else if (auto252CB916_val == libUIUI_ge_HSUICellState_LockedByOther) {
                        libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                    else if (auto252CB916_val == libUIUI_ge_HSUICellState_SelectedByMe) {
                        libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                    else if (auto252CB916_val == libUIUI_ge_HSUICellState_SelectedByOther) {
                        libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                    else if (auto252CB916_val == libUIUI_ge_HSUICellState_Normal) {
                        if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itViewer] == true)) {
                            libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        }
                        else {
                            libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        }
                    }
                    else {
                    }
                }
            }
        }
    }
    libUIUI_gf_HSUIUpdateTeamPanel();
}

int libUIUI_gf_HSUIGetCellState (int lp_viewer, int lp_row, int lp_col, int lp_team) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto58EAE834_g;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_heroSelectionCurateHeroSelections[lp_row][lp_col] == null)) {
        return libUIUI_ge_HSUICellState_Empty;
    }

    auto58EAE834_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto58EAE834_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_itPlayer == lp_viewer)) {
            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libUIUI_ge_HSUICellState_LockedByMe;
            }

            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libUIUI_ge_HSUICellState_SelectedByMe;
            }

        }
        else {
            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libUIUI_ge_HSUICellState_LockedByOther;
            }

            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libUIUI_ge_HSUICellState_SelectedByOther;
            }

        }
    }
    return libUIUI_ge_HSUICellState_Normal;
}

void libUIUI_gf_HSUIUpdateTeamPanel () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itViewer;
    int lv_itRow;
    int lv_playerSlot;
    int lv_itTeam;
    int lv_index;
    playergroup lv_teamGroup;

    // Automatic Variable Declarations
    int auto188B639B_ae;
    playergroup autoB0D899CA_g;

    // Variable Initialization
    lv_teamGroup = PlayerGroupEmpty();

    // Implementation
    auto188B639B_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto188B639B_ae ; lv_itTeam += 1 ) {
        lv_teamGroup = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        autoB0D899CA_g = lv_teamGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoB0D899CA_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_players[lv_itPlayer].lv_playerisJoinedatStart == false)) {
                continue;
            }
            lv_playerSlot = libGame_gv_players[lv_itPlayer].lv_playerAllySlot;
            lv_index = libCore_gf_HeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]]);
            if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_teamHeroImage[lv_playerSlot], libCore_gv_dataHeroesHeroData[lv_index].lv_heroSelectScreenButtonPortrait, lv_teamGroup);
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_teamHeroHeroName[lv_playerSlot], StringExternal(CatalogFieldValueGet(c_gameCatalogHero, libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], "Name", c_playerAny)), lv_teamGroup);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroHeroName[lv_playerSlot], lv_teamGroup, true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroEmpty[lv_playerSlot], lv_teamGroup, false);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroImage[lv_playerSlot], lv_teamGroup, true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroBorder[lv_playerSlot], lv_teamGroup, true);
                if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroThinking[lv_playerSlot], lv_teamGroup, true);
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroThinking[lv_playerSlot], lv_teamGroup, false);
                }
                if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroSelectedAlly[lv_playerSlot], lv_teamGroup, true);
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroSelectedAlly[lv_playerSlot], lv_teamGroup, false);
                }
                if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroLocked[lv_playerSlot], lv_teamGroup, true);
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroLockedAnimation[lv_playerSlot], lv_teamGroup, true);
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroLocked[lv_playerSlot], lv_teamGroup, false);
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroLockedAnimation[lv_playerSlot], lv_teamGroup, false);
                }
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_teamHeroRole[lv_playerSlot], libUIUI_gf_HSUIGetHeroRoleIcon(libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer], libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]), lv_teamGroup);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroRole[lv_playerSlot], lv_teamGroup, true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroRoleBG[lv_playerSlot], lv_teamGroup, true);
            }

        }
    }
}

string libUIUI_gf_HSUIGetHeroRoleIcon (int lp_row, int lp_col) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto91A5AC13_val;

    // Variable Initialization

    // Implementation
    lv_index = libCore_gf_HeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[lp_row][lp_col]);
    auto91A5AC13_val = libCore_gv_dataHeroesHeroData[lv_index].lv_class;
    if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Warrior) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_warrior.dds";
    }
    else if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Support) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_support.dds";
    }
    else if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Specialist) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_specialist.dds";
    }
    else if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Assasin1) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds";
    }
    else if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Assasin2) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds";
    }
    else {
    }
    return null;
}

void libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer (int lp_player, bool lp_choosePaired) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_heroLink;
    int lv_abilityIndex;
    int lv_itHeroicAbil;
    int lv_itInt;
    int lv_basicAbilitySlot;
    int lv_itAbil;
    int lv_itAbilSelectorButton;
    int lv_itAbilVariations;
    string lv_currentAbilityType;
    string lv_currentAbilitySlot;

    // Automatic Variable Declarations
    const int autoE8A25AF0_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero;
    const int autoE8A25AF0_ai = 1;
    const int auto7C03C7B7_ae = libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero;
    const int auto7C03C7B7_ai = 1;
    int auto4073EC61_ae;
    const int auto4073EC61_ai = 1;
    string autoA75CCBDA_val;
    string autoFC65CEFB_val;
    const int auto0C7EFA4A_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto0C7EFA4A_ai = 1;
    int autoF8895002_ae;
    const int autoF8895002_ai = 1;
    const int auto7D38F3AB_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto7D38F3AB_ai = 1;
    int autoB7D269FF_ae;
    const int autoB7D269FF_ai = 1;
    const int autoDB2FA0D5_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int autoDB2FA0D5_ai = 1;
    int auto81647F6C_ae;
    const int auto81647F6C_ai = 1;
    const int auto4F63161D_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto4F63161D_ai = 1;
    int autoC4256DC9_ae;
    const int autoC4256DC9_ai = 1;
    const int autoD1764FFA_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int autoD1764FFA_ai = 1;
    int autoF7C4B4CF_ae;
    const int autoF7C4B4CF_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    lv_itInt = 0;
    for ( ; ( (autoE8A25AF0_ai >= 0 && lv_itInt <= autoE8A25AF0_ae) || (autoE8A25AF0_ai < 0 && lv_itInt >= autoE8A25AF0_ae) ) ; lv_itInt += autoE8A25AF0_ai ) {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[lv_itInt], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    lv_itInt = 1;
    for ( ; ( (auto7C03C7B7_ai >= 0 && lv_itInt <= auto7C03C7B7_ae) || (auto7C03C7B7_ai < 0 && lv_itInt >= auto7C03C7B7_ae) ) ; lv_itInt += auto7C03C7B7_ai ) {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[lv_itInt], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
    lv_heroLink = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLink;
    libUIUI_gv_heroSelectionPairedHeroForm[lp_player] = lp_choosePaired;
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isPaired == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[1], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[1], libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[2], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[2], libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList, libCore_gv_playerGroupFromPlayer[lp_player], true);
        if ((libUIUI_gv_heroSelectionPairedHeroForm[lp_player] == true)) {
            libUIUI_gf_HSUIUpdatePairedSelectionForPlayer(lp_player, 2);
        }
        else {
            libUIUI_gf_HSUIUpdatePairedSelectionForPlayer(lp_player, 1);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universeIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel, libCore_gf_RoleGetHeroRoleofHeroText(lv_heroLink), libCore_gv_playerGroupFromPlayer[lp_player]);
    auto4073EC61_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
    lv_itAbil = 1;
    for ( ; ( (auto4073EC61_ai >= 0 && lv_itAbil <= auto4073EC61_ae) || (auto4073EC61_ai < 0 && lv_itAbil >= auto4073EC61_ae) ) ; lv_itAbil += auto4073EC61_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbil];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_isHeroSelectionVisibility == false)) {
            continue;
        }

        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isPaired == true)) {
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_paired == "Paired1") && (libUIUI_gv_heroSelectionPairedHeroForm[lp_player] == true)) {
                continue;
            }
            else if ((libCore_gv_abilityData[lv_abilityIndex].lv_paired == "Paired2") && (libUIUI_gv_heroSelectionPairedHeroForm[lp_player] == false)) {
                continue;
            }
        }

        lv_currentAbilityType = libCore_gv_abilityData[lv_abilityIndex].lv_type;
        lv_currentAbilitySlot = libCore_gv_abilityData[lv_abilityIndex].lv_slot;
        autoA75CCBDA_val = lv_currentAbilityType;
        if (autoA75CCBDA_val == "Basic") {
            autoFC65CEFB_val = lv_currentAbilitySlot;
            if (autoFC65CEFB_val == "Mount (Z)") {
                lv_basicAbilitySlot = 0;
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
            else if (autoFC65CEFB_val == "Basic Ability (Q)") {
                lv_basicAbilitySlot = 1;
                lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "Basic Ability (Q)", lp_choosePaired);
                if ((lv_itAbilVariations > 1)) {
                    if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                        continue;
                    }
                    else {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (auto0C7EFA4A_ai >= 0 && lv_itAbilSelectorButton <= auto0C7EFA4A_ae) || (auto0C7EFA4A_ai < 0 && lv_itAbilSelectorButton >= auto0C7EFA4A_ae) ) ; lv_itAbilSelectorButton += auto0C7EFA4A_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                        }
                        autoF8895002_ae = lv_itAbilVariations;
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (autoF8895002_ai >= 0 && lv_itAbilSelectorButton <= autoF8895002_ae) || (autoF8895002_ai < 0 && lv_itAbilSelectorButton >= autoF8895002_ae) ) ; lv_itAbilSelectorButton += autoF8895002_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        }
                    }
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], false);
                }
            }
            else if (autoFC65CEFB_val == "Basic Ability (W)") {
                lv_basicAbilitySlot = 2;
                lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "Basic Ability (W)", lp_choosePaired);
                if ((lv_itAbilVariations > 1)) {
                    if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                        continue;
                    }
                    else {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (auto7D38F3AB_ai >= 0 && lv_itAbilSelectorButton <= auto7D38F3AB_ae) || (auto7D38F3AB_ai < 0 && lv_itAbilSelectorButton >= auto7D38F3AB_ae) ) ; lv_itAbilSelectorButton += auto7D38F3AB_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                        }
                        autoB7D269FF_ae = lv_itAbilVariations;
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (autoB7D269FF_ai >= 0 && lv_itAbilSelectorButton <= autoB7D269FF_ae) || (autoB7D269FF_ai < 0 && lv_itAbilSelectorButton >= autoB7D269FF_ae) ) ; lv_itAbilSelectorButton += autoB7D269FF_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        }
                    }
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], false);
                }
            }
            else if (autoFC65CEFB_val == "Basic Ability (E)") {
                lv_basicAbilitySlot = 3;
                lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "Basic Ability (E)", lp_choosePaired);
                if ((lv_itAbilVariations > 1)) {
                    if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                        continue;
                    }
                    else {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (autoDB2FA0D5_ai >= 0 && lv_itAbilSelectorButton <= autoDB2FA0D5_ae) || (autoDB2FA0D5_ai < 0 && lv_itAbilSelectorButton >= autoDB2FA0D5_ae) ) ; lv_itAbilSelectorButton += autoDB2FA0D5_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                        }
                        auto81647F6C_ae = lv_itAbilVariations;
                        lv_itAbilSelectorButton = 1;
                        for ( ; ( (auto81647F6C_ai >= 0 && lv_itAbilSelectorButton <= auto81647F6C_ae) || (auto81647F6C_ai < 0 && lv_itAbilSelectorButton >= auto81647F6C_ae) ) ; lv_itAbilSelectorButton += auto81647F6C_ai ) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                        }
                    }
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], false);
                }
            }
            else {
            }
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple(lp_player, 1, lv_currentAbilitySlot);
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[lv_basicAbilitySlot], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == "Trait") {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == "Heroic") {
            lv_itHeroicAbil += 1;
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[lv_itHeroicAbil], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[lv_itHeroicAbil], libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == "Inventory") {
            lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "Inventory (Active)", lp_choosePaired);
            if ((lv_itAbilVariations > 1)) {
                if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                    continue;
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelector, libCore_gv_playerGroupFromPlayer[lp_player], true);
                    lv_itAbilSelectorButton = 1;
                    for ( ; ( (auto4F63161D_ai >= 0 && lv_itAbilSelectorButton <= auto4F63161D_ae) || (auto4F63161D_ai < 0 && lv_itAbilSelectorButton >= auto4F63161D_ae) ) ; lv_itAbilSelectorButton += auto4F63161D_ai ) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                    }
                    autoC4256DC9_ae = lv_itAbilVariations;
                    lv_itAbilSelectorButton = 1;
                    for ( ; ( (autoC4256DC9_ai >= 0 && lv_itAbilSelectorButton <= autoC4256DC9_ae) || (autoC4256DC9_ai < 0 && lv_itAbilSelectorButton >= autoC4256DC9_ae) ) ; lv_itAbilSelectorButton += autoC4256DC9_ai ) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                    }
                }
            }
            else {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelector, libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple(lp_player, 1, "Inventory (Active)");
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == "Passive") {
            lv_itAbilVariations = libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, "[Default]", false);
            if ((lv_itAbilVariations > 1)) {
                if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 1)) {
                    continue;
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelector, libCore_gv_playerGroupFromPlayer[lp_player], true);
                    lv_itAbilSelectorButton = 1;
                    for ( ; ( (autoD1764FFA_ai >= 0 && lv_itAbilSelectorButton <= autoD1764FFA_ae) || (autoD1764FFA_ai < 0 && lv_itAbilSelectorButton >= autoD1764FFA_ae) ) ; lv_itAbilSelectorButton += autoD1764FFA_ai ) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
                    }
                    autoF7C4B4CF_ae = lv_itAbilVariations;
                    lv_itAbilSelectorButton = 1;
                    for ( ; ( (autoF7C4B4CF_ai >= 0 && lv_itAbilSelectorButton <= autoF7C4B4CF_ae) || (autoF7C4B4CF_ai < 0 && lv_itAbilSelectorButton >= autoF7C4B4CF_ae) ) ; lv_itAbilSelectorButton += autoF7C4B4CF_ai ) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_itAbilSelectorButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
                    }
                }
            }
            else {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelector, libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple(lp_player, 1, "[Default]");
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
        }
    }
}

void libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer (int lp_player, int lp_newVariation, string lp_heroAbilitySlot) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itAbilVariation;
    int lv_oldVariation;
    int lv_abilityIndex;
    int lv_basicAbilitySlot;
    bool lv_paired;

    // Automatic Variable Declarations
    string autoDCBE3016_val;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_paired = libUIUI_gv_heroSelectionPairedHeroForm[lp_player];

    // Implementation
    if ((libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, lp_heroAbilitySlot, lv_paired) == 1)) {
        return ;
    }
    autoDCBE3016_val = lp_heroAbilitySlot;
    if (autoDCBE3016_val == "Inventory (Active)") {
        lv_oldVariation = libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledActive[lp_player];
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_abilityIndex = libCore_gf_HeroDataAbilityIndexFromVariationNumberOfHero(lv_heroIndex, lp_heroAbilitySlot, lp_newVariation, lv_paired);
        libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledActive[lp_player] = lp_newVariation;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoDCBE3016_val == "Passive") {
        lv_oldVariation = libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledPassive[lp_player];
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_abilityIndex = libCore_gf_HeroDataAbilityIndexFromVariationNumberOfHero(lv_heroIndex, lp_heroAbilitySlot, lp_newVariation, lv_paired);
        libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledPassive[lp_player] = lp_newVariation;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemIconImage, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        if ((lp_heroAbilitySlot == "Basic Ability (Q)")) {
            lv_basicAbilitySlot = 1;
        }
        else if ((lp_heroAbilitySlot == "Basic Ability (W)")) {
            lv_basicAbilitySlot = 2;
        }
        else if ((lp_heroAbilitySlot == "Basic Ability (E)")) {
            lv_basicAbilitySlot = 3;
        }
        if ((lv_basicAbilitySlot == 0)) {
            return ;
        }

        lv_oldVariation = libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledBasic[lp_player][lv_basicAbilitySlot];
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        lv_abilityIndex = libCore_gf_HeroDataAbilityIndexFromVariationNumberOfHero(lv_heroIndex, lp_heroAbilitySlot, lp_newVariation, lv_paired);
        libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledBasic[lp_player][lv_basicAbilitySlot] = lp_newVariation;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[lv_basicAbilitySlot], libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUIUpdateAbilityToVariationForPlayerSimple (int lp_player, int lp_newVariation, string lp_heroAbilitySlot) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_oldVariation;
    int lv_basicAbilitySlot;
    bool lv_paired;

    // Automatic Variable Declarations
    string auto06E990AD_val;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_paired = libUIUI_gv_heroSelectionPairedHeroForm[lp_player];

    // Implementation
    if ((libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero(lv_heroIndex, lp_heroAbilitySlot, lv_paired) == 1)) {
        return ;
    }
    auto06E990AD_val = lp_heroAbilitySlot;
    if (auto06E990AD_val == "Inventory (Active)") {
        lv_oldVariation = libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledActive[lp_player];
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledActive[lp_player] = lp_newVariation;
    }
    else if (auto06E990AD_val == "Passive") {
        lv_oldVariation = libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledPassive[lp_player];
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledPassive[lp_player] = lp_newVariation;
    }
    else {
        if ((lp_heroAbilitySlot == "Basic Ability (Q)")) {
            lv_basicAbilitySlot = 1;
        }
        else if ((lp_heroAbilitySlot == "Basic Ability (W)")) {
            lv_basicAbilitySlot = 2;
        }
        else if ((lp_heroAbilitySlot == "Basic Ability (E)")) {
            lv_basicAbilitySlot = 3;
        }
        if ((lv_basicAbilitySlot == 0)) {
            return ;
        }

        lv_oldVariation = libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledBasic[lp_player][lv_basicAbilitySlot];
        if ((lv_oldVariation == lp_newVariation)) {
            return ;
        }

        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lv_oldVariation], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_basicAbilitySlot][lp_newVariation], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gv_heroSelectionSetting.lv_abilitySelectorToggledBasic[lp_player][lv_basicAbilitySlot] = lp_newVariation;
    }
}

void libUIUI_gf_HSUIUpdateTalentsOfTierForPlayer (int lp_player, int lp_talentTier) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_heroLink;
    int lv_talentIndex;
    int lv_itTalent;
    int lv_itTierButton;
    int lv_itTier;

    // Automatic Variable Declarations
    int autoEB931872_ae;
    const int autoD3ED2C65_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int autoD3ED2C65_ai = 1;
    string autoA8982FDF_val;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_heroLink = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLink;

    // Implementation
    libUIUI_gv_heroSelectionSetting.lv_talentTierPressedButton[lp_player] = lp_talentTier;
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelNameLabel, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universeIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel, libCore_gf_RoleGetHeroRoleofHeroText(lv_heroLink), libCore_gv_playerGroupFromPlayer[lp_player]);
    autoEB931872_ae = libCore_gv_dataHeroesMaxTalentTiers;
    lv_itTierButton = 1;
    for ( ; lv_itTierButton <= autoEB931872_ae ; lv_itTierButton += 1 ) {
        if ((lv_itTierButton == lp_talentTier)) {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lp_talentTier], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTierButton], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
    lv_itTalent = 1;
    for ( ; ( (autoD3ED2C65_ai >= 0 && lv_itTalent <= autoD3ED2C65_ae) || (autoD3ED2C65_ai < 0 && lv_itTalent >= autoD3ED2C65_ae) ) ; lv_itTalent += autoD3ED2C65_ai ) {
        lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lp_talentTier][lv_itTalent];
        if ((lv_talentIndex == 0)) {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itTalent], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itTalent], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonSimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[lv_itTalent], libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lp_player], libCore_gv_playerGroupFromPlayer[lp_player]);
            autoA8982FDF_val = libCore_gv_talentData[lv_talentIndex].lv_talentType;
            if (autoA8982FDF_val == "Active") {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Active, lp_player);
                if ((libCore_gv_talentData[lv_talentIndex].lv_isQuest == true)) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyNormal, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                }
            }
            else if (autoA8982FDF_val == "Passive") {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Passive, lp_player);
                if ((libCore_gv_talentData[lv_talentIndex].lv_isQuest == true)) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyNormal, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                }
            }
            else {
                if ((libCore_gv_abilityData[libCore_gv_talentData[lv_talentIndex].lv_abilityIndex].lv_slot == "Heroic Ability (R)")) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Heroic, lp_player);
                    if ((libCore_gv_talentData[lv_talentIndex].lv_isQuest == true)) {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                    }
                    else {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                    }
                }
                else if (true) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Basic, lp_player);
                    if ((libCore_gv_talentData[lv_talentIndex].lv_isQuest == true)) {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                    }
                    else {
                        libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalent], lp_player);
                    }
                }
            }
        }
    }
}

void libUIUI_gf_HSUIUpdateTalentsTierNumbersForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTier;

    // Automatic Variable Declarations
    const int autoB969E2AF_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoB969E2AF_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    lv_itTier = 1;
    for ( ; ( (autoB969E2AF_ai >= 0 && lv_itTier <= autoB969E2AF_ae) || (autoB969E2AF_ai < 0 && lv_itTier >= autoB969E2AF_ae) ) ; lv_itTier += autoB969E2AF_ai ) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier], IntToText(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTier]), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUIUpdatePairedSelectionForPlayer (int lp_player, int lp_pairedSelectedPortraitNumber) {
    // Variable Declarations
    int lv_number;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_number = (lp_pairedSelectedPortraitNumber-1);

    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListName, libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_namePaired[lp_pairedSelectedPortraitNumber], libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList, libCore_gv_playerGroupFromPlayer[lp_player], "SelectionText", ("Item" + IntToString(lv_number) + "Selected"));
    DialogControlSetAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[lp_pairedSelectedPortraitNumber], libCore_gv_playerGroupFromPlayer[lp_player], "SelectionToggle", "Selected");
    DialogControlSetAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[(3 - lp_pairedSelectedPortraitNumber)], libCore_gv_playerGroupFromPlayer[lp_player], "SelectionToggle", "Unselected");
}

void libUIUI_gf_HSUIShowHeroSelectionUI () {
    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto1011F998_ae;
    playergroup auto769A1BCF_g;

    // Variable Initialization

    // Implementation
    libGame_gf_SetCoreMapLighting("StormLightMiniPortraitBase", PlayerGroupActive(), 0.0);
    DialogSetVisible(libUIUI_gv_heroSelection.lv_dialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_countdownLabel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_countdownLabel, FixedToText(libCore_gv_bALHeroSelectTime, 0), PlayerGroupAll());
    auto1011F998_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto1011F998_ae ; lv_itTeam += 1 ) {
        auto769A1BCF_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto769A1BCF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (PlayerType(lv_itPlayer) == c_playerTypeUser) && (libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == true)) {
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_teamHeroPlayerName[libGame_gv_players[lv_itPlayer].lv_playerAllySlot], PlayerName(lv_itPlayer), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroPlayerName[libGame_gv_players[lv_itPlayer].lv_playerAllySlot], libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
            }

        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Storm_Music_Symphony", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerEnable(libUIUI_gt_HSButtonUsed, true);
    if ((GameIsOnline() == false)) {
        TimerStart(libUIUI_gv_heroSelectionSetting.lv_countdownTimer, 1000.0, false, c_timeGame);
    }
    else {
        TimerStart(libUIUI_gv_heroSelectionSetting.lv_countdownTimer, libCore_gv_bALHeroSelectTime, false, c_timeGame);
    }
    libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown(libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
}

trigger auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_Trigger = null;
timer auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_lp_timer;

void libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown (timer lp_timer) {
    auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_lp_timer = lp_timer;

    if (auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_Trigger == null) {
        auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_Trigger = TriggerCreate("auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_Trigger, false, false);
}

bool auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_lp_timer;

    // Variable Declarations
    bool lv__10SecondReminderPlayed;
    bool lv__5SecondReminderPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_countdownLabel, FixedToText(TimerGetRemaining(lp_timer), 0), PlayerGroupAll());
        if ((TimerGetRemaining(lp_timer) < 11.0) && (TimerGetRemaining(lp_timer) > 1.0) && (lv__10SecondReminderPlayed == false)) {
            lv__10SecondReminderPlayed = true;
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_10Sec", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        if ((TimerGetRemaining(lp_timer) < 6.0) && (lv__5SecondReminderPlayed == false)) {
            lv__5SecondReminderPlayed = true;
        }
        if ((TimerGetRemaining(lp_timer) <= 0.0)) {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

void libUIUI_gf_HSUILoadoutInitialization (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itButton;
    int lv_tooltip;

    // Automatic Variable Declarations
    const int auto63453698_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int auto63453698_ai = 1;
    const int autoBABAFA33_ae = libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    const int autoBABAFA33_ai = 1;
    const int auto424BF27C_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int auto424BF27C_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_tooltip = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypeButton, "LoadoutsButton");
    libUIUI_gv_hSUILoadout.lv_loadoutButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "HeroSelectLoadoutPanel");
    libUIUI_gv_hSUILoadout.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CutscenePreviewFrame");
    libUIUI_gv_hSUILoadout.lv_previewPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "CutscenePreviewFrame/MountPreviewCutscene");
    libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PurchaseInfoPanel");
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PurchaseInfoPanel/NameLabel");
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelName = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PurchaseInfoPanel/DescriptionLabel");
    libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelDescription = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PurchaseCurrencySelectPanel");
    libUIUI_gv_hSUILoadout.lv_purchaseCurrencySelectPanel = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PurchaseConfirmPanel");
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "PurchaseConfirmPanel/ConfirmButton");
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanelConfirmButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "PurchaseConfirmPanel/CancelButton");
    libUIUI_gv_hSUILoadout.lv_purchaseConfirmPanelCancelButton = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LoadoutSelectionPanel");
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "LoadoutSelectionPanel/LoadoutSelectorPulldown");
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, PlayerGroupAll(), StringToText("1"));
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldownListItem[1] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, PlayerGroupAll(), StringToText("2"));
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldownListItem[2] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, PlayerGroupAll(), StringToText("3"));
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldownListItem[3] = DialogControlLastCreated();
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, PlayerGroupAll(), 1);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "LoadoutSelectionPanel/LoadoutNameEditBox");
    libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelNameEditBox = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LoadoutPanelTabs/SkinsButton");
    libUIUI_gv_hSUILoadout.lv_skinsButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "LoadoutPanelTabs/MountsButton");
    libUIUI_gv_hSUILoadout.lv_mountButton = DialogControlLastCreated();

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LoadoutPanelTabs/PanelContainer/SkinsPanel");
    libUIUI_gv_hSUILoadout.lv_skinsPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedContentLabel");
    libUIUI_gv_hSUILoadout.lv_skinsPanelSelectedContentLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "OwnershipFilterPulldown");
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/AllContent"));
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldownListItem[1] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/OwnedContent"));
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldownListItem[2] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/UnownedContent"));
    libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldownListItem[3] = DialogControlLastCreated();
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, PlayerGroupAll(), 1);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "SearchEditBox");
    libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "ScrollEditBox");
    libUIUI_gv_hSUILoadout.lv_skinsPanelScrollEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "ContentTileList/ScrollBar");
    libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar = DialogControlLastCreated();
    lv_itButton = 1;
    for ( ; ( (auto63453698_ai >= 0 && lv_itButton <= auto63453698_ae) || (auto63453698_ai < 0 && lv_itButton >= auto63453698_ae) ) ; lv_itButton += auto63453698_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("ContentTileList/Item" + IntToString((lv_itButton - 1)))));
        libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itButton] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LoadoutPanelTabs/PanelContainer/MountsPanel");
    libUIUI_gv_hSUILoadout.lv_mountsPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedContentLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelSelectedContentLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "OwnershipFilterPulldown");
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/AllContent"));
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldownListItem[1] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/OwnedContent"));
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldownListItem[2] = DialogControlLastCreated();
    DialogControlAddItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, PlayerGroupAll(), StringExternal("UI/ScreenStore/GameContentOwnershipFilterPulldown/WithoutType/UnownedContent"));
    libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldownListItem[3] = DialogControlLastCreated();
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, PlayerGroupAll(), 1);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "SearchEditBox");
    libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "ScrollEditBox");
    libUIUI_gv_hSUILoadout.lv_mountsPanelScrollEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "ContentTileList/ScrollBar");
    libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar = DialogControlLastCreated();
    lv_itButton = 1;
    for ( ; ( (autoBABAFA33_ai >= 0 && lv_itButton <= autoBABAFA33_ae) || (autoBABAFA33_ai < 0 && lv_itButton >= autoBABAFA33_ae) ) ; lv_itButton += autoBABAFA33_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("ContentTileList/Item" + IntToString((lv_itButton - 1)))));
        libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itButton] = DialogControlLastCreated();
    }
    lv_itButton = 1;
    for ( ; ( (auto424BF27C_ai >= 0 && lv_itButton <= auto424BF27C_ae) || (auto424BF27C_ai < 0 && lv_itButton >= auto424BF27C_ae) ) ; lv_itButton += auto424BF27C_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("CategoryTileList/Item" + IntToString((lv_itButton - 1)))));
        libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itButton] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MountReplacementContainer/MountReplacementTileList/Item0");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_currentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipCommanders/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_currentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_tooltip = DialogControlLastCreated();
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltip = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemHotkeyLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternalHotkey("UI/Hotkey/CommandButton08"), PlayerGroupAll());
    lv_currentPanelLayer -= 1;

    lv_currentPanelLayer -= 1;

    TriggerEnable(libUIUI_gt_HSUILoadoutScrollBarUsed, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutInputTrigger, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutListBoxSelected, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutSearchTextChanges, true);
}

int libUIUI_gf_HSUILoadoutGetMaxLaneCount (int lp_maxItemsCount, int lp_itemsPerLane, int lp_panel) {
    // Variable Declarations
    fixed lv_remainder;
    int lv_laneCount;

    // Automatic Variable Declarations
    int auto90624106_val;

    // Variable Initialization

    // Implementation
    lv_laneCount = (lp_maxItemsCount / lp_itemsPerLane);
    lv_remainder = ModF(lp_maxItemsCount, lp_itemsPerLane);
    if ((lv_remainder > 0.0)) {
        lv_laneCount += 1;
    }

    auto90624106_val = lp_panel;
    if (auto90624106_val == libUIUI_ge_HSUIPanelType_SkinPanel) {
        lv_laneCount -= libUIUI_gv_hSUILoadoutMaxSkinLaneCount_C;
    }
    else if (auto90624106_val == libUIUI_ge_HSUIPanelType_MountPanel) {
        lv_laneCount -= libUIUI_gv_hSUILoadoutMaxMountLaneCount_C;
    }
    else {
    }
    lv_laneCount += 1;
    return lv_laneCount;
}

void libUIUI_gf_HSUISetScrollBarValueForPlayer (int lp_scrollBar, fixed lp_value, int lp_player) {
    // Variable Declarations
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = (lp_value - 1.0);
    libNtve_gf_SetDialogItemCurrentValue(lp_scrollBar, (lv_value * 24.0), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUISetScrollBarMaxMinValuesForPlayer (int lp_scrollBar, fixed lp_valueMin, fixed lp_valueMax, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemMinimumValue(lp_scrollBar, (lp_valueMin * 24.0), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemMaximumValue(lp_scrollBar, (lp_valueMax * 24.0), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUIVariationsFillVariationDataForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, lp_player);
}

void libUIUI_gf_HSUIVariationsUpdateEditBoxNameForPlayer (int lp_player) {
    // Variable Declarations
    int lv_selectedLoadout;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    libNtve_gf_SetDialogItemEditorValue(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelNameEditBox, libCore_gf_ConvertTextToString(libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutName[lv_selectedLoadout]), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUIVariationsSelectVariationForPlayer (int lp_variation, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSelectItem(libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown, libCore_gv_playerGroupFromPlayer[lp_player], lp_variation);
}

bool libUIUI_gf_HSUISkinsSkinItemButtonIsSelectedForPlayer (int lp_player, int lp_item) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_selectedLoadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_selectedLoadout = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lp_item] > 0) && (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lp_item] == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex)) {
        return true;
    }

    return false;
}

bool libUIUI_gf_HSUISkinsCompareSearchTextForPlayer (int lp_skin, int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libNtve_gf_DialogItemEditValue(libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBox, lp_player);

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }
    else {
        if (((StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataSkinsSkinData[lp_skin].lv_name), lv_editString, c_stringAnywhere, c_stringNoCase) == true) || (StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataSkinsSkinData[lp_skin].lv_additionalSearchText), lv_editString, c_stringAnywhere, c_stringNoCase) == true))) {
            return true;
        }

    }
    return false;
}

void libUIUI_gf_HSUISkinsSetLoadoutSkinItemToSkinForPlayer (int lp_skinIndex, int lp_dialogItemIndex, int lp_player) {
    // Variable Declarations
    int lv_cutsceneFrame;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cutsceneFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lp_dialogItemIndex], c_triggerControlTypeCutscene, "PortraitCutscene");
    lv_cutsceneFrame = DialogControlLastCreated();
    lv_variation = libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinIDVariationNumber;
    libNtve_gf_SetDialogItemCutscene(lv_cutsceneFrame, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_miniPortraitCutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    libUIUI_gf_HSUIButtonItemActivateVariationIndexAtItemForPlayer(lv_variation, lv_cutsceneFrame, lp_player);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lp_dialogItemIndex] = lp_skinIndex;
}

void libUIUI_gf_HSUISkinsFillLoadoutSkinDataForPlayer (int lp_player) {
    // Variable Declarations
    int lv_currentLane;
    int lv_maxSkinCount;
    int lv_maxItemsPerLane;
    int lv_heroIndex;
    int lv_minSkinInItem;
    int lv_maxSkinInItem;
    int lv_itSkin;
    int lv_itSkinArrayIndex;
    int lv_laneDiff;

    // Automatic Variable Declarations
    int auto8A84A0E3_ae;
    const int auto8A84A0E3_ai = 1;
    const int auto2DD37790_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int auto2DD37790_ai = 1;
    int autoD32F9F4E_ae;
    const int autoD32F9F4E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_maxSkinCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount;
    lv_maxItemsPerLane = (libUIUI_gv_hSUILoadoutMaxSkinItemCount_C / libUIUI_gv_hSUILoadoutMaxSkinLaneCount_C);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinTotalCount = lv_maxSkinCount;
    if ((lv_maxSkinCount <= libUIUI_gv_hSUILoadoutMaxSkinItemCount_C)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinMaxLaneCount = 1;
        lv_itSkin = lv_maxSkinCount;
        for ( ; ( (auto2DD37790_ai >= 0 && lv_itSkin <= auto2DD37790_ae) || (auto2DD37790_ai < 0 && lv_itSkin >= auto2DD37790_ae) ) ; lv_itSkin += auto2DD37790_ai ) {
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itSkin] = 0;
        }
        lv_itSkin = 0;
        autoD32F9F4E_ae = lv_maxSkinCount;
        lv_itSkinArrayIndex = 1;
        for ( ; ( (autoD32F9F4E_ai >= 0 && lv_itSkinArrayIndex <= autoD32F9F4E_ae) || (autoD32F9F4E_ai < 0 && lv_itSkinArrayIndex >= autoD32F9F4E_ae) ) ; lv_itSkinArrayIndex += autoD32F9F4E_ai ) {
            lv_itSkin += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itSkin] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinArray[lv_itSkinArrayIndex];
        }
    }
    else {
        lv_currentLane = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinCurrentLane;
        lv_minSkinInItem = ((lv_maxItemsPerLane*lv_currentLane)-lv_maxItemsPerLane+1);
        lv_laneDiff = (libUIUI_gv_hSUILoadoutMaxSkinLaneCount_C - 1);
        lv_maxSkinInItem = (lv_maxItemsPerLane*(lv_currentLane+lv_laneDiff));
        lv_itSkin = 0;
        auto8A84A0E3_ae = lv_maxSkinInItem;
        lv_itSkinArrayIndex = lv_minSkinInItem;
        for ( ; ( (auto8A84A0E3_ai >= 0 && lv_itSkinArrayIndex <= auto8A84A0E3_ae) || (auto8A84A0E3_ai < 0 && lv_itSkinArrayIndex >= auto8A84A0E3_ae) ) ; lv_itSkinArrayIndex += auto8A84A0E3_ai ) {
            lv_itSkin += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itSkin] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinArray[lv_itSkinArrayIndex];
        }
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinMaxLaneCount = libUIUI_gf_HSUILoadoutGetMaxLaneCount(lv_maxSkinCount, lv_maxItemsPerLane, libUIUI_ge_HSUIPanelType_SkinPanel);
    }
}

void libUIUI_gf_HSUISkinsFillTempArrayForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_categoryInstance;
    int lv_itSkin;
    int lv_skinIndex;
    bool lv_playerAccesSkin;
    bool lv_elementIsVisible;

    // Automatic Variable Declarations
    int auto5B6256BD_ae;
    const int auto5B6256BD_ai = 1;
    int auto4A1C01E7_val;
    int autoB14DA1FD_ae;
    const int autoB14DA1FD_ai = 1;
    int auto5FC4C850_ae;
    const int auto5FC4C850_ai = 1;
    int auto29B884F9_ae;
    const int auto29B884F9_ai = 1;
    int autoD5037BD9_ae;
    const int autoD5037BD9_ai = 1;

    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    auto5B6256BD_ae = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount;
    lv_itSkin = 1;
    for ( ; ( (auto5B6256BD_ai >= 0 && lv_itSkin <= auto5B6256BD_ae) || (auto5B6256BD_ai < 0 && lv_itSkin >= auto5B6256BD_ae) ) ; lv_itSkin += auto5B6256BD_ai ) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinArray[lv_itSkin] = 0;
    }
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount = 0;
    auto4A1C01E7_val = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown, lp_player);
    if (auto4A1C01E7_val == 1) {
        autoB14DA1FD_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount;
        lv_itSkin = 1;
        for ( ; ( (autoB14DA1FD_ai >= 0 && lv_itSkin <= autoB14DA1FD_ae) || (autoB14DA1FD_ai < 0 && lv_itSkin >= autoB14DA1FD_ae) ) ; lv_itSkin += autoB14DA1FD_ai ) {
            lv_skinIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinArray[lv_itSkin];
            lv_elementIsVisible = libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex);
            if ((lv_elementIsVisible == true)) {
                lv_playerAccesSkin = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex);
                if ((lv_playerAccesSkin == true)) {
                    libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer(lv_skinIndex, lp_player);
                }

            }

        }
        auto5FC4C850_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount;
        lv_itSkin = 1;
        for ( ; ( (auto5FC4C850_ai >= 0 && lv_itSkin <= auto5FC4C850_ae) || (auto5FC4C850_ai < 0 && lv_itSkin >= auto5FC4C850_ae) ) ; lv_itSkin += auto5FC4C850_ai ) {
            lv_skinIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinArray[lv_itSkin];
            lv_elementIsVisible = libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex);
            if ((lv_elementIsVisible == true)) {
                lv_playerAccesSkin = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex);
                if ((lv_playerAccesSkin == false)) {
                    libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer(lv_skinIndex, lp_player);
                }

            }

        }
    }
    else if (auto4A1C01E7_val == 2) {
        auto29B884F9_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount;
        lv_itSkin = 1;
        for ( ; ( (auto29B884F9_ai >= 0 && lv_itSkin <= auto29B884F9_ae) || (auto29B884F9_ai < 0 && lv_itSkin >= auto29B884F9_ae) ) ; lv_itSkin += auto29B884F9_ai ) {
            lv_skinIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinArray[lv_itSkin];
            lv_elementIsVisible = libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex);
            if ((lv_elementIsVisible == true)) {
                lv_playerAccesSkin = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex);
                if ((lv_playerAccesSkin == true)) {
                    libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer(lv_skinIndex, lp_player);
                }

            }

        }
    }
    else if (auto4A1C01E7_val == 3) {
        autoD5037BD9_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount;
        lv_itSkin = 1;
        for ( ; ( (autoD5037BD9_ai >= 0 && lv_itSkin <= autoD5037BD9_ae) || (autoD5037BD9_ai < 0 && lv_itSkin >= autoD5037BD9_ae) ) ; lv_itSkin += autoD5037BD9_ai ) {
            lv_skinIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinArray[lv_itSkin];
            lv_elementIsVisible = libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex);
            if ((lv_elementIsVisible == true)) {
                lv_playerAccesSkin = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex);
                if ((lv_playerAccesSkin == false)) {
                    libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer(lv_skinIndex, lp_player);
                }

            }

        }
    }
    else {
    }
}

void libUIUI_gf_HSUISkinsAddSkinToTempArrayForPlayer (int lp_skinIndex, int lp_player) {
    // Variable Declarations
    int lv_storedSkinCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gf_HSUISkinsCompareSearchTextForPlayer(lp_skinIndex, lp_player) == true)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount += 1;
        lv_storedSkinCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinArray[lv_storedSkinCount] = lp_skinIndex;
    }

}

bool libUIUI_gf_HSUIMountsMountItemButtonIsSelectedForPlayer (int lp_player, int lp_item) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_selectedLoadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_selectedLoadout = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lp_item] > 0) && (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lp_item] == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex)) {
        return true;
    }

    return false;
}

bool libUIUI_gf_HSUIMountsMountIsInTempArrayForPlayer (int lp_mountIndex, int lp_player) {
    // Variable Declarations
    int lv_itMount;

    // Automatic Variable Declarations
    int autoFD0EDBD0_ae;
    const int autoFD0EDBD0_ai = 1;

    // Variable Initialization

    // Implementation
    autoFD0EDBD0_ae = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
    lv_itMount = 1;
    for ( ; ( (autoFD0EDBD0_ai >= 0 && lv_itMount <= autoFD0EDBD0_ae) || (autoFD0EDBD0_ai < 0 && lv_itMount >= autoFD0EDBD0_ae) ) ; lv_itMount += autoFD0EDBD0_ai ) {
        if ((lp_mountIndex == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_itMount])) {
            return true;
        }

    }
    return false;
}

bool libUIUI_gf_HSUIMountsCollapsedForPlayer (int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libNtve_gf_DialogItemEditValue(libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox, lp_player);

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }

    return false;
}

int libUIUI_gf_HSUIMountsCurrentMaxItemCountForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemEditValue(libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox, lp_player) == null)) {
        return libUIUI_gv_hSUILoadoutMaxMountItemCount_Collapsed_C;
    }
    else {
        return libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    }
}

bool libUIUI_gf_HSUIMountsCompareSearchTextForPlayer (int lp_mount, int lp_player) {
    // Variable Declarations
    string lv_editString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editString = libNtve_gf_DialogItemEditValue(libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox, lp_player);

    // Implementation
    if ((lv_editString == null)) {
        return true;
    }
    else {
        if (((StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataMountsMountData[lp_mount].lv_mountName), lv_editString, c_stringAnywhere, c_stringNoCase) == true) || (StringContains(libCore_gf_ConvertTextToString(libCore_gv_dataMountsMountData[lp_mount].lv_mountAdditionalSearchTextWord), lv_editString, c_stringAnywhere, c_stringNoCase) == true))) {
            return true;
        }

    }
    return false;
}

int libUIUI_gf_HSUIMountsMountCountOfCategoryForHeroPlayer (int lp_player, string lp_requiredCategory) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itCategory;
    int lv_itMount;
    int lv_mountCategoryCount;

    // Automatic Variable Declarations
    int autoC53DF892_ae;
    const int autoC53DF892_ai = 1;
    int auto2D78348E_ae;
    const int auto2D78348E_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    autoC53DF892_ae = libCore_gv_dataMountsMountCount;
    lv_itMount = 1;
    for ( ; ( (autoC53DF892_ai >= 0 && lv_itMount <= autoC53DF892_ae) || (autoC53DF892_ai < 0 && lv_itMount >= autoC53DF892_ae) ) ; lv_itMount += autoC53DF892_ai ) {
        if ((libCore_gv_dataMountsMountData[lv_itMount].lv_mountCategory == lp_requiredCategory)) {
            auto2D78348E_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategoryCount;
            lv_itCategory = 1;
            for ( ; ( (auto2D78348E_ai >= 0 && lv_itCategory <= auto2D78348E_ae) || (auto2D78348E_ai < 0 && lv_itCategory >= auto2D78348E_ae) ) ; lv_itCategory += auto2D78348E_ai ) {
                if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategories[lv_itCategory] == lp_requiredCategory)) {
                    lv_mountCategoryCount += 1;
                }

            }
        }

    }
    return lv_mountCategoryCount;
}

int libUIUI_gf_HSUIMountsCollectionCategoryIndexForSelectedMountForPlayer (int lp_player) {
    // Variable Declarations
    int lv_mountIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex;

    // Implementation
    return libNtve_gf_UserDataInstanceGetIndex("MountCollectionCategory", libCore_gv_dataMountsMountData[lv_mountIndex].lv_collectionCategory);
}

void libUIUI_gf_HSUISetMountCategoryItemTextForPlayer (int lp_dialogItem, text lp_text, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_dialogItem, c_triggerControlTypeLabel, "CategoryLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUISetLoadoutMountItemToMountForPlayer (int lp_mountIndex, int lp_dialogItemIndex, int lp_player) {
    // Variable Declarations
    int lv_cutsceneFrame;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cutsceneFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lp_dialogItemIndex], c_triggerControlTypeCutscene, "PortraitCutscene");
    lv_cutsceneFrame = DialogControlLastCreated();
    lv_variation = libCore_gv_dataMountsMountData[lp_mountIndex].lv_mountIDVariationNumber;
    libNtve_gf_SetDialogItemCutscene(lv_cutsceneFrame, libCore_gv_dataMountsMountData[lp_mountIndex].lv_miniPortraitCutsceneFile, libCore_gv_playerGroupFromPlayer[lp_player]);
    libUIUI_gf_HSUIButtonItemActivateVariationIndexAtItemForPlayer(lv_variation, lv_cutsceneFrame, lp_player);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lp_dialogItemIndex] = lp_mountIndex;
}

void libUIUI_gf_HSUIMountsFillLoadoutMountDataForPlayer (int lp_player) {
    // Variable Declarations
    int lv_currentLane;
    int lv_maxMountCount;
    int lv_maxItemsPerLane;
    int lv_heroIndex;
    int lv_minSkinInItem;
    int lv_maxSkinInItem;
    int lv_itMount;
    int lv_itMountArrayIndex;
    int lv_laneDiff;
    bool lv_playerAccesMount;
    int lv_mountIndex;
    int lv_maxVisibleItems;
    bool lv_collapsed;

    // Automatic Variable Declarations
    int autoDE727823_ae;
    const int autoDE727823_ai = 1;
    int auto3A4B078D_ae;
    const int auto3A4B078D_ai = 1;
    int auto5FA94F98_ae;
    const int auto5FA94F98_ai = 1;

    // Variable Initialization

    // Implementation
    lv_collapsed = libUIUI_gf_HSUIMountsCollapsedForPlayer(lp_player);
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_maxMountCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
    lv_maxVisibleItems = libUIUI_gf_HSUIMountsCurrentMaxItemCountForPlayer(lp_player);
    lv_maxItemsPerLane = (lv_maxVisibleItems / libUIUI_gv_hSUILoadoutMaxMountLaneCount_C);
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountTotalCount = lv_maxMountCount;
    if ((lv_maxMountCount <= lv_maxVisibleItems)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountCurrentLane = 1;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount = 1;
        auto3A4B078D_ae = lv_maxVisibleItems;
        lv_itMount = lv_maxMountCount;
        for ( ; ( (auto3A4B078D_ai >= 0 && lv_itMount <= auto3A4B078D_ae) || (auto3A4B078D_ai < 0 && lv_itMount >= auto3A4B078D_ae) ) ; lv_itMount += auto3A4B078D_ai ) {
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itMount] = 0;
        }
        lv_itMount = 0;
        auto5FA94F98_ae = lv_maxMountCount;
        lv_itMountArrayIndex = 1;
        for ( ; ( (auto5FA94F98_ai >= 0 && lv_itMountArrayIndex <= auto5FA94F98_ae) || (auto5FA94F98_ai < 0 && lv_itMountArrayIndex >= auto5FA94F98_ae) ) ; lv_itMountArrayIndex += auto5FA94F98_ai ) {
            lv_itMount += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itMount] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_itMountArrayIndex];
        }
    }
    else {
        lv_currentLane = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountCurrentLane;
        lv_minSkinInItem = ((lv_maxItemsPerLane*lv_currentLane)-lv_maxItemsPerLane+1);
        lv_laneDiff = (libUIUI_gv_hSUILoadoutMaxMountLaneCount_C - 1);
        lv_maxSkinInItem = (lv_maxItemsPerLane*(lv_currentLane+lv_laneDiff));
        lv_itMount = 0;
        autoDE727823_ae = lv_maxSkinInItem;
        lv_itMountArrayIndex = lv_minSkinInItem;
        for ( ; ( (autoDE727823_ai >= 0 && lv_itMountArrayIndex <= autoDE727823_ae) || (autoDE727823_ai < 0 && lv_itMountArrayIndex >= autoDE727823_ae) ) ; lv_itMountArrayIndex += autoDE727823_ai ) {
            lv_itMount += 1;
            libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itMount] = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_itMountArrayIndex];
        }
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount = libUIUI_gf_HSUILoadoutGetMaxLaneCount(lv_maxMountCount, lv_maxItemsPerLane, libUIUI_ge_HSUIPanelType_MountPanel);
    }
}

void libUIUI_gf_HSUIMountsFillTempArrayForPlayer (int lp_categoryButtonIndex, int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_categoryInstance;
    int lv_itMount;
    int lv_mountIndex;
    bool lv_playerAccesMount;
    bool lv_elementIsVisible;

    // Automatic Variable Declarations
    int auto8157E975_ae;
    const int auto8157E975_ai = 1;
    int auto4A73335E_val;
    int autoE5BAF6DD_ae;
    const int autoE5BAF6DD_ai = 1;
    int auto21F1A728_ae;
    const int auto21F1A728_ai = 1;
    int auto95482336_ae;
    const int auto95482336_ai = 1;
    int auto5F018ACB_ae;
    const int auto5F018ACB_ai = 1;

    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    auto8157E975_ae = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
    lv_itMount = 1;
    for ( ; ( (auto8157E975_ai >= 0 && lv_itMount <= auto8157E975_ae) || (auto8157E975_ai < 0 && lv_itMount >= auto8157E975_ae) ) ; lv_itMount += auto8157E975_ai ) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_itMount] = 0;
    }
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount = 0;
    auto4A73335E_val = DialogControlGetSelectedItem(libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown, lp_player);
    if (auto4A73335E_val == 1) {
        autoE5BAF6DD_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount;
        lv_itMount = 1;
        for ( ; ( (autoE5BAF6DD_ai >= 0 && lv_itMount <= autoE5BAF6DD_ae) || (autoE5BAF6DD_ai < 0 && lv_itMount >= autoE5BAF6DD_ae) ) ; lv_itMount += autoE5BAF6DD_ai ) {
            lv_mountIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_itMount];
            lv_elementIsVisible = libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex);
            if ((lv_elementIsVisible == true)) {
                lv_playerAccesMount = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex);
                if ((lv_playerAccesMount == true)) {
                    libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer(lp_categoryButtonIndex, lv_mountIndex, lp_player);
                }

            }

        }
        auto21F1A728_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount;
        lv_itMount = 1;
        for ( ; ( (auto21F1A728_ai >= 0 && lv_itMount <= auto21F1A728_ae) || (auto21F1A728_ai < 0 && lv_itMount >= auto21F1A728_ae) ) ; lv_itMount += auto21F1A728_ai ) {
            lv_mountIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_itMount];
            lv_elementIsVisible = libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex);
            if ((lv_elementIsVisible == true)) {
                lv_playerAccesMount = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex);
                if ((lv_playerAccesMount == false)) {
                    libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer(lp_categoryButtonIndex, lv_mountIndex, lp_player);
                }

            }

        }
    }
    else if (auto4A73335E_val == 2) {
        auto95482336_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount;
        lv_itMount = 1;
        for ( ; ( (auto95482336_ai >= 0 && lv_itMount <= auto95482336_ae) || (auto95482336_ai < 0 && lv_itMount >= auto95482336_ae) ) ; lv_itMount += auto95482336_ai ) {
            lv_mountIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_itMount];
            lv_elementIsVisible = libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex);
            if ((lv_elementIsVisible == true)) {
                lv_playerAccesMount = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex);
                if ((lv_playerAccesMount == true)) {
                    libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer(lp_categoryButtonIndex, lv_mountIndex, lp_player);
                }

            }

        }
    }
    else if (auto4A73335E_val == 3) {
        auto5F018ACB_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount;
        lv_itMount = 1;
        for ( ; ( (auto5F018ACB_ai >= 0 && lv_itMount <= auto5F018ACB_ae) || (auto5F018ACB_ai < 0 && lv_itMount >= auto5F018ACB_ae) ) ; lv_itMount += auto5F018ACB_ai ) {
            lv_mountIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_itMount];
            lv_elementIsVisible = libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex);
            if ((lv_elementIsVisible == true)) {
                lv_playerAccesMount = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex);
                if ((lv_playerAccesMount == false)) {
                    libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer(lp_categoryButtonIndex, lv_mountIndex, lp_player);
                }

            }

        }
    }
    else {
    }
}

void libUIUI_gf_HSUIMountsFillTempCollectionCategoryArrayForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itCategoryButton;
    int lv_mountIndex;
    int lv_itMount;
    int lv_categoryIndex;
    string lv_itInstance;

    // Automatic Variable Declarations
    const int auto86D6C403_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int auto86D6C403_ai = 1;
    string auto1D5F86D7_userType;
    int auto1D5F86D7_i;
    int autoC55E851D_ae;
    const int autoC55E851D_ai = 1;

    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    lv_itCategoryButton = 1;
    for ( ; ( (auto86D6C403_ai >= 0 && lv_itCategoryButton <= auto86D6C403_ae) || (auto86D6C403_ai < 0 && lv_itCategoryButton >= auto86D6C403_ae) ) ; lv_itCategoryButton += auto86D6C403_ai ) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton] = 0;
    }
    lv_itCategoryButton = 0;
    auto1D5F86D7_userType = "MountCollectionCategory";
    auto1D5F86D7_i = 1;
    for ( ; auto1D5F86D7_i <= UserDataInstanceCount(auto1D5F86D7_userType) ; auto1D5F86D7_i += 1 ) {
        lv_itInstance = UserDataInstance(auto1D5F86D7_userType, auto1D5F86D7_i);
        autoC55E851D_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount;
        lv_itMount = 1;
        for ( ; ( (autoC55E851D_ai >= 0 && lv_itMount <= autoC55E851D_ae) || (autoC55E851D_ai < 0 && lv_itMount >= autoC55E851D_ae) ) ; lv_itMount += autoC55E851D_ai ) {
            lv_mountIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_itMount];
            if ((libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex) == true) && (lv_itInstance == libCore_gv_dataMountsMountData[lv_mountIndex].lv_collectionCategory)) {
                lv_itCategoryButton += 1;
                lv_categoryIndex = libNtve_gf_UserDataInstanceGetIndex("MountCollectionCategory", lv_itInstance);
                libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton] = lv_categoryIndex;
                break;
            }

        }
    }
}

void libUIUI_gf_HSUIMountsAddMountToTempArrayForPlayer (int lp_categoryButtonIndex, int lp_mountIndex, int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_storedMountCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    if ((libUIUI_gf_HSUIMountsFillTempArrayMountIsValidForPlayer(lp_categoryButtonIndex, lp_mountIndex, lp_player) == true)) {
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount += 1;
        lv_storedMountCount = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCount;
        libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountArray[lv_storedMountCount] = lp_mountIndex;
    }

}

bool libUIUI_gf_HSUIMountsFillTempArrayMountIsValidForPlayer (int lp_categoryButtonIndex, int lp_mountIndex, int lp_player) {
    // Variable Declarations
    string lv_categoryInstance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gf_HSUIMountsCollapsedForPlayer(lp_player) == false)) {
        if ((libUIUI_gf_HSUIMountsCompareSearchTextForPlayer(lp_mountIndex, lp_player) == true)) {
            return true;
        }

    }
    else {
        lv_categoryInstance = libCore_gv_dataMountsMountData[lp_mountIndex].lv_collectionCategory;
        if ((libNtve_gf_UserDataInstanceGetIndex("MountCollectionCategory", lv_categoryInstance) == lp_categoryButtonIndex)) {
            return true;
        }

    }
    return false;
}

void libUIUI_gf_HSUIMountsUpdateMountCollectionCategoryButtonsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itCategoryButton;

    // Automatic Variable Declarations
    const int autoE347A98D_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int autoE347A98D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itCategoryButton = 1;
    for ( ; ( (autoE347A98D_ai >= 0 && lv_itCategoryButton <= autoE347A98D_ae) || (autoE347A98D_ai < 0 && lv_itCategoryButton >= autoE347A98D_ae) ) ; lv_itCategoryButton += autoE347A98D_ai ) {
        if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton] > 0)) {
            libUIUI_gf_HSUISetMountCategoryItemTextForPlayer(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], UserDataGetText("MountCollectionCategory", UserDataInstance("MountCollectionCategory", libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton]), "Name", 1), lp_player);
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], libCore_gv_playerGroupFromPlayer[lp_player], true);
            if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex == libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempMountCategoryArray[lv_itCategoryButton])) {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], true, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
            else {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], false, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
        }
        else {
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itCategoryButton], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
}

void libUIUI_gf_HSUIMountsFillMountReplacementContainerForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itAbil;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int auto8085274C_ae;
    const int auto8085274C_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    auto8085274C_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
    lv_itAbil = 1;
    for ( ; ( (auto8085274C_ai >= 0 && lv_itAbil <= auto8085274C_ae) || (auto8085274C_ai < 0 && lv_itAbil >= auto8085274C_ae) ) ; lv_itAbil += auto8085274C_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbil];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_isReplacementMount == true)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemIcon, libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipNameLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipDescriptionLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelReplacementContainerItemTooltipInfoLabel, libCore_gv_abilityData[lv_abilityIndex].lv_abilityInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            break;
        }

    }
}

void libUIUI_gf_HSUISetSkinContainerNameForPlayer (int lp_player) {
    // Variable Declarations
    int lv_skinIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSkinCount > 0)) {
        lv_skinIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex;
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_skinsPanelSelectedContentLabel, libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_skinsPanelSelectedContentLabel, StringToText(""), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUISetMountContainerNameForPlayer (int lp_player) {
    // Variable Declarations
    int lv_mountIndex;
    bool lv_fill;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mountIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex;
    if ((libUIUI_gf_HSUIMountsCollapsedForPlayer(lp_player) == true)) {
        if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex == libNtve_gf_UserDataInstanceGetIndex("MountCollectionCategory", libCore_gv_dataMountsMountData[lv_mountIndex].lv_collectionCategory))) {
            lv_fill = true;
        }

    }
    else {
        if ((libUIUI_gf_HSUIMountsCompareSearchTextForPlayer(lv_mountIndex, lp_player) == true)) {
            lv_fill = true;
        }

    }
    if ((lv_fill == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelSelectedContentLabel, libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountName, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_mountsPanelSelectedContentLabel, StringToText(""), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer (bool lp_selectDeselect, int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_selectDeselect == true)) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Selection", "Selected");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Selection", "NotSelected");
    }
}

void libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer (bool lp_lockedUnlocked, int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_lockedUnlocked == true)) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Locked", "Locked");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Locked", "NotLocked");
    }
}

void libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer (string lp_event, int lp_button, int lp_player) {
    // Variable Declarations
    string lv_eventName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_eventName = "";

    // Implementation
    if ((lp_event != null) && (lp_event != "[Default]")) {
        lv_eventName = (lp_event);
    }
    else {
        lv_eventName = "Default";
    }
    DialogControlSetAnimationState(lp_button, libCore_gv_playerGroupFromPlayer[lp_player], "EventImageStates", lv_eventName);
}

void libUIUI_gf_HSUIButtonItemSetSupporterTypeAtButtonForPlayer (string lp_supporter, int lp_button, int lp_player) {
    // Variable Declarations
    string lv_eventName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_eventName = "";

    // Implementation
    if ((lp_supporter != null) && (lp_supporter != "[Default]")) {
        lv_eventName = (lp_supporter);
    }
    else {
        lv_eventName = "Default";
    }
    DialogControlSetAnimationState(lp_button, libCore_gv_playerGroupFromPlayer[lp_player], "SupporterType", lv_eventName);
}

void libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer (bool lp_f2P, int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_f2P == true)) {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "F2P", "F2P");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "F2P", "NotF2P");
    }
}

void libUIUI_gf_HSUIButtonItemActivateVariationIndexAtItemForPlayer (int lp_variationNumber, int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "ClearFilters");
    DialogControlSendAnimationEvent(lp_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], ("AddFilterVariation" + IntToString(lp_variationNumber)));
}

void libUIUI_gf_HSUILoadBankDataForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_loadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;
    lv_loadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutSkinItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutMountItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex = libUIUI_gf_HSUIMountsCollectionCategoryIndexForSelectedMountForPlayer(lp_player);
}

void libUIUI_gf_HSUILoadBankDataForSelectedVariationForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_loadout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    lv_loadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutSkinItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutMountItem[lv_loadout];
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex = libUIUI_gf_HSUIMountsCollectionCategoryIndexForSelectedMountForPlayer(lp_player);
}

void libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer (int lp_panel, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_selectedPanel = lp_panel;
}

void libUIUI_gf_HSUIFillLoadoutPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_selectedLoadout;
    int lv_itButton;
    int lv_selectedPanel;

    // Automatic Variable Declarations
    int autoEB8AF57B_val;

    // Variable Initialization
    lv_selectedPanel = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_selectedPanel;

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    autoEB8AF57B_val = lv_selectedPanel;
    if (autoEB8AF57B_val == libUIUI_ge_HSUIPanelType_SkinPanel) {
        libUIUI_gf_HSUISkinsFillTempArrayForPlayer(lp_player);
        libUIUI_gf_HSUISkinsFillLoadoutSkinDataForPlayer(lp_player);
        libUIUI_gf_HSUIFillLoadoutSkinPanelForPlayer(lp_player);
    }
    else if (autoEB8AF57B_val == libUIUI_ge_HSUIPanelType_MountPanel) {
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_usesMount == false)) {
            DialogControlSetAnimationState(libUIUI_gv_hSUILoadout.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], "HeroUsesMounts", "NotUses");
            libUIUI_gf_HSUIMountsFillMountReplacementContainerForPlayer(lp_player);
        }
        else {
            DialogControlSetAnimationState(libUIUI_gv_hSUILoadout.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], "HeroUsesMounts", "Uses");
            libUIUI_gf_HSUIMountsFillTempCollectionCategoryArrayForPlayer(lp_player);
            libUIUI_gf_HSUIMountsFillTempArrayForPlayer(libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountCollectionCategoryIndex, lp_player);
            libUIUI_gf_HSUIMountsFillLoadoutMountDataForPlayer(lp_player);
            libUIUI_gf_HSUIMountsUpdateMountCollectionCategoryButtonsForPlayer(lp_player);
            libUIUI_gf_HSUIFillLoadoutMountPanelForPlayer(lp_player);
        }
    }
    else {
    }
    libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer(lp_player);
}

void libUIUI_gf_HSUIFillLoadoutSkinPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_maxSkins;
    int lv_itItemIndex;
    int lv_heroIndex;
    int lv_selectedLoadout;
    int lv_skinIndex;
    int lv_buttonItem;

    // Automatic Variable Declarations
    const int auto0546005C_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int auto0546005C_ai = 1;
    int auto5BC9254F_ae;
    const int auto5BC9254F_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    lv_buttonItem = c_invalidDialogControlId;

    // Implementation
    lv_maxSkins = MinI(libUIUI_gv_hSUILoadoutMaxSkinItemCount_C, libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinTotalCount);
    libUIUI_gf_HSUISetSkinContainerNameForPlayer(lp_player);
    lv_itItemIndex = 1;
    for ( ; ( (auto0546005C_ai >= 0 && lv_itItemIndex <= auto0546005C_ae) || (auto0546005C_ai < 0 && lv_itItemIndex >= auto0546005C_ae) ) ; lv_itItemIndex += auto0546005C_ai ) {
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itItemIndex];
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
        libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(null, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer(false, lv_buttonItem, lp_player);
    }
    auto5BC9254F_ae = lv_maxSkins;
    lv_itItemIndex = 1;
    for ( ; ( (auto5BC9254F_ai >= 0 && lv_itItemIndex <= auto5BC9254F_ae) || (auto5BC9254F_ai < 0 && lv_itItemIndex >= auto5BC9254F_ae) ) ; lv_itItemIndex += auto5BC9254F_ai ) {
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itItemIndex];
        lv_skinIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledSkinSkinItemIndex[lv_itItemIndex];
        libUIUI_gf_HSUISkinsSetLoadoutSkinItemToSkinForPlayer(lv_skinIndex, lv_itItemIndex, lp_player);
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_event, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemSetSupporterTypeAtButtonForPlayer(libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_supporterTypeRequired, lv_buttonItem, lp_player);
        if ((libUIUI_gf_HSUISkinsSkinItemButtonIsSelectedForPlayer(lp_player, lv_itItemIndex) == true)) {
            libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itItemIndex], lp_player);
        }

        if ((libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex) == false)) {
            libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer(true, lv_buttonItem, lp_player);
        }

        if ((libMeta_gf_MetaDataBaseFreeToPlayElementItemIsF2P(libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex) == true)) {
            libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer(true, lv_buttonItem, lp_player);
        }

    }
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinMaxLaneCount <= 1)) {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUISetScrollBarMaxMinValuesForPlayer(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, 0.0, (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerSkinMaxLaneCount - 1), lp_player);
    }
}

void libUIUI_gf_HSUIFillLoadoutMountPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_maxVisibleItemCount;
    int lv_mountIndex;
    int lv_maxItem;
    int lv_itItemIndex;
    int lv_heroIndex;
    int lv_selectedLoadout;
    int lv_buttonItem;

    // Automatic Variable Declarations
    int auto11E5988A_ae;
    const int auto11E5988A_ai = 1;
    int auto3D010B6C_ae;
    const int auto3D010B6C_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_selectedLoadout = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex;
    lv_buttonItem = c_invalidDialogControlId;

    // Implementation
    lv_maxVisibleItemCount = libUIUI_gf_HSUIMountsCurrentMaxItemCountForPlayer(lp_player);
    lv_maxItem = MinI(lv_maxVisibleItemCount, libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountTotalCount);
    libUIUI_gf_HSUISetMountContainerNameForPlayer(lp_player);
    auto11E5988A_ae = lv_maxVisibleItemCount;
    lv_itItemIndex = 1;
    for ( ; ( (auto11E5988A_ai >= 0 && lv_itItemIndex <= auto11E5988A_ae) || (auto11E5988A_ai < 0 && lv_itItemIndex >= auto11E5988A_ae) ) ; lv_itItemIndex += auto11E5988A_ai ) {
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itItemIndex];
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], false);
        libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer(false, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(null, lv_buttonItem, lp_player);
    }
    auto3D010B6C_ae = lv_maxItem;
    lv_itItemIndex = 1;
    for ( ; ( (auto3D010B6C_ai >= 0 && lv_itItemIndex <= auto3D010B6C_ae) || (auto3D010B6C_ai < 0 && lv_itItemIndex >= auto3D010B6C_ae) ) ; lv_itItemIndex += auto3D010B6C_ai ) {
        lv_mountIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_filledMountMountItemIndex[lv_itItemIndex];
        lv_buttonItem = libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itItemIndex];
        libUIUI_gf_HSUISetLoadoutMountItemToMountForPlayer(lv_mountIndex, lv_itItemIndex, lp_player);
        DialogControlSetEnabled(lv_buttonItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUIButtonItemActivateEventAtButtonForPlayer(libCore_gv_dataMountsMountData[lv_mountIndex].lv_event, lv_buttonItem, lp_player);
        libUIUI_gf_HSUIButtonItemSetSupporterTypeAtButtonForPlayer(libCore_gv_dataMountsMountData[lv_mountIndex].lv_supporterTypeRequired, lv_buttonItem, lp_player);
        if ((libUIUI_gf_HSUIMountsMountItemButtonIsSelectedForPlayer(lp_player, lv_itItemIndex) == true)) {
            libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, lv_buttonItem, lp_player);
        }

        if ((libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex) == false)) {
            libUIUI_gf_HSUIButtonItemLockUnlockButtonForPlayer(true, lv_buttonItem, lp_player);
        }

        if ((libMeta_gf_MetaDataBaseFreeToPlayElementItemIsF2P(libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex) == true)) {
            libUIUI_gf_HSUIButtonItemSetF2PStateAtButtonForPlayer(true, lv_buttonItem, lp_player);
        }

    }
    if ((libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount <= 1)) {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gf_HSUISetScrollBarMaxMinValuesForPlayer(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, 0.0, (libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_laneControllerMountMaxLaneCount - 1), lp_player);
    }
}

void libUIUI_gf_HSUIUpdateLoadoutPanelOnVariationSelectionForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    libUIUI_gf_HSUIVariationsFillVariationDataForPlayer(lp_player);
    libGame_gf_LoadoutVariationUpdateVariationOfHeroForPlayer(lv_heroIndex, libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedLoadoutIndex, lp_player);
    libUIUI_gf_HSUILoadBankDataForSelectedVariationForPlayer(lp_player);
    libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lp_player);
    libUIUI_gf_HSUIVariationsUpdateEditBoxNameForPlayer(lp_player);
}

void libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer (int lp_player) {
    // Variable Declarations
    bool lv_accessItem;
    string lv_requiredSupporterType;
    int lv_elementIndex;
    text lv_name;
    text lv_description;
    int lv_selectedPanel;

    // Automatic Variable Declarations
    int auto1510C655_val;

    // Variable Initialization
    lv_selectedPanel = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_selectedPanel;

    // Implementation
    if ((lv_selectedPanel != libUIUI_ge_HSUIPanelType_MountPanel)) {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_previewPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

    auto1510C655_val = lv_selectedPanel;
    if (auto1510C655_val == libUIUI_ge_HSUIPanelType_SkinPanel) {
        lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedSkinIndex;
        lv_requiredSupporterType = libCore_gv_dataSkinsSkinData[lv_elementIndex].lv_supporterTypeRequired;
        lv_accessItem = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_elementIndex);
        lv_name = libCore_gv_dataSkinsSkinData[lv_elementIndex].lv_name;
        lv_description = libCore_gv_dataSkinsSkinData[lv_elementIndex].lv_accessDeniedInfo;
    }
    else if (auto1510C655_val == libUIUI_ge_HSUIPanelType_MountPanel) {
        lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lp_player].lv_tempSelectedMountIndex;
        lv_requiredSupporterType = libCore_gv_dataMountsMountData[lv_elementIndex].lv_supporterTypeRequired;
        lv_accessItem = libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_elementIndex);
        lv_name = libCore_gv_dataMountsMountData[lv_elementIndex].lv_mountName;
        lv_description = libCore_gv_dataMountsMountData[lv_elementIndex].lv_accessDeniedInfo;
        if ((libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_usesMount == true) && (libUIUI_gf_HSUIMountsMountIsInTempArrayForPlayer(lv_elementIndex, lp_player) == true)) {
            libNtve_gf_SetDialogItemCutscene(libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene, libCore_gv_dataMountsMountData[lv_elementIndex].lv_heroSelectCutsceneFile, libCore_gv_playerGroupFromPlayer[lp_player]);
            libUIUI_gf_HSUIButtonItemActivateVariationIndexAtItemForPlayer(libCore_gv_dataMountsMountData[lv_elementIndex].lv_mountIDVariationNumber, libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene, lp_player);
            DialogControlSendAnimationEvent(libUIUI_gv_hSUILoadout.lv_previewPanelMountCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Play");
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_previewPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_previewPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
            lv_accessItem = true;
        }
    }
    else {
    }
    if ((lv_accessItem == false)) {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_purchaseInfoPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_purchaseCurrencySelectPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelName, lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_hSUILoadout.lv_purchaseInfoPanelDescription, lv_description, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_purchaseInfoPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_hSUILoadout.lv_purchaseCurrencySelectPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libUIUI_gf_UIUnitStatusFramesShowUnitNameLabelForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitNameLabel/Label", lp_unit);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void libUIUI_gf_UIUnitStatusFramesHookupUnitStatusFramesForPlayer (int lp_player) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player > libCore_gv_bALMaxPlayers) || (lp_player < 1))) {
        return ;
    }

    lv_hero = libGame_gv_players[lp_player].lv_heroUnit;
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitNameLabel/Label", lv_hero);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_playerNameLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/HeroNameLabel", lv_hero);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UnitTypeGetName(UnitGetType(lv_hero)), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_heroNameLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/BotDifficultyLabel", lv_hero);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botDifficultyLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/BotStatusLabel", lv_hero);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botStatusLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/HeroMapMechanic", lv_hero);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_mapMechanicFrame = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/HeroMapMechanic/MapMechanicIcon", lv_hero);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_mapMechanicIcon = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/HeroMapMechanic/MapMechanicCount", lv_hero);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_mapMechanicCount = DialogControlLastCreated();
}

void libUIUI_gf_UIUnitStatusFramesShowHideBotLabel (int lp_player, bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_playerNameLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_heroNameLabel, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_heroNameLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_playerNameLabel, PlayerGroupAll(), true);
    }
}

void libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Variable Declarations
    unit lv_itHero;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroTrackerArrowShowHideHeroUnitForPlayer (bool lp_showHide, int lp_player, unit lp_unit) {
    // Variable Declarations
    unit lv_itHero;
    int lv_index;

    // Automatic Variable Declarations
    const int autoEC4F848C_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
    const int autoEC4F848C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoEC4F848C_ai >= 0 && lv_index <= autoEC4F848C_ae) || (autoEC4F848C_ai < 0 && lv_index >= autoEC4F848C_ae) ) ; lv_index += autoEC4F848C_ai ) {
        if ((libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] == lp_unit)) {
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            return ;
        }

    }
}

void libUIUI_gf_UIHeroTrackerArrowHookupTrackerArrowsForPlayer (int lp_player) {
    // Variable Declarations
    unit lv_itHero;
    int lv_heroCount;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player > libCore_gv_bALMaxPlayers) || (lp_player < 1))) {
        return ;
    }

    libUIUI_gv_uIHeroTrackerArrows.lv_unitCount = 0;
    libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lp_player);
}

void libUIUI_gf_JCIInitialization (int lp_campNumber, bool lp_elite) {
    // Variable Declarations
    unit lv_bannerHolder;
    int lv_mainPanel;
    int lv_jCIPanel;
    int lv_anchorPointDialogItem;
    int lv_anchorDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mainPanel = c_invalidDialogControlId;
    lv_jCIPanel = c_invalidDialogControlId;
    lv_anchorPointDialogItem = c_invalidDialogControlId;
    lv_anchorDialog = c_invalidDialogId;

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "BannerUnit", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libMapM_gv_jungleCreepCamps[lp_campNumber].lv_mapDataBannerPoint);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerUnit = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "BannerUnitHolder", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libMapM_gv_jungleCreepCamps[lp_campNumber].lv_mapDataBannerPoint);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder = UnitLastCreated();
    lv_bannerHolder = UnitLastCreated();
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_anchorDialog = DialogLastCreated();
    libUIUI_gv_jCIInfo[lp_campNumber].lv_dialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetPositionRelativeToUnit(lv_anchorDialog, lv_bannerHolder, "Ref_Center", -195, -200);
    DialogControlCreate(lv_anchorDialog, c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    lv_anchorPointDialogItem = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "JungleCampInfoPanel/JungleCampInfoPanelTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_jCIPanel = DialogControlLastCreated();
    libUIUI_gv_jCIInfo[lp_campNumber].lv_mainPanel = DialogControlLastCreated();
    DialogControlSetPositionRelative(lv_jCIPanel, PlayerGroupAll(), c_anchorCenter, lv_anchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_jCIPanel, c_triggerControlTypeLabel, "CampTimerLabel");
    libUIUI_gv_jCIInfo[lp_campNumber].lv_campTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_jCIPanel, c_triggerControlTypeLabel, "CampEliteLabel");
    libUIUI_gv_jCIInfo[lp_campNumber].lv_campEliteLabel = DialogControlLastCreated();
    if ((lp_elite == true)) {
        DialogControlSetAnimationState(libUIUI_gv_jCIInfo[lp_campNumber].lv_campEliteLabel, PlayerGroupAll(), "CampEliteStatus", "CampIsElite");
    }

    DialogControlHookup(lv_jCIPanel, c_triggerControlTypeLabel, "CampTitleLabel");
    libUIUI_gv_jCIInfo[lp_campNumber].lv_campTitleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_jCIPanel, c_triggerControlTypeLabel, "PlayerNameLabel");
    libUIUI_gv_jCIInfo[lp_campNumber].lv_playerNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_jCIPanel, c_triggerControlTypeLabel, "CampDescriptionLabel");
    libUIUI_gv_jCIInfo[lp_campNumber].lv_campDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_jCIPanel, c_triggerControlTypeLabel, "DebugLabel");
    libUIUI_gv_jCIInfo[lp_campNumber].lv_debugLabel = DialogControlLastCreated();
}

void libUIUI_gf_JCIChangeOwner (int lp_newPlayer, int lp_newAIOwner, int lp_campNumber) {
    // Variable Declarations
    int lv_team;
    int lv_jCIPanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_jCIPanel = c_invalidDialogControlId;

    // Implementation
    lv_jCIPanel = libUIUI_gv_jCIInfo[lp_campNumber].lv_mainPanel;
    DialogControlSetVisible(lv_jCIPanel, PlayerGroupAll(), true);
    if (((lp_newAIOwner == libCore_gv_cOMPUTER_TeamOrder) || (lp_newAIOwner == libCore_gv_cOMPUTER_TeamChaos))) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_campNumber].lv_playerNameLabel, PlayerName(lp_newPlayer), PlayerGroupAll());
        lv_team = libGame_gf_PlayerGetPlayerTeam(lp_newAIOwner);
        DialogControlSetAnimationState(lv_jCIPanel, libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, "TeamCaptured", "BlueTeam");
        DialogControlSetAnimationState(lv_jCIPanel, libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_team)].lv_teamPlayerGroupNoNPCPlayers, "TeamCaptured", "RedTeam");
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetAnimationState(lv_jCIPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TeamCaptured", "BlueTeam");
        }
        else {
            DialogControlSetAnimationState(lv_jCIPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TeamCaptured", "RedTeam");
        }
    }
    else {
        DialogControlSetAnimationState(lv_jCIPanel, PlayerGroupAll(), "TeamCaptured", "NotCaptured");
    }
}

void libUIUI_gf_JCISetRespawnLabelTextForCamp (int lp_camp, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_camp].lv_campTimerLabel, lp_text, PlayerGroupAll());
}

void libUIUI_gf_JCISetPlayerNameLabelText (int lp_camp, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_camp].lv_playerNameLabel, lp_text, PlayerGroupAll());
}

void libUIUI_gf_JCISetDebugLabelText (int lp_camp, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_camp].lv_debugLabel, lp_text, PlayerGroupAll());
}

void libUIUI_gf_JCISetCampDescriptionLabelText (int lp_campNumber, text lp_text, bool lp_isElite) {
    // Variable Declarations
    int lv_unitStatusPanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitStatusPanel = c_invalidDialogControlId;

    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_campNumber].lv_campDescriptionLabel, lp_text, PlayerGroupAll());
    if ((lp_isElite == true)) {
        DialogControlSetAnimationState(libUIUI_gv_jCIInfo[lp_campNumber].lv_campEliteLabel, PlayerGroupAll(), "CampEliteStatus", "CampIsElite");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_jCIInfo[lp_campNumber].lv_campEliteLabel, PlayerGroupAll(), "CampEliteStatus", "CampNotElite");
    }
}

void libUIUI_gf_JCISetCampTitleLabelText (int lp_camp, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_camp].lv_campTitleLabel, lp_text, PlayerGroupAll());
}

void libUIUI_gf_JCISetCampTimerLabelText (int lp_camp, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_camp].lv_campTimerLabel, lp_text, PlayerGroupAll());
}

int libUIUI_gf_KillLogGetUnusedItemIndex () {
    // Variable Declarations
    int lv_i_Item;

    // Automatic Variable Declarations
    const int auto232DA6AB_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int auto232DA6AB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i_Item = 1;
    for ( ; ( (auto232DA6AB_ai >= 0 && lv_i_Item <= auto232DA6AB_ae) || (auto232DA6AB_ai < 0 && lv_i_Item >= auto232DA6AB_ae) ) ; lv_i_Item += auto232DA6AB_ai ) {
        if ((libUIUI_gv_killLogItems[lv_i_Item].lv_player == 0)) {
            return lv_i_Item;
        }

    }
    return 0;
}

int libUIUI_gf_KillLogGetItemIndexForUnit (int lp_sourcePlayer, int lp_type) {
    // Variable Declarations
    int lv_i_Item;

    // Automatic Variable Declarations
    const int auto5A5CD883_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int auto5A5CD883_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i_Item = 1;
    for ( ; ( (auto5A5CD883_ai >= 0 && lv_i_Item <= auto5A5CD883_ae) || (auto5A5CD883_ai < 0 && lv_i_Item >= auto5A5CD883_ae) ) ; lv_i_Item += auto5A5CD883_ai ) {
        if ((libUIUI_gv_killLogItems[lv_i_Item].lv_player == lp_sourcePlayer) && (libUIUI_gv_killLogItems[lv_i_Item].lv_type == lp_type) && (((lp_type == libUIUI_ge_KillLogItemType_Kill) && (libUIUI_gv_killLogItems[lv_i_Item].lv_combo < (libUIUI_gv_killLogMaxComboPortraitsD0A1 - 1))) || ((lp_type == libUIUI_ge_KillLogItemType_Quest) && (libUIUI_gv_killLogItems[lv_i_Item].lv_combo < (libUIUI_gv_killLogMaxComboIconsD0A1 - 1))))) {
            return lv_i_Item;
        }

    }
    return 0;
}

int libUIUI_gf_KillLogGetItemWithLeastRemainingTime () {
    // Variable Declarations
    int lv_i_Item;
    int lv_itemIndexWithLeastRemainingTime;

    // Automatic Variable Declarations
    const int autoB4C5DAE1_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int autoB4C5DAE1_ai = 1;

    // Variable Initialization
    lv_itemIndexWithLeastRemainingTime = 1;

    // Implementation
    lv_i_Item = 2;
    for ( ; ( (autoB4C5DAE1_ai >= 0 && lv_i_Item <= autoB4C5DAE1_ae) || (autoB4C5DAE1_ai < 0 && lv_i_Item >= autoB4C5DAE1_ae) ) ; lv_i_Item += autoB4C5DAE1_ai ) {
        if ((TimerGetRemaining(libUIUI_gv_killLogItems[lv_i_Item].lv_timer) < TimerGetRemaining(libUIUI_gv_killLogItems[lv_itemIndexWithLeastRemainingTime].lv_timer))) {
            lv_itemIndexWithLeastRemainingTime = lv_i_Item;
        }

    }
    return lv_itemIndexWithLeastRemainingTime;
}

string libUIUI_gf_KillLogGetPortraitPathForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    string auto1936E3C6_val;

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(lp_unit)) == false)) {
        if ((UnitFilterMatch(lp_unit, UnitGetOwner(lp_unit), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            return "assets\\Icons\\Common_General\\Icon_General_NPC_Structure.dds";
        }
        else {
            return "assets\\Icons\\Common_General\\Icon_General_NPC_Unit.dds";
        }
    }

    auto1936E3C6_val = UnitGetType(lp_unit);
    {
        return libCore_gv_dataHeroesHeroData[libGame_gv_players[UnitGetOwner(lp_unit)].lv_heroIndex].lv_portrait;
    }
}

int libUIUI_gf_KillLogAddNewItem (int lp_sourcePlayer, int lp_eventType) {
    // Variable Declarations
    int lv_itemIndex;
    int lv_itemFrame;
    int lv_i_ItemIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemFrame = c_invalidDialogControlId;

    // Implementation
    lv_itemIndex = libUIUI_gf_KillLogGetUnusedItemIndex();
    if ((lv_itemIndex <= 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_24C1C8C5"), true);
        return 0;
    }

    libUIUI_gv_killLogItems[lv_itemIndex].lv_player = lp_sourcePlayer;
    libUIUI_gv_killLogItems[lv_itemIndex].lv_type = lp_eventType;
    TimerStart(libUIUI_gv_killLogItems[lv_itemIndex].lv_timer, libUIUI_gv_killLogTimeoutD0A1, false, c_timeGame);
    lv_itemFrame = libUIUI_gv_killLogItems[lv_itemIndex].lv_frame;
    if ((lp_eventType == libUIUI_ge_KillLogItemType_Kill)) {
        DialogControlSetAnimationState(lv_itemFrame, PlayerGroupAll(), "KillLogItemType", "Kill");
    }
    else {
        DialogControlSetAnimationState(lv_itemFrame, PlayerGroupAll(), "KillLogItemType", "Quest");
    }
    if ((lv_itemIndex > 1)) {
        DialogControlSetPositionRelative(lv_itemFrame, PlayerGroupAll(), c_anchorLeft, libUIUI_gv_killLogItems[(lv_itemIndex - 1)].lv_frame, c_anchorLeft, 0, 0);
    }
    else {
        DialogControlSetPositionRelative(lv_itemFrame, PlayerGroupAll(), c_anchorLeft, libUIUI_gv_killLogPanel, c_anchorTopLeft, 0, libUIUI_gv_killLogTopOffset_D0A1);
    }
    DialogControlSendAnimationEvent(lv_itemFrame, PlayerGroupAll(), "SlideUp");
    DialogControlSendAnimationEvent(lv_itemFrame, PlayerGroupAll(), "FadeIn");
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeImage, "SrcPortrait/PortraitImage");
    if ((libGame_gf_PlayerIsHeroPlayer(lp_sourcePlayer) == true)) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_sourcePlayer].lv_heroIndex].lv_portrait, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "assets\\Icons\\Common_General\\Icon_General_NPC_Unit.dds", PlayerGroupAll());
    }
    if ((libGame_gf_TeamNumberOfPlayer(lp_sourcePlayer) == libGame_gv_teamChaosIndex_C)) {
        DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "SrcColor", "Red");
        DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "SrcColor", "Blue");
        DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "SrcColor", "Red");
    }
    else if ((libGame_gf_TeamNumberOfPlayer(lp_sourcePlayer) == libGame_gv_teamOrderIndex_C)) {
        DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "SrcColor", "Blue");
        DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "SrcColor", "Red");
        DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "SrcColor", "Blue");
    }
    else if (true) {
        DialogControlSetAnimationState(lv_itemFrame, PlayerGroupAll(), "SrcColor", "Purple");
    }
    if ((lv_itemIndex > libUIUI_gv_killLogMaxVisibleItemCountD0A1)) {
        libUIUI_gf_KillLogHideItem(libUIUI_gf_KillLogGetItemWithLeastRemainingTime());
    }

    return lv_itemFrame;
}

void libUIUI_gf_KillLogAnnounceKill (int lp_sourcePlayer, unit lp_target) {
    // Variable Declarations
    int lv_itemFrame;
    int lv_itemIndex;
    int lv_combo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemFrame = c_invalidDialogControlId;

    // Implementation
    if (((lp_target == null) || (UnitIsValid(lp_target) == false))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_BBBCCAA6"), true);
        return ;
    }

    lv_itemIndex = libUIUI_gf_KillLogGetItemIndexForUnit(lp_sourcePlayer, libUIUI_ge_KillLogItemType_Kill);
    if ((libGame_gf_PlayerIsHeroPlayer(lp_sourcePlayer) == true)) {
        if ((lv_itemIndex == 0)) {
            lv_itemFrame = libUIUI_gf_KillLogAddNewItem(lp_sourcePlayer, libUIUI_ge_KillLogItemType_Kill);
            if ((lv_itemFrame == c_invalidDialogControlId)) {
                return ;
            }

            DialogControlSendAnimationEvent(lv_itemFrame, PlayerGroupAll(), "FadeIn");
            if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_target)) == libGame_gv_teamChaosIndex_C) && (lv_itemFrame != c_invalidDialogControlId)) {
                DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TgtColor", "Red");
                DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TgtColor", "Blue");
                DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TgtColor", "Red");
            }
            else {
                DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TgtColor", "Blue");
                DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TgtColor", "Red");
                DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TgtColor", "Blue");
            }
        }
        else {
            if ((libUIUI_gv_killLogItems[lv_itemIndex].lv_combo >= (libUIUI_gv_killLogMaxComboPortraitsD0A1 - 1))) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_D242FF9B"), true);
                return ;
            }

            TimerStart(libUIUI_gv_killLogItems[lv_itemIndex].lv_timer, libUIUI_gv_killLogTimeoutD0A1, false, c_timeGame);
            lv_itemFrame = libUIUI_gv_killLogItems[lv_itemIndex].lv_frame;
            libUIUI_gv_killLogItems[lv_itemIndex].lv_combo += 1;
            lv_combo = libUIUI_gv_killLogItems[lv_itemIndex].lv_combo;
        }
    }
    else {
        lv_itemFrame = libUIUI_gf_KillLogAddNewItem(lp_sourcePlayer, libUIUI_ge_KillLogItemType_Kill);
        if ((lv_itemFrame == c_invalidDialogControlId)) {
            return ;
        }

        DialogControlSendAnimationEvent(lv_itemFrame, PlayerGroupAll(), "FadeIn");
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_target)) == libGame_gv_teamChaosIndex_C) && (lv_itemFrame != c_invalidDialogControlId)) {
            DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TgtColor", "Red");
            DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TgtColor", "Blue");
            DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TgtColor", "Red");
        }
        else {
            DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "TgtColor", "Blue");
            DialogControlSetAnimationState(lv_itemFrame, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "TgtColor", "Red");
            DialogControlSetAnimationState(lv_itemFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TgtColor", "Blue");
        }
    }
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeImage, "TgtPortrait" + IntToString(lv_combo) + "/PortraitImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libUIUI_gf_KillLogGetPortraitPathForUnit(lp_target), PlayerGroupAll());
    DialogControlHookup(lv_itemFrame, c_triggerControlTypePanel, "TgtPortrait" + IntToString(lv_combo));
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "FadeIn");
    libUIUI_gf_KillLogDisplayQuestResetDataFromCache(UnitGetOwner(lp_target), DialogControlLastCreated());
}

void libUIUI_gf_KillLogAnnounceQuestCompletion (int lp_player, string lp_questToken, fixed lp_progress) {
    // Variable Declarations
    int lv_itemFrame;
    string lv_icon;
    string lv_questTalent;
    text lv_questName;
    int lv_itemIndex;
    int lv_combo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemFrame = c_invalidDialogControlId;
    lv_questTalent = "";

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_55F47934", "Player", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_55F47934"), true);
        return ;
    }

    if ((lp_questToken == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_2F2E60D1"), true);
    }

    lv_itemIndex = libUIUI_gf_KillLogGetItemIndexForUnit(lp_player, libUIUI_ge_KillLogItemType_Quest);
    if ((lv_itemIndex > 0)) {
        if ((libUIUI_gv_killLogItems[lv_itemIndex].lv_combo >= (libUIUI_gv_killLogMaxComboIconsD0A1 - 1))) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_338664DD"), true);
            return ;
        }

        TimerStart(libUIUI_gv_killLogItems[lv_itemIndex].lv_timer, libUIUI_gv_killLogTimeoutD0A1, false, c_timeGame);
        libUIUI_gv_killLogItems[lv_itemIndex].lv_combo += 1;
        lv_itemFrame = libUIUI_gv_killLogItems[lv_itemIndex].lv_frame;
        lv_combo = libUIUI_gv_killLogItems[lv_itemIndex].lv_combo;
    }
    else {
        lv_itemFrame = libUIUI_gf_KillLogAddNewItem(lp_player, libUIUI_ge_KillLogItemType_Quest);
    }
    lv_icon = CatalogFieldValueGet(c_gameCatalogBehavior, lp_questToken, "InfoIcon", c_playerAny);
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestIcon" + IntToString(lv_combo) + "/IconImage")));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_icon, PlayerGroupAll());
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestIcon" + IntToString(lv_combo) + "/TimestampLabel")));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))), PlayerGroupAll());
    DialogControlHookup(lv_itemFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestIcon" + IntToString(lv_combo) + "/ProgressValue")));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lp_progress, c_fixedPrecisionAny), PlayerGroupAll());
    DialogControlHookup(lv_itemFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestIcon" + IntToString(lv_combo))));
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "FadeIn");
    SoundPlayForPlayer(SoundLink("TalentQuestLogCompleteAlly", -1), c_maxPlayers, PlayerGroupExceptOfPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, lp_player), libCore_gv_playerGroupFromPlayer[lp_player]), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("TalentQuestLogCompleteEnemy", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupEnemy, lp_player), 100.0, 0.0);
    lv_questName = StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_questToken, "Name", c_playerAny));
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Null, "ShowQuestNotification", StringExternal("Param/Value/lib_UIUI_3BF16344"), lv_questName, null, null, lv_icon, libGame_gv_announcement_LongAnnouncementDuration_C, false);
}

void libUIUI_gf_KillLogSaveQuestResetDataToCache (int lp_player, string lp_quest) {
    // Variable Declarations
    int lv_i_CacheEntryBehavior;

    // Automatic Variable Declarations
    const int auto94745006_ae = libUIUI_gv_killLogMaxComboIconsD0A1;
    const int auto94745006_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i_CacheEntryBehavior = 1;
    for ( ; ( (auto94745006_ai >= 0 && lv_i_CacheEntryBehavior <= auto94745006_ae) || (auto94745006_ai < 0 && lv_i_CacheEntryBehavior >= auto94745006_ae) ) ; lv_i_CacheEntryBehavior += auto94745006_ai ) {
        if ((libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_i_CacheEntryBehavior] == null)) {
            libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_i_CacheEntryBehavior] = lp_quest;
            return ;
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_A7F2B75D"), true);
}

void libUIUI_gf_KillLogDisplayQuestResetDataFromCache (int lp_player, int lp_portraitFrame) {
    // Variable Declarations
    int lv_i_BehaviorIndex;
    int lv_questIconFrame;
    string lv_icon;

    // Automatic Variable Declarations
    const int autoAC60E08E_ae = libUIUI_gv_killLogMaxComboIconsD0A1;
    const int autoAC60E08E_ai = 1;

    // Variable Initialization
    lv_questIconFrame = c_invalidDialogControlId;
    lv_icon = "";

    // Implementation
    lv_i_BehaviorIndex = 1;
    for ( ; ( (autoAC60E08E_ai >= 0 && lv_i_BehaviorIndex <= autoAC60E08E_ae) || (autoAC60E08E_ai < 0 && lv_i_BehaviorIndex >= autoAC60E08E_ae) ) ; lv_i_BehaviorIndex += autoAC60E08E_ai ) {
        if ((libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_i_BehaviorIndex] != null)) {
            DialogControlHookup(lp_portraitFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("QuestResetIcon" + IntToString(lv_i_BehaviorIndex))));
            lv_questIconFrame = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            lv_icon = CatalogFieldValueGet(c_gameCatalogBehavior, libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_i_BehaviorIndex], "InfoIcon", c_playerAny);
            DialogControlHookup(lv_questIconFrame, c_triggerControlTypeImage, "IconImage");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (lv_icon), PlayerGroupAll());
            libUIUI_gv_killLogQuestResetCache[lp_player].lv_quests[lv_i_BehaviorIndex] = null;
        }

    }
}

void libUIUI_gf_KillLogHideItem (int lp_indexToRemove) {
    // Variable Declarations
    int lv_i_Item;
    int lv_temp_Frame;
    timer lv_temp_Timer;

    // Automatic Variable Declarations
    int autoAFFF5F8D_ae;
    const int autoAFFF5F8D_ai = 1;

    // Variable Initialization
    lv_temp_Frame = c_invalidDialogControlId;
    lv_temp_Timer = TimerCreate();

    // Implementation
    libNtve_gf_StopTimer(libUIUI_gv_killLogItems[lp_indexToRemove].lv_timer);
    lv_temp_Timer = libUIUI_gv_killLogItems[lp_indexToRemove].lv_timer;
    lv_temp_Frame = libUIUI_gv_killLogItems[lp_indexToRemove].lv_frame;
    if ((libUIUI_gv_killLogItems[(lp_indexToRemove + 1)].lv_player > 0)) {
        if ((lp_indexToRemove > 1)) {
            DialogControlSetPositionRelative(libUIUI_gv_killLogItems[(lp_indexToRemove + 1)].lv_frame, PlayerGroupAll(), c_anchorLeft, libUIUI_gv_killLogItems[(lp_indexToRemove - 1)].lv_frame, c_anchorLeft, 0, 0);
        }
        else {
            DialogControlSetPositionRelative(libUIUI_gv_killLogItems[(lp_indexToRemove + 1)].lv_frame, PlayerGroupAll(), c_anchorLeft, libUIUI_gv_killLogPanel, c_anchorTopLeft, 0, libUIUI_gv_killLogTopOffset_D0A1);
        }
        DialogControlSendAnimationEvent(libUIUI_gv_killLogItems[(lp_indexToRemove + 1)].lv_frame, PlayerGroupAll(), "SlideUp");
    }

    autoAFFF5F8D_ae = (libUIUI_gv_killLogMaxItemCountD0A1 - 1);
    lv_i_Item = lp_indexToRemove;
    for ( ; ( (autoAFFF5F8D_ai >= 0 && lv_i_Item <= autoAFFF5F8D_ae) || (autoAFFF5F8D_ai < 0 && lv_i_Item >= autoAFFF5F8D_ae) ) ; lv_i_Item += autoAFFF5F8D_ai ) {
        libUIUI_gv_killLogItems[lv_i_Item].lv_player = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_player;
        libUIUI_gv_killLogItems[lv_i_Item].lv_frame = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_frame;
        libUIUI_gv_killLogItems[lv_i_Item].lv_timer = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_timer;
        libUIUI_gv_killLogItems[lv_i_Item].lv_combo = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_combo;
        libUIUI_gv_killLogItems[lv_i_Item].lv_type = libUIUI_gv_killLogItems[(lv_i_Item + 1)].lv_type;
    }
    libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_player = 0;
    libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_frame = lv_temp_Frame;
    libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_timer = lv_temp_Timer;
    libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_combo = 0;
    DialogControlSendAnimationEvent(libUIUI_gv_killLogItems[libUIUI_gv_killLogMaxItemCountD0A1].lv_frame, PlayerGroupAll(), "FadeOut");
}

void libUIUI_gf_KillLogDebugInitPanel () {
    // Variable Declarations
    int lv_i_Player;
    int lv_killFrame;
    int lv_questFrame;

    // Automatic Variable Declarations
    const int auto70EE42AF_ae = libCore_gv_bALMaxPlayers;
    const int auto70EE42AF_ai = 1;
    const int auto56CFEEF0_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto56CFEEF0_ai = 1;

    // Variable Initialization
    lv_killFrame = c_invalidDialogControlId;
    lv_questFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel/KillLogDebugPanel");
    libUIUI_gv_killLogDebugPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_killLogDebugPanel.lv_mainPanel, c_triggerControlTypeButton, "CloseButton");
    libUIUI_gv_killLogDebugPanel.lv_closeButton = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_killLogDebugPanel.lv_mainPanel, c_triggerControlTypePanel, "KillFrame");
    lv_killFrame = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_killLogDebugPanel.lv_mainPanel, c_triggerControlTypePanel, "QuestFrame");
    lv_questFrame = DialogControlLastCreated();
    lv_i_Player = 1;
    for ( ; ( (auto70EE42AF_ai >= 0 && lv_i_Player <= auto70EE42AF_ae) || (auto70EE42AF_ai < 0 && lv_i_Player >= auto70EE42AF_ae) ) ; lv_i_Player += auto70EE42AF_ai ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_i_Player) == true)) {
            DialogControlHookup(lv_killFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Button" + IntToString(lv_i_Player))));
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_i_Player].lv_heroIndex].lv_name, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StandardGlueButtonRedSmall", libGame_gf_EnemyPlayerGroupOfPlayer(lv_i_Player));
            libUIUI_gv_killLogDebugPanel.lv_killButtons[lv_i_Player] = DialogControlLastCreated();
            DialogControlHookup(lv_questFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Button" + IntToString(lv_i_Player))));
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_i_Player].lv_heroIndex].lv_name, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StandardGlueButtonRedSmall", libGame_gf_EnemyPlayerGroupOfPlayer(lv_i_Player));
            libUIUI_gv_killLogDebugPanel.lv_questButtons[lv_i_Player] = DialogControlLastCreated();
        }

    }
    lv_i_Player = (libCore_gv_bALMaxPlayers + 1);
    for ( ; ( (auto56CFEEF0_ai >= 0 && lv_i_Player <= auto56CFEEF0_ae) || (auto56CFEEF0_ai < 0 && lv_i_Player >= auto56CFEEF0_ae) ) ; lv_i_Player += auto56CFEEF0_ai ) {
        DialogControlHookup(lv_killFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Button" + IntToString(lv_i_Player))));
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_i_Player].lv_heroIndex].lv_name, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StandardGlueButtonRedSmall", libGame_gf_EnemyPlayerGroupOfPlayer(lv_i_Player));
    }
    DialogControlHookup(lv_killFrame, c_triggerControlTypeCheckBox, "Checkbox");
    libUIUI_gv_killLogDebugPanel.lv_killCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_questFrame, c_triggerControlTypeCheckBox, "Checkbox");
    libUIUI_gv_killLogDebugPanel.lv_questCheckbox = DialogControlLastCreated();
}

string libUIUI_gf_KillLogDebugRandomQuestBehavior () {
    // Automatic Variable Declarations
    int auto5DF28FC5_val;

    // Implementation
    auto5DF28FC5_val = RandomInt(0, 5);
    if (auto5DF28FC5_val == 1) {
        return "HeroMalfurionTalentElunesChosen@TokenCounter";
    }
    else if (auto5DF28FC5_val == 2) {
        return "HeroMalfurionTalentEntanglingRootsDangerousRoots@TokenCounter";
    }
    else if (auto5DF28FC5_val == 3) {
        return "HeroMalfurionTalentMoonfireHinderingMoonfire@TokenCounter";
    }
    else if (auto5DF28FC5_val == 4) {
        return "HeroSelendisTalentBladesofaZealot@TokenCounter";
    }
    else if (auto5DF28FC5_val == 5) {
        return "HeroSelendisTalentExecutorBladeExecutorPower@TokenCounter";
    }
    else {
        return "HeroTalandarTalentAccumulatedShieldShieldCapacitor@TokenCounter";
    }
}

void libUIUI_gf_MapMechanicsRavenCourtShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsRavenCourtSetModeForTeam (int lp_mode, int lp_teamThatWonTheCurse) {
    // Variable Declarations
    int lv_cursedTeam;

    // Automatic Variable Declarations
    int autoE00D42C1_val;
    int autoCDFC2B0D_val;

    // Variable Initialization

    // Implementation
    autoE00D42C1_val = lp_mode;
    if (autoE00D42C1_val == libUIUI_ge_MapMechanicsRavenCourtModes_NoActivity) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
    }
    else if (autoE00D42C1_val == libUIUI_ge_MapMechanicsRavenCourtModes_TributeSpawning) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel, StringExternal("Param/Value/lib_UIUI_1A50227B"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), true);
    }
    else if (autoE00D42C1_val == libUIUI_ge_MapMechanicsRavenCourtModes_TributeSpawned) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel, StringExternal("Param/Value/lib_UIUI_3A5592D2"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), true);
    }
    else if (autoE00D42C1_val == libUIUI_ge_MapMechanicsRavenCourtModes_Curse) {
        lv_cursedTeam = (3 - lp_teamThatWonTheCurse);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, "Storm_MapMechanic_MechanicTimerCentered_Blue", libGame_gv_teams[lp_teamThatWonTheCurse].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, "Storm_MapMechanic_MechanicTimerCentered_Red", libGame_gv_teams[lv_cursedTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("UI/MapMechanics/CursedHollow/TeamCursed"), libGame_gv_teams[lv_cursedTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("UI/MapMechanics/CursedHollow/EnemyTeamCursed"), libGame_gv_teams[lp_teamThatWonTheCurse].lv_teamPlayerGroupNoNPCPlayers);
        autoCDFC2B0D_val = lv_cursedTeam;
        if (autoCDFC2B0D_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("Param/Value/lib_UIUI_7994692E"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else if (autoCDFC2B0D_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("Param/Value/lib_UIUI_893889C3"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else {
        }
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsRavenCourtSetTributeCountForTeam (int lp_count, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
}

void libUIUI_gf_MapMechanicsRavenCourtSetRemainingCurseTimeForTeam (int lp_remainingSeconds, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsRavenCourtSetRemainingTributeSpawnTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsBlackheartsBayShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto7F6DAF98_val;

    // Implementation
    auto7F6DAF98_val = lp_mode;
    if (auto7F6DAF98_val == libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame, PlayerGroupAll(), true);
        libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons;
    }
    else if (auto7F6DAF98_val == libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), false);
        TimerPause(libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame, PlayerGroupAll(), true);
        libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon;
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsBlackheartsBayShowChestsSpawnedFrame () {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode != libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), true);
        TimerStart(libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer, libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimerDuration_C, false, c_timeGame);
    }

}

void libUIUI_gf_MapMechanicsBlackheartsBayShowCannonballForTeam (int lp_team) {
    // Variable Declarations
    int lv_itCannonball;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto504D77C3_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    const int auto504D77C3_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_team <= 0) || (lp_team > libCore_gv_bALMaxTeams))) {
        return ;
    }

    lv_enemyTeam = (3 - lp_team);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lv_enemyTeam], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lp_team], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    lv_itCannonball = 1;
    for ( ; ( (auto504D77C3_ai >= 0 && lv_itCannonball <= auto504D77C3_ae) || (auto504D77C3_ai < 0 && lv_itCannonball >= auto504D77C3_ae) ) ; lv_itCannonball += auto504D77C3_ai ) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallBlue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallRed", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallBlue", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallRed", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
    }
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetDoubloonCountForTeam (int lp_count, int lp_maxCount, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_A34101EA", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_A34101EA", "B", IntToText(lp_maxCount));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_A34101EA"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetShotCountForTeam (int lp_count, int lp_team) {
    // Variable Declarations
    int lv_itCannonball;

    // Automatic Variable Declarations
    const int autoDE847449_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    const int autoDE847449_ai = 1;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_DD5F74BB", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_DD5F74BB", "B", IntToText(libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_DD5F74BB"), PlayerGroupAll());
    lv_itCannonball = 1;
    for ( ; ( (autoDE847449_ai >= 0 && lv_itCannonball <= autoDE847449_ae) || (autoDE847449_ai < 0 && lv_itCannonball >= autoDE847449_ae) ) ; lv_itCannonball += autoDE847449_ai ) {
        if ((lp_count >= lv_itCannonball)) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], PlayerGroupAll(), false);
        }
    }
}

void libUIUI_gf_MapMechanicsHauntedMinesShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsHauntedMinesSetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto88BA1DCC_val;

    // Implementation
    auto88BA1DCC_val = lp_mode;
    if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_MinesTimer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_Skulls) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), true);
    }
    else if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_Golem) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsHauntedMinesSetRemainingMinesWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetSkullCountForTeam (int lp_count, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[lp_team], IntToText(lp_count), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetSkullsRemaining (int lp_count) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_820DF91D", "A", IntToText(lp_count));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_820DF91D"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam (unit lp_golemUnit, int lp_skullCount, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel, IntToText(lp_skullCount), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel, IntToText(lp_skullCount), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForObserver (unit lp_golemUnitTeamBlue, unit lp_golemUnitTeamRed, int lp_skullCountTeamBlue, int lp_skullCountTeamRed) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus, lp_golemUnitTeamBlue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus, lp_golemUnitTeamRed, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel, IntToText(lp_skullCountTeamBlue), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel, IntToText(lp_skullCountTeamRed), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
}

void libUIUI_gf_MapMechanicsDragonShireShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsDragonShireSetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto61B79793_val;

    // Implementation
    auto61B79793_val = lp_mode;
    if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_ShrineTimer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_Shrines) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), true);
    }
    else if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_Dragon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetRemainingShrineWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsDragonShireSetStarShrineOwner (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else {
        lv_enemyTeam = (3 - lp_team);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lv_enemyTeam], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetMoonShrineOwner (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else {
        lv_enemyTeam = (3 - lp_team);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lv_enemyTeam], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetRemainingDragonTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsDragonShireSetUpDragonForTeam (unit lp_dragonUnit, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus, lp_dragonUnit, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, "Storm_MapMechanic_MechanicCounterSmallLeft_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, StringExternal("UI/MapMechanics/Dragonshire/DragonKnight"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, StringExternal("UI/MapMechanics/Dragonshire/EnemyDragonKnight"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto2F14A2A1_ae = libCore_gv_bALMaxTeams;
    const int auto2F14A2A1_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "GardenOfTerrorPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SeedsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrame = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto2F14A2A1_ai >= 0 && lv_itTeam <= auto2F14A2A1_ae) || (auto2F14A2A1_ai < 0 && lv_itTeam >= auto2F14A2A1_ae) ) ; lv_itTeam += auto2F14A2A1_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "SeedBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "SeedRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "SeedCounter");
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabelFlashGold");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabelFlashRed");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabelFlashGold");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabelFlashRed");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterMediumLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterMediumRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TimeOfDayFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemStatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_ED1EDD0E"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemStatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_7D113FCF"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideNightWarning (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetNightWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemSummonPossibleForTeam (int lp_team, bool lp_summonPossible) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible[lp_team] = lp_summonPossible;
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (text lp_countText, int lp_team, bool lp_golemSummonPossible) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_golemSummonPossible == true)) {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        else {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
    }
    else {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Disabled", PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Disabled", PlayerGroupAll());
        }
    }
    libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam(lp_team, lp_golemSummonPossible);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], lp_countText, PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam (int lp_team, bool lp_golemSummonPossible) {
    // Automatic Variable Declarations
    int auto7BB64B15_val;

    // Implementation
    auto7BB64B15_val = libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus[lp_team];
    if (auto7BB64B15_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Golem_Growing", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Golem_Growing", PlayerGroupAll());
        return ;
    }
    else if (auto7BB64B15_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Golem_Ready", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Golem_Ready", PlayerGroupAll());
        return ;
    }
    else {
    }
    if ((lp_golemSummonPossible == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Seed_Open", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Seed_Open", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Seed_Closed", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Seed_Closed", PlayerGroupAll());
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideGolemFrame (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetUpGolemStatusBarForTeam (unit lp_golemUnit, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto341CE353_val;
    int autoCB91FB17_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((UnitIsAlive(lp_golemUnit) == true)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        autoCB91FB17_val = lp_team;
        if (autoCB91FB17_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, lp_golemUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else if (autoCB91FB17_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, lp_golemUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else {
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        auto341CE353_val = lp_team;
        if (auto341CE353_val == libGame_gv_teamOrderIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else if (auto341CE353_val == libGame_gv_teamChaosIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else {
        }
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemRemainingTimeForTeam (int lp_team, int lp_remainingTime) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto7583335C_val;
    int autoADF0E974_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_remainingTime > 0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        autoADF0E974_val = lp_team;
        if (autoADF0E974_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else if (autoADF0E974_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else {
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        auto7583335C_val = lp_team;
        if (auto7583335C_val == libGame_gv_teamOrderIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else if (auto7583335C_val == libGame_gv_teamChaosIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else {
        }
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemGrowTimeForTeam (int lp_team, int lp_remainingTime) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_remainingTime > 0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemStatusTextForTeam (int lp_team, int lp_status) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int autoDDBF81C0_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    autoDDBF81C0_val = lp_status;
    if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringToText(""), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringToText(""), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_15F600E1"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_5C0AA065"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_224BB1DA"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_85A746C8"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_DF8A73F2"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_2CFBAC22"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_68E79991"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_4F70E363"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameStatusTextForTeam (int lp_team, int lp_status) {
    // Automatic Variable Declarations
    int auto62734E53_val;

    // Implementation
    libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus[lp_team] = lp_status;
    auto62734E53_val = lp_status;
    if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), false);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], StringExternal("Param/Value/lib_UIUI_8E8B516A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], StringExternal("Param/Value/lib_UIUI_1F207391"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], StringExternal("Param/Value/lib_UIUI_A4731006"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), true);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], StringExternal("Param/Value/lib_UIUI_66D64EAA"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], StringExternal("Param/Value/lib_UIUI_1D28BE3A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], StringExternal("Param/Value/lib_UIUI_F8344D7A"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), true);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), false);
    }
    else {
    }
    libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam(lp_team, libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible[lp_team]);
}

trigger auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger = null;
int auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team;
bool auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash;
int auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level;

void libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText (int lp_team, bool lp_flash, int lp_level) {
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team = lp_team;
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash = lp_flash;
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level = lp_level;

    if (auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger == null) {
        auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger = TriggerCreate("auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger, false, false);
}

bool auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team;
    bool lp_flash = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash;
    int lp_level = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level;

    // Variable Declarations
    int lv_localFlashLevel;

    // Automatic Variable Declarations
    int autoE6F84108_val;
    int auto4215CB88_val;

    // Variable Initialization

    // Implementation
    if ((lp_flash == false)) {
        if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] == 0)) {
            return true;
        }

        libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] = 0;
    }
    else {
        if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] == lp_level)) {
            return true;
        }

        libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] = lp_level;
    }
    if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] > 0)) {
        lv_localFlashLevel = libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team];
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        autoE6F84108_val = lv_localFlashLevel;
        if (autoE6F84108_val == 1) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        }
        else if (autoE6F84108_val == 2) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        }
        else {
        }
        while (true) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            auto4215CB88_val = lv_localFlashLevel;
            if (auto4215CB88_val == 1) {
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            }
            else if (auto4215CB88_val == 2) {
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            }
            else {
            }
            Wait(0.5, c_timeGame);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            Wait(0.6, c_timeGame);
            if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] != lv_localFlashLevel)) {
                return true;
            }

        }
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
    }
    return true;
}

void libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer (int lp_player, text lp_titleText, text lp_numberText) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel, lp_titleText, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel, lp_numberText, libCore_gv_playerGroupFromPlayer[lp_player]);
}

int libUIUI_gf_UIPartyFrameHeroTypeofHero (unit lp_hero) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = "";

    // Implementation
    lv_unitType = (UnitGetType(lp_hero));
    if (((lv_unitType == "HeroLostVikingsController") || (lv_unitType == "HeroOlaf") || (lv_unitType == "HeroErik") || (lv_unitType == "HeroBaleog"))) {
        return libUIUI_ge_UIPartyFrameHeroType_LostVikings;
    }
    else if ((lv_unitType == "HeroRexxar")) {
        return libUIUI_ge_UIPartyFrameHeroType_PetHero;
    }
    return libUIUI_ge_UIPartyFrameHeroType_NormalHero;
}

int libUIUI_gf_UIPartyFrameUIIndexofHeroUnit (unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    int auto8B15F3D1_val;

    // Variable Initialization
    lv_unitType = "";

    // Implementation
    auto8B15F3D1_val = libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_heroUnit);
    if (auto8B15F3D1_val == libUIUI_ge_UIPartyFrameHeroType_PetHero) {
        if ((lp_heroUnit == libGame_gv_players[lp_player].lv_heroUnit)) {
            return libUIUI_gv_uIPartyFrameHeroSlot_C;
        }
        else {
            return libUIUI_gv_uIPartyFrameHeroPetSlot_C;
        }
    }
    else if (auto8B15F3D1_val == libUIUI_ge_UIPartyFrameHeroType_LostVikings) {
        lv_unitType = (UnitGetType(lp_heroUnit));
        if ((lv_unitType == "HeroOlaf")) {
            return libUIUI_gv_uIPartyFrameHeroSlotA_C;
        }
        else if ((lv_unitType == "HeroErik")) {
            return libUIUI_gv_uIPartyFrameHeroSlotB_C;
        }
        else if ((lv_unitType == "HeroBaleog")) {
            return libUIUI_gv_uIPartyFrameHeroSlotC_C;
        }
    }
    else {
    }
    return libUIUI_gv_uIPartyFrameHeroSlot_C;
}

int libUIUI_gf_UIPartyFrameGetHeroResourceTypeForPartyFrame (string lp_heroUnitType) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = (lp_heroUnitType);

    // Implementation
    if (((lp_heroUnitType == "HeroChen") || (lp_heroUnitType == "HeroAuriel") || (lp_heroUnitType == "HeroValeera") || (lp_heroUnitType == "HeroMedic"))) {
        return libUIUI_ge_UIHeroResourceType_Yellow;
    }
    else if (((lp_heroUnitType == "HeroTalandar") || (lp_heroUnitType == "HeroKatarina") || (lp_heroUnitType == "HeroBarbarian"))) {
        return libUIUI_ge_UIHeroResourceType_Orange;
    }
    else if ((((lp_heroUnitType) == "HeroDVaPilot") || ((lp_heroUnitType) == "HeroDVaMech") || ((lp_heroUnitType) == "HeroZarya"))) {
        return libUIUI_ge_UIHeroResourceType_Pink;
    }
    else if (((lp_heroUnitType) == "HeroProbius")) {
        return libUIUI_ge_UIHeroResourceType_Blinking;
    }
    else if ((((lp_heroUnitType) == "HeroTracer") || ((lp_heroUnitType) == "HeroIllidan") || ((lp_heroUnitType) == "HeroJunkrat") || ((lp_heroUnitType) == "HeroMurky") || ((lp_heroUnitType) == "HeroCho") || ((lp_heroUnitType) == "HeroGall") || ((lp_heroUnitType) == "HeroSamuro") || (lp_heroUnitType == "HeroAbathur"))) {
        return libUIUI_ge_UIHeroResourceType_None;
    }
    else if ((((lp_heroUnitType) == "HeroFenix"))) {
        return libUIUI_ge_UIHeroResourceType_NoShields;
    }
    return libUIUI_ge_UIHeroResourceType_Blue;
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_hero) == "HeroTracer")) {
        return true;
    }
    else {
        return false;
    }
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroUsesPairedRespawnTimer (unit lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_heroUnit) == UnitTypeFromString("HeroGall"))) {
        return true;
    }
    else {
        return false;
    }
}

timer libUIUI_gf_UIPartyFrameSpecialCaseHeroPairedRespawnTimer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_heroRosterSlotIndex;
    int lv_playerTeam;

    // Automatic Variable Declarations
    const int auto36EE0D09_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto36EE0D09_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_heroIndex = 1;
    for ( ; ( (auto36EE0D09_ai >= 0 && lv_heroIndex <= auto36EE0D09_ae) || (auto36EE0D09_ai < 0 && lv_heroIndex >= auto36EE0D09_ae) ) ; lv_heroIndex += auto36EE0D09_ai ) {
        lv_heroRosterSlotIndex = ((lv_playerTeam-1)*libCore_gv_bALMaxPlayersOnATeam+lv_heroIndex);
        if ((UnitGetType(libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_heroRosterSlotIndex][libUIUI_gv_uIPartyFrameHeroSlot_C]) == "HeroCho")) {
            return libGame_gv_players[libGame_gf_GetPlayerNumberFromRosterSlot(lv_heroRosterSlotIndex)].lv_respawnTimer;
        }

    }
    return null;
}

timer libUIUI_gf_UIPartyFrameDeathTimer (int lp_player, unit lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroUsesPairedRespawnTimer(lp_heroUnit) == true)) {
        return libUIUI_gf_UIPartyFrameSpecialCaseHeroPairedRespawnTimer(lp_player);
    }

    return libGame_gv_players[lp_player].lv_respawnTimer;
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasExtendedDeath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasCondensedDeath (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroTalentLevelsAreDifferent (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_hero) == "HeroChromie")) {
        return true;
    }
    else {
        return false;
    }
}

bool libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicCoolup (string lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_hero == "HeroTracer")) {
        return true;
    }
    else {
        return false;
    }
}

fixed libUIUI_gf_UIPartyFrameAbilityCooldownTime (unit lp_unit, string lp_ability, int lp_player) {
    // Variable Declarations
    fixed lv_cooldownTime;
    string lv_cooldownLink;
    string lv_chargeLink;
    fixed lv_chargesUsed;
    int lv_chargesMax;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Cooldown.Link", lp_player);
    lv_chargesMax = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.CountMax", lp_player);
    if ((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Cooldown.Location", lp_player) == "Unit")) {
        if ((lv_chargesMax > 0)) {
            lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.Link", lp_player);
            lv_chargesUsed = UnitGetChargeUsed(lp_unit, lv_chargeLink);
            if ((lv_chargesUsed >= IntToFixed(lv_chargesMax))) {
                lv_cooldownTime = UnitGetChargeRegen(lp_unit, lv_chargeLink);
            }
            else {
                lv_cooldownTime = UnitGetCooldown(lp_unit, lv_cooldownLink);
            }
        }
        else {
            lv_cooldownTime = UnitGetCooldown(lp_unit, lv_cooldownLink);
        }
    }
    else if ((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Cooldown.Location", lp_player) == "Player")) {
        if ((lv_chargesMax > 0)) {
            lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.Link", lp_player);
            lv_chargesUsed = PlayerGetChargeUsed(lp_player, "lv_chargeLink");
            if ((lv_chargesUsed >= IntToFixed(lv_chargesMax))) {
                lv_cooldownTime = PlayerGetChargeRegen(lp_player, "lv_chargeLink");
            }
            else {
                lv_cooldownTime = PlayerGetCooldown(lp_player, "lv_cooldownLink");
            }
        }
        else {
            lv_cooldownTime = PlayerGetCooldown(lp_player, "lv_cooldownLink");
        }
    }
    return lv_cooldownTime;
}

void libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIPartyFrameShowHideHeroicAbility (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentPanel[libGame_gv_players[lp_player].lv_rosterSlot], PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_UIPartyFrameHeroicTalentUpdate (int lp_player, int lp_talentTierIndex) {
    // Variable Declarations
    int lv_abilityIndex;
    string lv_buttonEntry;
    int lv_rosterSlot;
    int lv_heroIndex;
    string lv_talentIcon;
    int lv_itAbilityIndex;
    int lv_heroicTalentIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_heroicTalentIndex = libGame_gv_talentChoices[lp_player][libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier].lv_choosedTalentIndex;
    if (((lp_talentTierIndex != libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier) || (lv_heroicTalentIndex == 0))) {
        return ;
    }

    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_talentIcon = libCore_gv_talentData[lv_heroicTalentIndex].lv_buttonIcon;
    libUIUI_gf_UIPartyFrameHeroicTalentIconSet(lv_talentIcon, lp_player);
    if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart(libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C]) == false)) {
        lv_abilityIndex = libCore_gv_talentData[lv_heroicTalentIndex].lv_abilityIndex;
        libUIUI_gf_UIPartyFrameHeroicAbilitySet(libCore_gv_abilityData[lv_abilityIndex].lv_abilityLink, lp_player);
    }

    if ((libGame_gv_players[lp_player].lv_isDead == false)) {
        libUIUI_gf_UIPartyFrameShowHideHeroicAbility(true, lp_player);
    }

}

void libUIUI_gf_UIPartyFrameAddPlayerToPartyFrame (int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_partyFrameHeroUnitIndex;
    unit lv_heroUnit;
    unit lv_unitIndex;
    int lv_heroIndex;

    // Automatic Variable Declarations
    int auto51F2EF22_val;
    int auto4BC3C4DB_val;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    libUIUI_gv_uIPartyFrame.lv_teamHasHeroes[libGame_gf_TeamNumberOfPlayer(lp_player)] = true;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    auto51F2EF22_val = libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_heroUnit);
    if (auto51F2EF22_val == libUIUI_ge_UIPartyFrameHeroType_NormalHero) {
        libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C] = libGame_gv_players[lp_player].lv_heroUnit;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_partyFrameImage, PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButton[lv_rosterSlot], libGame_gv_players[lp_player].lv_heroUnit, PlayerGroupAll());
        auto4BC3C4DB_val = libUIUI_gf_UIPartyFrameGetHeroResourceTypeForPartyFrame(UnitGetType(lv_heroUnit));
        if (auto4BC3C4DB_val == libUIUI_ge_UIHeroResourceType_None) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto4BC3C4DB_val == libUIUI_ge_UIHeroResourceType_Blue) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto4BC3C4DB_val == libUIUI_ge_UIHeroResourceType_Blinking) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto4BC3C4DB_val == libUIUI_ge_UIHeroResourceType_Orange) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto4BC3C4DB_val == libUIUI_ge_UIHeroResourceType_Yellow) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto4BC3C4DB_val == libUIUI_ge_UIHeroResourceType_Pink) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else if (auto4BC3C4DB_val == libUIUI_ge_UIHeroResourceType_NoShields) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_BB8E7863"), true);
        }
        if ((UnitGetType(lv_heroUnit) == "HeroLeoric")) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
        }

    }
    else if (auto51F2EF22_val == libUIUI_ge_UIPartyFrameHeroType_PetHero) {
        libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C] = lv_heroUnit;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_partyFrameImage, PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], lv_heroUnit, PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPetOwner[lv_rosterSlot], lv_heroUnit, PlayerGroupAll());
    }
    else if (auto51F2EF22_val == libUIUI_ge_UIPartyFrameHeroType_LostVikings) {
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), true);
    libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup(true, lp_player, libGame_gf_AlliedPlayerGroupOfPlayer(lp_player));
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotA_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotB_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotC_C], PlayerGroupAll(), false);
    libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate(lp_player);
}

void libUIUI_gf_UIPartyFrameHeroicAbilitySet (string lp_heroicAbility, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_uIPartyFrame.lv_heroHeroicAbility[libGame_gv_players[lp_player].lv_rosterSlot] = lp_heroicAbility;
}

void libUIUI_gf_UIPartyFrameHeroicTalentIconSet (string lp_icon, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroHeroicIcon[libGame_gv_players[lp_player].lv_rosterSlot], lp_icon, PlayerGroupAll());
}

void libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate (int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_itAbilityIndex;
    int lv_abilityIndex;
    string lv_abilityButtonEntry;
    unit lv_heroUnit;
    int lv_heroIndex;

    // Automatic Variable Declarations
    int auto9026E16B_ae;
    const int auto9026E16B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    libUIUI_gv_uIPartyFrame.lv_teamHasHeroes[libGame_gf_TeamNumberOfPlayer(lp_player)] = true;
    libUIUI_gf_UIPartyFrameHeroicAbilitySet(null, lp_player);
    libUIUI_gv_uIPartyFrame.lv_heroDeathInSpecialDeathState[lv_rosterSlot] = false;
    if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart(lv_heroUnit) == true)) {
        auto9026E16B_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
        lv_itAbilityIndex = 1;
        for ( ; ( (auto9026E16B_ai >= 0 && lv_itAbilityIndex <= auto9026E16B_ae) || (auto9026E16B_ai < 0 && lv_itAbilityIndex >= auto9026E16B_ae) ) ; lv_itAbilityIndex += auto9026E16B_ai ) {
            lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbilityIndex];
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Heroic")) {
                lv_abilityButtonEntry = libCore_gv_abilityData[lv_abilityIndex].lv_abilityButtonLink;
                libUIUI_gf_UIPartyFrameHeroicTalentIconSet(libCore_gv_abilityData[lv_abilityIndex].lv_abilityIcon, lp_player);
                libUIUI_gf_UIPartyFrameHeroicAbilitySet(libCore_gv_abilityData[lv_abilityIndex].lv_abilityLink, lp_player);
                libUIUI_gf_UIPartyFrameShowHideHeroicAbility(true, lp_player);
                break;
            }

        }
    }
    else if ((libGame_gv_talentChoices[lp_player][libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier].lv_choosedTalentIndex > 0) && (libGame_gv_talentChoices[lp_player][libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier].lv_choosedTalentIndex > 0)) {
        libUIUI_gf_UIPartyFrameHeroicTalentUpdate(lp_player, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier);
    }
    else if (true) {
        libUIUI_gf_UIPartyFrameShowHideHeroicAbility(false, lp_player);
    }
}

void libUIUI_gf_UIPartyFrameShowHidePlayerForPartyFrame (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPanels[libGame_gv_players[lp_player].lv_rosterSlot], PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup (bool lp_showHide, int lp_player, playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    int autoCB4200B8_val;
    int autoB691EB65_val;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsSeparateShields[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_rosterSlot], lp_playerGroup, false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_rosterSlot], lp_playerGroup, false);
    }

    autoCB4200B8_val = libUIUI_gf_UIPartyFrameHeroTypeofHero(libGame_gv_players[lp_player].lv_heroUnit);
    if (autoCB4200B8_val == libUIUI_ge_UIPartyFrameHeroType_NormalHero) {
        autoB691EB65_val = libUIUI_gf_UIPartyFrameGetHeroResourceTypeForPartyFrame(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit));
        if (autoB691EB65_val == libUIUI_ge_UIHeroResourceType_Blue) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (autoB691EB65_val == libUIUI_ge_UIHeroResourceType_Blinking) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (autoB691EB65_val == libUIUI_ge_UIHeroResourceType_Orange) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (autoB691EB65_val == libUIUI_ge_UIHeroResourceType_Yellow) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (autoB691EB65_val == libUIUI_ge_UIHeroResourceType_Pink) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (autoB691EB65_val == libUIUI_ge_UIHeroResourceType_None) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else if (autoB691EB65_val == libUIUI_ge_UIHeroResourceType_NoShields) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsSeparateShields[lv_rosterSlot], lp_playerGroup, lp_showHide);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_885E5C69"), true);
        }
    }
    else if (autoCB4200B8_val == libUIUI_ge_UIPartyFrameHeroType_PetHero) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_rosterSlot], lp_playerGroup, lp_showHide);
    }
    else if (autoCB4200B8_val == libUIUI_ge_UIPartyFrameHeroType_LostVikings) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_rosterSlot], lp_playerGroup, lp_showHide);
    }
    else {
    }
}

void libUIUI_gf_UIPartyFrameShowHideCoreHealth (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_coreHealthLabel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_UIPartyFrameShowHideCoreUnderAttackWarning (int lp_teamNumber, bool lp_showHide) {
    // Variable Declarations
    playergroup lv_warningGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_warningGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[lp_teamNumber].lv_teamPlayerGroup, lv_warningGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lv_warningGroup);
    if ((lp_showHide == true)) {
        DialogControlSetAnimationState(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lp_teamNumber], lv_warningGroup, "CoreWarning", "WarningOn");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lp_teamNumber], lv_warningGroup, "CoreWarning", "WarningOff");
    }
}

void libUIUI_gf_UIPartyFrameShowHideTeamPanelforPlayerGroup (int lp_teamNumber, bool lp_showHide, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_teamNumber > libCore_gv_bALMaxTeams) && (lp_teamNumber <= 0)) {
        return ;
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamHeroPanel[lp_teamNumber], lp_playerGroup, lp_showHide);
    }
}

void libUIUI_gf_UIPartyFrameShowHideLevelInfoPanelforPlayerGroup (int lp_teamNumber, bool lp_showHide, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_teamNumber > libCore_gv_bALMaxTeams) && (lp_teamNumber <= 0)) {
        return ;
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[lp_teamNumber], lp_playerGroup, lp_showHide);
    }
}

void libUIUI_gf_UIPartyFrameSendAnimationEventtoPartyFrameMainPanel (string lp_animationEvent, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_mainPanel, lp_playerGroup, lp_animationEvent);
}

void libUIUI_gf_UIPartyFrameSendAnimationEventtoPartyFrameHeroPanelforPlayer (string lp_animationEvent, int lp_player, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[libGame_gv_players[lp_player].lv_rosterSlot], lp_playerGroup, lp_animationEvent);
}

void libUIUI_gf_UIPartyFrameHeroDies (int lp_killedPlayer, unit lp_killedUnit) {
    // Variable Declarations
    int lv_rosterSlot;
    timer lv_deathTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deathTimer = TimerCreate();

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_killedPlayer].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_killedUnit, lp_killedPlayer)] = false;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_killedUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_killedUnit, lp_killedPlayer)], StringToText(""), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_killedUnit, lp_killedPlayer)], PlayerGroupAll(), true);
    }
    else {
        if ((UnitBehaviorDurationTotal(lp_killedUnit, "Dead") > 0.0)) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[lv_rosterSlot], PlayerGroupAll(), true);
            lv_deathTimer = libUIUI_gf_UIPartyFrameDeathTimer(lp_killedPlayer, lp_killedUnit);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], FixedToText(TimerGetRemaining(lv_deathTimer), 0), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], StringToText(""), PlayerGroupAll());
        }
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], PlayerGroupAll(), true);
        libUIUI_gf_UIPartyFrameShowHideHeroicAbility(false, lp_killedPlayer);
        libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup(false, lp_killedPlayer, libGame_gf_AlliedPlayerGroupOfPlayer(lp_killedPlayer));
        if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasExtendedDeath(lp_killedPlayer) == true)) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroExtendedDeathIcon[lv_rosterSlot], PlayerGroupAll(), true);
        }

        if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasCondensedDeath(lp_killedUnit) == true)) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroCondensedDeathIcon[lv_rosterSlot], PlayerGroupAll(), true);
        }

        if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_killedUnit) == libUIUI_ge_UIPartyFrameHeroType_PetHero)) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], PlayerGroupAll(), false);
        }

        if ((UnitGetType(lp_killedUnit) == "HeroLeoric")) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[lv_rosterSlot], PlayerGroupAll(), true);
        }

    }
}

void libUIUI_gf_UIPartyFrameSetUpCoreHealthBarforTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_teams[lp_team].lv_core != null)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lp_team], libGame_gv_teams[lp_team].lv_core, PlayerGroupAll());
    }

}

void libUIUI_gf_UIPartyFrameTalentAdvantageUpdate () {
    // Variable Declarations
    int[libCore_gv_bALMaxTeams + 1] lv_teamPlayer;
    int[libCore_gv_bALMaxTeams + 1] lv_teamCurrentTalentTier;
    int lv_teamIndex;
    int lv_playerIndex;
    bool lv_allHeroesAreSpecialCase;

    // Automatic Variable Declarations
    const int auto7429C6E4_ae = libCore_gv_bALMaxTeams;
    const int auto7429C6E4_ai = 1;
    playergroup autoAECE9137_g;

    // Variable Initialization
    lv_allHeroesAreSpecialCase = true;

    // Implementation
    if (((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, true)) <= 1) || (PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true)) <= 1))) {
        return ;
    }

    lv_teamIndex = 1;
    for ( ; ( (auto7429C6E4_ai >= 0 && lv_teamIndex <= auto7429C6E4_ae) || (auto7429C6E4_ai < 0 && lv_teamIndex >= auto7429C6E4_ae) ) ; lv_teamIndex += auto7429C6E4_ai ) {
        lv_allHeroesAreSpecialCase = true;
        autoAECE9137_g = libGame_gf_PlayersOnTeamHeroes(lv_teamIndex, false);
        lv_playerIndex = -1;
        while (true) {
            lv_playerIndex = PlayerGroupNextPlayer(autoAECE9137_g, lv_playerIndex);
            if (lv_playerIndex < 0) { break; }
            if ((libGame_gv_players[lv_playerIndex].lv_playerStatus == libGame_ge_PlayerStatusCore_Playing) && (libUIUI_gf_UIPartyFrameSpecialCaseHeroTalentLevelsAreDifferent(libGame_gv_players[lv_playerIndex].lv_heroUnit) == false)) {
                lv_allHeroesAreSpecialCase = false;
                lv_teamPlayer[lv_teamIndex] = lv_playerIndex;
                break;
            }

        }
        if ((lv_allHeroesAreSpecialCase == true)) {
            lv_teamPlayer[lv_teamIndex] = libGame_gf_GetPlayerIDfromTeamSlot(1, lv_teamIndex);
        }

        lv_teamCurrentTalentTier[lv_teamIndex] = libGame_gf_TalentChoicesGetCurrentTierOfPlayer(lv_playerIndex);
        libUIUI_gv_teamXPPartyFrameTeamTalentTier[lv_teamIndex] = lv_teamCurrentTalentTier[lv_teamIndex];
    }
    if (((lv_teamCurrentTalentTier[libGame_gv_teamOrderIndex_C] == lv_teamCurrentTalentTier[libGame_gv_teamChaosIndex_C]) || (libUIUI_gv_uIPartyFrame.lv_teamHasHeroes[libGame_gv_teamOrderIndex_C] == false) || (libUIUI_gv_uIPartyFrame.lv_teamHasHeroes[libGame_gv_teamChaosIndex_C] == false))) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else if ((lv_teamCurrentTalentTier[libGame_gv_teamOrderIndex_C] > lv_teamCurrentTalentTier[libGame_gv_teamChaosIndex_C])) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else if ((lv_teamCurrentTalentTier[libGame_gv_teamOrderIndex_C] < lv_teamCurrentTalentTier[libGame_gv_teamChaosIndex_C])) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
    }
}

void libUIUI_gf_UIPartyFrameTeamLevelUpdate (int lp_team, int lp_level) {
    // Variable Declarations
    int lv_playerIndex;
    bool lv_allHeroesSpecialCase;
    int lv_alliedTeamPlayer;
    int lv_talentTierIndex;
    bool lv_nextIsNewTalentTier;

    // Automatic Variable Declarations
    playergroup auto557EDA1D_g;
    const int auto366976A4_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto366976A4_ai = 1;

    // Variable Initialization
    lv_allHeroesSpecialCase = true;

    // Implementation
    libUIUI_gf_UIPartyFrameTalentAdvantageUpdate();
    if ((lp_level > libUIUI_gv_uIPartyFrameMaxLevelForTeam[lp_team])) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_teamLevelLabel[lp_team], IntToText(lp_level), PlayerGroupAll());
        libUIUI_gv_uIPartyFrameMaxLevelForTeam[lp_team] = lp_level;
    }

    if ((lp_level > 1)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[lp_team], PlayerGroupAll(), "LevelUp");
    }

    auto557EDA1D_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto557EDA1D_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        if ((libGame_gv_players[lv_playerIndex].lv_playerStatus == libGame_ge_PlayerStatusCore_Playing) && (libUIUI_gf_UIPartyFrameSpecialCaseHeroTalentLevelsAreDifferent(libGame_gv_players[lv_playerIndex].lv_heroUnit) == false)) {
            lv_allHeroesSpecialCase = false;
            lv_alliedTeamPlayer = lv_playerIndex;
            break;
        }

    }
    if ((lv_allHeroesSpecialCase == true)) {
        lv_alliedTeamPlayer = libGame_gf_GetPlayerIDfromTeamSlot(1, lp_team);
    }

    lv_talentTierIndex = 1;
    for ( ; ( (auto366976A4_ai >= 0 && lv_talentTierIndex <= auto366976A4_ae) || (auto366976A4_ai < 0 && lv_talentTierIndex >= auto366976A4_ae) ) ; lv_talentTierIndex += auto366976A4_ai ) {
        if ((lp_level == (libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_alliedTeamPlayer].lv_heroIndex].lv_talentTierLevel[lv_talentTierIndex] - 1))) {
            lv_nextIsNewTalentTier = true;
            break;
        }

    }
    if ((lv_nextIsNewTalentTier == true)) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamNextLevelTalentIcon[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamNextLevelNoTalentIcon[lp_team], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamNextLevelTalentIcon[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamNextLevelNoTalentIcon[lp_team], PlayerGroupAll(), true);
    }
}

void libUIUI_gf_UIPartyFrameSetPetFrame (unit lp_petUnit, int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C] = lp_petUnit;
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C], "assets\\Textures\\storm_ui_ingame_partyframe_rexxar_misha.dds", PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C], lp_petUnit, PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPet[lv_rosterSlot], lp_petUnit, PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButton[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPet[lv_rosterSlot], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPetOwner[lv_rosterSlot], PlayerGroupAll(), true);
}

void libUIUI_gf_UIPartyFrameSetVikingFrame (int lp_player, unit lp_vikingUnit) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_uIVikingIndex;

    // Automatic Variable Declarations
    string auto6AC871F1_val;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_uIVikingIndex = libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_vikingUnit, lp_player);
    auto6AC871F1_val = UnitGetType(lp_vikingUnit);
    if (auto6AC871F1_val == "HeroOlaf") {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotA_C], "assets\\Textures\\storm_ui_ingame_partyframe_lostvikings_olaf.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonA[lv_rosterSlot], lp_vikingUnit, PlayerGroupAll());
    }
    else if (auto6AC871F1_val == "HeroBaleog") {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotB_C], "assets\\Textures\\storm_ui_ingame_partyframe_lostvikings_baelog.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonB[lv_rosterSlot], lp_vikingUnit, PlayerGroupAll());
    }
    else if (auto6AC871F1_val == "HeroErik") {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlotC_C], "assets\\Textures\\storm_ui_ingame_partyframe_lostvikings_eric.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonC[lv_rosterSlot], lp_vikingUnit, PlayerGroupAll());
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][lv_uIVikingIndex], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[lv_rosterSlot][lv_uIVikingIndex], lp_vikingUnit, PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButton[lv_rosterSlot], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonA[lv_rosterSlot], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonB[lv_rosterSlot], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroPartyButtonC[lv_rosterSlot], PlayerGroupAll(), true);
}

void libUIUI_gf_UIPartyFrameSetDVaFrame (int lp_playerID, bool lp_inMech) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_playerID].lv_rosterSlot;
    if ((lp_inMech == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], "assets\\Textures\\storm_ui_ingame_partyframe_dva_mech.dds", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C], "assets\\Textures\\storm_ui_ingame_partyframe_dva.dds", PlayerGroupAll());
    }
}

void libUIUI_gf_UIPartyFramePetDies (int lp_player, timer lp_petDeathTimer) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lv_rosterSlot] = lp_petDeathTimer;
    if ((libGame_gv_players[lp_player].lv_isDead == false)) {
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], StringToText(""), PlayerGroupAll());
    }

}

void libUIUI_gf_UIPartyFrameVikingDies (int lp_player, unit lp_viking, timer lp_deathTimer) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_vikingIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libUIUI_gf_UIPartyFrameHeroDies(lp_player, lp_viking);
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_vikingIndex = libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_viking, lp_player);
    libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lv_rosterSlot][lv_vikingIndex] = lp_deathTimer;
}

void libUIUI_gf_UIPartyFrameHeroHearthstoneStart (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_unit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), ("HearthstoneStartHero" + IntToString(libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_unit, lp_player))));
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), "HearthstoneStartDefault");
    }
}

void libUIUI_gf_UIPartyFrameHeroHearthstoneFizzle (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_unit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), ("HearthstoneFizzleHero" + IntToString(libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_unit, lp_player))));
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lp_player), "HearthstoneFizzleDefault");
    }
}

void libUIUI_gf_UIPartyFrameSpecialCaseAurielRevivesHero (int lp_revivedPlayer, unit lp_revivedUnit) {
    // Variable Declarations
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_revivedPlayer].lv_rosterSlot;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lp_revivedUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), ("AurielReviveHero" + IntToString(libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lp_revivedUnit, lp_revivedPlayer))));
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), "AurielReviveDefault");
    }
}

void libUIUI_gf_UIPartyFrameGameTimerUpdate (text lp_gameTimeText) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_gameTimerLabel, lp_gameTimeText, PlayerGroupAll());
}

void libUIUI_gf_UIPartyFrameHeroicTalentCooldownUpdate () {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_playerUnit;
    string lv_heroicAbilityLink;
    fixed lv_abilityCooldownTime;
    int lv_playerRosterSlot;
    fixed lv_heroicCoolupCharges;
    fixed lv_heroicCoolupChargesMax;

    // Automatic Variable Declarations
    playergroup autoD9D0DA29_g;

    // Variable Initialization

    // Implementation
    autoD9D0DA29_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(autoD9D0DA29_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        lv_playerRosterSlot = libGame_gv_players[lv_playerIndex].lv_rosterSlot;
        if ((libGame_gv_players[lv_playerIndex].lv_playerStatus == libGame_ge_PlayerStatusCore_Playing) && (libUIUI_gv_uIPartyFrame.lv_heroHeroicAbility[lv_playerRosterSlot] != null)) {
            lv_heroicAbilityLink = libUIUI_gv_uIPartyFrame.lv_heroHeroicAbility[lv_playerRosterSlot];
            lv_playerUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_playerRosterSlot][libUIUI_gv_uIPartyFrameHeroSlot_C];
            if ((libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicCoolup(UnitGetType(lv_playerUnit)) == true)) {
                lv_heroicCoolupCharges = UnitGetChargeUsed(lv_playerUnit, CatalogFieldValueGet(c_gameCatalogAbil, lv_heroicAbilityLink, "Cost[" + IntToString(0) + "].Charge.Link", lv_playerIndex));
                lv_heroicCoolupChargesMax = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_heroicAbilityLink, "Cost[" + IntToString(0) + "].Charge.CountMax", lv_playerIndex));
                lv_heroicCoolupCharges = (lv_heroicCoolupChargesMax - lv_heroicCoolupCharges);
                if ((lv_heroicCoolupCharges < lv_heroicCoolupChargesMax)) {
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), true);
                    libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], StringToText(""), libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex));
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), false);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), true);
                    if ((lv_heroicCoolupChargesMax == 0.0)) {
                        libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_playerRosterSlot], 0.0, libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex));
                    }
                    else {
                        libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_playerRosterSlot], (100*(lv_heroicCoolupCharges/lv_heroicCoolupChargesMax)), libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex));
                    }
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), false);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), true);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), false);
                }
            }
            else {
                lv_abilityCooldownTime = libUIUI_gf_UIPartyFrameAbilityCooldownTime(lv_playerUnit, lv_heroicAbilityLink, UnitGetOwner(lv_playerUnit));
                if ((lv_abilityCooldownTime > 0.0)) {
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), true);
                    libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], FixedToText(lv_abilityCooldownTime, 0), libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex));
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), false);
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), false);
                    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_playerRosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_playerIndex), true);
                }
            }
        }

    }
}

void libUIUI_gf_UIPartyFrameSpecialCaseUpdatePetDeath (int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_petUISlot;
    unit lv_petUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_petUnit = libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][libUIUI_gv_uIPartyFrameHeroPetSlot_C];
    lv_petUISlot = libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_petUnit, lp_player);
    if ((UnitIsAlive(lv_petUnit) == false)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_rosterSlot], FixedToText(TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lv_rosterSlot]), 0), PlayerGroupAll());
        if ((TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroPetDeathTimer[lv_rosterSlot]) <= libUIUI_gv_dataXPPercentageUpdatePeriod_C3) && (libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][lv_petUISlot] == false)) {
            libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][lv_petUISlot] = true;
            DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), "HeroAlmostRespawnedPet");
        }

    }

}

void libUIUI_gf_UIPartyFrameSpecialCaseUpdateVikingsDeath (int lp_player) {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto859AEB68_ae = libCore_gv_dataHeroesMaxAlternateHeroes;
    const int auto859AEB68_ai = 1;

    // Variable Initialization

    // Implementation
    lv_rosterSlot = libGame_gv_players[lp_player].lv_rosterSlot;
    lv_heroIndex = 1;
    for ( ; ( (auto859AEB68_ai >= 0 && lv_heroIndex <= auto859AEB68_ae) || (auto859AEB68_ai < 0 && lv_heroIndex >= auto859AEB68_ae) ) ; lv_heroIndex += auto859AEB68_ai ) {
        if ((UnitIsAlive(libUIUI_gv_uIPartyFrame.lv_heroUnits[lv_rosterSlot][lv_heroIndex]) == false)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][lv_heroIndex], FixedToText(TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lv_rosterSlot][lv_heroIndex]), 0), PlayerGroupAll());
            if ((TimerGetRemaining(libUIUI_gv_uIPartyFrame.lv_heroVikingsDeathTimers[lv_rosterSlot][lv_heroIndex]) <= libUIUI_gv_dataXPPercentageUpdatePeriod_C3) && (libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][lv_heroIndex] == false)) {
                libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][lv_heroIndex] = true;
                DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), ("HeroAlmostRespawnedHero" + IntToString(lv_heroIndex)));
            }

        }

    }
}

void libUIUI_gf_UIPartyFrameSetCoreLifeTo0 (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lp_team], c_triggerControlTypeLabel, "HealthLabel/StatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0%"), PlayerGroupAll());
}

void libUIUI_gf_UIPartyFrameTeamLevelHookUpXPBarUnitForTeamAndShowTeamLevelLabel (int lp_team, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIPartyFrame.lv_teamXPVeterancyBar[lp_team], lp_unit, PlayerGroupAll());
}

unit libUIUI_gf_UIPingGetSpecialPingTargetInRangeOfPoint (point lp_point, bool lp_pingFromMinimap, int lp_pingingPlayer) {
    // Variable Declarations
    const fixed lv_worldSearchRange_C = 3.0;
    const fixed lv_minimapSearchRange_C = 4.0;
    fixed lv_searchRange;
    unit lv_itUnit;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    unitgroup auto073004AE_g;
    int auto073004AE_u;
    unitgroup autoA8D3C773_g;
    int autoA8D3C773_u;
    unitgroup auto88B33712_g;
    int auto88B33712_u;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_pingFromMinimap == true)) {
        lv_searchRange = lv_minimapSearchRange_C;
    }
    else {
        lv_searchRange = lv_worldSearchRange_C;
    }
    lv_scanGroup = UnitGroup(null, c_playerAny, RegionCircle(lp_point, lv_searchRange), UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto073004AE_g = lv_scanGroup;
    auto073004AE_u = UnitGroupCount(auto073004AE_g, c_unitCountAll);
    for (;; auto073004AE_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto073004AE_g, auto073004AE_u);
        if (lv_itUnit == null) { break; }
        if ((UnitHasBehavior2(lv_itUnit, "UnitCannotBePinged") == true)) {
            UnitGroupRemove(lv_scanGroup, lv_itUnit);
        }

    }
    autoA8D3C773_g = lv_scanGroup;
    autoA8D3C773_u = UnitGroupCount(autoA8D3C773_g, c_unitCountAll);
    for (;; autoA8D3C773_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoA8D3C773_g, autoA8D3C773_u);
        if (lv_itUnit == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeHeroic) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_itUnit, lp_pingingPlayer) == true)) {
            return lv_itUnit;
        }

    }
    auto88B33712_g = lv_scanGroup;
    auto88B33712_u = UnitGroupCount(auto88B33712_g, c_unitCountAll);
    for (;; auto88B33712_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto88B33712_g, auto88B33712_u);
        if (lv_itUnit == null) { break; }
        if (((libUIUI_gf_PingDeterminePingTargetType(lv_itUnit) != 0) || (libGame_gf_TownGetTownStructurePresetFromUnit(lv_itUnit) != libGame_ge_TownStructureTypes_None))) {
            return lv_itUnit;
        }

    }
    return null;
}

void libUIUI_gf_UIPingPlayerPingsUnit (int lp_pingingPlayer, unit lp_targetUnit, playergroup lp_pingPlayerGroup) {
    // Variable Declarations
    bool lv_targetIsAllied;
    text lv_colorForTarget;
    text lv_colorForPingingHero;
    text lv_nameOfPingingHero;
    int lv_targetType;
    bool lv_targetFound;
    text lv_nameOfTarget;
    text lv_textExpression;
    text lv_pingMessage;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_townStructureTypeForUnit;

    // Automatic Variable Declarations
    int auto29D47EC1_val;

    // Variable Initialization

    // Implementation
    lv_pingModel = "StandardPingGeneral";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);
    lv_targetIsAllied = PlayerGetAlliance(lp_pingingPlayer, c_allianceIdChat, UnitGetOwner(lp_targetUnit));
    if ((lv_targetIsAllied == true)) {
        lv_colorForTarget = StringExternal("<c val=\"#PingAlly\">");
    }
    else {
        if ((UnitGetOwner(lp_targetUnit) == libCore_gv_cOMPUTER_Neutral)) {
            lv_colorForTarget = StringExternal("<c val=\"ffffff\">");
        }
        else {
            lv_colorForTarget = StringExternal("<c val=\"#PingEnemy\">");
        }
    }
    lv_colorForPingingHero = StringExternal("<c val=\"#PingAlly\">");
    lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(libGame_gv_players[lp_pingingPlayer].lv_heroUnit));
    if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
        lv_nameOfTarget = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
    }
    else {
        lv_nameOfTarget = UnitGetName(lp_targetUnit);
    }
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    if ((lv_targetType != 0)) {
        lv_targetFound = true;
        if ((libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_nameOfTarget = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }

        if ((lv_targetIsAllied == true)) {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
            lv_textExpression = libUIUI_gv_pingPingTarget[lv_targetType].lv_textMessageAlliedTarget;
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, lv_textExpression);
            TextExpressionSetToken("CustomExpression", "C", lv_colorForPingingHero);
            TextExpressionSetToken("CustomExpression", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("CustomExpression", "D", lv_colorForTarget);
            TextExpressionSetToken("CustomExpression", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("CustomExpression");
            lv_pingSound = libUIUI_gv_pingPingTarget[lv_targetType].lv_pingSoundAlliedTarget;
            if ((libUIUI_gv_pingPingTarget[lv_targetType].lv_heroVOLineAlliedTarget != libCore_ge_HeroVOEvents_Null)) {
                libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_pingPingTarget[lv_targetType].lv_heroVOLineAlliedTarget, lp_pingingPlayer, lp_pingPlayerGroup);
            }

        }
        else {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
            lv_textExpression = libUIUI_gv_pingPingTarget[lv_targetType].lv_textMessageEnemyTarget;
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, lv_textExpression);
            TextExpressionSetToken("CustomExpression", "C", lv_colorForPingingHero);
            TextExpressionSetToken("CustomExpression", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("CustomExpression", "D", lv_colorForTarget);
            TextExpressionSetToken("CustomExpression", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("CustomExpression");
            lv_pingSound = libUIUI_gv_pingPingTarget[lv_targetType].lv_pingSoundEnemyTarget;
            if ((libUIUI_gv_pingPingTarget[lv_targetType].lv_heroVOLineEnemyTarget != libCore_ge_HeroVOEvents_Null)) {
                libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_pingPingTarget[lv_targetType].lv_heroVOLineEnemyTarget, lp_pingingPlayer, lp_pingPlayerGroup);
            }

        }
    }

    if ((lv_targetFound == false) && (UnitTypeTestAttribute(UnitGetType(lp_targetUnit), c_unitAttributeHeroic) == true)) {
        lv_targetFound = true;
        if ((lv_targetIsAllied == true)) {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
            TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "C", lv_colorForPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "D", lv_colorForTarget);
            TextExpressionSetToken("Param/Expression/lib_UIUI_61D7611D", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_61D7611D");
            lv_pingSound = SoundLink("UI_Game_Ping_Help", c_soundIndexAny);
            libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAssistHero, lp_pingingPlayer, lp_pingPlayerGroup);
        }
        else {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
            TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "C", lv_colorForPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "D", lv_colorForTarget);
            TextExpressionSetToken("Param/Expression/lib_UIUI_99D3624E", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_99D3624E");
            lv_pingSound = SoundLink("UI_Game_Ping_Attack", c_soundIndexAny);
            libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingKillHero, lp_pingingPlayer, lp_pingPlayerGroup);
        }
    }

    lv_townStructureTypeForUnit = libGame_gf_TownGetTownStructurePresetFromUnit(lp_targetUnit);
    if ((lv_targetFound == false) && (lv_townStructureTypeForUnit != libGame_ge_TownStructureTypes_None)) {
        lv_targetFound = true;
        auto29D47EC1_val = lv_townStructureTypeForUnit;
        if (auto29D47EC1_val == libGame_ge_TownStructureTypes_Moonwell) {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4974ED36", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_4974ED36");
                lv_pingSound = SoundLink("UI_Game_Ping_General", c_soundIndexAny);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_199215ED", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_199215ED");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", c_soundIndexAny);
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAttackTown, lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
        else if (auto29D47EC1_val == libGame_ge_TownStructureTypes_Core) {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "DefendPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E05F9719", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_E05F9719");
                lv_pingSound = SoundLink("UI_Game_Ping_Defend", c_soundIndexAny);
                lv_pingModel = "DefendPingMinimap";
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingDefendCore, lp_pingingPlayer, lp_pingPlayerGroup);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_9196EE91", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_9196EE91");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", c_soundIndexAny);
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAttackCore, lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
        else {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "DefendPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_444068AE", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_444068AE");
                lv_pingSound = SoundLink("UI_Game_Ping_Defend", c_soundIndexAny);
                lv_pingModel = "DefendPingMinimap";
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingDefendTown, lp_pingingPlayer, lp_pingPlayerGroup);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C071A0A", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_0C071A0A");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", c_soundIndexAny);
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAttackTown, lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
    }

    if ((lv_targetFound == true)) {
        UIDisplayMessage(lp_pingPlayerGroup, c_messageAreaChat, lv_pingMessage);
        libCore_gf_CreatePingFacingAngleWithType(lp_pingPlayerGroup, lv_pingModel, UnitGetPosition(lp_targetUnit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 3.0, 270.0, lp_pingingPlayer);
        SoundPlayForPlayer(lv_pingSound, lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
    }
    else {
        libCore_gf_CreatePingFacingAngleWithType(lp_pingPlayerGroup, lv_pingModel, EventPingPoint(), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 3.0, 270.0, lp_pingingPlayer);
        SoundPlayForPlayer(lv_pingSound, lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
    }
}

void libUIUI_gf_UIPingPlayerUsesOnMyWayPing (unit lp_pingedUnit, int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_targetType;
    text lv_targetName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_OMW", -1);
    lv_pingModel = "OnMyWayPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_pingedUnit);
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_AIOnMyWay, lp_player, lv_pingPlayerGroup);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    if ((libGame_gv_players[lp_player].lv_activeVehicle != null)) {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_activeVehicle, "OnMyWayPing", lp_location);
    }
    else {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "OnMyWayPing", lp_location);
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_105A74D1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_105A74D1"), 24, lp_location, 2.0, true, false, lv_pingPlayerGroup);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    if (((lp_pingedUnit == null) || (UnitFilterMatch(lp_pingedUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_F6660140", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_F6660140", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_F6660140"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_pingedUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_pingedUnit)) == libGame_gf_TeamNumberOfPlayer(lp_player))) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_3F375D3C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
            TextExpressionSetToken("Param/Expression/lib_UIUI_3F375D3C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
            TextExpressionSetToken("Param/Expression/lib_UIUI_3F375D3C", "B", lv_targetName);
            UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_3F375D3C"));
        }
        else {
            if ((UnitGetOwner(lp_pingedUnit) == libCore_gv_cOMPUTER_Neutral)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_A57199B1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_A57199B1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_A57199B1", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_A57199B1"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_UIUI_F22FB677", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_F22FB677", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_F22FB677", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_F22FB677"));
            }
        }
    }
    PathDestroy(libGame_gv_players[lp_player].lv_onMyWayPathDisplay);
    if ((UnitGetType(libGame_gv_players[lp_player].lv_heroUnit) == "HeroLostVikingsController")) {
        PathCreateForUnit(lv_pingPlayerGroup, UnitGroupUnit(UnitGroupSelected(lp_player), 1));
    }
    else {
        if ((libGame_gv_players[lp_player].lv_activeVehicle != null)) {
            PathCreateForUnit(lv_pingPlayerGroup, libGame_gv_players[lp_player].lv_activeVehicle);
        }
        else {
            PathCreateForUnit(lv_pingPlayerGroup, libGame_gv_players[lp_player].lv_heroUnit);
        }
    }
    PathSetDestinationPoint(PathLastCreated(), lp_location);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetLineTexture(PathLastCreated(), c_pathLocationAll, "assets\\Textures\\Storm_Waypointline.dds");
    PathSetMinimumStepCount(PathLastCreated(), 0);
    PathSetMinimumTravelDistance(PathLastCreated(), 0.0);
    PathSetMinimumLinearDistance(PathLastCreated(), 3.0);
    PathSetColor(PathLastCreated(), c_pathLocationAll, Color(80.39, 98.04, 68.63));
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 0.8);
    libGame_gv_players[lp_player].lv_onMyWayPathDisplay = PathLastCreated();
    TimerStart(libUIUI_gv_uIOnMyWayPingPathDisplayTimer[lp_player], libUIUI_gv_uIOnMyWayPingPathDisplayDuration, false, c_timeGame);
}

void libUIUI_gf_UIPingPlayerUsesDefendPing (unit lp_pingedUnit, int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    text lv_pingingHeroName;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    text lv_pingedTargetName;
    int lv_targetType;

    // Automatic Variable Declarations
    string auto2A9B1099_val;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingingHeroName = UnitTypeGetName(UnitGetType(lv_pingingPlayerHero));
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
    lv_pingModel = "DefendPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_pingedUnit);
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DefendPing", lp_location);
    if (((lp_pingedUnit == null) || (UnitFilterMatch(lp_pingedUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_FCA8BA0C", "A", lv_pingingHeroName);
        TextExpressionSetToken("Param/Expression/lib_UIUI_FCA8BA0C", "A", lv_pingingHeroName);
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_FCA8BA0C"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_pingedTargetName = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_pingedTargetName = libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_pingedTargetName = UnitGetName(lp_pingedUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_pingedUnit)) == libGame_gf_EnemyTeamNumberOfPlayer(lp_player))) {
            if ((UnitGetType(lp_pingedUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_B37EFD44", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_B37EFD44", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_B37EFD44", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_B37EFD44"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_UIUI_824F7234", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_824F7234", "A", lv_pingingHeroName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_824F7234"));
            }
        }
        else {
            if ((UnitFilterMatch(lp_pingedUnit, lp_player, libCore_gv_filtersHeroicAlly) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_D7C47D03", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D7C47D03", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D7C47D03", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D7C47D03"));
            }
            else if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitHasBehavior2(lp_pingedUnit, "TownDeadController@DeadBehavior") == false)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_1B92FDE8", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_1B92FDE8", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_1B92FDE8", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_1B92FDE8"));
            }
            else if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true)) {
                auto2A9B1099_val = UnitGetType(lp_pingedUnit);
                if (auto2A9B1099_val == "DragonShireShrineMoon") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D46730AC", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D46730AC", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D46730AC"));
                }
                else if (auto2A9B1099_val == "DragonShireShrineSun") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_9FCD0655", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_9FCD0655", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_9FCD0655"));
                }
                else if (auto2A9B1099_val == "XelNagaWatchTower") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_852AF192", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_852AF192", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_852AF192"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C9C6E3EC", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C9C6E3EC", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C9C6E3EC"));
                }
            }
            else if ((UnitGetType(lp_pingedUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_4B754EFF", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4B754EFF", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4B754EFF", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_4B754EFF"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_47C52613", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_47C52613", "A", lv_pingingHeroName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_47C52613"));
            }
        }
    }
}

void libUIUI_gf_UIPingPlayerUsesRetreatPing (int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_PlayerGetPlayerTeam(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_Retreat", -1);
    lv_pingModel = "RetreatPingMinimap";
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_AIRetreat, lp_player, lv_pingPlayerGroup);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    PlayerCreateEffectPoint(lp_player, "RetreatPing", lp_location);
    TextExpressionSetToken("Param/Expression/lib_UIUI_2BCF1489", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    TextExpressionSetToken("Param/Expression/lib_UIUI_2BCF1489", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_2BCF1489"));
}

void libUIUI_gf_UIPingPlayerUsesDangerPing (int lp_player, point lp_location, unit lp_targetUnit) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_targetType;
    text lv_targetName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_PlayerGetPlayerTeam(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_Careful", -1);
    lv_pingModel = "DangerPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_AICaution, lp_player, lv_pingPlayerGroup);
    if (((lp_targetUnit == null) || (UnitFilterMatch(lp_targetUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DangerPingPoint", lp_location);
        TextExpressionSetToken("Param/Expression/lib_UIUI_81F0DFCD", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_81F0DFCD", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_81F0DFCD"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_targetUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_targetUnit)) != libGame_gf_TeamNumberOfPlayer(lp_player))) {
            if ((UnitHasBehavior2(lp_targetUnit, "TownDeadController@DeadBehavior") == false) && ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicEnemyorNeutral) == true) || (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner"))) {
                UnitCreateEffectUnit(lv_pingingPlayerHero, "DangerPingUnit", lp_targetUnit);
                if ((UnitGetOwner(lp_targetUnit) == libCore_gv_cOMPUTER_Neutral)) {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C45AA731", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C45AA731", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C45AA731", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C45AA731"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_0B869758", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_0B869758", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_0B869758", "B", lv_targetName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_0B869758", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_0B869758"));
                }
            }
            else {
                UnitCreateEffectPoint(lv_pingingPlayerHero, "DangerPingPoint", lp_location);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D367A3EE", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_D367A3EE", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D367A3EE"));
            }
        }
        else {
            if ((UnitHasBehavior2(lp_targetUnit, "TownDeadController@DeadBehavior") == false) && ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicAlly) == true) || (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner"))) {
                UnitCreateEffectUnit(lv_pingingPlayerHero, "DangerPingUnit", lp_targetUnit);
                if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_04EC3978", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_04EC3978", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_04EC3978", "B", libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_04EC3978", "B", libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_04EC3978"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C8853800", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C8853800", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C8853800", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C8853800"));
                }
            }
            else {
                UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DangerPingPoint", lp_location);
                TextExpressionSetToken("Param/Expression/lib_UIUI_4282C808", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_4282C808", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_4282C808"));
            }
        }
    }
}

void libUIUI_gf_UIPingPlayerUsesAssistMePing (int lp_player, unit lp_targetUnit, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_targetType;
    text lv_targetName;

    // Automatic Variable Declarations
    string auto623DCDD1_val;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_PlayerGetPlayerTeam(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingSound = SoundLink("UI_Game_Ping_Help", -1);
    lv_pingModel = "AssistMePingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAssistMe, lp_player, lv_pingPlayerGroup);
    UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "AssistMePing", lp_location);
    if (((lp_targetUnit == null) || (UnitFilterMatch(lp_targetUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_8A243501", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_8A243501", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_8A243501"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_pingPingTarget[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_targetUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_targetUnit)) == libGame_gf_EnemyTeamNumberOfPlayer(lp_player))) {
            if ((UnitHasBehavior2(lp_targetUnit, "TownDeadController@DeadBehavior") == false) && (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_6D8BF5D2", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_6D8BF5D2", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_6D8BF5D2", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_6D8BF5D2"));
            }
            else if ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicEnemyorNeutral) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_340274A5", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_340274A5", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_340274A5", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_340274A5"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_EBDD69FB", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_EBDD69FB", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_EBDD69FB"));
            }
        }
        else {
            if ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicAlly) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B3BD95", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B3BD95", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B3BD95", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_E5B3BD95"));
            }
            else if ((UnitHasBehavior2(lp_targetUnit, "TownDeadController@DeadBehavior") == false) && (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_32C24EF0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_32C24EF0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_32C24EF0", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_32C24EF0"));
            }
            else if ((UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true)) {
                auto623DCDD1_val = UnitGetType(lp_targetUnit);
                if (auto623DCDD1_val == "DragonShireShrineMoon") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_7F583839", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_7F583839", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_7F583839", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_7F583839"));
                }
                else if (auto623DCDD1_val == "DragonShireShrineSun") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_558A378C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_558A378C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_558A378C", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_558A378C"));
                }
                else if (auto623DCDD1_val == "XelNagaWatchTower") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_85C5B017", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_85C5B017", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_85C5B017"));
                }
                else if (auto623DCDD1_val == "DocksPirateCaptain") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_58E3038C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_58E3038C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_58E3038C"));
                }
                else if (auto623DCDD1_val == "DocksTreasureChest") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_F80DD1DB", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_F80DD1DB", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_F80DD1DB"));
                }
                else if (auto623DCDD1_val == "RavenLordTribute") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_6B127AD6", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_6B127AD6", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_6B127AD6"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_31D2CD55", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_31D2CD55", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_31D2CD55"));
                }
            }
            else if ((UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_C234381B", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_C234381B", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_C234381B", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C234381B"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_3E6BAAE0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_3E6BAAE0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_3E6BAAE0"));
            }
        }
    }
}

int libUIUI_gf_PingDeterminePingTargetType (unit lp_unit) {
    // Variable Declarations
    int lv_itPingTarget;
    string lv_unitTypeofUnit;
    bool lv_unitHasOccupiedVehicleBehavior;

    // Automatic Variable Declarations
    int auto0AB250A3_ae;
    const int auto0AB250A3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitTypeofUnit = UnitGetType(lp_unit);
    lv_unitHasOccupiedVehicleBehavior = UnitHasBehavior2(lp_unit, "GenericVehicleBehaviorOccupied");
    auto0AB250A3_ae = libUIUI_gv_pingTargetCount;
    lv_itPingTarget = 1;
    for ( ; ( (auto0AB250A3_ai >= 0 && lv_itPingTarget <= auto0AB250A3_ae) || (auto0AB250A3_ai < 0 && lv_itPingTarget >= auto0AB250A3_ae) ) ; lv_itPingTarget += auto0AB250A3_ai ) {
        if ((libUIUI_gv_pingPingTarget[lv_itPingTarget].lv_pingIsForOccupiedVehicle == lv_unitHasOccupiedVehicleBehavior) && (UnitGetType(lp_unit) == libUIUI_gv_pingPingTarget[lv_itPingTarget].lv_unitType)) {
            return lv_itPingTarget;
        }

    }
    return 0;
}

int libUIUI_gf_PingLastCreatedPingTarget () {
    // Automatic Variable Declarations
    // Implementation
    return libUIUI_gv_pingTargetCount;
}

void libUIUI_gf_PingPlayerStartsHearthStonePing (int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    text lv_pingingUnitName;
    int lv_pingTargetType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StandardPingGeneral";

    // Implementation
    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lp_player]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_player]) > 0.0)) {
        return ;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_player);
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    if ((UnitGetType(lv_pingingPlayerHero) == "HeroLostVikingsController")) {
        if ((libGame_gv_players[UnitGetOwner(lv_pingingPlayerHero)].lv_heroUsesAnnouncementAlias == true)) {
            lv_pingingUnitName = libGame_gv_players[UnitGetOwner(lv_pingingPlayerHero)].lv_heroAnnouncementAliasText;
        }
        else {
            lv_pingingUnitName = UnitGetName(lv_pingingPlayerHero);
        }
    }
    else {
        if ((UnitGroupCount(UnitGroupSelected(lp_player), c_unitCountAlive) == 1)) {
            lv_pingingUnitName = UnitGetName(UnitGroupUnit(UnitGroupSelected(lp_player), 1));
        }
        else {
            lv_pingingUnitName = UnitGetName(lv_pingingPlayerHero);
        }
    }
    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lp_player, true));
    lv_pingModel = "HearthstonePingMinimap";
    libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(0.0, 5.49, 73.33), 0.0, 270.0, lp_player);
    libUIUI_gv_pingPlayerHearthstonePing[lp_player] = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.6);
    if ((TimerGetRemaining(libUIUI_gv_hearthPingTextLockoutTimer[lp_player]) == 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_672B6E44", "A", UnitGetName(lv_pingingPlayerHero));
        TextExpressionSetToken("Param/Expression/lib_UIUI_672B6E44", "A", UnitGetName(lv_pingingPlayerHero));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_UIUI_672B6E44"));
        TimerStart(libUIUI_gv_hearthPingTextLockoutTimer[lp_player], 10.0, false, c_timeGame);
    }

}

void libUIUI_gf_PingCancelPlayersHearthStonePing (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_pingPlayerHearthstonePing[lp_player] != c_invalidPingId)) {
        PingDestroy(libUIUI_gv_pingPlayerHearthstonePing[lp_player]);
        libUIUI_gv_pingPlayerHearthstonePing[lp_player] = c_invalidPingId;
    }

}

void libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gv_dEBUGPingLimitEnabled == false)) {
        return ;
    }

    libUIUI_gv_pingCount[lp_player] += 1;
    TimerStart(libUIUI_gv_pingInputSuppressionTimer[lp_player], libUIUI_gv_uIPingInputSuppressionTime_C, false, c_timeGame);
    TimerStart(libUIUI_gv_pingCountResetTime[lp_player], libUIUI_gv_uIPingCountResetTime_C, false, c_timeGame);
    if ((libUIUI_gv_pingCount[lp_player] >= libUIUI_gv_uIPingMaxCount_C)) {
        TimerStart(libUIUI_gv_pingLockoutTimer[lp_player], libUIUI_gv_uIPingLockoutTime_C, false, c_timeGame);
    }

}

void libUIUI_gf_PingResetPingLockoutTimeandPingCount (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingCount[lp_player] = 0;
    libNtve_gf_StopTimer(libUIUI_gv_pingInputSuppressionTimer[lp_player]);
    libNtve_gf_StopTimer(libUIUI_gv_pingCountResetTime[lp_player]);
    libNtve_gf_StopTimer(libUIUI_gv_pingLockoutTimer[lp_player]);
}

void libUIUI_gf_PingCreateNewPingTarget (string lp_unitType, bool lp_pingIsForOccupiedVehicle, text lp_pingTargetNameOverride, text lp_alliedTargetMessageText, text lp_enemyTargetMessageText, soundlink lp_alliedTargetPingSound, soundlink lp_enemyTargetPingSound) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingTargetCount += 1;
    if ((libUIUI_gv_pingTargetCount > libUIUI_gv_uIPingTargetMaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_880B8287", "A", IntToText(libUIUI_gv_pingTargetCount));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_880B8287"), true);
        libUIUI_gv_pingTargetCount = libUIUI_gv_uIPingTargetMaxCount_C;
    }

    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_unitType = lp_unitType;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_pingIsForOccupiedVehicle = lp_pingIsForOccupiedVehicle;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_targetNameOverride = lp_pingTargetNameOverride;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_textMessageAlliedTarget = lp_alliedTargetMessageText;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_textMessageEnemyTarget = lp_enemyTargetMessageText;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_pingSoundAlliedTarget = lp_alliedTargetPingSound;
    libUIUI_gv_pingPingTarget[libUIUI_gv_pingTargetCount].lv_pingSoundEnemyTarget = lp_enemyTargetPingSound;
}

void libUIUI_gf_PingCreateNewPingTargetNameOverrideOnly (string lp_unitType, text lp_pingTargetNameOverride) {
    // Variable Declarations
    int lv_itPing;

    // Automatic Variable Declarations
    int auto07767596_ae;
    const int auto07767596_ai = 1;

    // Variable Initialization

    // Implementation
    auto07767596_ae = libUIUI_gv_pingTargetCount;
    lv_itPing = 1;
    for ( ; ( (auto07767596_ai >= 0 && lv_itPing <= auto07767596_ae) || (auto07767596_ai < 0 && lv_itPing >= auto07767596_ae) ) ; lv_itPing += auto07767596_ai ) {
        if ((libUIUI_gv_pingPingTarget[lv_itPing].lv_unitType == lp_unitType)) {
            libUIUI_gv_pingPingTarget[lv_itPing].lv_targetNameOverride = lp_pingTargetNameOverride;
            return ;
        }

    }
}

void libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget (int lp_pingTarget, int lp_allyTargetHeroVO, int lp_enemyTargetHeroVO) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_heroVOLineAlliedTarget = lp_allyTargetHeroVO;
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_heroVOLineEnemyTarget = lp_enemyTargetHeroVO;
}

void libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget (int lp_pingTarget, int lp_humanSourceHeroVO, int lp_aISourceHeroVO) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_heroVOLineHumanPingingPlayer = lp_humanSourceHeroVO;
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_heroVOLineAIPingingPlayer = lp_aISourceHeroVO;
}

void libUIUI_gf_PingSetCustomResponseTriggerForPingTarget (int lp_pingTarget, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_pingPingTarget[lp_pingTarget].lv_customPingResponseTrigger = lp_trigger;
}

void libUIUI_gf_PingSetCustomResponseTriggerForPingbyUnitType (string lp_pingUnitType, trigger lp_responseTrigger) {
    // Variable Declarations
    int lv_pingIndex;

    // Automatic Variable Declarations
    int auto5F20FA65_ae;
    const int auto5F20FA65_ai = 1;

    // Variable Initialization

    // Implementation
    auto5F20FA65_ae = libUIUI_gv_pingTargetCount;
    lv_pingIndex = 1;
    for ( ; ( (auto5F20FA65_ai >= 0 && lv_pingIndex <= auto5F20FA65_ae) || (auto5F20FA65_ai < 0 && lv_pingIndex >= auto5F20FA65_ae) ) ; lv_pingIndex += auto5F20FA65_ai ) {
        if ((libUIUI_gv_pingPingTarget[lv_pingIndex].lv_unitType == lp_pingUnitType)) {
            libUIUI_gv_pingPingTarget[lv_pingIndex].lv_customPingResponseTrigger = lp_responseTrigger;
            return ;
        }

    }
}

void libUIUI_gf_PreloadPanelShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_preloadPanel.lv_mainPanel, PlayerGroupAll(), true);
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_preloadPanel.lv_mainPanel, PlayerGroupAll(), "OnHiddenCustom");
        Wait(1.0, c_timeGame);
        DialogControlSetVisible(libUIUI_gv_preloadPanel.lv_mainPanel, PlayerGroupAll(), false);
    }
}

void libUIUI_gf_PreloadPanelSetBackgroundImage (string lp_image) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_preloadPanel.lv_backgroundImage, lp_image, PlayerGroupAll());
}

void libUIUI_gf_UITabScreenTeamLevelUpdate (int lp_team, int lp_level) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto412B631C_g;

    // Variable Initialization

    // Implementation
    auto412B631C_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto412B631C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == lp_team)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_708366B9", "A", IntToText(lp_level));
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITabScreenPanel.lv_teamLevelLabelBlue, TextExpressionAssemble("Param/Expression/lib_UIUI_708366B9"), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_8D2EEF82", "A", IntToText(lp_level));
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITabScreenPanel.lv_teamLevelLabelRed, TextExpressionAssemble("Param/Expression/lib_UIUI_8D2EEF82"), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
    }
}

void libUIUI_gf_UITabScreenTeamKillsUpdate (int lp_team, int lp_kills) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto3B24D8F4_g;

    // Variable Initialization

    // Implementation
    auto3B24D8F4_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto3B24D8F4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == lp_team)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITabScreenPanel.lv_teamKillsLabelBlue, IntToText(lp_kills), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
        else {
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITabScreenPanel.lv_teamKillsLabelRed, IntToText(lp_kills), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
    }
}

void libUIUI_gf_UITalentsPrepickedSelectBuildButtonForPlayerIngame (int lp_player, int lp_newBuild) {
    // Variable Declarations
    int lv_itBuild;

    // Automatic Variable Declarations
    const int autoB30B12FA_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoB30B12FA_ai = 1;

    // Variable Initialization

    // Implementation
    libUIUI_gv_uITalentsPrepickedSelectedBuild[lp_player] = lp_newBuild;
    lv_itBuild = 1;
    for ( ; ( (autoB30B12FA_ai >= 0 && lv_itBuild <= autoB30B12FA_ae) || (autoB30B12FA_ai < 0 && lv_itBuild >= autoB30B12FA_ae) ) ; lv_itBuild += autoB30B12FA_ai ) {
        if ((lv_itBuild == lp_newBuild)) {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentsChoicePanel.lv_buildButton[lv_itBuild], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentsChoicePanel.lv_buildButton[lv_itBuild], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_UITalentsPrepickedSelectBuildButtonForPlayerHeroSelection (int lp_player, int lp_newBuild) {
    // Variable Declarations
    int lv_itBuild;

    // Automatic Variable Declarations
    const int autoF9CA479E_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoF9CA479E_ai = 1;

    // Variable Initialization

    // Implementation
    libUIUI_gv_uITalentsPrepickedSelectedBuild[lp_player] = lp_newBuild;
    lv_itBuild = 1;
    for ( ; ( (autoF9CA479E_ai >= 0 && lv_itBuild <= autoF9CA479E_ae) || (autoF9CA479E_ai < 0 && lv_itBuild >= autoF9CA479E_ae) ) ; lv_itBuild += autoF9CA479E_ai ) {
        if ((lv_itBuild == lp_newBuild)) {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_buildButtons[lv_itBuild], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_buildButtons[lv_itBuild], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_build;
    int lv_tier;
    int lv_itTier;
    int lv_itColumn;

    // Automatic Variable Declarations
    int autoEEAAD058_ae;
    const int autoEEAAD058_ai = 1;
    const int auto43C00B02_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto43C00B02_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_build = libUIUI_gv_uITalentsPrepickedSelectedBuild[lp_player];
    lv_tier = libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_selectedTier;

    // Implementation
    autoEEAAD058_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentsCountPerTier[lv_tier];
    lv_itColumn = 1;
    for ( ; ( (autoEEAAD058_ai >= 0 && lv_itColumn <= autoEEAAD058_ae) || (autoEEAAD058_ai < 0 && lv_itColumn >= autoEEAAD058_ae) ) ; lv_itColumn += autoEEAAD058_ai ) {
        if ((libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_tier] == lv_itColumn)) {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itColumn], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itColumn], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
    lv_itTier = 1;
    for ( ; ( (auto43C00B02_ai >= 0 && lv_itTier <= auto43C00B02_ae) || (auto43C00B02_ai < 0 && lv_itTier >= auto43C00B02_ae) ) ; lv_itTier += auto43C00B02_ai ) {
        if ((libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_itTier] > 0)) {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_build;
    int lv_tier;
    int lv_itTier;
    int lv_itColumn;

    // Automatic Variable Declarations
    int auto7C4821B6_ae;
    const int auto7C4821B6_ai = 1;
    const int autoECB2D3B7_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoECB2D3B7_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_build = libUIUI_gv_uITalentsPrepickedSelectedBuild[lp_player];
    lv_tier = libUIUI_gv_heroSelectionSetting.lv_talentTierPressedButton[lp_player];

    // Implementation
    auto7C4821B6_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentsCountPerTier[lv_tier];
    lv_itColumn = 1;
    for ( ; ( (auto7C4821B6_ai >= 0 && lv_itColumn <= auto7C4821B6_ae) || (auto7C4821B6_ai < 0 && lv_itColumn >= auto7C4821B6_ae) ) ; lv_itColumn += auto7C4821B6_ai ) {
        if ((libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_tier] == lv_itColumn)) {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itColumn], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itColumn], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
    lv_itTier = 1;
    for ( ; ( (autoECB2D3B7_ai >= 0 && lv_itTier <= autoECB2D3B7_ae) || (autoECB2D3B7_ai < 0 && lv_itTier >= autoECB2D3B7_ae) ) ; lv_itTier += autoECB2D3B7_ai ) {
        if ((libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_itTier] > 0)) {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_UITalentsPrepickedSetDialogItemPrepickedStateForPlayerGroup (int lp_dialogItem, bool lp_prepicked, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_prepicked == true)) {
        DialogControlSetAnimationState(lp_dialogItem, lp_playerGroup, "PrepickedState", "Prepicked");
    }
    else {
        DialogControlSetAnimationState(lp_dialogItem, lp_playerGroup, "PrepickedState", "None");
    }
}

void libUIUI_gf_UITalentsChoicePanelSetButtonStateForPlayer (int lp_player, int lp_talentColumn, string lp_state) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetAnimationState(libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lp_talentColumn], libCore_gv_playerGroupFromPlayer[lp_player], "ButtonStates", (lp_state));
}

void libUIUI_gf_UITalentsChoicePanelHiglightAllTalentsForPlayer (int lp_player, bool lp_higlightedUnhilighted) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_higlightedUnhilighted == true)) {
        DialogControlSetAnimationState(libUIUI_gv_uITalentsChoicePanel.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lp_player], "Visibility", "Visible");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uITalentsChoicePanel.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lp_player], "Visibility", "Hidden");
    }
}

void libUIUI_gf_UITalentsChoicePanelRecommendedTalentForPlayer (int lp_player, int lp_talentColumn, bool lp_recommended) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

}

void libUIUI_gf_UITalentsChoicePanelSetTierLevelsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTier;

    // Automatic Variable Declarations
    const int autoFC6B7F4F_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoFC6B7F4F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTier = 1;
    for ( ; ( (autoFC6B7F4F_ai >= 0 && lv_itTier <= autoFC6B7F4F_ae) || (autoFC6B7F4F_ai < 0 && lv_itTier >= autoFC6B7F4F_ae) ) ; lv_itTier += autoFC6B7F4F_ai ) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], IntToText(libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_talentTierLevel[lv_itTier]), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_UITalentsChoicePanelFillPanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_tier;
    int lv_itColumn;
    int lv_heroIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    int auto5B244B9D_ae;
    const int auto5B244B9D_ai = 1;
    string auto39018E55_val;
    const int auto3FBDE04B_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto3FBDE04B_ai = 1;

    // Variable Initialization
    lv_tier = libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_selectedTier;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    auto5B244B9D_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentsCountPerTier[lv_tier];
    lv_itColumn = 1;
    for ( ; ( (auto5B244B9D_ai >= 0 && lv_itColumn <= auto5B244B9D_ae) || (auto5B244B9D_ai < 0 && lv_itColumn >= auto5B244B9D_ae) ) ; lv_itColumn += auto5B244B9D_ai ) {
        lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lv_tier][lv_itColumn];
        DialogControlSetVisible(libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_player], true);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uITalentsChoicePanel.lv_talentIcon[lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentsChoicePanel.lv_talentName[lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonSimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentsChoicePanel.lv_tooltipNameLabel[lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonName, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentsChoicePanel.lv_tooltipInfoLabel[lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentsChoicePanel.lv_tooltipDescriptionLabel[lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonTooltipText[lp_player], libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyLabel[lv_itColumn], libCore_gv_talentData[lv_talentIndex].lv_buttonHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
        auto39018E55_val = libCore_gv_talentData[lv_talentIndex].lv_talentType;
        if (auto39018E55_val == "Active") {
            libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup(libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], libCore_ge_HeroTalentType_Active, libCore_gv_playerGroupFromPlayer[lp_player]);
            if ((libCore_gv_talentData[lv_talentIndex].lv_isQuest == true)) {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], lp_player);
            }
            else {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyNormal, libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], lp_player);
            }
        }
        else if (auto39018E55_val == "Passive") {
            libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup(libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], libCore_ge_HeroTalentType_Passive, libCore_gv_playerGroupFromPlayer[lp_player]);
            if ((libCore_gv_talentData[lv_talentIndex].lv_isQuest == true)) {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], lp_player);
            }
            else {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyNormal, libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], lp_player);
            }
        }
        else {
            if ((libCore_gv_abilityData[libCore_gv_talentData[lv_talentIndex].lv_abilityIndex].lv_slot == "Heroic Ability (R)")) {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup(libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], libCore_ge_HeroTalentType_Heroic, libCore_gv_playerGroupFromPlayer[lp_player]);
                if ((libCore_gv_talentData[lv_talentIndex].lv_isQuest == true)) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], lp_player);
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade, libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], lp_player);
                }
            }
            else {
                libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyColorTypeForPlayerGroup(libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], libCore_ge_HeroTalentType_Basic, libCore_gv_playerGroupFromPlayer[lp_player]);
                if ((libCore_gv_talentData[lv_talentIndex].lv_isQuest == true)) {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyQuest, libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], lp_player);
                }
                else {
                    libUIUI_gf_HotkeySetDialogItemAbilityTalentHotkeyTypeForPlayer(libUIUI_ge_HotkeyHotkeyType_HotkeyUpgrade, libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itColumn], lp_player);
                }
            }
        }
    }
    lv_itColumn = (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentsCountPerTier[lv_tier]+1);
    for ( ; ( (auto3FBDE04B_ai >= 0 && lv_itColumn <= auto3FBDE04B_ae) || (auto3FBDE04B_ai < 0 && lv_itColumn >= auto3FBDE04B_ae) ) ; lv_itColumn += auto3FBDE04B_ai ) {
        DialogControlSetVisible(libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uITalentsChoicePanel.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lp_player], "Show");
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionToggleButton, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_talentsPanelVisible = true;
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uITalentsChoicePanel.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lp_player], "Hide");
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionToggleButton, false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_talentsPanelVisible = false;
    }
}

void libUIUI_gf_UITalentsChoicePanelUpdateTalentTreeSelectionIndicatorForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_player].lv_talentPoints > 0)) {
        DialogControlSetAnimationState(libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionIndicatorContainer, libCore_gv_playerGroupFromPlayer[lp_player], "TalentAvailability", "TalentChoosing");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionIndicatorContainer, libCore_gv_playerGroupFromPlayer[lp_player], "TalentAvailability", "Default");
    }
}

void libUIUI_gf_UITalentsChoicePanelSelectTierForPlayer (int lp_tier, int lp_player) {
    // Variable Declarations
    int lv_itTier;

    // Automatic Variable Declarations
    const int auto45858BB8_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto45858BB8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_tier > 0)) {
        lv_itTier = 1;
        for ( ; ( (auto45858BB8_ai >= 0 && lv_itTier <= auto45858BB8_ae) || (auto45858BB8_ai < 0 && lv_itTier >= auto45858BB8_ae) ) ; lv_itTier += auto45858BB8_ai ) {
            if ((lp_tier == lv_itTier)) {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], true, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
            else {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], false, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
        }
        libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_selectedTier = lp_tier;
        libUIUI_gf_UITalentsChoicePanelFillPanelForPlayer(lp_player);
        libUIUI_gf_UITalentsChoicePanelUpdateTalentButtonsForPlayer(lp_player);
        libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame(lp_player);
        if ((libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_talentsPanelVisible == false)) {
            libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer(true, lp_player);
        }

    }
    else {
        if ((libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_talentsPanelVisible == true)) {
            libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer(false, lp_player);
        }

    }
    libUIUI_gf_UITalentsChoicePanelUpdateTalentTreeSelectionIndicatorForPlayer(lp_player);
}

void libUIUI_gf_UITalentsChoicePanelUpdateTalentButtonsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_tier;
    int lv_itColumn;
    int lv_talentIndex;
    int lv_preresquiteTalentIndex;

    // Automatic Variable Declarations
    const int autoEABEF3E2_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int autoEABEF3E2_ai = 1;
    const int autoB9575AFF_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int autoB9575AFF_ai = 1;
    const int auto5C01E9FA_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto5C01E9FA_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_tier = libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_selectedTier;

    // Implementation
    if ((libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierOnlyLevel(lp_player, lv_tier) == true) && ((lv_tier == 1) || ((lv_tier > 1) && (libGame_gv_talentChoices[lp_player][(lv_tier - 1)].lv_choosedTalentIndex > 0)))) {
        if ((libGame_gv_talentChoices[lp_player][lv_tier].lv_choosedTalentIndex == 0)) {
            lv_itColumn = 1;
            for ( ; ( (auto5C01E9FA_ai >= 0 && lv_itColumn <= auto5C01E9FA_ae) || (auto5C01E9FA_ai < 0 && lv_itColumn >= auto5C01E9FA_ae) ) ; lv_itColumn += auto5C01E9FA_ai ) {
                lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lv_tier][lv_itColumn];
                lv_preresquiteTalentIndex = libCore_gv_talentData[lv_talentIndex].lv_prerequisiteTalentIndex;
                if ((lv_preresquiteTalentIndex == 0)) {
                    libUIUI_gf_UITalentsChoicePanelSetButtonStateForPlayer(lp_player, lv_itColumn, "EnabledToSelect");
                }
                else {
                    if ((libGame_gf_TalentChoicesPlayerHasTalent(lp_player, lv_preresquiteTalentIndex) == true)) {
                        libUIUI_gf_UITalentsChoicePanelSetButtonStateForPlayer(lp_player, lv_itColumn, "EnabledToSelect");
                    }
                    else {
                        libUIUI_gf_UITalentsChoicePanelSetButtonStateForPlayer(lp_player, lv_itColumn, "Disabled");
                    }
                }
            }
        }
        else {
            lv_itColumn = 1;
            for ( ; ( (autoB9575AFF_ai >= 0 && lv_itColumn <= autoB9575AFF_ae) || (autoB9575AFF_ai < 0 && lv_itColumn >= autoB9575AFF_ae) ) ; lv_itColumn += autoB9575AFF_ai ) {
                if ((libGame_gv_talentChoices[lp_player][lv_tier].lv_choosedTalentColumn == lv_itColumn)) {
                    libUIUI_gf_UITalentsChoicePanelSetButtonStateForPlayer(lp_player, lv_itColumn, "Selected");
                }
                else {
                    libUIUI_gf_UITalentsChoicePanelSetButtonStateForPlayer(lp_player, lv_itColumn, "Disabled");
                }
            }
        }
    }
    else {
        lv_itColumn = 1;
        for ( ; ( (autoEABEF3E2_ai >= 0 && lv_itColumn <= autoEABEF3E2_ae) || (autoEABEF3E2_ai < 0 && lv_itColumn >= autoEABEF3E2_ae) ) ; lv_itColumn += autoEABEF3E2_ai ) {
            libUIUI_gf_UITalentsChoicePanelSetButtonStateForPlayer(lp_player, lv_itColumn, "Enabled");
        }
    }
}

void libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_talentIndex;
    int lv_itTier;
    int lv_availTier;

    // Automatic Variable Declarations
    const int autoCB162818_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoCB162818_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_availTier = libGame_gf_TalentChoicesGetNextTierOfPlayer(lp_player);

    // Implementation
    lv_itTier = 1;
    for ( ; ( (autoCB162818_ai >= 0 && lv_itTier <= autoCB162818_ae) || (autoCB162818_ai < 0 && lv_itTier >= autoCB162818_ae) ) ; lv_itTier += autoCB162818_ai ) {
        lv_talentIndex = libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex;
        if ((lv_talentIndex > 0)) {
            DialogControlSetAnimationState(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonIconFrame[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_player], "TalentTierState", "TierSelected");
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonIcon[lv_itTier], libCore_gv_talentData[lv_talentIndex].lv_buttonIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            DialogControlSetAnimationState(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonIconFrame[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_player], "TalentTierState", "TierNotAvailable");
        }
        if ((lv_availTier == lv_itTier) && (libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierOnlyLevel(lp_player, lv_availTier) == true)) {
            DialogControlSendAnimationEvent(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_player], "TierAvailable");
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_player], "TierNotAvailable");
        }
    }
}

void libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsQuestsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_questTokenCounterBehavior;
    int lv_talentIndex;
    int lv_itTier;
    int lv_targetValue;
    int lv_currentValue;

    // Automatic Variable Declarations
    const int auto7A3019C2_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto7A3019C2_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    lv_itTier = 1;
    for ( ; ( (auto7A3019C2_ai >= 0 && lv_itTier <= auto7A3019C2_ae) || (auto7A3019C2_ai < 0 && lv_itTier >= auto7A3019C2_ae) ) ; lv_itTier += auto7A3019C2_ai ) {
        lv_talentIndex = libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex;
        lv_questTokenCounterBehavior = libCore_gv_talentData[lv_talentIndex].lv_questTokenCounterBehavior;
        if ((lv_questTokenCounterBehavior == null)) {
            libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonQuestProgressBar[lv_itTier], 0.0, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            lv_targetValue = libGame_gf_QuestTokenGetTargetTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
            lv_currentValue = libGame_gf_QuestTokenGetCurrentTokenCountForPlayer(lv_questTokenCounterBehavior, lp_player);
            libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonQuestProgressBar[lv_itTier], IntToFixed(lv_currentValue), libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonQuestProgressBar[lv_itTier], IntToFixed(lv_targetValue), libCore_gv_playerGroupFromPlayer[lp_player]);
        }
    }
}

void libUIUI_gf_InitObjectiveUI (text lp_title, text lp_tip, string lp_image) {
    // Variable Declarations
    int lv_indexTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libUIUI_gf_SetObjectiveUIImage(lp_image, PlayerGroupAll());
    libUIUI_gf_SetObjectiveUITip(lp_title, lp_tip, PlayerGroupAll());
}

void libUIUI_gf_ShowHideObjectiveUI (bool lp_showHide, playergroup lp_forPlayers) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto7A190B8C_g;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel, lp_forPlayers, lp_showHide);
    auto7A190B8C_g = lp_forPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7A190B8C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if (((DialogControlIsVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel, lv_itPlayer) == true) || (DialogControlIsVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel, lv_itPlayer) == true))) {
            libUIUI_gf_ActivateDeactivateTopChevron(true, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
        else {
            libUIUI_gf_ActivateDeactivateTopChevron(false, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
    }
}

void libUIUI_gf_ShowHideObjectiveUIImage (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicImage, lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveUILabel (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicLabel, lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveUITeamPanel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamPanel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveUITeamLabel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveUITeamImage (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[lp_team][1], lp_forPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[lp_team][2], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ActivateDeactivateTopChevron (bool lp_activateDeactivate, playergroup lp_forPlayers) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoDCB927B3_ae = libCore_gv_bALMaxTeams;
    const int autoDCB927B3_ai = 1;
    const int auto2C93D14F_ae = libCore_gv_bALMaxTeams;
    const int auto2C93D14F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_activateDeactivate == true)) {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_topChevron, lp_forPlayers, true);
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_topChevronEmpty, lp_forPlayers, false);
        lv_itTeam = 1;
        for ( ; ( (auto2C93D14F_ai >= 0 && lv_itTeam <= auto2C93D14F_ae) || (auto2C93D14F_ai < 0 && lv_itTeam >= auto2C93D14F_ae) ) ; lv_itTeam += auto2C93D14F_ai ) {
            DialogControlSetSize(libUIUI_gv_teamStatusPanel.lv_teamColorBar[lv_itTeam], lp_forPlayers, 133, 12);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_topChevron, lp_forPlayers, false);
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_topChevronEmpty, lp_forPlayers, true);
        lv_itTeam = 1;
        for ( ; ( (autoDCB927B3_ai >= 0 && lv_itTeam <= autoDCB927B3_ae) || (autoDCB927B3_ai < 0 && lv_itTeam >= autoDCB927B3_ae) ) ; lv_itTeam += autoDCB927B3_ai ) {
            DialogControlSetSize(libUIUI_gv_teamStatusPanel.lv_teamColorBar[lv_itTeam], lp_forPlayers, 193, 12);
        }
    }
}

void libUIUI_gf_SetObjectiveUITip (text lp_title, text lp_tip, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_C57E02C8", "A", lp_title);
    TextExpressionSetToken("Param/Expression/lib_UIUI_C57E02C8", "B", lp_tip);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicImageTooltipFrame, TextExpressionAssemble("Param/Expression/lib_UIUI_C57E02C8"), lp_forPlayers);
    TextExpressionSetToken("Param/Expression/lib_UIUI_4284E130", "A", lp_title);
    TextExpressionSetToken("Param/Expression/lib_UIUI_4284E130", "B", lp_tip);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImageTooltipFrame, TextExpressionAssemble("Param/Expression/lib_UIUI_4284E130"), lp_forPlayers);
}

void libUIUI_gf_SetObjectiveUIImage (string lp_image, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamStatusPanel.lv_mapMechanicImage, lp_image, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveUILabel (text lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicLabel, lp_value, PlayerGroupAll());
}

void libUIUI_gf_SetObjectiveUITeamLabels (text lp_team1Value, text lp_team2Value) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[1], lp_team1Value, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[2], lp_team2Value, PlayerGroupAll());
}

void libUIUI_gf_SetObjectiveUITeamImages (int lp_team, int lp_index, string lp_image, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[lp_team][lp_index], lp_image, lp_players);
}

void libUIUI_gf_SetObjectiveUITeamTooltips (text lp_allyTooltip, text lp_enemyTooltip, text lp_team1ObserverTooltip, text lp_team2ObserverTooltip) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[1], lp_allyTooltip, libGame_gf_PlayersOnTeamHeroes(1, false));
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[2], lp_enemyTooltip, libGame_gf_PlayersOnTeamHeroes(1, false));
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[1], lp_enemyTooltip, libGame_gf_PlayersOnTeamHeroes(2, false));
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[2], lp_allyTooltip, libGame_gf_PlayersOnTeamHeroes(2, false));
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[1], lp_team1ObserverTooltip, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[2], lp_team2ObserverTooltip, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
}

void libUIUI_gf_ShowHideObjectiveActiveUI (bool lp_showHide, playergroup lp_forPlayers) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoE0D58D0C_g;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel, lp_forPlayers, lp_showHide);
    autoE0D58D0C_g = lp_forPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE0D58D0C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if (((DialogControlIsVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel, lv_itPlayer) == true) || (DialogControlIsVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel, lv_itPlayer) == true))) {
            libUIUI_gf_ActivateDeactivateTopChevron(true, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
        else {
            libUIUI_gf_ActivateDeactivateTopChevron(false, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
    }
}

void libUIUI_gf_ShowHideObjectiveActiveUILabel (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveLabel, lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUIImage (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImage, lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamPanel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamPanel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamImage (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamLabel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamSubLabel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamHPBar (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_SetObjectiveActiveUIImage (string lp_image, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImage, lp_image, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUILabel (text lp_label, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveLabel, lp_label, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITip (text lp_title, text lp_tip, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_161DD942", "A", lp_title);
    TextExpressionSetToken("Param/Expression/lib_UIUI_161DD942", "B", lp_tip);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImageTooltipFrame, TextExpressionAssemble("Param/Expression/lib_UIUI_161DD942"), lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamImage (int lp_team, string lp_image, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[lp_team], lp_image, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamLabel (int lp_team, text lp_value, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[lp_team], lp_value, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamSubLabel (int lp_team, text lp_value, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[lp_team], lp_value, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamHPBarUnit (int lp_team, unit lp_unit, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[lp_team], lp_unit, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamHPBarText (int lp_team, text lp_value, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBarLabel[lp_team], lp_value, lp_forPlayers);
}

void libUIUI_gf_UIUnitStatusUpdateArmorAndHealthOfUnit (unit lp_unit) {
    // Variable Declarations
    string lv_itBehavior;
    string lv_physicalArmorBuff;
    string lv_spellArmorBuff;
    string lv_healingReceivedBuff;
    bool lv_timed;
    int lv_armorPhysical;
    int lv_armorSpell;
    int lv_healingReceived;
    fixed lv_infinityDuration;
    bool lv_physicalArmorTimed;
    bool lv_spellArmorTimed;
    bool lv_healingReceivedTimed;

    // Automatic Variable Declarations
    unit autoB9820D59_u;
    int autoB9820D59_i;

    // Variable Initialization
    lv_infinityDuration = 32767.0;

    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == false) && (UnitTypeTestFlag(UnitGetType(lp_unit), c_unitFlagTownStructureCore) == false) && (UnitTypeTestFlag(UnitGetType(lp_unit), c_unitFlagTownStructureCannonTower) == false) && (UnitTypeTestFlag(UnitGetType(lp_unit), c_unitFlagTownStructureTownHall) == false)) {
        return ;
    }

    UnitBehaviorRemove(lp_unit, "UIUnitStatusAllArmor", 1);
    UnitBehaviorRemove(lp_unit, "UIUnitStatusPhysicalArmor", 1);
    UnitBehaviorRemove(lp_unit, "UIUnitStatusSpellArmor", 1);
    UnitBehaviorRemove(lp_unit, "UIUnitStatusHealingModifier", 1);
    lv_armorPhysical = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalHero, lp_unit);
    lv_armorSpell = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorSpellHero, lp_unit);
    lv_healingReceived = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingReceived, lp_unit);
    autoB9820D59_u = lp_unit;
    autoB9820D59_i = 1;
    for ( ; autoB9820D59_i <= UnitBehaviorCountAll(autoB9820D59_u) ; autoB9820D59_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(autoB9820D59_u, autoB9820D59_i)) ) {
        lv_itBehavior = UnitBehaviorGet(autoB9820D59_u, autoB9820D59_i);
        if ((UnitBehaviorHasFlag(lv_itBehavior, c_unitBehaviorFlagUser1) == true)) {
            if ((UnitBehaviorDuration(lp_unit, lv_itBehavior) < lv_infinityDuration)) {
                lv_timed = true;
            }
            else {
                lv_timed = false;
            }
            if ((lv_armorPhysical != 0) && (libGame_gf_UnitStatsAttributeValueOfBehavior(lv_itBehavior, "UnitStatsArmorPhysicalHero") != 0)) {
                if ((lv_timed == true)) {
                    if (((lv_physicalArmorTimed == false) || (lv_physicalArmorBuff == null))) {
                        lv_physicalArmorTimed = true;
                        lv_physicalArmorBuff = lv_itBehavior;
                    }
                    else {
                        if ((UnitBehaviorDuration(lp_unit, lv_physicalArmorBuff) > UnitBehaviorDuration(lp_unit, lv_itBehavior))) {
                            lv_physicalArmorBuff = lv_itBehavior;
                        }
                    }
                }
                else {
                    if ((lv_physicalArmorTimed == false)) {
                        lv_physicalArmorBuff = lv_itBehavior;
                    }
                }
            }
            if ((lv_armorSpell != 0) && (libGame_gf_UnitStatsAttributeValueOfBehavior(lv_itBehavior, "UnitStatsArmorSpellHero") != 0)) {
                if ((lv_timed == true)) {
                    if (((lv_spellArmorTimed == false) || (lv_spellArmorBuff == null))) {
                        lv_spellArmorTimed = true;
                        lv_spellArmorBuff = lv_itBehavior;
                    }
                    else {
                        if ((UnitBehaviorDuration(lp_unit, lv_spellArmorBuff) > UnitBehaviorDuration(lp_unit, lv_itBehavior))) {
                            lv_spellArmorBuff = lv_itBehavior;
                        }
                    }
                }
                else {
                    if ((lv_spellArmorTimed == false)) {
                        lv_spellArmorBuff = lv_itBehavior;
                    }
                }
            }
            if ((lv_healingReceived != 0) && (libGame_gf_UnitStatsAttributeValueOfBehavior(lv_itBehavior, "UnitStatsHealingReceived") != 0)) {
                if ((lv_timed == true)) {
                    if (((lv_healingReceivedTimed == false) || (lv_healingReceivedBuff == null))) {
                        lv_healingReceivedTimed = true;
                        lv_healingReceivedBuff = lv_itBehavior;
                    }
                    else {
                        if ((UnitBehaviorDuration(lp_unit, lv_healingReceivedBuff) > UnitBehaviorDuration(lp_unit, lv_itBehavior))) {
                            lv_healingReceivedBuff = lv_itBehavior;
                        }
                    }
                }
                else {
                    if ((lv_healingReceivedTimed == false)) {
                        lv_healingReceivedBuff = lv_itBehavior;
                    }
                }
            }
        }
    }
    if ((lv_armorPhysical == lv_armorSpell) && (lv_physicalArmorTimed == lv_spellArmorTimed)) {
        if ((lv_armorPhysical != 0)) {
            if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == true)) {
                DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/StandardUnitArmorStatusDisplay/AllArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(libGame_gf_UnitStatsValidHeroicArmorValueOfUnit(libGame_ge_UnitStatsDamageType_Physical, lp_unit)), PlayerGroupAll());
                DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/StandardUnitArmorStatusDisplay/AllArmorFrame/BehaviorIcon", lp_unit);
            }
            else {
                DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "StandardUnitArmorStatusDisplay/AllArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(libGame_gf_UnitStatsValidHeroicArmorValueOfUnit(libGame_ge_UnitStatsDamageType_Physical, lp_unit)), PlayerGroupAll());
                DialogControlHookupUnitStatus(c_triggerControlTypePanel, "StandardUnitArmorStatusDisplay/AllArmorFrame/BehaviorIcon", lp_unit);
            }
            if ((lv_armorPhysical > 0)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Buffed");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Debuffed");
            }
            UnitBehaviorAdd(lp_unit, "UIUnitStatusAllArmor", lp_unit, 1);
            if ((lv_physicalArmorTimed == true)) {
                UnitBehaviorSetDuration(lp_unit, "UIUnitStatusAllArmor", UnitBehaviorDurationTotal(lp_unit, lv_physicalArmorBuff));
                UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusAllArmor", UnitBehaviorDuration(lp_unit, lv_physicalArmorBuff));
            }
            else {
                UnitBehaviorSetDuration(lp_unit, "UIUnitStatusAllArmor", 0.0);
                UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusAllArmor", 0.0);
            }
        }
    }
    else {
        if ((lv_armorPhysical != 0)) {
            DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/StandardUnitArmorStatusDisplay/PhysicalArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(libGame_gf_UnitStatsValidHeroicArmorValueOfUnit(libGame_ge_UnitStatsDamageType_Physical, lp_unit)), PlayerGroupAll());
            DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/StandardUnitArmorStatusDisplay/PhysicalArmorFrame/BehaviorIcon", lp_unit);
            if ((lv_armorPhysical > 0)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Buffed");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Debuffed");
            }
            UnitBehaviorAdd(lp_unit, "UIUnitStatusPhysicalArmor", lp_unit, 1);
            if ((lv_physicalArmorTimed == true)) {
                UnitBehaviorSetDuration(lp_unit, "UIUnitStatusAllArmor", UnitBehaviorDurationTotal(lp_unit, lv_physicalArmorBuff));
                UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusAllArmor", UnitBehaviorDuration(lp_unit, lv_physicalArmorBuff));
            }
            else {
                UnitBehaviorSetDuration(lp_unit, "UIUnitStatusAllArmor", 0.0);
                UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusAllArmor", 0.0);
            }
        }
        if ((lv_armorSpell != 0)) {
            DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/StandardUnitArmorStatusDisplay/AbilityArmorFrame/BehaviorIcon/ArmorLabel", lp_unit);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(libGame_gf_UnitStatsValidHeroicArmorValueOfUnit(libGame_ge_UnitStatsDamageType_Spell, lp_unit)), PlayerGroupAll());
            DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/StandardUnitArmorStatusDisplay/AbilityArmorFrame/BehaviorIcon", lp_unit);
            if ((lv_armorSpell > 0)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Buffed");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Debuffed");
            }
            UnitBehaviorAdd(lp_unit, "UIUnitStatusSpellArmor", lp_unit, 1);
            if ((lv_spellArmorTimed == true)) {
                UnitBehaviorSetDuration(lp_unit, "UIUnitStatusSpellArmor", UnitBehaviorDurationTotal(lp_unit, lv_spellArmorBuff));
                UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusSpellArmor", UnitBehaviorDuration(lp_unit, lv_spellArmorBuff));
            }
            else {
                UnitBehaviorSetDuration(lp_unit, lv_spellArmorBuff, 0.0);
                UnitBehaviorSetDurationRemaining(lp_unit, lv_spellArmorBuff, 0.0);
            }
        }
    }
    if ((lv_healingReceived != 0)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/StandardUnitStatusHealingDisplay/BehaviorIcon/StatusLabel", lp_unit);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(libGame_gf_UnitStatsValidHealingReceived(lp_unit)), PlayerGroupAll());
        DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/StandardUnitArmorStatusDisplay/StandardUnitStatusHealingDisplay/BehaviorIcon", lp_unit);
        if ((lv_healingReceived > 0)) {
            if ((lv_healingReceived < 100)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Buffed");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "BuffedMax");
            }
        }
        else {
            if ((lv_healingReceived > -100)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "Debuffed");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "BuffDebuffStates", "DebuffedMax");
            }
        }
        UnitBehaviorAdd(lp_unit, "UIUnitStatusHealingModifier", lp_unit, 1);
        if ((lv_healingReceivedTimed == true)) {
            UnitBehaviorSetDuration(lp_unit, "UIUnitStatusHealingModifier", UnitBehaviorDurationTotal(lp_unit, lv_healingReceivedBuff));
            UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusHealingModifier", UnitBehaviorDuration(lp_unit, lv_healingReceivedBuff));
        }
        else {
            UnitBehaviorSetDuration(lp_unit, "UIUnitStatusHealingModifier", 0.0);
            UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusHealingModifier", 0.0);
        }
    }
}

void libUIUI_gf_UIUnitStatusRelentlessUnstoppableController (unit lp_unit) {
    // Variable Declarations
    string lv_itBehavior;
    string lv_relentlessBuff;

    // Automatic Variable Declarations
    unit autoD957D51B_u;
    int autoD957D51B_i;

    // Variable Initialization

    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == false)) {
        return ;
    }
    if ((libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsRelentless, lp_unit) < 100)) {
        UnitBehaviorRemove(lp_unit, "UIUnitStatusRelentless", 1);
        return ;
    }
    else {
        UnitBehaviorAdd(lp_unit, "UIUnitStatusRelentless", lp_unit, 1);
    }
    autoD957D51B_u = lp_unit;
    autoD957D51B_i = 1;
    for ( ; autoD957D51B_i <= UnitBehaviorCountAll(autoD957D51B_u) ; autoD957D51B_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(autoD957D51B_u, autoD957D51B_i)) ) {
        lv_itBehavior = UnitBehaviorGet(autoD957D51B_u, autoD957D51B_i);
        if ((UnitBehaviorHasFlag(lv_itBehavior, c_unitBehaviorFlagUser1) == true)) {
            if ((libGame_gf_UnitStatsAttributeValueOfBehavior(lv_itBehavior, "UnitStatsRelentless") != 0)) {
                if ((lv_relentlessBuff == null)) {
                    lv_relentlessBuff = lv_itBehavior;
                }
                else {
                    if ((UnitBehaviorDuration(lp_unit, lv_relentlessBuff) < UnitBehaviorDuration(lp_unit, lv_itBehavior))) {
                        lv_relentlessBuff = lv_itBehavior;
                    }
                }
            }
        }
    }
    UnitBehaviorSetDuration(lp_unit, "UIUnitStatusRelentless", UnitBehaviorDurationTotal(lp_unit, lv_relentlessBuff));
    UnitBehaviorSetDurationRemaining(lp_unit, "UIUnitStatusRelentless", UnitBehaviorDuration(lp_unit, lv_relentlessBuff));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_IncludeUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_IncludeUI_Init () {
    libUIUI_gt_IncludeUI = TriggerCreate("libUIUI_gt_IncludeUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InitializeUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoA84DD4B9_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeLeaderPanel, false);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleOverrideWorld);
    UIStatusBarOverride(PlayerGroupAll(), c_unitStatusGroupAll);
    UISetBattleNetButtonOffset(PlayerGroupAll(), 280, 0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    if ((GameIsOnline() == true)) {
        UISetDragSelectEnabled(PlayerGroupAll(), false);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    }
    else {
        UISetDragSelectEnabled(PlayerGroupAll(), true);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    }
    PingSetPlayerPingsShown(PlayerGroupAll(), false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogMessageLogButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAchievementsButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogReturnToGameplayButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    TriggerExecute(libUIUI_gt_UIInitializeTabScreenPanel, true, true);
    TriggerExecute(libUIUI_gt_UIHeroLeaderboardInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeHealingFountainsHelpText, true, true);
    TriggerExecute(libUIUI_gt_TeamStatusPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializePartyFrameUI, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeGameUIHandles, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeHeroConsole, true, true);
    TriggerExecute(libUIUI_gt_GameOverSplashInitialize, true, true);
    TriggerExecute(libUIUI_gt_HeroConsoleUnitStatusBarsInitialize, true, true);
    TriggerExecute(libUIUI_gt_FullscreenOverlaysInitialize, true, true);
    TriggerExecute(libUIUI_gt_FullscreenOverlaysInitializeRework, true, true);
    TriggerExecute(libUIUI_gt_MapMechanicsPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_DeathRecapPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeDamageFlashUI, true, true);
    TriggerExecute(libUIUI_gt_UITalentsChoicePanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_KillLogInitialize, true, true);
    TriggerExecute(libUIUI_gt_NotificationDisplayInitialize, true, true);
    TriggerExecute(libUIUI_gt_PreloadPanelInitialization, true, true);
    TriggerExecute(libUIUI_gt_HeroSelectionUIInit, true, true);
    TriggerExecute(libUIUI_gt_InitializeBaseModPingData, true, true);
    TriggerExecute(libUIUI_gt_UIGameUISetGameData, true, true);
    autoA84DD4B9_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA84DD4B9_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(false, lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InitializeUI_Init () {
    libUIUI_gt_InitializeUI = TriggerCreate("libUIUI_gt_InitializeUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Update Time Labels Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIUpdateTimeLabels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Init () {
    libUIUI_gt_UIUpdateTimeLabelsTimerExpires = TriggerCreate("libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_UIUpdateTimeLabelsTimerExpires, libUIUI_gv_uITimeLabelUpdateTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Damage Flash UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeDamageFlashUI_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DamageOverlayImagesPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_TeamOrder], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_TeamChaos], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIDamageFlashUI.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LightDamageSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IntenseSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PersistentLowHealthSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeDamageFlashUI_Init () {
    libUIUI_gt_UIInitializeDamageFlashUI = TriggerCreate("libUIUI_gt_UIInitializeDamageFlashUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Damage Flash - Trigger Damage Flash
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDamageFlashTriggerDamageFlash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentHP;
    fixed lv_damagePercentage;
    fixed lv_flashOpacity;
    fixed lv_fadeTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_flashOpacity = 100.0;
    lv_fadeTime = 0.625;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() > 0))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCore_gv_activeHumanPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit))) {
            return false;
        }

        if (!((libGame_gv_players[EventPlayer()].lv_activeVehicle == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentHP = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent));
    lv_currentHP += 1.0;
    lv_damagePercentage = (EventUnitDamageAmount() / lv_currentHP);
    if ((UnitHasBehavior2(EventUnit(), "SymbioteCasterDummyBehavior") == true)) {
        lv_flashOpacity -= 100.0;
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) > libUIUI_gv_uIDamageFlashLowHPThreshold)) {
            if ((lv_damagePercentage >= 0.1)) {
                lv_flashOpacity -= 30.0;
            }

            if ((lv_damagePercentage >= 0.25)) {
                lv_flashOpacity -= 40.0;
                lv_fadeTime += 0.125;
            }

            if ((lv_damagePercentage >= 0.35)) {
                lv_flashOpacity -= 30.0;
                lv_fadeTime += 0.25;
            }

            DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
            DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
        }
        else {
            libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects(EventPlayer());
            if ((lv_damagePercentage >= 0.05)) {
                lv_flashOpacity -= 30.0;
                if ((lv_damagePercentage >= 0.1)) {
                    lv_flashOpacity -= 40.0;
                    lv_fadeTime += 0.125;
                }

                if ((lv_damagePercentage >= 0.2)) {
                    lv_flashOpacity -= 30.0;
                    lv_fadeTime += 0.25;
                }

                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
            }
            else {
                lv_flashOpacity -= 60.0;
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], 0.0, lv_flashOpacity);
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], lv_fadeTime, 100.0);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDamageFlashTriggerDamageFlash_Init () {
    libUIUI_gt_UIDamageFlashTriggerDamageFlash = TriggerCreate("libUIUI_gt_UIDamageFlashTriggerDamageFlash_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Damage Flash - Low HP Sounds Looper
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    bool lv_triggerInUse;

    // Automatic Variable Declarations
    const int autoC7EF92EB_ae = libCore_gv_bALMaxPlayers;
    const int autoC7EF92EB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoC7EF92EB_ai >= 0 && lv_itPlayer <= autoC7EF92EB_ae) || (autoC7EF92EB_ai < 0 && lv_itPlayer >= autoC7EF92EB_ae) ) ; lv_itPlayer += autoC7EF92EB_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_lowHPSoundPlaying == true)) {
            if (((libCore_gv_gameOver == true) || (UnitGetPropertyFixed(libGame_gf_PlayerHeroUnit(lv_itPlayer), c_unitPropLifePercent, c_unitPropCurrent) > libUIUI_gv_uIDamageFlashLowHPThreshold))) {
                libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects(lv_itPlayer);
            }
            else {
                lv_triggerInUse = true;
            }
        }

    }
    if ((lv_triggerInUse == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Init () {
    libUIUI_gt_UIDamageFlashLowHPSoundsLooper = TriggerCreate("libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Func");
    TriggerEnable(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Recap Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathRecapPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTimeZone;
    int lv_itMaxDamager;
    int lv_itMaxDamagerAbilities;
    int[7] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    int auto87A5BCE9_ae;
    int auto2DF31887_ae;
    int autoCC293EE2_ae;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, c_triggerControlTypeButton, "DeathRecapButton");
    libUIUI_gv_deathRecapPanel.lv_openDeathRecapButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl/ShowDeathRecapButton");
    libUIUI_gv_deathRecapPanel.lv_tabScreenButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl/DeathRecapContainerFrame/DeathRecapPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_deathRecapPanel.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GraphLabel");
    libUIUI_gv_deathRecapPanel.lv_mainGraphLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HighestDamagersPanel");
    libUIUI_gv_deathRecapPanel.lv_highestDamagersPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    auto87A5BCE9_ae = libGame_gv_deathRecap_MaxMaxDamagers_C;
    lv_itMaxDamager = 1;
    for ( ; lv_itMaxDamager <= auto87A5BCE9_ae ; lv_itMaxDamager += 1 ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerPortraitBackgroundImage/HighestDamagerPortrait");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersImages[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerPortraitBackgroundImage/HighestDamagerPercentProgressBar");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersProgressBars[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerAmountLabel");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersAmountLabels[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerHeroNameLabel");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersHeroNameLabels[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerPlayerNameLabel");
        libUIUI_gv_deathRecapPanel.lv_highestDamagersPlayerNameLabels[lv_itMaxDamager] = DialogControlLastCreated();
        auto2DF31887_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
        lv_itMaxDamagerAbilities = 1;
        for ( ; lv_itMaxDamagerAbilities <= auto2DF31887_ae ; lv_itMaxDamagerAbilities += 1 ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HighestDamage" +IntToString(lv_itMaxDamager) + "/HighestDamagerAbilityFrame" + IntToString(lv_itMaxDamagerAbilities));
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityFrame[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityImage");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBars[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityImage/AbilityProgressBar");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarProgressBars[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityLabel");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityAmount");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilAmountLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTooltip");
            libUIUI_gv_deathRecapPanel.lv_highestDamagersAbilityBarTooltips[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilitiesPanel/ScrollableList/ContainerFrame");
    libUIUI_gv_deathRecapPanel.lv_abilitiesPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    autoCC293EE2_ae = libGame_gv_deathRecap_MaxEffectsBars_C;
    lv_itTimeZone = 1;
    for ( ; lv_itTimeZone <= autoCC293EE2_ae ; lv_itTimeZone += 1 ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone));
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTimeZone[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/DamageChunk");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelDamageBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HealingChunk");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealingBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HealthChunk");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/AbilityIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-ability-alarak-massteleport.dds", PlayerGroupAll());
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIcons[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/AbilityIconBorder");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarIconBorders[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/EventCountLabel");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelEventCountLabels[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/TimeLabel");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHealthBarTimeLabels[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HeroImageChunkContainer/HeroImageChunk");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelHeroImages[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/TooltipFrame/BarGraphTooltipFrame");
        libUIUI_gv_deathRecapPanel.lv_abilitiesPanelTooltipFrame[lv_itTimeZone] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilitiesPanel/GraphTopLabel");
    libUIUI_gv_deathRecapPanel.lv_abilitiesPanelStartingHealthLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathRecapPanelInitialize_Init () {
    libUIUI_gt_DeathRecapPanelInitialize = TriggerCreate("libUIUI_gt_DeathRecapPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Recap Open Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathRecapOpenButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUIUI_gv_deathRecapPanel.lv_openDeathRecapButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(false, EventPlayer());
    libUIUI_gv_uITabScreenPanel.lv_mainPanelToggled[EventPlayer()] = true;
    DialogControlSendAnimationEvent(libUIUI_gv_uITabScreenPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[EventPlayer()], "Show");
    libNtve_gf_SetDialogItemToggled(libUIUI_gv_deathRecapPanel.lv_tabScreenButton, true, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathRecapOpenButtonClicked_Init () {
    libUIUI_gt_DeathRecapOpenButtonClicked = TriggerCreate("libUIUI_gt_DeathRecapOpenButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_DeathRecapOpenButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Death Recap Populate Test
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DEBUGDeathRecapPopulateTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_populatePlayer;
    int lv_populateUnitOwner;
    unit lv_populateUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_populatePlayer = EventPlayer();
    lv_populateUnit = UnitGroupUnit(UnitGroupSelected(lv_populatePlayer), 1);
    lv_populateUnitOwner = UnitGetOwner(lv_populateUnit);
    if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lv_populateUnitOwner) == true)) {
        libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer(lv_populateUnit, lv_populatePlayer);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_CCE23FD8"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DEBUGDeathRecapPopulateTest_Init () {
    libUIUI_gt_DEBUGDeathRecapPopulateTest = TriggerCreate("libUIUI_gt_DEBUGDeathRecapPopulateTest_Func");
    TriggerAddEventChatMessage(libUIUI_gt_DEBUGDeathRecapPopulateTest, c_playerAny, "recapnow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Damage
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitDamageEffect(), "Ignored By Text Tags") == false))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() != EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_TriggerEventType() == 68)) {
        libUIUI_gf_UICombatFloatingElementsDamage(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageEffect(), (EventUnitDamageAmount() + EventUnitDamageBehaviorShield()));
    }
    else if ((libCore_gf_TriggerEventType() == 97) && (UnitBehaviorHasFlag(EventUnitBehavior(), c_unitBehaviorFlagPhysical) == true)) {
        libUIUI_gf_UICombatFloatingElementsDamage(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageEffect(), EventUnitDamageAbsorbed());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsDamage_Init () {
    libUIUI_gt_UICombatFloatingElementsDamage = TriggerCreate("libUIUI_gt_UICombatFloatingElementsDamage_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UICombatFloatingElementsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libUIUI_gt_UICombatFloatingElementsDamage, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Damage Response No Leech
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_casterPlayer;
    fixed lv_amount;
    string lv_behavior;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, (UnitBehaviorCount(EventUnit(), EventUnitBehavior())-1));
    lv_casterPlayer = UnitGetOwner(lv_caster);
    lv_behavior = EventUnitBehavior();
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, EventUnitBehavior(), "Shield Leech") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimit", lv_casterPlayer) > 0.0)) {
        lv_amount += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimit", lv_casterPlayer);
    }

    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[Life]", lv_casterPlayer) > 0.0)) {
        lv_amount += (UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent)*libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[Life]", lv_casterPlayer));
    }

    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[Energy]", lv_casterPlayer) > 0.0)) {
        lv_amount += (UnitGetPropertyFixed(lv_caster, c_unitPropEnergyMax, c_unitPropCurrent)*libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[Energy]", lv_casterPlayer));
    }

    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[Shields]", lv_casterPlayer) > 0.0)) {
        lv_amount += (UnitGetPropertyFixed(lv_caster, c_unitPropShieldsMax, c_unitPropCurrent)*libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_behavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[Shields]", lv_casterPlayer));
    }

    if ((lv_amount > 1.0)) {
        PlayerGroupAdd(lv_playerGroup, lv_casterPlayer);
        if ((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true)) {
            PlayerGroupAdd(lv_playerGroup, EventPlayer());
        }

        libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(EventUnit(), FixedToText(lv_amount, 0), lv_playerGroup, "FCT_Shield_Normal", libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech_Init () {
    libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech = TriggerCreate("libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech, null, c_unitBehaviorFlagUser2, c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Heal
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerGroup;
    bool lv_isCrit;
    string lv_style;
    fixed lv_healGiven;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitHealEffect(), "Ignored By Text Tags") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healGiven = EventUnitHealAmount();
    if ((lv_healGiven < 1.0)) {
        return true;
    }

    if ((libCore_gf_ExecuteValidatorOnUnit("CritAliasSpellPower", EventUnitHealLaunchUnit(), EventUnitHealLaunchUnit()) == true)) {
        lv_isCrit = true;
    }
    else {
        lv_isCrit = libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitHealEffect(), "Critical");
    }
    lv_playerGroup = libNtve_gf_UnionOfPlayerGroups(libCore_gv_playerGroupFromPlayer[EventUnitHealLaunchPlayer()], libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    if ((lv_isCrit == true)) {
        lv_style = "FCT_Heal_Crit";
    }
    else {
        lv_style = "FCT_Heal_Greater";
    }
    libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(EventUnit(), FixedToText(lv_healGiven, 0), lv_playerGroup, lv_style, libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsHeal_Init () {
    libUIUI_gt_UICombatFloatingElementsHeal = TriggerCreate("libUIUI_gt_UICombatFloatingElementsHeal_Func");
    TriggerAddEventUnitHealed(libUIUI_gt_UICombatFloatingElementsHeal, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Mana
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsMana_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerGroup;
    string lv_style;
    bool lv_isCrit;
    fixed lv_manaGiven;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitHealEffect(), "Ignored By Text Tags") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NotManaUserDummy") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_manaGiven = EventUnitHealAmount();
    if ((lv_manaGiven < 1.0)) {
        return true;
    }

    lv_isCrit = libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitHealEffect(), "Critical");
    lv_playerGroup = libNtve_gf_UnionOfPlayerGroups(libCore_gv_playerGroupFromPlayer[EventUnitHealLaunchPlayer()], libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    if ((lv_isCrit == true)) {
        lv_style = "FCT_Mana_Crit";
    }
    else {
        lv_style = "FCT_Mana_Greater";
    }
    libUIUI_gf_UIFloatingCombatTextCreateTextTagDirectional(EventUnit(), FixedToText(lv_manaGiven, 0), lv_playerGroup, lv_style, libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsMana_Init () {
    libUIUI_gt_UICombatFloatingElementsMana = TriggerCreate("libUIUI_gt_UICombatFloatingElementsMana_Func");
    TriggerAddEventUnitHealed(libUIUI_gt_UICombatFloatingElementsMana, null, c_unitVitalEnergy, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Missing
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsMissing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
        if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == false)) {
            return true;
        }

        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
        libUIUI_gf_UIFloatingCombatTextCreateTextTag(EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal("Param/Value/lib_UIUI_8A97B87A"), lv_players, "FCT_Basic_Normal", libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    }
    else {
        if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitSource)) == false)) {
            return true;
        }

        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
        libUIUI_gf_UIFloatingCombatTextCreateTextTag(EventPlayerEffectUsedUnit(c_effectUnitSource), StringExternal("Param/Value/lib_UIUI_56E2E756"), lv_players, "FCT_Basic_Normal", libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsMissing_Init () {
    libUIUI_gt_UICombatFloatingElementsMissing = TriggerCreate("libUIUI_gt_UICombatFloatingElementsMissing_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UICombatFloatingElementsMissing, c_playerAny, "BlindMissedDummy");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UICombatFloatingElementsMissing, c_playerAny, "BlindMissedDummyCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Combat Floating Elements - Avoiding
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UICombatFloatingElementsAvoiding_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
        if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == false)) {
            return true;
        }

        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    }
    else {
        if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitSource)) == false)) {
            return true;
        }

        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    libUIUI_gf_UIFloatingCombatTextCreateTextTag(EventPlayerEffectUsedUnit(c_effectUnitSource), StringExternal("Param/Value/lib_UIUI_E5F3BA88"), lv_players, "FCT_Ability_Normal", libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UICombatFloatingElementsAvoiding_Init () {
    libUIUI_gt_UICombatFloatingElementsAvoiding = TriggerCreate("libUIUI_gt_UICombatFloatingElementsAvoiding_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UICombatFloatingElementsAvoiding, c_playerAny, "AvoidedDummy");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UICombatFloatingElementsAvoiding, c_playerAny, "AvoidedDummyCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenOverlayImagesPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_nPCPlayers, false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbathurSymbioteOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CCOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "FlashBangOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "SpecialOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "DeathOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysInitialize_Init () {
    libUIUI_gt_FullscreenOverlaysInitialize = TriggerCreate("libUIUI_gt_FullscreenOverlaysInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Death Overlay Hide Time Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoE2CDF856_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE2CDF856_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE2CDF856_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((EventTimer() == libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lv_itPlayer])) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Init () {
    libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires = TriggerCreate("libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[10]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[11]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[12]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[13]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[14]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Special Overlay Hide Time Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto6D542AC8_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D542AC8_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto6D542AC8_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((EventTimer() == libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lv_itPlayer])) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Init () {
    libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires = TriggerCreate("libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[10]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[11]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[12]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[13]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[14]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Initialize Rework
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysInitializeRework_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenOverlayImagesPanelRework");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "SpecialOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysInitializeRework_Init () {
    libUIUI_gt_FullscreenOverlaysInitializeRework = TriggerCreate("libUIUI_gt_FullscreenOverlaysInitializeRework_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Splash Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_GameOverSplashInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/GameOverSplash");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_gameOverSplash.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "VictoryBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_victoryFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "VictoryBackground/VictoryLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_184306D1"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_VictoryLabel_Observer", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DefeatBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_defeatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DefeatBackground/DefeatLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_51E2F601"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_DefeatLabel_Observer", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_gameOverSplash.lv_defeatLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "GameOverLeaveButton");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_leaveButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_GameOverSplashInitialize_Init () {
    libUIUI_gt_GameOverSplashInitialize = TriggerCreate("libUIUI_gt_GameOverSplashInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Game UI Handles
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeGameUIHandles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "$this");
    libUIUI_gv_uIGameUIHandles.lv_gameUI = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    libUIUI_gv_uIGameUIHandles.lv_gameUIContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    libUIUI_gv_uIGameUIHandles.lv_minimapPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
    libUIUI_gv_uIGameUIHandles.lv_helpButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/MenuButton");
    libUIUI_gv_uIGameUIHandles.lv_gameMenuButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/PingButton");
    libUIUI_gv_uIGameUIHandles.lv_pingButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/DisableMinimapCommandsButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    libUIUI_gv_uIGameUIHandles.lv_disableMinimapCommandsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/EnableMinimapCommandsButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIGameUIHandles.lv_enableMinimapCommandsButton = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypeLabel, "GameServerLabel");
    libUIUI_gv_uIGameUIHandles.lv_serverLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypeLabel, "GameVersionLabel");
    libUIUI_gv_uIGameUIHandles.lv_gameVersionLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypeLabel, "MatchIDLabel");
    libUIUI_gv_uIGameUIHandles.lv_matchIDLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeGameUIHandles_Init () {
    libUIUI_gt_UIInitializeGameUIHandles = TriggerCreate("libUIUI_gt_UIInitializeGameUIHandles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Game UI - Turn On Faction States
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGameUITurnOnFactionStates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto795321CA_g;
    playergroup auto8D4EB5B9_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto795321CA_g = libCore_gv_teamOrder;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto795321CA_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_UIGameUITurnOnFactionStateForPlayer(libGame_ge_Faction_Order, lv_itPlayer);
    }
    auto8D4EB5B9_g = libCore_gv_teamChaos;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8D4EB5B9_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libUIUI_gf_UIGameUITurnOnFactionStateForPlayer(libGame_ge_Faction_Chaos, lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGameUITurnOnFactionStates_Init () {
    libUIUI_gt_UIGameUITurnOnFactionStates = TriggerCreate("libUIUI_gt_UIGameUITurnOnFactionStates_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Game UI - Set GameData
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGameUISetGameData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_uIGameUIHandles.lv_serverLabel, StringToText(libGame_gv_gameData.lv_gameServerID), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIGameUIHandles.lv_gameVersionLabel, StringToText(libGame_gv_gameData.lv_gameVersionID), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIGameUIHandles.lv_matchIDLabel, StringToText(libGame_gv_gameData.lv_gameMatchID), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGameUISetGameData_Init () {
    libUIUI_gt_UIGameUISetGameData = TriggerCreate("libUIUI_gt_UIGameUISetGameData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - God Ray - Create
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGodRayCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_heroUnit != null))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "GodRayCreatePersistent", libGame_gv_players[EventPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGodRayCreate_Init () {
    libUIUI_gt_UIGodRayCreate = TriggerCreate("libUIUI_gt_UIGodRayCreate_Func");
    TriggerAddEventKeyPressed(libUIUI_gt_UIGodRayCreate, c_playerAny, c_keySpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - God Ray - Destroy
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGodRayDestroy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_heroUnit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "GodRayDestroyPersistent", libGame_gv_players[EventPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGodRayDestroy_Init () {
    libUIUI_gt_UIGodRayDestroy = TriggerCreate("libUIUI_gt_UIGodRayDestroy_Func");
    TriggerAddEventKeyPressed(libUIUI_gt_UIGodRayDestroy, c_playerAny, c_keySpace, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - God Ray - Destroy On DC
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGodRayDestroyOnDC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_heroUnit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "GodRayDestroyPersistent", libGame_gv_players[EventPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGodRayDestroyOnDC_Init () {
    libUIUI_gt_UIGodRayDestroyOnDC = TriggerCreate("libUIUI_gt_UIGodRayDestroyOnDC_Func");
    TriggerAddEventPlayerLeft(libUIUI_gt_UIGodRayDestroyOnDC, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Healing Fountains Help Text
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHealingFountainsHelpText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamOrderIndex_C);
    libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamChaosIndex_C);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, true);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, true);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHealingFountainsHelpText_Init () {
    libUIUI_gt_UIInitializeHealingFountainsHelpText = TriggerCreate("libUIUI_gt_UIInitializeHealingFountainsHelpText_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Player Uses Healing Fountain
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = true;
    libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, false);
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, c_playerAny, "HeroGenericFountainDrink@InitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Text Display Controller
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTextTag;
    fixed lv_moonwellCooldown;

    // Automatic Variable Declarations
    int auto38B39C8E_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto38B39C8E_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto38B39C8E_ae ; lv_itPlayer += 1 ) {
        if (((UnitIsValid(libGame_gv_players[lv_itPlayer].lv_heroUnit) == false) || (libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_itPlayer] == true))) {
            continue;
        }
        if ((UnitGetPropertyFixed(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (UnitIsValid(libGame_gv_players[lv_itPlayer].lv_activeVehicle) == false)) {
            if ((libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lv_itPlayer] == false)) {
                libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_itPlayer, true);
            }
        }
        else {
            if ((libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lv_itPlayer] == true)) {
                libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_itPlayer, false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Healing Fountain Dies
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    int auto5FEB8BF9_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagTownStructureMoonwell) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder) || (UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamChaos)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(EventUnit()));
    auto5FEB8BF9_ae = libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C;
    lv_iter = 1;
    for ( ; lv_iter <= auto5FEB8BF9_ae ; lv_iter += 1 ) {
        if ((libUIUI_gv_uIHealingFountainsHelpText[lv_team][lv_iter].lv_healingFountain == EventUnit())) {
            TextTagShow(libUIUI_gv_uIHealingFountainsHelpText[lv_team][lv_iter].lv_textTag, PlayerGroupAll(), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, false);
    TriggerAddEventUnitDied(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Hero Console
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHeroConsole_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroConsolePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroConsole.lv_heroConsolePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroStatsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroConsole.lv_heroStatsFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrame");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Default] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameOrange");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Orange] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameBlinking");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Blinking] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameYellow");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Yellow] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFramePink");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Pink] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoEnergy");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_NoEnergy] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoEnergyNoShield");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_NoEnergyNoShield] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/HealthBar");
    libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/EnergyBar");
    libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel/PortraitPanel");
    libUIUI_gv_uIHeroConsole.lv_gameUIPortrait = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroCommandCardPanelFrame");
    libUIUI_gv_uIHeroConsole.lv_gameUICommandCardPanelFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InventoryPanel");
    libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroBuffDebuffPanel");
    libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroBuffBar");
    libUIUI_gv_uIHeroConsole.lv_buffBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroDebuffBar");
    libUIUI_gv_uIHeroConsole.lv_debuffBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroNeutralBar");
    libUIUI_gv_uIHeroConsole.lv_neutralBar = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHeroConsole_Init () {
    libUIUI_gt_UIInitializeHeroConsole = TriggerCreate("libUIUI_gt_UIInitializeHeroConsole_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroDeathStunFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "UnitStatusDurationBarLeft");
    libNtve_gf_SetDialogItemBehavior(DialogControlLastCreated(), "Dead", PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "UnitStatusDurationBarRight");
    libNtve_gf_SetDialogItemBehavior(DialogControlLastCreated(), "Dead", PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DeathStunIcon");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathStunLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathStunTimeLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroCastChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroBehaviorChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "HeroBehaviorChannelBar");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsInitialize = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Channel Behavior Added
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_heroUnit = libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lv_player];
    if ((lv_heroUnit != EventUnit())) {
        return true;
    }

    if ((UnitBehaviorDuration(lv_heroUnit, EventUnitBehavior()) >= UnitBehaviorDuration(lv_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lv_player]))) {
        libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lv_player] = EventUnitBehavior();
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar, EventUnitBehavior(), libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, EventUnitBehavior(), "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_player]);
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lv_player], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded, null, c_unitBehaviorFlagRestorable, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoEC5C1263_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoEC5C1263_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoEC5C1263_ai >= 0 && lv_itPlayer <= autoEC5C1263_ae) || (autoEC5C1263_ai < 0 && lv_itPlayer >= autoEC5C1263_ae) ) ; lv_itPlayer += autoEC5C1263_ai ) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsUpdate = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Func");
    TriggerEnable(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Hero Leaderboard - Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHeroLeaderboardInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_sortButtonNumber;
    const int lv_maxSortButtons = 7;
    int lv_itPlayerFrame;
    int lv_itTalent;

    // Automatic Variable Declarations
    const int auto6E002B1B_ae = libCore_gv_bALMaxPlayers;
    const int auto6E002B1B_ai = 1;
    const int autoF5780A00_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoF5780A00_ai = 1;
    const int autoF3B2BBD3_ae = lv_maxSortButtons;
    const int autoF3B2BBD3_ai = 1;
    int auto97D3A473_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "HeroLeaderPanel");
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroLeaderboard.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroLeaderPanelContainer");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TabControl");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "StatsContainerFrame");
    libUIUI_gv_uIHeroLeaderboard.lv_statsContainer = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TalentsContainerFrame");
    libUIUI_gv_uIHeroLeaderboard.lv_talentsContainer = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DeathRecapContainerFrame");
    libUIUI_gv_uIHeroLeaderboard.lv_deathRecapContainer = DialogControlLastCreated();
    lv_itPlayerFrame = 1;
    for ( ; ( (auto6E002B1B_ai >= 0 && lv_itPlayerFrame <= auto6E002B1B_ae) || (auto6E002B1B_ai < 0 && lv_itPlayerFrame >= auto6E002B1B_ae) ) ; lv_itPlayerFrame += auto6E002B1B_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("PlayerFrame" + IntToString(lv_itPlayerFrame))));
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uIHeroLeaderboard.lv_playerFrameMainDialog[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PlayerHeroIconFrame/HeroIconImage");
        libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroIconImage[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerNameFrame/PlayerNameLabel");
        libUIUI_gv_uIHeroLeaderboard.lv_playerFramePlayerName[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroNameFrame/HeroNameLabel");
        libUIUI_gv_uIHeroLeaderboard.lv_playerFrameHeroName[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CarriedMechanicScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsMapMechanicLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CarriedMechanicScoreValueFrame/ScoreValueFrame1/Image");
        libUIUI_gv_uIHeroLeaderboard.lv_statsMapMechanicImage[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "StatsContainerFrame");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uIHeroLeaderboard.lv_statsContainerPlayer[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SoloKillScoreValueFrame");
        libUIUI_gv_uIHeroLeaderboard.lv_statsKillsFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SoloKillScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsKillsLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AssistsScoreValueFrame");
        libUIUI_gv_uIHeroLeaderboard.lv_statsAssistsFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AssistsScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsAssistsLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DeathsScoreValueFrame");
        libUIUI_gv_uIHeroLeaderboard.lv_statsDeathsFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathsScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsDeathsLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SiegeDamageScoreValueFrame");
        libUIUI_gv_uIHeroLeaderboard.lv_statsSiegeDamageFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SiegeDamageScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsSiegeDamageLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroDamageScoreValueFrame");
        libUIUI_gv_uIHeroLeaderboard.lv_statsHeroDamageFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDamageScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsHeroDamageLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HealingScoreValueFrame");
        libUIUI_gv_uIHeroLeaderboard.lv_statsHealedandAbsorbedFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealingScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsHealedandAbsorbedLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DamageTakenScoreValueFrame");
        libUIUI_gv_uIHeroLeaderboard.lv_statsDamageTakenFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DamageTakenScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsDamageTakenLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ExperienceScoreValueFrame");
        libUIUI_gv_uIHeroLeaderboard.lv_statsXPContributionFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ExperienceScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIHeroLeaderboard.lv_statsXPContributionLabel[lv_itPlayerFrame] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TalentTreeFrame");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerFrame[lv_itPlayerFrame] = DialogControlLastCreated();
        lv_itTalent = 0;
        for ( ; ( (autoF5780A00_ai >= 0 && lv_itTalent <= autoF5780A00_ae) || (autoF5780A00_ai < 0 && lv_itTalent >= autoF5780A00_ae) ) ; lv_itTalent += autoF5780A00_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTreeIcon" + IntToString(lv_itTalent))));
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_itPlayerFrame][lv_itTalent] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IconImage");
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentIcon[lv_itPlayerFrame][lv_itTalent] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "QuestProgressBar");
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentQuestProgressBar[lv_itPlayerFrame][lv_itTalent] = DialogControlLastCreated();
            DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIHeroLeaderboard.lv_mainDialog, c_triggerControlTypeTooltip, "StandardTooltipCommanders/HeroSelectionTooltipTemplate");
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltip[lv_itPlayerFrame][lv_itTalent] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_itPlayerFrame][lv_itTalent], libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltip[lv_itPlayerFrame][lv_itTalent], PlayerGroupAll());
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentFrame[lv_itPlayerFrame][lv_itTalent], c_anchorBottom, 0, 0);
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipNameLabel[lv_itPlayerFrame][lv_itTalent] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipInfoLabel[lv_itPlayerFrame][lv_itTalent] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipDescriptionLabel[lv_itPlayerFrame][lv_itTalent] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestProgressionLabel");
            libUIUI_gv_uIHeroLeaderboard.lv_talentsContainerTalentTooltipQuestProgressionLabel[lv_itPlayerFrame][lv_itTalent] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
            lv_currentPanelLayer -= 1;
        }
        lv_currentPanelLayer -= 1;
        lv_currentPanelLayer -= 1;
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "StatsContainerFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroLeaderboard.lv_statsContainer = DialogControlLastCreated();
    lv_sortButtonNumber = 0;
    for ( ; ( (autoF3B2BBD3_ai >= 0 && lv_sortButtonNumber <= autoF3B2BBD3_ae) || (autoF3B2BBD3_ai < 0 && lv_sortButtonNumber >= autoF3B2BBD3_ae) ) ; lv_sortButtonNumber += autoF3B2BBD3_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SortButton" + IntToString(lv_sortButtonNumber));
        auto97D3A473_val = lv_sortButtonNumber;
        if (auto97D3A473_val == libUIUI_ge_UIHeroLeaderboardSortButton_Kills) {
            libUIUI_gv_uIHeroLeaderboard.lv_sortButtonKills = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIHeroLeaderboardSortButton_Assists) {
            libUIUI_gv_uIHeroLeaderboard.lv_sortButtonAssists = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIHeroLeaderboardSortButton_Deaths) {
            libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDeaths = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIHeroLeaderboardSortButton_SiegeDamage) {
            libUIUI_gv_uIHeroLeaderboard.lv_sortButtonSiegeDamage = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIHeroLeaderboardSortButton_HeroDamage) {
            libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHeroDamage = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIHeroLeaderboardSortButton_HealedandAbsorbed) {
            libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHealedAndAbsorbed = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIHeroLeaderboardSortButton_DamageTaken) {
            libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDamageTaken = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIHeroLeaderboardSortButton_XPContribution) {
            libUIUI_gv_uIHeroLeaderboard.lv_sortButtonXPContribution = DialogControlLastCreated();
        }
        else {
        }
    }
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHeroLeaderboardInitialize_Init () {
    libUIUI_gt_UIHeroLeaderboardInitialize = TriggerCreate("libUIUI_gt_UIHeroLeaderboardInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Hero Leaderboard - Update Stats
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHeroLeaderboardUpdateStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoD0B6383C_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIHeroLeaderboardSortingCalculateBestSortingPlayerForBothTeams();
    autoD0B6383C_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoD0B6383C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libUIUI_gv_uITabScreenPanel.lv_mainPanelToggled[lv_itPlayer] == true) && (libGame_gv_players[lv_itPlayer].lv_playerisJoinedatStart == true) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive) && (PlayerType(lv_itPlayer) == c_playerTypeUser)) {
            libUIUI_gf_UIHeroLeaderboardSortingDoSorting(lv_itPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHeroLeaderboardUpdateStats_Init () {
    libUIUI_gt_UIHeroLeaderboardUpdateStats = TriggerCreate("libUIUI_gt_UIHeroLeaderboardUpdateStats_Func");
    TriggerEnable(libUIUI_gt_UIHeroLeaderboardUpdateStats, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIHeroLeaderboardUpdateStats, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selection - UI Init
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroSelectionUIInit_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_init_i;
    int lv_itCurrentPanelLayer;
    int[11] lv_panels;
    int lv_itPlayerSlot;
    int lv_itPlayer;
    int lv_itHero;
    int lv_itRound;
    int lv_itTeam;
    int lv_itHeroRow;
    int lv_itHeroCol;
    int lv_itViewer;
    int lv_itAbil;
    int lv_itTalentButton;
    playergroup lv_viewerGroup;
    int lv_itPlayerCount;
    int lv_tooltip;
    int lv_itPairedHero;
    int lv_itAbilityVariationSelector;
    int lv_itBuild;

    // Automatic Variable Declarations
    const int autoB0A19D54_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int autoB0A19D54_ai = 1;
    const int auto1863EC57_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto1863EC57_ai = 1;
    const int autoC119126B_ae = libCore_gv_bALMaxTeams;
    int autoC119126B_var;
    playergroup auto7616B7B5_g;
    const int autoBD2F2F81_ae = libUIUI_gv_heroSelectionNumberofRows;
    const int autoBD2F2F81_ai = 1;
    const int autoBFB175AF_ae = libUIUI_gv_heroSelectionNumberofCols;
    const int autoBFB175AF_ai = 1;
    int autoE71F7130_ae;
    int auto963BA00C_ae;
    const int autoFD7A4D02_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int autoFD7A4D02_ai = 1;
    const int auto8A398910_ae = libCore_gv_dataHeroesNumberOfHeroicAbilitiesPerHero;
    int auto8A398910_var;
    const int auto214758BA_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto214758BA_ai = 1;
    const int auto62BAE9D3_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto62BAE9D3_ai = 1;
    const int auto72157DE9_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int auto72157DE9_ai = 1;
    const int auto73C12547_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto73C12547_ai = 1;
    const int autoD75DFE02_ae = libCore_gv_dataHeroesMaxTalentTiers;
    int autoD75DFE02_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_viewerGroup = PlayerGroupEmpty();
    lv_tooltip = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libUIUI_gv_heroSelection.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HeroSelection/CurateHeroSelectionPanelTemplate");
    libUIUI_gv_heroSelection.lv_mainPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "MapNameLabel");
    libUIUI_gv_heroSelection.lv_titleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "SelectedHeroInfo");
    libUIUI_gv_heroSelection.lv_selectedHeroPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroName");
    libUIUI_gv_heroSelection.lv_selectedHeroName = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("HeroSelection/ChooseAHero"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroRole");
    libUIUI_gv_heroSelection.lv_selectedHeroRole = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libUIUI_gv_heroSelection.lv_countdownLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "RoundStartCountdownFrame");
    libUIUI_gv_heroSelection.lv_finalCountdownFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "AbilitiesButton");
    libUIUI_gv_heroSelection.lv_abilitiesButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "TalentsButton");
    libUIUI_gv_heroSelection.lv_talentsButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "InfoButton");
    libUIUI_gv_heroSelection.lv_brawlButton = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "ReadyButton");
    libUIUI_gv_heroSelection.lv_lockButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_itPlayer = 1;
    for ( ; ( (autoB0A19D54_ai >= 0 && lv_itPlayer <= autoB0A19D54_ae) || (autoB0A19D54_ai < 0 && lv_itPlayer >= autoB0A19D54_ae) ) ; lv_itPlayer += autoB0A19D54_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeCutscene, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroCutsceneFrame" + IntToString((lv_itPlayer-1)))));
        libUIUI_gv_heroSelection.lv_heroCutsceneFrame[lv_itPlayer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    }
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TeamPanel");
    libUIUI_gv_heroSelection.lv_pickHeroPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itPlayerSlot = 1;
    for ( ; ( (auto1863EC57_ai >= 0 && lv_itPlayerSlot <= auto1863EC57_ae) || (auto1863EC57_ai < 0 && lv_itPlayerSlot >= auto1863EC57_ae) ) ; lv_itPlayerSlot += auto1863EC57_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerName" + IntToString(lv_itPlayerSlot))));
        libUIUI_gv_heroSelection.lv_teamHeroPlayerName[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamHeroName" + IntToString(lv_itPlayerSlot))));
        libUIUI_gv_heroSelection.lv_teamHeroHeroName[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerHero" + IntToString(lv_itPlayerSlot))));
        libUIUI_gv_heroSelection.lv_teamHeroFrame[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "EmptyImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libUIUI_gv_heroSelection.lv_teamHeroEmpty[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroImage[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "NormalImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroBorder[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroLocked[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImageAnimation");
        libUIUI_gv_heroSelection.lv_teamHeroLockedAnimation[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroRole");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroRole[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroRoleBG");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroRoleBG[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly");
        libUIUI_gv_heroSelection.lv_teamHeroSelectedAlly[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "ThinkingContainer");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroThinking[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    autoC119126B_var = 1;
    for ( ; autoC119126B_var <= autoC119126B_ae; autoC119126B_var += 1 ) {
        auto7616B7B5_g = libGame_gv_teams[autoC119126B_var].lv_teamPlayerGroupNoNPCPlayers;
        lv_itViewer = -1;
        while (true) {
            lv_itViewer = PlayerGroupNextPlayer(auto7616B7B5_g, lv_itViewer);
            if (lv_itViewer < 0) { break; }
            libUIUI_gv_heroSelection.lv_teamPanelRowPlayer[lv_itViewer][libGame_gv_players[lv_itViewer].lv_playerAllySlot] = lv_itViewer;
        }
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "PickHeroFrame");
    libUIUI_gv_heroSelection.lv_pickHeroPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Role1Label");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Role2Label");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Role3Label");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Role4Label");
    lv_itHeroRow = 1;
    for ( ; ( (autoBD2F2F81_ai >= 0 && lv_itHeroRow <= autoBD2F2F81_ae) || (autoBD2F2F81_ai < 0 && lv_itHeroRow >= autoBD2F2F81_ae) ) ; lv_itHeroRow += autoBD2F2F81_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHeroSelectionPanel" + IntToString(lv_itHeroRow))));
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        lv_itHeroCol = 1;
        for ( ; ( (autoBFB175AF_ai >= 0 && lv_itHeroCol <= autoBFB175AF_ae) || (autoBFB175AF_ai < 0 && lv_itHeroCol >= autoBFB175AF_ae) ) ; lv_itHeroCol += autoBFB175AF_ai ) {
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHero" + IntToString(lv_itHeroCol))));
            libUIUI_gv_heroSelection.lv_heroButtons[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            lv_itCurrentPanelLayer += 1;
            lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroImage");
            libUIUI_gv_heroSelection.lv_heroButtonImage[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "NormalImage");
            libUIUI_gv_heroSelection.lv_heroButtonBorder[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "EmptyImage");
            libUIUI_gv_heroSelection.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImage1");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImage2");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImage3");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe3[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly1");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly2");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImage1");
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImage2");
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImageAlly1");
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImageAlly2");
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "ThinkingContainer");
            libUIUI_gv_heroSelection.lv_heroButtonBordersThinking[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            if ((libUIUI_gv_heroSelectionCurateHeroSelections[lv_itHeroRow][lv_itHeroCol] != null)) {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_heroButtonImage[lv_itHeroRow][lv_itHeroCol], (CatalogFieldValueGet(c_gameCatalogHero, libUIUI_gv_heroSelectionCurateHeroSelections[lv_itHeroRow][lv_itHeroCol], "SelectScreenButtonImage", c_playerAny)), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBorder[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                DialogControlFadeTransparency(libUIUI_gv_heroSelection.lv_heroButtonBorder[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), 0.0, 100.0);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonImage[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), true);
                libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(false, lv_itHeroRow, lv_itHeroCol, PlayerGroupAll(), false);
            }
            lv_itCurrentPanelLayer -= 1;
        }
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroSelectAbilitiesPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_heroSelection.lv_abilitiesPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libUIUI_gv_heroSelection.lv_abilitiesPanelCloseButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroContainerFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelHeroContainerFrame = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "UniverseIconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "PairedHeroFrame/PairedHeroTileList");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "PairedHeroFrame/FormLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListName = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileList;
    autoE71F7130_ae = libCore_gv_dataHeroesNumberOfPairedHeroesPerHero;
    lv_itPairedHero = 1;
    for ( ; lv_itPairedHero <= autoE71F7130_ae ; lv_itPairedHero += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString((lv_itPairedHero - 1)))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[lv_itPairedHero] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroContainerFrame/PortraitPanel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItemHeroImage[lv_itPairedHero] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    auto963BA00C_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero;
    lv_itAbil = 0;
    for ( ; lv_itAbil <= auto963BA00C_ae ; lv_itAbil += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString(lv_itAbil))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[lv_itAbil] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipCommanders/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_tooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipFrame[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyFrame[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[lv_itAbil] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilityVariationsSelectorButtonList");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelector[lv_itAbil] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        lv_itAbilityVariationSelector = 1;
        for ( ; ( (autoFD7A4D02_ai >= 0 && lv_itAbilityVariationSelector <= autoFD7A4D02_ae) || (autoFD7A4D02_ai < 0 && lv_itAbilityVariationSelector >= autoFD7A4D02_ae) ) ; lv_itAbilityVariationSelector += autoFD7A4D02_ai ) {
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectorButton" + IntToString(lv_itAbilityVariationSelector))));
            libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_itAbil][lv_itAbilityVariationSelector] = DialogControlLastCreated();
        }
        lv_itCurrentPanelLayer -= 1;
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TraitTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "Item0");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipCommanders/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_tooltip = DialogControlLastCreated();
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "HeroAbilHotkeyFrame", "HotkeyAbility");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;

    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroicTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    auto8A398910_var = 1;
    for ( ; auto8A398910_var <= auto8A398910_ae; auto8A398910_var += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString(auto8A398910_var))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[auto8A398910_var] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipCommanders/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_tooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipFrame[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyFrame[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[auto8A398910_var] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "ActiveTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "Item0");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItem = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipCommanders/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_tooltip = DialogControlLastCreated();
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemDescriptionSimpleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemHotkeyLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilityVariationsSelectorButtonList");
    libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelector = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itAbilityVariationSelector = 1;
    for ( ; ( (auto214758BA_ai >= 0 && lv_itAbilityVariationSelector <= auto214758BA_ae) || (auto214758BA_ai < 0 && lv_itAbilityVariationSelector >= auto214758BA_ae) ) ; lv_itAbilityVariationSelector += auto214758BA_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectorButton" + IntToString(lv_itAbilityVariationSelector))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_itAbilityVariationSelector] = DialogControlLastCreated();
    }
    lv_itCurrentPanelLayer -= 1;
    lv_itCurrentPanelLayer -= 1;

    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "PassiveTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "Item0");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItem = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "StandardTooltipCommanders/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_tooltip = DialogControlLastCreated();
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemDescriptionSimpleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemHotkeyLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilityVariationsSelectorButtonList");
    libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelector = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itAbilityVariationSelector = 1;
    for ( ; ( (auto62BAE9D3_ai >= 0 && lv_itAbilityVariationSelector <= auto62BAE9D3_ae) || (auto62BAE9D3_ai < 0 && lv_itAbilityVariationSelector >= auto62BAE9D3_ae) ) ; lv_itAbilityVariationSelector += auto62BAE9D3_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectorButton" + IntToString(lv_itAbilityVariationSelector))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_itAbilityVariationSelector] = DialogControlLastCreated();
    }
    lv_itCurrentPanelLayer -= 1;
    lv_itCurrentPanelLayer -= 1;

    lv_itCurrentPanelLayer -= 1;
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroSelectTalentsPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_heroSelection.lv_talentsPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itBuild = 1;
    for ( ; ( (auto72157DE9_ai >= 0 && lv_itBuild <= auto72157DE9_ae) || (auto72157DE9_ai < 0 && lv_itBuild >= auto72157DE9_ae) ) ; lv_itBuild += auto72157DE9_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentBuildSelection/PageButton" + IntToString(lv_itBuild))));
        libUIUI_gv_heroSelection.lv_buildButtons[lv_itBuild] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libUIUI_gv_heroSelection.lv_talentsPanelCloseButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroContainerFrame");
    libUIUI_gv_heroSelection.lv_talentsPanelHeroContainerFrame = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "UniverseIconImage");
    libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_talentsPanelNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TalentTreePanel");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itTalentButton = 1;
    for ( ; ( (auto73C12547_ai >= 0 && lv_itTalentButton <= auto73C12547_ae) || (auto73C12547_ai < 0 && lv_itTalentButton >= auto73C12547_ae) ) ; lv_itTalentButton += auto73C12547_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTreeButton" + IntToString(lv_itTalentButton))));
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itTalentButton] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[(lv_itCurrentPanelLayer-1)], c_triggerControlTypeTooltip, "StandardTooltipCommanders/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_tooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipFrame[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Label");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[lv_itTalentButton] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    autoD75DFE02_var = 1;
    for ( ; autoD75DFE02_var <= autoD75DFE02_ae; autoD75DFE02_var += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTierButton" + IntToString(autoD75DFE02_var))));
        libUIUI_gv_heroSelection.lv_talentsPanelTierButton[autoD75DFE02_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[autoD75DFE02_var], StringExternalHotkey(("UI/Hotkey/CommandButton0" + IntToString((autoD75DFE02_var - 1)))), PlayerGroupAll());
    }
    lv_itCurrentPanelLayer -= 1;
    libUIUI_gf_HSUILoadoutInitialization(libUIUI_gv_heroSelection.lv_mainPanel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroSelectionUIInit_Init () {
    libUIUI_gt_HeroSelectionUIInit = TriggerCreate("libUIUI_gt_HeroSelectionUIInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS - Button Used
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSButtonUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itHeroRow;
    int lv_itHeroCol;
    int lv_player;
    int lv_dialogItem;
    int lv_itAbilSlot;
    int lv_itSelectorButton;
    int lv_itBuild;
    int lv_itColumn;
    int lv_itTier;

    // Automatic Variable Declarations
    const int autoFEBD2695_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoFEBD2695_ai = 1;
    const int auto495CEB15_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto495CEB15_ai = 1;
    const int auto38DCD092_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto38DCD092_ai = 1;
    int auto9247D8AF_ae;
    int autoE7C33F67_ae;
    int auto22C2B89D_val;
    const int auto4BC9B0AB_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
    const int auto4BC9B0AB_ai = 1;
    int auto7C1B2975_ae;
    int autoC2078CBE_ae;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_dialogItem = EventDialogControl();
    lv_itBuild = 1;
    for ( ; ( (autoFEBD2695_ai >= 0 && lv_itBuild <= autoFEBD2695_ae) || (autoFEBD2695_ai < 0 && lv_itBuild >= autoFEBD2695_ae) ) ; lv_itBuild += autoFEBD2695_ai ) {
        if ((libUIUI_gv_heroSelection.lv_buildButtons[lv_itBuild] == lv_dialogItem)) {
            libUIUI_gv_uITalentsPrepickedSelectedBuild[lv_player] = lv_itBuild;
            libUIUI_gf_UITalentsPrepickedSelectBuildButtonForPlayerHeroSelection(lv_player, lv_itBuild);
            libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lv_player);
            return true;
        }

    }
    lv_itColumn = 1;
    for ( ; ( (auto495CEB15_ai >= 0 && lv_itColumn <= auto495CEB15_ae) || (auto495CEB15_ai < 0 && lv_itColumn >= auto495CEB15_ae) ) ; lv_itColumn += auto495CEB15_ai ) {
        if ((libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[lv_itColumn] == lv_dialogItem)) {
            libGame_gf_TalentsPrepickedUpdatePrepickedTalentToPressedColumnOfPlayer(lv_player, lv_itColumn);
            libGame_gf_TalentsPrepickedStoreBuildStringOfHeroForPlayer(libGame_gv_players[lv_player].lv_heroIndex, lv_player);
            return true;
        }

    }
    if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_abilitiesPanelCloseButton)) {
        if ((libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] == true)) {
            libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] = false;
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesButton, false, libCore_gv_playerGroupFromPlayer[lv_player]);
            DialogControlSetAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanel, libCore_gv_playerGroupFromPlayer[lv_player], "AbilitiesToggle", "Hide");
        }
        return true;
    }
    else if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_talentsPanelCloseButton)) {
        if ((libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] == true)) {
            libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] = false;
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsButton, false, libCore_gv_playerGroupFromPlayer[lv_player]);
            DialogControlSetAnimationState(libUIUI_gv_heroSelection.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lv_player], "TalentsToggle", "Hide");
        }
        return true;
    }
    else if ((lv_dialogItem != libUIUI_gv_heroSelection.lv_talentsPanelTierButton[libUIUI_gv_heroSelectionSetting.lv_talentTierPressedButton[lv_player]]) && ((libUIUI_gv_heroSelection.lv_talentsPanelTierButton[1] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[2] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[3] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[4] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[5] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[6] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[7] == lv_dialogItem))) {
        lv_itTier = 1;
        for ( ; ( (auto38DCD092_ai >= 0 && lv_itTier <= auto38DCD092_ae) || (auto38DCD092_ai < 0 && lv_itTier >= auto38DCD092_ae) ) ; lv_itTier += auto38DCD092_ai ) {
            if ((libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lv_itTier] == lv_dialogItem)) {
                libUIUI_gf_HSUIUpdateTalentsOfTierForPlayer(lv_player, lv_itTier);
                libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lv_player);
                return true;
            }

        }
    }
    else if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_lockButton)) {
        if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_player] == false)) {
            libUIUI_gf_lockunlockherochoise(lv_player, true);
            SoundPlayForPlayer(SoundLink("UI_BNet_Ready", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
        }
        else {
            libUIUI_gf_lockunlockherochoise(lv_player, false);
            SoundPlayForPlayer(SoundLink("UI_BNet_Customize", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
        }
        return true;
    }
    else if (((lv_dialogItem == libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[1]) || (lv_dialogItem == libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[2]))) {
        if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_abilitiesPanelPairedHeroTileListItem[1])) {
            libUIUI_gv_heroSelectionPairedHeroForm[lv_player] = false;
        }
        else {
            libUIUI_gv_heroSelectionPairedHeroForm[lv_player] = true;
        }
        libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer(lv_player, libUIUI_gv_heroSelectionPairedHeroForm[lv_player]);
        return true;
    }
    auto9247D8AF_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiesPerHero;
    lv_itAbilSlot = 0;
    for ( ; lv_itAbilSlot <= auto9247D8AF_ae ; lv_itAbilSlot += 1 ) {
        autoE7C33F67_ae = libCore_gv_dataHeroesNumberOfBasicAbilitiyVariationsPerAbility;
        lv_itSelectorButton = 1;
        for ( ; lv_itSelectorButton <= autoE7C33F67_ae ; lv_itSelectorButton += 1 ) {
            if ((libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemSelectorButton[lv_itAbilSlot][lv_itSelectorButton] == lv_dialogItem)) {
                auto22C2B89D_val = lv_itAbilSlot;
                if (auto22C2B89D_val == 0) {
                    libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_player, lv_itSelectorButton, "Mount (Z)");
                }
                else if (auto22C2B89D_val == 1) {
                    libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_player, lv_itSelectorButton, "Basic Ability (Q)");
                }
                else if (auto22C2B89D_val == 2) {
                    libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_player, lv_itSelectorButton, "Basic Ability (W)");
                }
                else if (auto22C2B89D_val == 3) {
                    libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_player, lv_itSelectorButton, "Basic Ability (E)");
                }
                else {
                }
                return true;
            }
        }
    }
    lv_itSelectorButton = 1;
    for ( ; ( (auto4BC9B0AB_ai >= 0 && lv_itSelectorButton <= auto4BC9B0AB_ae) || (auto4BC9B0AB_ai < 0 && lv_itSelectorButton >= auto4BC9B0AB_ae) ) ; lv_itSelectorButton += auto4BC9B0AB_ai ) {
        if ((libUIUI_gv_heroSelection.lv_abilitiesPanelActiveAbilItemSelectorButton[lv_itSelectorButton] == lv_dialogItem)) {
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_player, lv_itSelectorButton, "Inventory (Active)");
            return true;
        }
        else if ((libUIUI_gv_heroSelection.lv_abilitiesPanelPassiveAbilItemSelectorButton[lv_itSelectorButton] == lv_dialogItem)) {
            libUIUI_gf_HSUIUpdateAbilityToVariationForPlayer(lv_player, lv_itSelectorButton, "Passive");
            return true;
        }
    }
    auto7C1B2975_ae = libUIUI_gv_heroSelectionNumberofRows;
    lv_itHeroRow = 1;
    for ( ; lv_itHeroRow <= auto7C1B2975_ae ; lv_itHeroRow += 1 ) {
        autoC2078CBE_ae = libUIUI_gv_heroSelectionNumberofCols;
        lv_itHeroCol = 1;
        for ( ; lv_itHeroCol <= autoC2078CBE_ae ; lv_itHeroCol += 1 ) {
            if ((libUIUI_gv_heroSelection.lv_heroButtons[lv_itHeroRow][lv_itHeroCol] == lv_dialogItem) && (libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_player] == false)) {
                libUIUI_gf_HeroSelectionSelectHeroForPlayer(lv_player, lv_itHeroRow, lv_itHeroCol);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSButtonUsed_Init () {
    libUIUI_gt_HSButtonUsed = TriggerCreate("libUIUI_gt_HSButtonUsed_Func");
    TriggerEnable(libUIUI_gt_HSButtonUsed, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Countdown Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUICountdownTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_crowdSound;
    int lv_itHero;

    // Automatic Variable Declarations
    int auto8DED820B_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
    auto8DED820B_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto8DED820B_ae ; lv_itPlayer += 1 ) {
        if (((GameIsOnline() == false) || ((PlayerStatus(lv_itPlayer) == c_playerStatusActive) && (PlayerType(lv_itPlayer) == c_playerTypeUser)))) {
            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                libGame_gv_players[lv_itPlayer].lv_heroIndex = libCore_gf_HeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer]]);
            }
            else {
                if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                    if ((libUIUI_gf_HSUIGoodToLockIn(lv_itPlayer) == true)) {
                        libGame_gv_players[lv_itPlayer].lv_heroIndex = libCore_gf_HeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]]);
                        libUIUI_gf_lockunlockherochoise(lv_itPlayer, true);
                        continue;
                    }

                }
                else {
                    libGame_gv_players[lv_itPlayer].lv_heroIndex = libUIUI_gf_HeroSelectionSelectRandomHeroForPlayer(lv_itPlayer);
                }
            }
        }

    }
    libUIUI_gf_HSUIUpdateHeroButtons();
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libUIUI_gv_heroSelectionSetting.lv_finalCountDownStarted = true;
    if ((GameIsOnline() == false)) {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_finalCountdownFrame, PlayerGroupAll(), false);
        DialogSetVisible(libUIUI_gv_heroSelection.lv_dialog, PlayerGroupAll(), false);
        TriggerEnable(libUIUI_gt_HSButtonUsed, false);
        TriggerEnable(libUIUI_gt_HSUILoadoutScrollBarUsed, true);
        TriggerEnable(libUIUI_gt_HSUILoadoutInputTrigger, true);
        TriggerEnable(libUIUI_gt_HSUILoadoutListBoxSelected, true);
        TriggerEnable(libUIUI_gt_HSUILoadoutSearchTextChanges, true);
        TriggerExecute(libGame_gt_PreloadingPreloadHeroes, true, true);
        TriggerExecute(libGame_gt_StartGame, true, false);
        UISetWorldVisible(PlayerGroupAll(), true);
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        libGame_gf_SetCoreMapLighting(libCore_gv_mAPMapLight, PlayerGroupActive(), 0.0);
        CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_countdownLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_finalCountdownFrame, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_FinalCountdown02", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeGame);
    DialogControlFadeTransparency(libUIUI_gv_heroSelection.lv_mainPanel, PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogDestroy(libUIUI_gv_heroSelection.lv_dialog);
    TriggerEnable(libUIUI_gt_HSButtonUsed, false);
    TriggerEnable(libUIUI_gt_HSUILoadoutScrollBarUsed, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutInputTrigger, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutListBoxSelected, true);
    TriggerEnable(libUIUI_gt_HSUILoadoutSearchTextChanges, true);
    TriggerExecute(libGame_gt_PreloadingPreloadHeroes, true, true);
    TriggerExecute(libGame_gt_StartGame, true, false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    libGame_gf_SetCoreMapLighting(libCore_gv_mAPMapLight, PlayerGroupAll(), 0.0);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUICountdownTimerExpires_Init () {
    libUIUI_gt_HSUICountdownTimerExpires = TriggerCreate("libUIUI_gt_HSUICountdownTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_HSUICountdownTimerExpires, libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Loadout - Scroll Bar Used
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUILoadoutScrollBarUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_editValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_editValue = "";

    // Conditions
    if (testConds) {
        if (!((libUIUI_gf_CanUseDialogItemTime(lv_player) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_skinsPanelScrollEditBox) && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinMaxLaneCount > libUIUI_gv_hSUILoadoutMaxSkinLaneCount_C)) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
        lv_editValue = libNtve_gf_DialogItemEditValue(EventDialogControl(), lv_player);
        if ((lv_editValue == "WheelUp") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane > 1)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane -= 1;
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane, lv_player);
        }
        else if ((lv_editValue == "WheelDown") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane < libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinMaxLaneCount)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane += 1;
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_skinsPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerSkinCurrentLane, lv_player);
        }
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_mountsPanelScrollEditBox) && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountMaxLaneCount > 1)) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
        lv_editValue = libNtve_gf_DialogItemEditValue(EventDialogControl(), lv_player);
        if ((lv_editValue == "WheelUp") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane > 1)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane -= 1;
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane, lv_player);
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
        }
        else if ((lv_editValue == "WheelDown") && (libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane < libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountMaxLaneCount)) {
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane += 1;
            libUIUI_gf_HSUISetScrollBarValueForPlayer(libUIUI_gv_hSUILoadout.lv_mountsPanelScrollBar, libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_laneControllerMountCurrentLane, lv_player);
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUILoadoutScrollBarUsed_Init () {
    libUIUI_gt_HSUILoadoutScrollBarUsed = TriggerCreate("libUIUI_gt_HSUILoadoutScrollBarUsed_Func");
    TriggerEnable(libUIUI_gt_HSUILoadoutScrollBarUsed, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUILoadoutScrollBarUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Loadout - Input Trigger
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUILoadoutInputTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_player;
    int lv_heroIndex;
    int lv_itUsedButton;
    int lv_itButton;
    int lv_elementIndex;
    int lv_loadoutVariation;

    // Automatic Variable Declarations
    const int auto15EB741B_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int auto15EB741B_ai = 1;
    const int autoD8CCE60B_ae = libUIUI_gv_hSUILoadoutMaxSkinItemCount_C;
    const int autoD8CCE60B_ai = 1;
    const int autoD4E3B560_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int autoD4E3B560_ai = 1;
    const int autoFBE9DF39_ae = libUIUI_gv_hSUILoadoutMaxCategoryButtonCount_C;
    const int autoFBE9DF39_ai = 1;
    const int autoC26D2439_ae = libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    const int autoC26D2439_ai = 1;
    const int auto4486E83A_ae = libUIUI_gv_hSUILoadoutMaxMountItemCount_C;
    const int auto4486E83A_ai = 1;

    // Variable Initialization
    lv_dialogItem = EventDialogControl();
    lv_player = EventPlayer();
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_skinsButton)) {
        libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer(libUIUI_ge_HSUIPanelType_SkinPanel, lv_player);
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_mountButton)) {
        libUIUI_gf_HSUISetNewSelectedLoadoutPanelForPlayer(libUIUI_ge_HSUIPanelType_MountPanel, lv_player);
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    if ((libUIUI_gf_CanUseDialogItemTime(lv_player) == false)) {
        return true;
    }

    lv_itUsedButton = 1;
    for ( ; ( (auto15EB741B_ai >= 0 && lv_itUsedButton <= auto15EB741B_ae) || (auto15EB741B_ai < 0 && lv_itUsedButton >= auto15EB741B_ae) ) ; lv_itUsedButton += auto15EB741B_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itUsedButton])) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
            if ((libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedSkinIndex == libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledSkinSkinItemIndex[lv_itUsedButton])) {
                return true;
            }

            lv_itButton = 1;
            for ( ; ( (autoD8CCE60B_ai >= 0 && lv_itButton <= autoD8CCE60B_ae) || (autoD8CCE60B_ai < 0 && lv_itButton >= autoD8CCE60B_ae) ) ; lv_itButton += autoD8CCE60B_ai ) {
                if ((lv_itUsedButton == lv_itButton)) {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, lv_dialogItem, lv_player);
                }
                else {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, libUIUI_gv_hSUILoadout.lv_skinsPanelItemButton[lv_itButton], lv_player);
                }
            }
            lv_loadoutVariation = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedLoadoutIndex;
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedSkinIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledSkinSkinItemIndex[lv_itUsedButton];
            libUIUI_gf_HSUISetSkinContainerNameForPlayer(lv_player);
            lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledSkinSkinItemIndex[lv_itUsedButton];
            libGame_gf_LoadoutSkinsUpdateSkinOfHeroForPlayer(lv_heroIndex, lv_loadoutVariation, lv_elementIndex, lv_player, false);
            libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer(lv_player);
            return true;
        }

    }
    lv_itUsedButton = 1;
    for ( ; ( (autoD4E3B560_ai >= 0 && lv_itUsedButton <= autoD4E3B560_ae) || (autoD4E3B560_ai < 0 && lv_itUsedButton >= autoD4E3B560_ae) ) ; lv_itUsedButton += autoD4E3B560_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itUsedButton])) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
            lv_itButton = 1;
            for ( ; ( (autoFBE9DF39_ai >= 0 && lv_itButton <= autoFBE9DF39_ae) || (autoFBE9DF39_ai < 0 && lv_itButton >= autoFBE9DF39_ae) ) ; lv_itButton += autoFBE9DF39_ai ) {
                if ((lv_itButton == lv_itUsedButton)) {
                    libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itButton], true, libCore_gv_playerGroupFromPlayer[lv_player]);
                }
                else {
                    libNtve_gf_SetDialogItemToggled(libUIUI_gv_hSUILoadout.lv_mountsPanelCategoryButton[lv_itButton], false, libCore_gv_playerGroupFromPlayer[lv_player]);
                }
            }
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedMountCollectionCategoryIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempMountCategoryArray[lv_itUsedButton];
            libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
            return true;
        }

    }
    lv_itUsedButton = 1;
    for ( ; ( (autoC26D2439_ai >= 0 && lv_itUsedButton <= autoC26D2439_ae) || (autoC26D2439_ai < 0 && lv_itUsedButton >= autoC26D2439_ae) ) ; lv_itUsedButton += autoC26D2439_ai ) {
        if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itUsedButton])) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_player);
            if ((libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedMountIndex == libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledMountMountItemIndex[lv_itUsedButton])) {
                return true;
            }

            lv_itButton = 1;
            for ( ; ( (auto4486E83A_ai >= 0 && lv_itButton <= auto4486E83A_ae) || (auto4486E83A_ai < 0 && lv_itButton >= auto4486E83A_ae) ) ; lv_itButton += auto4486E83A_ai ) {
                if ((lv_itUsedButton == lv_itButton)) {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(true, libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itButton], lv_player);
                }
                else {
                    libUIUI_gf_HSUIButtonItemSelectDeselectButtonForPlayer(false, libUIUI_gv_hSUILoadout.lv_mountsPanelItemButton[lv_itButton], lv_player);
                }
            }
            lv_loadoutVariation = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedLoadoutIndex;
            libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_tempSelectedMountIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledMountMountItemIndex[lv_itUsedButton];
            libUIUI_gf_HSUISetMountContainerNameForPlayer(lv_player);
            lv_elementIndex = libUIUI_gv_hSUILoadoutPlayer[lv_player].lv_filledMountMountItemIndex[lv_itUsedButton];
            libGame_gf_LoadoutMountsUpdateMountOfHeroForPlayer(lv_heroIndex, lv_loadoutVariation, lv_elementIndex, lv_player, false);
            libUIUI_gf_HSUIUpdatePurchaseInfoPanelForPlayer(lv_player);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUILoadoutInputTrigger_Init () {
    libUIUI_gt_HSUILoadoutInputTrigger = TriggerCreate("libUIUI_gt_HSUILoadoutInputTrigger_Func");
    TriggerEnable(libUIUI_gt_HSUILoadoutInputTrigger, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUILoadoutInputTrigger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Loadout - List Box Selected
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUILoadoutListBoxSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_dialogItem;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_dialogItem = EventDialogControl();
    lv_heroIndex = libGame_gv_players[EventPlayer()].lv_heroIndex;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelPulldown)) {
        libUIUI_gf_HSUIUpdateLoadoutPanelOnVariationSelectionForPlayer(EventPlayer());
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_skinsPanelOwnershipFilterPulldown)) {
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    if ((lv_dialogItem == libUIUI_gv_hSUILoadout.lv_mountsPanelOwnershipFilterPulldown)) {
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(lv_player);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUILoadoutListBoxSelected_Init () {
    libUIUI_gt_HSUILoadoutListBoxSelected = TriggerCreate("libUIUI_gt_HSUILoadoutListBoxSelected_Func");
    TriggerEnable(libUIUI_gt_HSUILoadoutListBoxSelected, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUILoadoutListBoxSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Loadout - Search Text Changes
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUILoadoutSearchTextChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loadoutVar;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_loadoutSelectionPanelNameEditBox)) {
        lv_loadoutVar = libUIUI_gv_hSUILoadoutPlayer[EventPlayer()].lv_tempSelectedLoadoutIndex;
        libGame_gf_LoadoutNameUpdateNameOfHeroForPlayer(libGame_gv_players[EventPlayer()].lv_heroIndex, lv_loadoutVar, EventPlayer(), libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer()));
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_skinsPanelSearchEditBox)) {
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
    }

    if ((EventDialogControl() == libUIUI_gv_hSUILoadout.lv_mountsPanelSearchEditBox)) {
        libUIUI_gf_HSUIFillLoadoutPanelForPlayer(EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUILoadoutSearchTextChanges_Init () {
    libUIUI_gt_HSUILoadoutSearchTextChanges = TriggerCreate("libUIUI_gt_HSUILoadoutSearchTextChanges_Func");
    TriggerEnable(libUIUI_gt_HSUILoadoutSearchTextChanges, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSUILoadoutSearchTextChanges, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Hero Tracker Arrow
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHeroTrackerArrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto19F9C206_ae = libCore_gv_bALMaxPlayers;
    const int auto19F9C206_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/OffscreenUnitContainer");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto19F9C206_ai >= 0 && lv_index <= auto19F9C206_ae) || (auto19F9C206_ai < 0 && lv_index >= auto19F9C206_ae) ) ; lv_index += auto19F9C206_ai ) {
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel, c_triggerControlTypeOffscreenUnit, "OffscreenUnitFrame" + IntToString(lv_index));
        libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], c_triggerControlTypeImage, "HeroIcon");
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHeroTrackerArrow_Init () {
    libUIUI_gt_UIInitializeHeroTrackerArrow = TriggerCreate("libUIUI_gt_UIInitializeHeroTrackerArrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Input - Ingame Button Used
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInputIngameButtonUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_locDialogItem;
    int lv_locPlayer;
    int lv_itTier;
    int lv_itColumn;
    int lv_itBuild;

    // Automatic Variable Declarations
    int autoE813EEC3_val;
    const int auto54139B5E_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto54139B5E_ai = 1;
    const int autoC3442282_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoC3442282_ai = 1;
    const int autoE958CCC7_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int autoE958CCC7_ai = 1;

    // Variable Initialization
    lv_locDialogItem = EventDialogControl();
    lv_locPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[lv_locPlayer].lv_allowInput == true))) {
            return false;
        }

        if (!((EventDialogControlMouseButton() == c_mouseButtonLeft))) {
            return false;
        }

        if (!((libUIUI_gf_CanUseDialogItemTime(lv_locPlayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_locDialogItem == libUIUI_gv_uITabScreenPanel.lv_closeButton)) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_locPlayer);
        DialogControlSendAnimationEvent(libUIUI_gv_uITabScreenPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_locPlayer], "Hide");
        libUIUI_gv_uITabScreenPanel.lv_mainPanelToggled[lv_locPlayer] = false;
        return true;
    }

    if (((lv_locDialogItem == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonKills) || (lv_locDialogItem == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonAssists) || (lv_locDialogItem == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDeaths) || (lv_locDialogItem == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonSiegeDamage) || (lv_locDialogItem == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHeroDamage) || (lv_locDialogItem == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHealedAndAbsorbed) || (lv_locDialogItem == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDamageTaken) || (lv_locDialogItem == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonXPContribution))) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_locPlayer);
        autoE813EEC3_val = EventDialogControl();
        if (autoE813EEC3_val == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonKills) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeState(lv_locPlayer, libUIUI_ge_UIHeroLeaderboardSortingSortingType_Kills);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonAssists) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeState(lv_locPlayer, libUIUI_ge_UIHeroLeaderboardSortingSortingType_Assists);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDeaths) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeState(lv_locPlayer, libUIUI_ge_UIHeroLeaderboardSortingSortingType_Deaths);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonSiegeDamage) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeState(lv_locPlayer, libUIUI_ge_UIHeroLeaderboardSortingSortingType_SiegeDamage);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHeroDamage) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeState(lv_locPlayer, libUIUI_ge_UIHeroLeaderboardSortingSortingType_HeroDamage);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonHealedAndAbsorbed) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeState(lv_locPlayer, libUIUI_ge_UIHeroLeaderboardSortingSortingType_HealedandAbsorbed);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonDamageTaken) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeState(lv_locPlayer, libUIUI_ge_UIHeroLeaderboardSortingSortingType_DamageTaken);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIHeroLeaderboard.lv_sortButtonXPContribution) {
            libUIUI_gf_UIHeroLeaderboardSortingChangeState(lv_locPlayer, libUIUI_ge_UIHeroLeaderboardSortingSortingType_XPContribution);
        }
        else {
        }
        return true;
    }
    else if ((libCore_gv_gameOver == false) && ((lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[1]) || (lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[2]) || (lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[3]) || (lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[4]) || (lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[5]) || (lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[6]) || (lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[7]))) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_locPlayer);
        lv_itTier = 1;
        for ( ; ( (auto54139B5E_ai >= 0 && lv_itTier <= auto54139B5E_ae) || (auto54139B5E_ai < 0 && lv_itTier >= auto54139B5E_ae) ) ; lv_itTier += auto54139B5E_ai ) {
            if ((lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier])) {
                libUIUI_gv_uITalentsChoicePanelPlayer[lv_locPlayer].lv_selectedTier = lv_itTier;
                libUIUI_gf_UITalentsChoicePanelFillPanelForPlayer(lv_locPlayer);
                libUIUI_gf_UITalentsChoicePanelUpdateTalentButtonsForPlayer(lv_locPlayer);
                libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame(lv_locPlayer);
            }
            else {
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], false, libCore_gv_playerGroupFromPlayer[lv_locPlayer]);
            }
        }
        return true;
    }
    else if ((lv_locDialogItem == libUIUI_gv_gameOverSplash.lv_leaveButton) && (libCore_gv_gameOver == true)) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_locPlayer);
        if ((lv_locPlayer == libCore_gv_oBSERVER_ObserverUIPlayer)) {
            KickFromGame(libCore_gv_playerGroupFromPlayer[lv_locPlayer]);
        }
        else {
            GameOver(lv_locPlayer, libGame_gv_players[lv_locPlayer].lv_victoryDefeat, false, false);
        }
    }
    else if ((lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionToggleButton)) {
        libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_locPlayer);
        if ((libUIUI_gv_uITalentsChoicePanelPlayer[lv_locPlayer].lv_talentsPanelVisible == true)) {
            libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer(false, lv_locPlayer);
        }
        else {
            libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer(true, lv_locPlayer);
        }
        return true;
    }
    lv_itBuild = 1;
    for ( ; ( (autoC3442282_ai >= 0 && lv_itBuild <= autoC3442282_ae) || (autoC3442282_ai < 0 && lv_itBuild >= autoC3442282_ae) ) ; lv_itBuild += autoC3442282_ai ) {
        if ((libUIUI_gv_uITalentsChoicePanel.lv_buildButton[lv_itBuild] == lv_locDialogItem)) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_locPlayer);
            libUIUI_gv_uITalentsPrepickedSelectedBuild[lv_locPlayer] = lv_itBuild;
            libUIUI_gf_UITalentsPrepickedSelectBuildButtonForPlayerIngame(lv_locPlayer, lv_itBuild);
            libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame(lv_locPlayer);
            return true;
        }

    }
    lv_itColumn = 1;
    for ( ; ( (autoE958CCC7_ai >= 0 && lv_itColumn <= autoE958CCC7_ae) || (autoE958CCC7_ai < 0 && lv_itColumn >= autoE958CCC7_ae) ) ; lv_itColumn += autoE958CCC7_ai ) {
        if ((lv_locDialogItem == libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itColumn]) && (libGame_gf_TalentChoicesPlayerHasAnyTalentOnTier(lv_locPlayer, libUIUI_gv_uITalentsChoicePanelPlayer[lv_locPlayer].lv_selectedTier) == false)) {
            libUIUI_gf_UpdateLastUsedDialogItemTimeForPlayer(lv_locPlayer);
            if ((libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierAndColumn(lv_locPlayer, libUIUI_gv_uITalentsChoicePanelPlayer[lv_locPlayer].lv_selectedTier, lv_itColumn) == true)) {
                libGame_gf_SendEventPlayerChooseTalent(lv_locPlayer, libUIUI_gv_uITalentsChoicePanelPlayer[lv_locPlayer].lv_selectedTier, lv_itColumn);
            }
            else {
                if ((libGame_gf_TalentChoicesGetCurrentTierOfPlayer(lv_locPlayer) < libUIUI_gv_uITalentsChoicePanelPlayer[lv_locPlayer].lv_selectedTier)) {
                    libGame_gf_TalentsPrepickedUpdatePrepickedTalentToPressedColumnOfPlayer(lv_locPlayer, lv_itColumn);
                    libGame_gf_TalentsPrepickedStoreBuildStringOfHeroForPlayer(libGame_gv_players[lv_locPlayer].lv_heroIndex, lv_locPlayer);
                }

            }
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInputIngameButtonUsed_Init () {
    libUIUI_gt_UIInputIngameButtonUsed = TriggerCreate("libUIUI_gt_UIInputIngameButtonUsed_Func");
    TriggerEnable(libUIUI_gt_UIInputIngameButtonUsed, false);
    TriggerAddEventDialogControl(libUIUI_gt_UIInputIngameButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input - Player Clicks Unit
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputPlayerClicksUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itUnit = EventUnit();
    lv_itPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsOnline() == false)) {
        UnitGroupSelect(UnitGroupSelected(lv_itPlayer), lv_itPlayer, false);
        UnitSelect(lv_itUnit, lv_itPlayer, true);
        libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_itUnit, lv_itPlayer);
        libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_itPlayer, lv_itUnit);
        libGame_gv_players[lv_itPlayer].lv_selectedUnit = lv_itUnit;
        libGame_gv_players[lv_itPlayer].lv_selectedUnitGroup = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputPlayerClicksUnit_Init () {
    libUIUI_gt_InputPlayerClicksUnit = TriggerCreate("libUIUI_gt_InputPlayerClicksUnit_Func");
    TriggerAddEventUnitClick(libUIUI_gt_InputPlayerClicksUnit, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input - UI - LeaderBoard
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputUILeaderBoard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_allowInput == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUIUI_gv_uITabScreenPanel.lv_mainPanelToggled[EventPlayer()] == true)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uITabScreenPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[EventPlayer()], "Hide");
        libUIUI_gv_uITabScreenPanel.lv_mainPanelToggled[EventPlayer()] = false;
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uITabScreenPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[EventPlayer()], "Show");
        libUIUI_gv_uITabScreenPanel.lv_mainPanelToggled[EventPlayer()] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputUILeaderBoard_Init () {
    libUIUI_gt_InputUILeaderBoard = TriggerCreate("libUIUI_gt_InputUILeaderBoard_Func");
    TriggerAddEventHotkeyPressed(libUIUI_gt_InputUILeaderBoard, c_playerAny, c_hotkeyHeroLeaderPanel, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input - UI - Talent Tree Selection (Down)
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputUITalentTreeSelectionDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_allowInput == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventHotkeyPressed() == c_hotkeyQuickHeroTalentTreeSelection)) {
        if ((libUIUI_gv_uITalentsChoicePanelPlayer[EventPlayer()].lv_talentsPanelVisible == false)) {
            libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer(true, EventPlayer());
        }

    }
    else if ((EventHotkeyPressed() == c_hotkeyHeroTalentTreeSelection)) {
        if ((libUIUI_gv_uITalentsChoicePanelPlayer[EventPlayer()].lv_talentsPanelVisible == true)) {
            libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer(false, EventPlayer());
        }
        else {
            libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer(true, EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputUITalentTreeSelectionDown_Init () {
    libUIUI_gt_InputUITalentTreeSelectionDown = TriggerCreate("libUIUI_gt_InputUITalentTreeSelectionDown_Func");
    TriggerAddEventHotkeyPressed(libUIUI_gt_InputUITalentTreeSelectionDown, c_playerAny, c_hotkeyQuickHeroTalentTreeSelection, true);
    TriggerAddEventHotkeyPressed(libUIUI_gt_InputUITalentTreeSelectionDown, c_playerAny, c_hotkeyHeroTalentTreeSelection, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input - UI - Talent Tree Selection (Up)
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputUITalentTreeSelectionUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_allowInput == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUIUI_gv_uITalentsChoicePanelPlayer[EventPlayer()].lv_talentsPanelVisible == true)) {
        libUIUI_gf_UITalentsChoicePanelShowHideTalentPanelforPlayer(false, EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputUITalentTreeSelectionUp_Init () {
    libUIUI_gt_InputUITalentTreeSelectionUp = TriggerCreate("libUIUI_gt_InputUITalentTreeSelectionUp_Func");
    TriggerAddEventHotkeyPressed(libUIUI_gt_InputUITalentTreeSelectionUp, c_playerAny, c_hotkeyQuickHeroTalentTreeSelection, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input - UI - Talent Tree Selection (Quick Selection)
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputUITalentTreeSelectionQuickSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itColumn;
    int lv_player;
    int lv_tier;

    // Automatic Variable Declarations
    int autoFFDBF6DA_ae;
    const int autoFFDBF6DA_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(lv_player) == true))) {
            return false;
        }

        if (!((libGame_gv_players[lv_player].lv_allowInput == true))) {
            return false;
        }

        if (!((libGame_gv_players[lv_player].lv_talentPoints > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    lv_tier = libUIUI_gv_uITalentsChoicePanelPlayer[lv_player].lv_selectedTier;
    autoFFDBF6DA_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentsCountPerTier[lv_tier];
    lv_itColumn = 1;
    for ( ; ( (autoFFDBF6DA_ai >= 0 && lv_itColumn <= autoFFDBF6DA_ae) || (autoFFDBF6DA_ai < 0 && lv_itColumn >= autoFFDBF6DA_ae) ) ; lv_itColumn += autoFFDBF6DA_ai ) {
        if ((EventDialogControl() == libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itColumn]) && (libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierAndColumn(lv_player, lv_tier, lv_itColumn) == true)) {
            libGame_gf_SendEventPlayerChooseTalent(lv_player, lv_tier, lv_itColumn);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputUITalentTreeSelectionQuickSelection_Init () {
    libUIUI_gt_InputUITalentTreeSelectionQuickSelection = TriggerCreate("libUIUI_gt_InputUITalentTreeSelectionQuickSelection_Func");
    TriggerAddEventDialogControl(libUIUI_gt_InputUITalentTreeSelectionQuickSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input- UI - Clear Text Option
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputUIClearTextOption_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUIUI_gv_inputClearText[EventPlayer()] == false)) {
        libUIUI_gv_inputClearText[EventPlayer()] = true;
        UIClearMessages(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaAll);
    }
    else {
        libUIUI_gv_inputClearText[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputUIClearTextOption_Init () {
    libUIUI_gt_InputUIClearTextOption = TriggerCreate("libUIUI_gt_InputUIClearTextOption_Func");
    TriggerAddEventKeyPressed(libUIUI_gt_InputUIClearTextOption, c_playerAny, c_keyF9, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input- UI - Clear Text
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputUIClearText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE474ECDB_g;
    int autoE474ECDB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE474ECDB_g = PlayerGroupAll();
    autoE474ECDB_var = -1;
    while (true) {
        autoE474ECDB_var = PlayerGroupNextPlayer(autoE474ECDB_g, autoE474ECDB_var);
        if (autoE474ECDB_var < 0) { break; }
        if ((libUIUI_gv_inputClearText[autoE474ECDB_var] == true)) {
            UIClearMessages(libCore_gv_playerGroupFromPlayer[autoE474ECDB_var], c_messageAreaAll);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputUIClearText_Init () {
    libUIUI_gt_InputUIClearText = TriggerCreate("libUIUI_gt_InputUIClearText_Func");
    TriggerAddEventChatMessage(libUIUI_gt_InputUIClearText, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i_Item;
    int lv_i_Player;

    // Automatic Variable Declarations
    const int auto424975BA_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int auto424975BA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel/KillLogPanel");
    libUIUI_gv_killLogPanel = DialogControlLastCreated();
    lv_i_Item = 1;
    for ( ; ( (auto424975BA_ai >= 0 && lv_i_Item <= auto424975BA_ae) || (auto424975BA_ai < 0 && lv_i_Item >= auto424975BA_ae) ) ; lv_i_Item += auto424975BA_ai ) {
        DialogControlCreateInPanelFromTemplate(libUIUI_gv_killLogPanel, c_triggerControlTypePanel, "KillLog/Item");
        libUIUI_gv_killLogItems[lv_i_Item].lv_frame = DialogControlLastCreated();
    }
    libUIUI_gf_KillLogDebugInitPanel();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogInitialize_Init () {
    libUIUI_gt_KillLogInitialize = TriggerCreate("libUIUI_gt_KillLogInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - On Hero Unit Dies
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogOnHeroUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_killingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = libGame_gf_HeroKilledUnit();
    lv_killingPlayer = libGame_gf_HeroKilledKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(libGame_gf_HeroKilledPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_KillLogAnnounceKill(lv_killingPlayer, lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogOnHeroUnitDies_Init () {
    libUIUI_gt_KillLogOnHeroUnitDies = TriggerCreate("libUIUI_gt_KillLogOnHeroUnitDies_Func");
    libGame_gf_HeroKilled(libUIUI_gt_KillLogOnHeroUnitDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - On Quest Complete
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogOnQuestComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    string lv_quest;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGame_gf_QuestTokenCompletedUnit();
    lv_quest = libGame_gf_QuestTokenCompletedBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_KillLogAnnounceQuestCompletion(UnitGetOwner(lv_hero), lv_quest, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogOnQuestComplete_Init () {
    libUIUI_gt_KillLogOnQuestComplete = TriggerCreate("libUIUI_gt_KillLogOnQuestComplete_Func");
    libGame_gf_QuestTokenCompleted(libUIUI_gt_KillLogOnQuestComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - Item Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogItemTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i_Item;

    // Automatic Variable Declarations
    const int autoD2D61364_ae = libUIUI_gv_killLogMaxItemCountD0A1;
    const int autoD2D61364_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i_Item = 1;
    for ( ; ( (autoD2D61364_ai >= 0 && lv_i_Item <= autoD2D61364_ae) || (autoD2D61364_ai < 0 && lv_i_Item >= autoD2D61364_ae) ) ; lv_i_Item += autoD2D61364_ai ) {
        if ((EventTimer() == libUIUI_gv_killLogItems[lv_i_Item].lv_timer)) {
            libUIUI_gf_KillLogHideItem(lv_i_Item);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogItemTimerExpires_Init () {
    libUIUI_gt_KillLogItemTimerExpires = TriggerCreate("libUIUI_gt_KillLogItemTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[1].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[2].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[3].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[4].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[5].lv_timer);
    TriggerAddEventTimer(libUIUI_gt_KillLogItemTimerExpires, libUIUI_gv_killLogItems[6].lv_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - Debug Show Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogDebugShowPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_KillLogDebugInitPanel();
    DialogControlSetVisible(libUIUI_gv_killLogDebugPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogDebugShowPanel_Init () {
    libUIUI_gt_KillLogDebugShowPanel = TriggerCreate("libUIUI_gt_KillLogDebugShowPanel_Func");
    TriggerAddEventChatMessage(libUIUI_gt_KillLogDebugShowPanel, c_playerAny, "killlogdebug", true);
    TriggerAddEventChatMessage(libUIUI_gt_KillLogDebugShowPanel, c_playerAny, "kld", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - Debug Announce Kill
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogDebugAnnounceKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i_Player;
    unit lv_killerUnit;
    unit lv_targetUnit;
    int lv_i_Quest;
    libUIUI_gs_KillLogQuestArray lv_questArrayBuffer;
    int lv_questResetCount;

    // Automatic Variable Declarations
    const int auto1931AADA_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto1931AADA_ai = 1;
    const int auto6A5F7ECB_ae = libUIUI_gv_killLogMaxComboIconsD0A1;
    const int auto6A5F7ECB_ai = 1;
    const int autoC58928C9_ae = libUIUI_gv_killLogMaxComboIconsD0A1;
    const int autoC58928C9_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[1]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[2]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[3]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[4]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[5]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[6]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[7]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[8]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[9]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[10]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[11]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[12]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[13]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[14]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[15])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i_Player = 1;
    for ( ; ( (auto1931AADA_ai >= 0 && lv_i_Player <= auto1931AADA_ae) || (auto1931AADA_ai < 0 && lv_i_Player >= auto1931AADA_ae) ) ; lv_i_Player += auto1931AADA_ai ) {
        if ((EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_killButtons[lv_i_Player])) {
            if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupEnemy, lv_i_Player)) == 0)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_44B5C4F4", "A", IntToText(libGame_gf_EnemyTeamNumberOfPlayer(lv_i_Player)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_44B5C4F4"), true);
                return true;
            }

            lv_targetUnit = libGame_gv_players[PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupEnemy, lv_i_Player), RandomInt(1, PlayerGroupCount(PlayerGroupAlliance(c_playerGroupEnemy, lv_i_Player))))].lv_heroUnit;
            if ((libNtve_gf_DialogItemIsChecked(libUIUI_gv_killLogDebugPanel.lv_killCheckbox, EventPlayer()) == true)) {
                lv_questResetCount = 1;
                lv_i_Quest = 1;
                for ( ; ( (auto6A5F7ECB_ai >= 0 && lv_i_Quest <= auto6A5F7ECB_ae) || (auto6A5F7ECB_ai < 0 && lv_i_Quest >= auto6A5F7ECB_ae) ) ; lv_i_Quest += auto6A5F7ECB_ai ) {
                    lv_questArrayBuffer.lv_quests[lv_i_Quest] = libUIUI_gv_killLogQuestResetCache[UnitGetOwner(lv_targetUnit)].lv_quests[lv_i_Quest];
                    if ((lv_i_Quest > lv_questResetCount)) {
                        libUIUI_gv_killLogQuestResetCache[UnitGetOwner(lv_targetUnit)].lv_quests[lv_i_Quest] = null;
                    }
                    else {
                        libUIUI_gv_killLogQuestResetCache[UnitGetOwner(lv_targetUnit)].lv_quests[lv_i_Quest] = libUIUI_gf_KillLogDebugRandomQuestBehavior();
                    }
                }
                libUIUI_gf_KillLogAnnounceKill(lv_i_Player, lv_targetUnit);
                lv_i_Quest = 1;
                for ( ; ( (autoC58928C9_ai >= 0 && lv_i_Quest <= autoC58928C9_ae) || (autoC58928C9_ai < 0 && lv_i_Quest >= autoC58928C9_ae) ) ; lv_i_Quest += autoC58928C9_ai ) {
                    libUIUI_gv_killLogQuestResetCache[UnitGetOwner(lv_targetUnit)].lv_quests[lv_i_Quest] = lv_questArrayBuffer.lv_quests[lv_i_Quest];
                }
            }
            else {
                libUIUI_gf_KillLogAnnounceKill(lv_i_Player, lv_targetUnit);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogDebugAnnounceKill_Init () {
    libUIUI_gt_KillLogDebugAnnounceKill = TriggerCreate("libUIUI_gt_KillLogDebugAnnounceKill_Func");
    TriggerAddEventDialogControl(libUIUI_gt_KillLogDebugAnnounceKill, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Log - Debug Announce Quest
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_KillLogDebugAnnounceQuest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i_Player;

    // Automatic Variable Declarations
    playergroup auto9A211AAA_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[1]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[2]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[3]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[4]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[5]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[6]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[7]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[8]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[9]) || (EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[10])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9A211AAA_g = PlayerGroupActive();
    lv_i_Player = -1;
    while (true) {
        lv_i_Player = PlayerGroupNextPlayer(auto9A211AAA_g, lv_i_Player);
        if (lv_i_Player < 0) { break; }
        if ((EventDialogControl() == libUIUI_gv_killLogDebugPanel.lv_questButtons[lv_i_Player])) {
            libUIUI_gf_KillLogAnnounceQuestCompletion(lv_i_Player, libUIUI_gf_KillLogDebugRandomQuestBehavior(), 1.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_KillLogDebugAnnounceQuest_Init () {
    libUIUI_gt_KillLogDebugAnnounceQuest = TriggerCreate("libUIUI_gt_KillLogDebugAnnounceQuest_Func");
    TriggerAddEventDialogControl(libUIUI_gt_KillLogDebugAnnounceQuest, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int lv_itCannonball;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int autoE69FCAF7_ae = libCore_gv_bALMaxTeams;
    const int autoE69FCAF7_ai = 1;
    const int auto11D57F77_ae = libCore_gv_bALMaxTeams;
    const int auto11D57F77_ai = 1;
    const int auto4D7077B2_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    const int auto4D7077B2_ai = 1;
    const int auto024E983C_ae = libCore_gv_bALMaxTeams;
    const int auto024E983C_ai = 1;
    const int auto69D4EDDC_ae = libCore_gv_bALMaxTeams;
    const int auto69D4EDDC_ai = 1;
    const int autoAF81B7ED_ae = libCore_gv_bALMaxTeams;
    const int autoAF81B7ED_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MapMechanicPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RavenCourtPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TributeSpawnFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CurseFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CurseInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CurseTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_itTeam = 1;
    for ( ; ( (autoE69FCAF7_ai >= 0 && lv_itTeam <= autoE69FCAF7_ae) || (autoE69FCAF7_ai < 0 && lv_itTeam >= autoE69FCAF7_ae) ) ; lv_itTeam += autoE69FCAF7_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "TributeFrame");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "RavenIconBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "RavenIconRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeCounter");
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BlackheartsBayPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ChestSpawnFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DoubloonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto11D57F77_ai >= 0 && lv_itTeam <= auto11D57F77_ae) || (auto11D57F77_ai < 0 && lv_itTeam >= auto11D57F77_ae) ) ; lv_itTeam += auto11D57F77_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "DoubloonBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "DoubloonRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "DoubloonCounter");
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CannonballsLeftLabel");
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel = DialogControlLastCreated();
    lv_itCannonball = 1;
    for ( ; ( (auto4D7077B2_ai >= 0 && lv_itCannonball <= auto4D7077B2_ae) || (auto4D7077B2_ai < 0 && lv_itCannonball >= auto4D7077B2_ae) ) ; lv_itCannonball += auto4D7077B2_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CannonShotFrame" + IntToString(lv_itCannonball) + "/ActiveCannonBall");
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball] = DialogControlLastCreated();
    }
    lv_itTeam = 1;
    for ( ; ( (auto024E983C_ai >= 0 && lv_itTeam <= auto024E983C_ae) || (auto024E983C_ai < 0 && lv_itTeam >= auto024E983C_ae) ) ; lv_itTeam += auto024E983C_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "ShotCounter");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HauntedMinesPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SkullModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SkullsRemainingLabel");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto69D4EDDC_ai >= 0 && lv_itTeam <= auto69D4EDDC_ae) || (auto69D4EDDC_ai < 0 && lv_itTeam >= auto69D4EDDC_ae) ) ; lv_itTeam += auto69D4EDDC_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "SkullCounter");
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterLeft_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        else {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MineTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MineOpenTimer");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllySkullCounter");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemySkullCounter");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_0F42CBFC"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_D98BE20D"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DragonShirePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ShrineTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ShrineActivateTimer");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ShrineModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (autoAF81B7ED_ai >= 0 && lv_itTeam <= autoAF81B7ED_ae) || (autoAF81B7ED_ai < 0 && lv_itTeam >= autoAF81B7ED_ae) ) ; lv_itTeam += autoAF81B7ED_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "MoonShrineDisabled");
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "StarShrineDisabled");
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "MoonShrineEnabled");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "StarShrineEnabled");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonDisabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonDisabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarDisabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarDisabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonEnabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonEnabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarEnabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarEnabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DragonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonTimer");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "DragonHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonHealthBar/HealthLabel/StatusLabel");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    libUIUI_gf_MapMechanicsGardenOfTerrorInit(lv_panels[lv_currentPanelLayer]);
    TriggerEnable(libUIUI_gt_MapMechanicsPanelUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsPanelInitialize_Init () {
    libUIUI_gt_MapMechanicsPanelInitialize = TriggerCreate("libUIUI_gt_MapMechanicsPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Panel Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsPanelUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsPanelUpdate_Init () {
    libUIUI_gt_MapMechanicsPanelUpdate = TriggerCreate("libUIUI_gt_MapMechanicsPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_MapMechanicsPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_MapMechanicsPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Blackhearts Bay Chests Spawned Frame Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Init () {
    libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires = TriggerCreate("libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires, libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Notification Display Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_NotificationDisplayInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/GameNotificationsPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_notificationDisplay.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "KillCounterTemplate/TimerCountdown");
    libNtve_gf_SetDialogItemAnimationDuration(DialogControlLastCreated(), libGame_gv_heroDeathMultikillTimeoutDuration, PlayerGroupAll());
    libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "KillCounterTemplate/KillCountLabel");
    libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "KillCounterTemplate/KillCountAmount");
    libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_coreNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_coreNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardEnemyNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardEnemyNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TutorialNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TutorialNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier0/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_singleKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier0/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_singleKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier1/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier1/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier2/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier2/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier3/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier3/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier4/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier4/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle2 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel2 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "QuestNotificationTemplate/QuestIcon/IconImage");
    libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel3 = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_NotificationDisplayInitialize_Init () {
    libUIUI_gt_NotificationDisplayInitialize = TriggerCreate("libUIUI_gt_NotificationDisplayInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Notification Anim Cheat
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DEBUGNotificationAnimCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_animName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_animName = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_animName = StringWord(EventChatMessage(false), 2);
    DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, PlayerGroupAll(), lv_animName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DEBUGNotificationAnimCheat_Init () {
    libUIUI_gt_DEBUGNotificationAnimCheat = TriggerCreate("libUIUI_gt_DEBUGNotificationAnimCheat_Func");
    TriggerAddEventChatMessage(libUIUI_gt_DEBUGNotificationAnimCheat, c_playerAny, "notification", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Party Frame UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializePartyFrameUI_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int lv_itHeroIndex;
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_heroRosterIndex;
    int lv_itOnFire;

    // Automatic Variable Declarations
    const int auto8381FDA4_ae = libCore_gv_bALMaxTeams;
    const int auto8381FDA4_ai = 1;
    const int auto7FA95BF0_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto7FA95BF0_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libUIUI_gv_partyFrameDeathUpdateTimer, libUIUI_gv_partyFrameTimersUpdateDelay_C, false, c_timeGame);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIPartyFrame.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GameTimerLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    libUIUI_gv_uIPartyFrame.lv_gameTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CoreHealthLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIPartyFrame.lv_coreHealthLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "PartyFrameTopPanel/XPContributionHitTestFrame");
    libUIUI_gv_uIPartyFrame.lv_xPContributionClickableButton = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto8381FDA4_ai >= 0 && lv_itTeam <= auto8381FDA4_ae) || (auto8381FDA4_ai < 0 && lv_itTeam >= auto8381FDA4_ae) ) ; lv_itTeam += auto8381FDA4_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "LevelInfo")));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TeamLevelLabel");
        libUIUI_gv_uIPartyFrame.lv_teamLevelLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TeamNextLevelTalentIcon");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libUIUI_gv_uIPartyFrame.lv_teamNextLevelTalentIcon[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TeamNextLevelNoTalentIcon");
        libUIUI_gv_uIPartyFrame.lv_teamNextLevelNoTalentIcon[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TeamTalentAdvantageFrame");
        libUIUI_gv_uIPartyFrame.lv_teamTalentAdvantageIcon[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "TeamXPUnitStatusFrame");
        libUIUI_gv_uIPartyFrame.lv_teamXPVeterancyBar[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "CoreUnitStatus")));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_uIPartyFrame.lv_coreHealthUnitStatusFrames[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("PartyFrameTopPanel/Team" + IntToString(lv_itTeam) + "XPInfoFrame")));
        libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/HeroAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_heroXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/MercenaryAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_mercenaryXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/MinionAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_minionXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/PassiveAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_passiveXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/StructureAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_structureXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/TotalAmountLabel");
        libUIUI_gv_uIPartyFrame.lv_totalXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "HeroOverview")));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libUIUI_gv_uIPartyFrame.lv_teamHeroPanel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        lv_itHeroIndex = 1;
        for ( ; ( (auto7FA95BF0_ai >= 0 && lv_itHeroIndex <= auto7FA95BF0_ae) || (auto7FA95BF0_ai < 0 && lv_itHeroIndex >= auto7FA95BF0_ae) ) ; lv_itHeroIndex += auto7FA95BF0_ai ) {
            lv_heroRosterIndex = ((lv_itTeam-1)*libCore_gv_bALMaxPlayersOnATeam+lv_itHeroIndex);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroOverview" + IntToString(lv_itHeroIndex))));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_heroRosterIndex] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroPortraitImage");
            libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlot_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroPortraitImage2");
            libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroPetSlot_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroPortraitImage3");
            libUIUI_gv_uIPartyFrame.lv_heroPortraitImages[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotC_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButton");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButton[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonPetowner");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPetOwner[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonPet");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonPet[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonA");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonA[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonB");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonB[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "PartyAlertButtonC");
            libUIUI_gv_uIPartyFrame.lv_heroPartyButtonC[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimePetLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimePetLabel[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeVikingOlafLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotA_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeVikingBaleogLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotB_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeVikingErikLabel");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotC_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroDeathOverlayFrame");
            libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroDeathExtendedIcon");
            libUIUI_gv_uIPartyFrame.lv_heroExtendedDeathIcon[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroDeathCondensedIcon");
            libUIUI_gv_uIPartyFrame.lv_heroCondensedDeathIcon[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrame");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsDefault[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoResource");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsNoResource[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameSeparateShields");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsSeparateShields[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameYellowEnergy");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsYellow[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameOrangeEnergy");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsOrange[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFramePinkEnergy");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsPink[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameRespawn");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroWithPetStatusFrame");
            libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatusPetMaster");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlot_C] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameHeroWithPet[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatusPet");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsHeroWithPet[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroPetSlot_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroLostVikingsStatusFrame");
            libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatus1");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotA_C] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatus2");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotB_C] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIPartyFrame.lv_heroStatusFrameLostVikings[lv_heroRosterIndex], c_triggerControlTypeUnitStatus, "HeroUnitStatus3");
            libUIUI_gv_uIPartyFrame.lv_heroStatusBarsLostVikings[lv_heroRosterIndex][libUIUI_gv_uIPartyFrameHeroSlotC_C] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroicTalentPanel");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentPanel[lv_heroRosterIndex] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroicTalentImage");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicIcon[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroicTalentCooldownLabel");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicCooldownLabel[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroicTalentFrame_Ready");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentReadyIcon[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "HeroicTalentChargeFillProgress");
            libUIUI_gv_uIPartyFrame.lv_heroHeroicTalentProgressBar[lv_heroRosterIndex] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "OnFireCutsceneFrame");
            libUIUI_gv_uIPartyFrame.lv_heroOnFireCutscene[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BoostGlowEffect");
            libUIUI_gv_uIPartyFrame.lv_playerBoostEffect[lv_heroRosterIndex] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lv_currentPanelLayer -= 1;
        }
        lv_currentPanelLayer -= 1;
    }
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[libGame_gv_teamOrderIndex_C], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, "AllyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[libGame_gv_teamChaosIndex_C], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, "EnemyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[libGame_gv_teamChaosIndex_C], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, "AllyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_xPContributionPopup[libGame_gv_teamOrderIndex_C], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, "EnemyColorSwap");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializePartyFrameUI_Init () {
    libUIUI_gt_UIInitializePartyFrameUI = TriggerCreate("libUIUI_gt_UIInitializePartyFrameUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Party Frame - Hero Respawn
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPartyFrameHeroRespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_rosterSlot;
    int lv_vikingIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itPlayer = libGame_gf_HeroRespawnPlayer();
    lv_itUnit = libGame_gf_HeroRespawnHero();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rosterSlot = libGame_gv_players[lv_itPlayer].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroDeathInSpecialDeathState[lv_itPlayer] = false;
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_itUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        lv_vikingIndex = libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_itUnit, lv_itPlayer);
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), ("HeroRespawnedHero" + IntToString(lv_vikingIndex)));
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeVikingsLabels[lv_rosterSlot][lv_vikingIndex], PlayerGroupAll(), false);
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), "HeroRespawned");
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeOverlay[lv_rosterSlot], PlayerGroupAll(), false);
        libUIUI_gf_UIPartyFrameShowHideUnitStatusFrameofPlayerforPlayerGroup(true, lv_itPlayer, libGame_gf_AlliedPlayerGroupOfPlayer(lv_itPlayer));
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroExtendedDeathIcon[lv_rosterSlot], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroCondensedDeathIcon[lv_rosterSlot], PlayerGroupAll(), false);
        if (((libUIUI_gv_uIPartyFrame.lv_heroHeroicAbility[lv_rosterSlot] != null) || (libUIUI_gf_UIPartyFrameSpecialCaseHeroHasHeroicatStart(libGame_gv_players[lv_itPlayer].lv_heroUnit) == true))) {
            libUIUI_gf_UIPartyFrameShowHideHeroicAbility(true, lv_itPlayer);
        }
        else if ((libGame_gv_talentChoices[lv_itPlayer][libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_itPlayer].lv_heroIndex].lv_talentHeroicTier].lv_choosedTalentIndex > 0)) {
            libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate(lv_itPlayer);
            libUIUI_gf_UIPartyFrameShowHideHeroicAbility(true, lv_itPlayer);
        }
        if ((UnitGetType(lv_itUnit) == "HeroLeoric")) {
            DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_heroStatusBarsRespawn[lv_rosterSlot], PlayerGroupAll(), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPartyFrameHeroRespawn_Init () {
    libUIUI_gt_UIPartyFrameHeroRespawn = TriggerCreate("libUIUI_gt_UIPartyFrameHeroRespawn_Func");
    libGame_gf_HeroRespawn(libUIUI_gt_UIPartyFrameHeroRespawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Party Frame - Hero Hearthstone Complete
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPartyFrameHeroHearthstoneComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_heroIndex;
    int lv_rosterSlot;
    unit lv_portedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_HeroPortedBackToTownPlayer();
    lv_rosterSlot = libGame_gv_players[lv_player].lv_rosterSlot;
    lv_portedUnit = libGame_gf_HeroPortedBackToTownUnit();
    if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_portedUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_player), ("HearthstoneCompleteHero" + IntToString(libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_portedUnit, lv_player))));
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], libGame_gf_AlliedPlayerGroupOfPlayer(lv_player), "HearthstoneCompleteDefault");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPartyFrameHeroHearthstoneComplete_Init () {
    libUIUI_gt_UIPartyFrameHeroHearthstoneComplete = TriggerCreate("libUIUI_gt_UIPartyFrameHeroHearthstoneComplete_Func");
    libGame_gf_HeroPortedBackToTown(libUIUI_gt_UIPartyFrameHeroHearthstoneComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Party Frame - Hero Enters Special Death State
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int lv_rosterSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitGetOwner(libGame_gf_HeroEntersSpecialDeathStateHero());
    lv_rosterSlot = libGame_gv_players[lv_owner].lv_rosterSlot;
    libUIUI_gv_uIPartyFrame.lv_heroDeathInSpecialDeathState[lv_rosterSlot] = true;
    libUIUI_gf_UIPartyFrameHeroDies(lv_owner, libGame_gf_HeroEntersSpecialDeathStateHero());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState_Init () {
    libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState = TriggerCreate("libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState_Func");
    libGame_gf_HeroEntersSpecialDeathState(libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Party Frame - Death Update Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_rosterSlot;
    unit lv_playerHeroUnit;
    int lv_heroIndex;
    timer lv_deathTimer;

    // Automatic Variable Declarations
    playergroup auto3860903F_g;

    // Variable Initialization
    lv_deathTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    auto3860903F_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto3860903F_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        lv_rosterSlot = libGame_gv_players[lv_playerIndex].lv_rosterSlot;
        lv_playerHeroUnit = libGame_gv_players[lv_playerIndex].lv_heroUnit;
        if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_playerHeroUnit) == libUIUI_ge_UIPartyFrameHeroType_LostVikings)) {
            libUIUI_gf_UIPartyFrameSpecialCaseUpdateVikingsDeath(lv_playerIndex);
        }
        else {
            if (((libGame_gv_players[lv_playerIndex].lv_isDead == true) || (libUIUI_gv_uIPartyFrame.lv_heroDeathInSpecialDeathState[lv_rosterSlot] == true))) {
                lv_deathTimer = libUIUI_gf_UIPartyFrameDeathTimer(lv_playerIndex, lv_playerHeroUnit);
                if ((TimerGetRemaining(lv_deathTimer) > 0.0)) {
                    libNtve_gf_SetDialogItemText(libUIUI_gv_uIPartyFrame.lv_heroDeathTimeLabel[lv_rosterSlot], FixedToText(TimerGetRemaining(lv_deathTimer), 0), PlayerGroupAll());
                }

                if ((TimerGetRemaining(lv_deathTimer) <= libUIUI_gv_dataXPPercentageUpdatePeriod_C3) && (libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_playerHeroUnit, lv_playerIndex)] == false)) {
                    libUIUI_gv_uIPartyFrame.lv_heroDeathRespawnReminderSent[lv_rosterSlot][libUIUI_gf_UIPartyFrameUIIndexofHeroUnit(lv_playerHeroUnit, lv_playerIndex)] = true;
                    DialogControlSendAnimationEvent(libUIUI_gv_uIPartyFrame.lv_heroPanels[lv_rosterSlot], PlayerGroupAll(), "HeroAlmostRespawned");
                }

            }
            else {
                if ((libUIUI_gf_UIPartyFrameHeroTypeofHero(lv_playerHeroUnit) == libUIUI_ge_UIPartyFrameHeroType_PetHero)) {
                    libUIUI_gf_UIPartyFrameSpecialCaseUpdatePetDeath(lv_playerIndex);
                }

            }
        }
    }
    TimerStart(libUIUI_gv_partyFrameDeathUpdateTimer, libUIUI_gv_partyFrameTimersUpdateDelay_C, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires_Init () {
    libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires = TriggerCreate("libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires, libUIUI_gv_partyFrameDeathUpdateTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Ping - Listen For Player Ping
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPingListenForPlayerPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pingType;
    unit lv_targetUnit;
    int lv_pingingPlayer;
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    int autoC92D7CE2_val;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StandardPingGeneral";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingType = EventPingOption();
    if ((lv_pingType == (4))) {
        return true;
    }

    lv_pingingPlayer = EventPlayer();
    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lv_pingingPlayer]) > 0.0)) {
        return true;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lv_pingingPlayer]) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_070BC72A", "A", FixedToText(TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lv_pingingPlayer]), 2));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lv_pingingPlayer], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_070BC72A"));
        return true;
    }

    lv_pingingPlayerHero = libGame_gv_players[lv_pingingPlayer].lv_heroUnit;
    if ((lv_pingingPlayerHero == null)) {
        return true;
    }

    lv_targetUnit = EventPingUnit();
    if ((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeHeroic) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_targetUnit, lv_pingingPlayer) == false)) {
        return true;
    }

    lv_pingPlayerGroup = PlayerGroupExceptOfPlayerGroup(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_pingingPlayer)].lv_teamPlayerGroup, libCore_gf_PlayerGroupMuting(libCore_ge_MuteType_Pings, lv_pingingPlayer, true));
    if ((UnitIsValid(lv_targetUnit) == false)) {
        lv_targetUnit = libUIUI_gf_UIPingGetSpecialPingTargetInRangeOfPoint(EventPingPoint(), EventPingedMinimap(), lv_pingingPlayer);
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeSummoned) == true) && (UnitHasBehavior2(lv_targetUnit, "HeroicSummon") == false)) {
        lv_targetUnit = null;
    }

    if ((UnitHasBehavior2(lv_targetUnit, "UnitCannotBePinged") == true)) {
        lv_targetUnit = null;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lv_pingingPlayer);
    autoC92D7CE2_val = lv_pingType;
    if (autoC92D7CE2_val == 2) {
        libUIUI_gf_UIPingPlayerUsesAssistMePing(lv_pingingPlayer, lv_targetUnit, EventPingPoint());
    }
    else if (autoC92D7CE2_val == 0) {
        libUIUI_gf_UIPingPlayerUsesDangerPing(lv_pingingPlayer, EventPingPoint(), lv_targetUnit);
    }
    else if (autoC92D7CE2_val == 1) {
        libUIUI_gf_UIPingPlayerUsesOnMyWayPing(lv_targetUnit, lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC92D7CE2_val == 3) {
        libUIUI_gf_UIPingPlayerUsesDefendPing(lv_targetUnit, lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC92D7CE2_val == 5) {
        libUIUI_gf_UIPingPlayerUsesRetreatPing(lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC92D7CE2_val == -1) {
        if ((UnitIsValid(lv_targetUnit) == true)) {
            libUIUI_gf_UIPingPlayerPingsUnit(lv_pingingPlayer, lv_targetUnit, lv_pingPlayerGroup);
        }
        else {
            libCore_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, EventPingPoint(), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 3.0, 270.0, lv_pingingPlayer);
            SoundPlayForPlayer(lv_pingSound, lv_pingingPlayer, lv_pingPlayerGroup, 100.0, 0.0);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPingListenForPlayerPing_Init () {
    libUIUI_gt_UIPingListenForPlayerPing = TriggerCreate("libUIUI_gt_UIPingListenForPlayerPing_Func");
    TriggerAddEventPing(libUIUI_gt_UIPingListenForPlayerPing, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Base Mod Ping Data
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InitializeBaseModPingData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingCreateNewPingTarget("XelNagaWatchTower", false, StringExternal("Param/Value/lib_UIUI_315C3636"), StringExternal("Param/Value/lib_UIUI_16D6D712"), StringExternal("Param/Value/lib_UIUI_D35EA115"), SoundLink("UI_Game_Ping_General", c_soundIndexAny), SoundLink("UI_Game_Ping_General", c_soundIndexAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InitializeBaseModPingData_Init () {
    libUIUI_gt_InitializeBaseModPingData = TriggerCreate("libUIUI_gt_InitializeBaseModPingData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Count Reset Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCountResetTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto571276DF_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto571276DF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto571276DF_ai >= 0 && lv_itPlayer <= auto571276DF_ae) || (auto571276DF_ai < 0 && lv_itPlayer >= auto571276DF_ae) ) ; lv_itPlayer += auto571276DF_ai ) {
        if ((EventTimer() == libUIUI_gv_pingCountResetTime[lv_itPlayer])) {
            libUIUI_gv_pingCount[lv_itPlayer] = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCountResetTimerExpires_Init () {
    libUIUI_gt_PingCountResetTimerExpires = TriggerCreate("libUIUI_gt_PingCountResetTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[1]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[2]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[3]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[4]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[5]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[6]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[7]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[8]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[9]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[10]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[13]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTime[14]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping On My Way Path Display Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingOnMyWayPathDisplayTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoAF9D5E79_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoAF9D5E79_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoAF9D5E79_ai >= 0 && lv_itPlayer <= autoAF9D5E79_ae) || (autoAF9D5E79_ai < 0 && lv_itPlayer >= autoAF9D5E79_ae) ) ; lv_itPlayer += autoAF9D5E79_ai ) {
        if ((EventTimer() == libUIUI_gv_uIOnMyWayPingPathDisplayTimer[lv_itPlayer])) {
            PathDestroy(libGame_gv_players[lv_itPlayer].lv_onMyWayPathDisplay);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingOnMyWayPathDisplayTimerExpires_Init () {
    libUIUI_gt_PingOnMyWayPathDisplayTimerExpires = TriggerCreate("libUIUI_gt_PingOnMyWayPathDisplayTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[10]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[13]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPathDisplayTimerExpires, libUIUI_gv_uIOnMyWayPingPathDisplayTimer[14]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preload Panel Initialization
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PreloadPanelInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libUIUI_gv_preloadPanel.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "PreloadPanel/PreloadPanelTemplate");
    libUIUI_gv_preloadPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libUIUI_gv_preloadPanel.lv_mainPanel, c_triggerControlTypeImage, "BackgroundImage");
    libUIUI_gv_preloadPanel.lv_backgroundImage = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PreloadPanelInitialization_Init () {
    libUIUI_gt_PreloadPanelInitialization = TriggerCreate("libUIUI_gt_PreloadPanelInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Tab Screen Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeTabScreenPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_uITabScreenPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer");
    libUIUI_gv_uITabScreenPanel.lv_container = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl");
    libUIUI_gv_uITabScreenPanel.lv_tabControl = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/BlueTeamStats/TeamLevel/HeroLevelLabel");
    libUIUI_gv_uITabScreenPanel.lv_teamLevelLabelBlue = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/RedTeamStats/TeamLevel/HeroLevelLabel");
    libUIUI_gv_uITabScreenPanel.lv_teamLevelLabelRed = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/BlueTeamStats/TotalKill/TeamScoreValueLabel");
    libUIUI_gv_uITabScreenPanel.lv_teamKillsLabelBlue = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/RedTeamStats/TotalKill/TeamScoreValueLabel");
    libUIUI_gv_uITabScreenPanel.lv_teamKillsLabelRed = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/CloseButton");
    libUIUI_gv_uITabScreenPanel.lv_closeButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeTabScreenPanel_Init () {
    libUIUI_gt_UIInitializeTabScreenPanel = TriggerCreate("libUIUI_gt_UIInitializeTabScreenPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Talents Choice Panel - Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITalentsChoicePanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itTier;
    int lv_itTalent;
    int lv_itBuild;

    // Automatic Variable Declarations
    const int autoCEE441D0_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoCEE441D0_ai = 1;
    const int autoC4804977_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoC4804977_ai = 1;
    const int auto16341991_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto16341991_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TalentsChoicePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    libUIUI_gv_uITalentsChoicePanel.lv_talentsPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TalentTreePanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itBuild = 1;
    for ( ; ( (autoCEE441D0_ai >= 0 && lv_itBuild <= autoCEE441D0_ae) || (autoCEE441D0_ai < 0 && lv_itBuild >= autoCEE441D0_ae) ) ; lv_itBuild += autoCEE441D0_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentBuildSelection/PageButton" + IntToString(lv_itBuild))));
        libUIUI_gv_uITalentsChoicePanel.lv_buildButton[lv_itBuild] = DialogControlLastCreated();
    }
    lv_itTier = 1;
    for ( ; ( (autoC4804977_ai >= 0 && lv_itTier <= autoC4804977_ae) || (autoC4804977_ai < 0 && lv_itTier >= autoC4804977_ae) ) ; lv_itTier += autoC4804977_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTierButton" + IntToString(lv_itTier))));
        libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        if ((lv_itTier == 1)) {
            libNtve_gf_SetDialogItemHotkey(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], c_hotkeyQuickHeroTalentTreeSelection0, PlayerGroupAll());
        }
        else if ((lv_itTier == 2)) {
            libNtve_gf_SetDialogItemHotkey(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], c_hotkeyQuickHeroTalentTreeSelection1, PlayerGroupAll());
        }
        else if ((lv_itTier == 3)) {
            libNtve_gf_SetDialogItemHotkey(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], c_hotkeyQuickHeroTalentTreeSelection2, PlayerGroupAll());
        }
        else if ((lv_itTier == 4)) {
            libNtve_gf_SetDialogItemHotkey(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], c_hotkeyQuickHeroTalentTreeSelection3, PlayerGroupAll());
        }
        else if ((lv_itTier == 5)) {
            libNtve_gf_SetDialogItemHotkey(libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButton[lv_itTier], c_hotkeyQuickHeroTalentTreeSelection4, PlayerGroupAll());
        }
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TalentIcon");
        libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonIconFrame[lv_itTier] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TalentIcon/IconImage");
        libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonIcon[lv_itTier] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "TalentIcon/QuestProgressBar");
        libUIUI_gv_uITalentsChoicePanel.lv_tierSelectionButtonQuestProgressBar[lv_itTier] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    lv_itTalent = 1;
    for ( ; ( (auto16341991_ai >= 0 && lv_itTalent <= auto16341991_ae) || (auto16341991_ai < 0 && lv_itTalent >= auto16341991_ae) ) ; lv_itTalent += auto16341991_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTreeButton" + IntToString(lv_itTalent))));
        libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itTalent] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_uITalentsChoicePanel.lv_talentIcon[lv_itTalent] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_uITalentsChoicePanel.lv_talentName[lv_itTalent] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyFrame[lv_itTalent] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_uITalentsChoicePanel.lv_talentHotkeyLabel[lv_itTalent] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenLowerContainer, c_triggerControlTypeTooltip, "StandardTooltipCommanders/TalentsChoiceTooltip");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itTalent], c_anchorRight, 0, 0);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_uITalentsChoicePanel.lv_tooltipNameLabel[lv_itTalent] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_uITalentsChoicePanel.lv_tooltipInfoLabel[lv_itTalent] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_uITalentsChoicePanel.lv_tooltipDescriptionLabel[lv_itTalent] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uITalentsChoicePanel.lv_talentButton[lv_itTalent], lv_panels[lv_currentPanelLayer], PlayerGroupAll());
        lv_currentPanelLayer -= 1;
    }
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroTalentTreeSelectionIndicatorContainer");
    libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionIndicatorContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/HeroTalentTreeSelectionToggleButton");
    libUIUI_gv_uITalentsChoicePanel.lv_heroTalentTreeSelectionToggleButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITalentsChoicePanelInitialize_Init () {
    libUIUI_gt_UITalentsChoicePanelInitialize = TriggerCreate("libUIUI_gt_UITalentsChoicePanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Status Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_TeamStatusPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    const int autoD23D6CD6_ae = libCore_gv_bALMaxTeams;
    const int autoD23D6CD6_ai = 1;
    const int autoBD0C6143_ae = libCore_gv_bALMaxTeams;
    const int autoBD0C6143_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/CompareTeamPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_teamStatusPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TopChevron");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_topChevron = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TopChevronEmpty");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_topChevronEmpty = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (autoD23D6CD6_ai >= 0 && lv_itTeam <= autoD23D6CD6_ae) || (autoD23D6CD6_ai < 0 && lv_itTeam >= autoD23D6CD6_ae) ) ; lv_itTeam += autoD23D6CD6_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "ColorBar");
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 83.53, 100.00), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(87.45, 15.69, 25.49), libGame_gv_teams[(3-lv_itTeam)].lv_teamPlayerGroupNoNPCPlayers);
        libUIUI_gv_teamStatusPanel.lv_teamColorBar[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemColor(libUIUI_gv_teamStatusPanel.lv_teamColorBar[1], Color(0.00, 83.53, 100.00), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemColor(libUIUI_gv_teamStatusPanel.lv_teamColorBar[2], Color(87.45, 15.69, 25.49), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TeamMatchMechanics");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "MapMechanic/MapMechanicImage");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MapMechanic/TooltipAnchorFrame");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicImageTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MapMechanic/MapMechanicStatusLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicLabel = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "YourTeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamPanel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "YourTeamMapMechanic/TeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "YourTeamMapMechanic/TooltipAnchorFrame");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "YourTeamMapMechanic/TeamMechanicImage1");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[1][1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "YourTeamMapMechanic/TeamMechanicImage2");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[1][2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "EnemyTeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamPanel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyTeamMapMechanic/TeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "EnemyTeamMapMechanic/TooltipAnchorFrame");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EnemyTeamMapMechanic/TeamMechanicImage1");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[2][1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EnemyTeamMapMechanic/TeamMechanicImage2");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[2][2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[(lv_currentPanelLayer - 1)], c_triggerControlTypePanel, "TeamMatchMechanicsActive");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "MapMechanic/MapMechanicImage");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MapMechanic/TooltipAnchorFrame");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImageTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MapMechanic/MapMechanicStatusLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "YourTeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamPanel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "YourTeamMapMechanic/TeamMechanicImage");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "YourTeamMapMechanic/TeamMechanicImageBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImageBG[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "YourTeamMapMechanic/TeamMapMechanic");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "YourTeamMapMechanic/TeamMapMechanicSubLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "YourTeamMapMechanic/MechanicHealthFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "YourTeamMapMechanic/MechanicHealthFrame/HealthBar/StatusBarLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBarLabel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "EnemyTeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamPanel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EnemyTeamMapMechanic/TeamMechanicImage");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EnemyTeamMapMechanic/TeamMechanicImageBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImageBG[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyTeamMapMechanic/TeamMapMechanic");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyTeamMapMechanic/TeamMapMechanicSubLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyTeamMapMechanic/MechanicHealthFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyTeamMapMechanic/MechanicHealthFrame/HealthBar/StatusBarLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBarLabel[2] = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_itTeam = 1;
    for ( ; ( (autoBD0C6143_ai >= 0 && lv_itTeam <= autoBD0C6143_ae) || (autoBD0C6143_ai < 0 && lv_itTeam >= autoBD0C6143_ae) ) ; lv_itTeam += autoBD0C6143_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "CoreHealth");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "CoreUnitStatusFrame");
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        if ((libGame_gv_teams[lv_itTeam].lv_core != null)) {
            libNtve_gf_SetDialogItemUnit(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_core, PlayerGroupAll());
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BGImage_Blue");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        if ((lv_itTeam == 1)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BGImage_Red");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[(3-lv_itTeam)].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        if ((lv_itTeam == 2)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }

        lv_currentPanelLayer -= 1;
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team1CoreHealth/PortraitImage");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Blue", libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Red", libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Blue", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team2CoreHealth/PortraitImage");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Red", libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Blue", libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_TeamStatusPanelInitialize_Init () {
    libUIUI_gt_TeamStatusPanelInitialize = TriggerCreate("libUIUI_gt_TeamStatusPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Status Panel Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_TeamStatusPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;
    string lv_xPTotalStrings;
    int lv_rosterSlot;
    playergroup lv_allyTeam;
    playergroup lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_xPTotalStrings = "";
    lv_allyTeam = PlayerGroupEmpty();
    lv_enemyTeam = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(libGame_gv_teams[1].lv_core, c_unitPropLifePercent, c_unitPropCurrent) == 100.0) && (UnitGetPropertyFixed(libGame_gv_teams[1].lv_core, c_unitPropShieldsPercent, c_unitPropCurrent) == 100.0)) {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[1], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[1], PlayerGroupAll(), true);
    }
    if ((UnitGetPropertyFixed(libGame_gv_teams[2].lv_core, c_unitPropLifePercent, c_unitPropCurrent) == 100.0) && (UnitGetPropertyFixed(libGame_gv_teams[2].lv_core, c_unitPropShieldsPercent, c_unitPropCurrent) == 100.0)) {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[2], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[2], PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_TeamStatusPanelUpdate_Init () {
    libUIUI_gt_TeamStatusPanelUpdate = TriggerCreate("libUIUI_gt_TeamStatusPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_TeamStatusPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_TeamStatusPanelUpdate, 0.0625, c_timeGame);
}

void libUIUI_InitTriggers () {
    libUIUI_gt_IncludeUI_Init();
    libUIUI_gt_InitializeUI_Init();
    libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Init();
    libUIUI_gt_UIInitializeDamageFlashUI_Init();
    libUIUI_gt_UIDamageFlashTriggerDamageFlash_Init();
    libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Init();
    libUIUI_gt_DeathRecapPanelInitialize_Init();
    libUIUI_gt_DeathRecapOpenButtonClicked_Init();
    libUIUI_gt_DEBUGDeathRecapPopulateTest_Init();
    libUIUI_gt_UICombatFloatingElementsDamage_Init();
    libUIUI_gt_UICombatFloatingElementsDamageResponseNoLeech_Init();
    libUIUI_gt_UICombatFloatingElementsHeal_Init();
    libUIUI_gt_UICombatFloatingElementsMana_Init();
    libUIUI_gt_UICombatFloatingElementsMissing_Init();
    libUIUI_gt_UICombatFloatingElementsAvoiding_Init();
    libUIUI_gt_FullscreenOverlaysInitialize_Init();
    libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Init();
    libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Init();
    libUIUI_gt_FullscreenOverlaysInitializeRework_Init();
    libUIUI_gt_GameOverSplashInitialize_Init();
    libUIUI_gt_UIInitializeGameUIHandles_Init();
    libUIUI_gt_UIGameUITurnOnFactionStates_Init();
    libUIUI_gt_UIGameUISetGameData_Init();
    libUIUI_gt_UIGodRayCreate_Init();
    libUIUI_gt_UIGodRayDestroy_Init();
    libUIUI_gt_UIGodRayDestroyOnDC_Init();
    libUIUI_gt_UIInitializeHealingFountainsHelpText_Init();
    libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Init();
    libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Init();
    libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Init();
    libUIUI_gt_UIInitializeHeroConsole_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Init();
    libUIUI_gt_UIHeroLeaderboardInitialize_Init();
    libUIUI_gt_UIHeroLeaderboardUpdateStats_Init();
    libUIUI_gt_HeroSelectionUIInit_Init();
    libUIUI_gt_HSButtonUsed_Init();
    libUIUI_gt_HSUICountdownTimerExpires_Init();
    libUIUI_gt_HSUILoadoutScrollBarUsed_Init();
    libUIUI_gt_HSUILoadoutInputTrigger_Init();
    libUIUI_gt_HSUILoadoutListBoxSelected_Init();
    libUIUI_gt_HSUILoadoutSearchTextChanges_Init();
    libUIUI_gt_UIInitializeHeroTrackerArrow_Init();
    libUIUI_gt_UIInputIngameButtonUsed_Init();
    libUIUI_gt_InputPlayerClicksUnit_Init();
    libUIUI_gt_InputUILeaderBoard_Init();
    libUIUI_gt_InputUITalentTreeSelectionDown_Init();
    libUIUI_gt_InputUITalentTreeSelectionUp_Init();
    libUIUI_gt_InputUITalentTreeSelectionQuickSelection_Init();
    libUIUI_gt_InputUIClearTextOption_Init();
    libUIUI_gt_InputUIClearText_Init();
    libUIUI_gt_KillLogInitialize_Init();
    libUIUI_gt_KillLogOnHeroUnitDies_Init();
    libUIUI_gt_KillLogOnQuestComplete_Init();
    libUIUI_gt_KillLogItemTimerExpires_Init();
    libUIUI_gt_KillLogDebugShowPanel_Init();
    libUIUI_gt_KillLogDebugAnnounceKill_Init();
    libUIUI_gt_KillLogDebugAnnounceQuest_Init();
    libUIUI_gt_MapMechanicsPanelInitialize_Init();
    libUIUI_gt_MapMechanicsPanelUpdate_Init();
    libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Init();
    libUIUI_gt_NotificationDisplayInitialize_Init();
    libUIUI_gt_DEBUGNotificationAnimCheat_Init();
    libUIUI_gt_UIInitializePartyFrameUI_Init();
    libUIUI_gt_UIPartyFrameHeroRespawn_Init();
    libUIUI_gt_UIPartyFrameHeroHearthstoneComplete_Init();
    libUIUI_gt_UIPartyFrameHeroEntersSpecialDeathState_Init();
    libUIUI_gt_UIPartyFrameDeathUpdateTimerExpires_Init();
    libUIUI_gt_UIPingListenForPlayerPing_Init();
    libUIUI_gt_InitializeBaseModPingData_Init();
    libUIUI_gt_PingCountResetTimerExpires_Init();
    libUIUI_gt_PingOnMyWayPathDisplayTimerExpires_Init();
    libUIUI_gt_PreloadPanelInitialization_Init();
    libUIUI_gt_UIInitializeTabScreenPanel_Init();
    libUIUI_gt_UITalentsChoicePanelInitialize_Init();
    libUIUI_gt_TeamStatusPanelInitialize_Init();
    libUIUI_gt_TeamStatusPanelUpdate_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUIUI_InitLib_completed = false;

void libUIUI_InitLib () {
    if (libUIUI_InitLib_completed) {
        return;
    }

    libUIUI_InitLib_completed = true;

    libUIUI_InitLibraries();
    libUIUI_InitVariables();
    libUIUI_InitTriggers();
}

include "LibCore"
include "LibGame"
include "LibMeta"
include "LibSprt"
include "LibMapM"
include "LibSond"

