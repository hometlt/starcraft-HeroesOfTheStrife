include "TriggerLibs/NativeLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "LibAIAI_h"
include "LibCore_h"
include "LibMeta_h"
include "LibSprt_h"
include "LibMapM_h"
include "LibSond_h"
include "LibUIUI_h"

include "LibGame_h"

//--------------------------------------------------------------------------------------------------
// Library: Game
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGame_InitLibraries () {
    libNtve_InitVariables();
    libVCMI_InitVariables();
    libAIAI_InitVariables();
    libCore_InitVariables();
    libMeta_InitVariables();
    libSprt_InitVariables();
    libMapM_InitVariables();
    libSond_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libGame_InitVariables_completed = false;

void libGame_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (libGame_InitVariables_completed) {
        return;
    }

    libGame_InitVariables_completed = true;

    libGame_gv_xPTrickleEnabled = true;
    libGame_gv_xPTrickleStartTimer = TimerCreate();
    libGame_gv_gAMEFirstBloodAvailable = true;
    libGame_gv_aFK_UseAFKSystem = true;
    libGame_gv_gameData.lv_gameReleaseDate = IntToDateTime(1649462400);
    libGame_gv_gameData.lv_gameVersionID = "";
    libGame_gv_gameData.lv_gameDate = "";
    libGame_gv_gameData.lv_gameMatchID = "";
    libGame_gv_gameData.lv_gameServerID = "";
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_cameraFollowForced[init_i] = true;
    }
    libGame_gv_announcement_SystemEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_announcementQueue[init_i].lv_messageTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_announcerVOEvent[init_i1] = libCore_ge_AnnouncerVOEvents_Null;
        }
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_animName[init_i1] = "";
        }
    }
    for (init_i = 0; init_i <= libGame_gv_capturePointMaxCount_C; init_i += 1) {
        libGame_gv_capturePoints[init_i].lv_captureProgressBar = c_invalidDialogControlId;
        libGame_gv_capturePoints[init_i].lv_captureProgressBarDimmingFrame = c_invalidDialogControlId;
    }
    libGame_gv_capturePointLastCreatedCapturePointIndex_C = "CapturePointLastCreatedCapturePointIndex";
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectsBars_C; init_i1 += 1) {
            libGame_gv_deathRecapDeathData[init_i].lv_effectBars[init_i1].lv_debugString = "";
        }
    }
    libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C = "AlliedPlayer";
    libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C = "DeadUnit";
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_encouragement_TimeSpentAliveTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_encouragement_DeathTipData[init_i].lv_inCombatDurationTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_inCombatTimeoutTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_alliedHeroesNearby = true;
        libGame_gv_encouragement_DeathTipData[init_i].lv_timeWithNoAlliedHeroesNearby = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_alliedMinionsNearby = true;
        libGame_gv_encouragement_DeathTipData[init_i].lv_timeWithNoAlliedMinionsNearby = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_recentHeroKillTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_recentStructureDamageTimer = TimerCreate();
    }
    libGame_gv_missionTimer = TimerCreate();
    libGame_gv_jungleWatchTowerStartTimer = TimerCreate();
    libGame_gv_gameTimer = TimerCreate();
    libGame_gv_openTheGatesTimer = TimerCreate();
    libGame_gv_heroDeathRespawnSetting = libGame_ge_HeroDeathRespawnOption_NormalRespawn;
    libGame_gv_heroDeathRunDeathUIUpdates = true;
    libGame_gv_heroDeath_UpdateStats = true;
    libGame_gv_heroDeath_RespawnMounted = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_heroDeathKillStingerQueue[init_i].lv_killStingerTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_heroDeathKillStingerQueue[init_i].lv_nextPlayIndex[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
                libGame_gv_heroDeathKillStingerQueue[init_i].lv_soundQueue[init_i1][init_j1] = SoundLink("EditorDefaultSound", -1);
            }
        }
    }
    for (init_i = 0; init_i <= libGame_gv_laneMaxCount_C; init_i += 1) {
        libGame_gv_laneData[init_i].lv_minionSpawningEnabled = true;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_coreMapHeroDeathOverlay[init_i] = c_invalidDialogControlId;
    }
    libGame_gv_minionSpawningEnabled = true;
    libGame_gv_minionScalingEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= libGame_gv_moonwellMaxMoonwellCount; init_j += 1) {
            libGame_gv_moonwellTextTags[init_i][init_j] = c_textTagNone;
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_moonwellTextTagsUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_players[init_i].lv_bNet = "";
        libGame_gv_players[init_i].lv_victoryDefeat = c_gameOverVictory;
        libGame_gv_players[init_i].lv_playerName = StringExternal("Param/Value/lib_Game_D42BD148");
        libGame_gv_players[init_i].lv_heroName = StringExternal("Param/Value/lib_Game_C690062E");
        libGame_gv_players[init_i].lv_pingCooldownTimer = TimerCreate();
        libGame_gv_players[init_i].lv_mutedPlayerGroupPing = PlayerGroupEmpty();
        libGame_gv_players[init_i].lv_mutedPlayerGroupChat = PlayerGroupEmpty();
        libGame_gv_players[init_i].lv_mutedPlayerGroupAnnouncements = PlayerGroupEmpty();
        libGame_gv_players[init_i].lv_playerLeftAnnouncementTimer = TimerCreate();
        libGame_gv_players[init_i].lv_heroUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_selectedUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_faction = libGame_ge_Faction_Neutral;
        libGame_gv_players[init_i].lv_multikillTimer = TimerCreate();
        libGame_gv_players[init_i].lv_cameraPlayerUnitGroupToFocusOn = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_cameraCurrentTargetGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_cameraPlayerHasControl = true;
        libGame_gv_players[init_i].lv_vOSoundSuffix = "";
        libGame_gv_players[init_i].lv_respawnTimer = TimerCreate();
        libGame_gv_players[init_i].lv_respawnSoundCueTimer = TimerCreate();
        libGame_gv_players[init_i].lv_deathToastTimer = TimerCreate();
        libGame_gv_players[init_i].lv_bankData.lv_lastGameDate = "";
        libGame_gv_players[init_i].lv_soundDeathAlertPrefix = "UI_HeroDeath_Gen_";
        libGame_gv_players[init_i].lv_recentDamageResetTimer = TimerCreate();
    }
    libGame_gv_heroes = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_players_Heroes_AllTrackedHeroesForTeam[init_i] = UnitGroupEmpty();
    }
    libGame_gv_scalingTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_teams[init_i].lv_teamPlayerGroup = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_multikillTimer = TimerCreate();
        libGame_gv_teams[init_i].lv_abandonedTheGame = TimerCreate();
    }
    libGame_gv_towerMapPlaysCoreWarning = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_towerTeamCoreAlertTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_towerTeamCoreAlertCooldownTimer[init_i] = TimerCreate();
    }
    libGame_gv_towerMainCoreAlertTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_towerTeamCoreAlertPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libGame_gv_townMaxTownCount; init_i += 1) {
        libGame_gv_townTownData[init_i].lv_townHallIndex = -1;
    }
}

// Presets
string libGame_ge_GameDataRegion_Ident (int lp_val) {
         if (lp_val == libGame_ge_GameDataRegion_OfflineTest) { return "OfflineTest"; }
    else if (lp_val == libGame_ge_GameDataRegion_EU) { return "EU"; }
    else if (lp_val == libGame_ge_GameDataRegion_NA) { return "NA"; }
    else if (lp_val == libGame_ge_GameDataRegion_KR) { return "KR"; }
    return null;
}

string libGame_ge_BehaviorCategories_Ident (int lp_val) {
         if (lp_val == libGame_ge_BehaviorCategories_None) { return "None"; }
    else if (lp_val == libGame_ge_BehaviorCategories_Avoidance) { return "Avoidance"; }
    else if (lp_val == libGame_ge_BehaviorCategories_BuffSpellPower) { return "BuffSpellPower"; }
    else if (lp_val == libGame_ge_BehaviorCategories_DamageReduction) { return "DamageReduction"; }
    else if (lp_val == libGame_ge_BehaviorCategories_DebuffSpellPower) { return "DebuffSpellPower"; }
    else if (lp_val == libGame_ge_BehaviorCategories_Dodge) { return "Dodge"; }
    else if (lp_val == libGame_ge_BehaviorCategories_HealReduction) { return "HealReduction"; }
    else if (lp_val == libGame_ge_BehaviorCategories_HideNameplate) { return "HideNameplate"; }
    else if (lp_val == libGame_ge_BehaviorCategories_HideStatusFrame) { return "HideStatusFrame"; }
    else if (lp_val == libGame_ge_BehaviorCategories_HostileStasisRemoved) { return "HostileStasisRemoved"; }
    else if (lp_val == libGame_ge_BehaviorCategories_ImmunedToAllyDisplacement) { return "ImmunedToAllyDisplacement"; }
    else if (lp_val == libGame_ge_BehaviorCategories_ImmunedToEnemyDisplacement) { return "ImmunedToEnemyDisplacement"; }
    else if (lp_val == libGame_ge_BehaviorCategories_KnockedOut) { return "KnockedOut"; }
    else if (lp_val == libGame_ge_BehaviorCategories_MindControl) { return "MindControl"; }
    else if (lp_val == libGame_ge_BehaviorCategories_PermanentMaxHealth) { return "PermanentMaxHealth"; }
    else if (lp_val == libGame_ge_BehaviorCategories_PersistentCloak) { return "PersistentCloak"; }
    else if (lp_val == libGame_ge_BehaviorCategories_PseudoStructure) { return "PseudoStructure"; }
    else if (lp_val == libGame_ge_BehaviorCategories_SpecialDeathState) { return "SpecialDeathState"; }
    else if (lp_val == libGame_ge_BehaviorCategories_StackingComboMarker) { return "StackingComboMarker"; }
    else if (lp_val == libGame_ge_BehaviorCategories_SuppressVisibility) { return "SuppressVisibility"; }
    else if (lp_val == libGame_ge_BehaviorCategories_Taunt) { return "Taunt"; }
    else if (lp_val == libGame_ge_BehaviorCategories_TemporaryCloak) { return "TemporaryCloak"; }
    else if (lp_val == libGame_ge_BehaviorCategories_UnitRemoved) { return "UnitRemoved"; }
    else if (lp_val == libGame_ge_BehaviorCategories_Unreducible) { return "Unreducible"; }
    else if (lp_val == libGame_ge_BehaviorCategories_UnrevealableCloak) { return "UnrevealableCloak"; }
    else if (lp_val == libGame_ge_BehaviorCategories_VisionRemoval) { return "VisionRemoval"; }
    return null;
}

string libGame_ge_EffectHistoryAbilityTalentWeapon_Ident (int lp_val) {
         if (lp_val == libGame_ge_EffectHistoryAbilityTalentWeapon_Unknown) { return "Unknown"; }
    else if (lp_val == libGame_ge_EffectHistoryAbilityTalentWeapon_Ability) { return "Ability"; }
    else if (lp_val == libGame_ge_EffectHistoryAbilityTalentWeapon_Talent) { return "Talent"; }
    else if (lp_val == libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon) { return "Weapon"; }
    return null;
}

string libGame_ge_EffectHistoryDamagedOrHealed_Ident (int lp_val) {
         if (lp_val == libGame_ge_EffectHistoryDamagedOrHealed_Unknown) { return "Unknown"; }
    else if (lp_val == libGame_ge_EffectHistoryDamagedOrHealed_Damaged) { return "Damaged"; }
    else if (lp_val == libGame_ge_EffectHistoryDamagedOrHealed_Healed) { return "Healed"; }
    return null;
}

string libGame_ge_EncouragementStatCallouts_Ident (int lp_val) {
         if (lp_val == libGame_ge_EncouragementStatCallouts_Null) { return "Null"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_TimeSpentAlive) { return "TimeSpentAlive"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered) { return "PercentOfTeamsXPGathered"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_Takedowns) { return "Takedowns"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes) { return "DamageDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes) { return "HealingDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapTributesCollected) { return "MapTributesCollected"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn) { return "MapDoubloonsTurnedIn"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures) { return "MapDragonShrineCaptures"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapSkullsCollected) { return "MapSkullsCollected"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MercCampsCaptured) { return "MercCampsCaptured"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_DamageDoneToTowns) { return "DamageDoneToTowns"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes) { return "ShieldingDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_Count) { return "Count"; }
    return null;
}

string libGame_ge_EncouragementDeathTipsNames_Ident (int lp_val) {
         if (lp_val == libGame_ge_EncouragementDeathTipsNames_Null) { return "Null"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Gangups) { return "Gangups"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_FollowMinions) { return "FollowMinions"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns) { return "MinionsvsTowns"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_UseYourAbilities) { return "UseYourAbilities"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Moonwell) { return "Moonwell"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Retreat) { return "Retreat"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_TrainTalents) { return "TrainTalents"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Mount) { return "Mount"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath) { return "EnemyFountainDeath"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Count) { return "Count"; }
    return null;
}

string libGame_ge_LaneNamePreset_Ident (int lp_val) {
         if (lp_val == libGame_ge_LaneNamePreset_Top) { return "Top"; }
    else if (lp_val == libGame_ge_LaneNamePreset_Middle) { return "Middle"; }
    else if (lp_val == libGame_ge_LaneNamePreset_Bottom) { return "Bottom"; }
    return null;
}

// Functions
int libGame_gf_CustomValueIndex (int lp_customValueIndex) {
    // Automatic Variable Declarations
    // Implementation
    return lp_customValueIndex;
}

int libGame_gf_CustomValueGetAsInteger (int lp_customValueIndex, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, lp_customValueIndex));
}

int libGame_gf_UnitStatsValidHeroicArmorValueOfUnit (int lp_armorType, unit lp_unit) {
    // Variable Declarations
    int lv_armorValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_armorType == libGame_ge_UnitStatsDamageType_Physical)) {
        lv_armorValue = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalHero, lp_unit);
    }
    else if ((lp_armorType == libGame_ge_UnitStatsDamageType_Spell)) {
        lv_armorValue = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorSpellHero, lp_unit);
    }
    if ((lv_armorValue < libGame_gv_unitStatsArmorValueMin)) {
        return libGame_gv_unitStatsArmorValueMin;
    }
    if ((lv_armorValue > libGame_gv_unitStatsArmorValueMax)) {
        return libGame_gv_unitStatsArmorValueMax;
    }
    return lv_armorValue;
}

int libGame_gf_UnitStatsCalculateValidHealingValue (int lp_healingTakenCurrentValue) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_healingTakenCurrentValue > libGame_gv_unitStatsHealingTakenMaxValuePositive)) {
        return libGame_gv_unitStatsHealingTakenMaxValuePositive;
    }
    else if ((lp_healingTakenCurrentValue < (-libGame_gv_unitStatsHealingTakenMaxValueNegative))) {
        return (-libGame_gv_unitStatsHealingTakenMaxValueNegative);
    }
    return lp_healingTakenCurrentValue;
}

int libGame_gf_UnitStatsValidHealingReceived (unit lp_unit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingReceived, lp_unit);

    // Implementation
    if ((lv_value > libGame_gv_unitStatsHealingTakenMaxValuePositive)) {
        return libGame_gv_unitStatsHealingTakenMaxValuePositive;
    }
    else if ((lv_value < (-libGame_gv_unitStatsHealingTakenMaxValueNegative))) {
        return (-libGame_gv_unitStatsHealingTakenMaxValueNegative);
    }
    return lv_value;
}

bool libGame_gf_UnitStatsUnitNeedsUpdateHealingReceived (unit lp_targetUnit) {
    // Variable Declarations
    int lv_currentHealingReceivedValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentHealingReceivedValue = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingReceived, lp_targetUnit);

    // Implementation
    if ((lv_currentHealingReceivedValue >= libGame_gv_unitStatsHealingTakenMaxValuePositive) && (UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsHealingTakenBehaviors[libGame_gv_unitStatsHealingTakenTotalValue]) == true)) {
        return false;
    }
    if ((lv_currentHealingReceivedValue <= (-libGame_gv_unitStatsPowerMaxValueNegative)) && (UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsHealingTakenBehaviors[0]) == true)) {
        return false;
    }
    if ((lv_currentHealingReceivedValue == 0)) {
        if ((libCore_gf_ExecuteValidatorOnUnit("StandardTargetHasHealingTakenBehaviors", lp_targetUnit, lp_targetUnit) == false)) {
            return false;
        }
    }
    else {
        if ((UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsHealingTakenBehaviors[(libGame_gv_unitStatsHealingTakenMaxValueNegative+lv_currentHealingReceivedValue)]) == true)) {
            return false;
        }
    }
    return true;
}

bool libGame_gf_UnitStatsUnitHealingSuppressed (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return UnitHasBehavior2(lp_unit, "StandardHealingTakenNegative100");
}

void libGame_gf_UnitStatsUpdateHealing (unit lp_unit) {
    // Variable Declarations
    int lv_value;
    fixed lv_calculatedValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gf_UnitStatsUpdateHealingReceivedBehaviors(lp_unit);
}

void libGame_gf_UnitStatsUpdateHealingReceivedBehaviors (unit lp_unit) {
    // Variable Declarations
    int lv_healingTakenCurrentValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gf_UnitStatsUnitNeedsUpdateHealingReceived(lp_unit) == true)) {
        UnitCreateEffectUnit(lp_unit, "StandardRemoveHealingTakenBehaviors", lp_unit);
        lv_healingTakenCurrentValue = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingReceived, lp_unit);
        if ((lv_healingTakenCurrentValue != 0)) {
            lv_healingTakenCurrentValue += libGame_gv_unitStatsHealingTakenMaxValueNegative;
            UnitBehaviorAdd(lp_unit, libGame_gv_unitStatsHealingTakenBehaviors[lv_healingTakenCurrentValue], lp_unit, 1);
        }
    }
}

fixed libGame_gf_UnitStatsLifestealValue (unit lp_unit, int lp_type) {
    // Variable Declarations
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_type == libGame_ge_UnitStatsDamageType_Physical)) {
        lv_value = UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsLifestealPhysical));
    }
    else if ((lp_type == libGame_ge_UnitStatsDamageType_Spell)) {
        lv_value = UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsLifestealSpell));
    }
    lv_value *= 0.01;
    if ((lv_value < 0.0)) {
        lv_value = 0.0;
    }

    return lv_value;
}

void libGame_gf_UnitStatsLifestealExecute (unit lp_unit, fixed lp_amount, string lp_damagingEffect, bool lp_critical) {
    // Variable Declarations
    fixed lv_calculatedAmount;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_owner = UnitGetOwner(lp_unit);
    lv_calculatedAmount = (lp_amount * (1 + (0.01 *UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingReceived)))));
    if ((lp_critical == false)) {
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "StandardLifesteal", "VitalArray[" + IntToString(0) + "].Change", lv_owner, lv_calculatedAmount);
        UnitCreateEffectUnit(lp_unit, "StandardLifesteal", lp_unit);
    }
    else {
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "StandardLifestealCritical", "VitalArray[" + IntToString(0) + "].Change", lv_owner, lv_calculatedAmount);
        UnitCreateEffectUnit(lp_unit, "StandardLifestealCritical", lp_unit);
    }
    if (((UnitGroupHasUnit(libGame_gv_players[lv_owner].lv_heroUnitGroup, lp_unit) == true) || (lp_unit == libGame_gv_players[lv_owner].lv_activeVehicle))) {
        libGame_gf_SendEventHeroLifesteal(lp_unit, lv_calculatedAmount, lp_damagingEffect);
    }

}

void libGame_gf_UnitStatsLifestealCalculation (fixed lp_amount, fixed lp_percentValueAdditional, bool lp_percentValueIsModifier, bool lp_useOnSummoner, unit lp_triggeringUnit, unit lp_damagingUnit, string lp_damagingEffect) {
    // Variable Declarations
    int lv_damageType;
    fixed lv_healingAmount;
    fixed lv_modifier;
    unit lv_summoner;
    bool lv_isCritical;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageType = c_unitDamageTypeAny;

    // Implementation
    if (((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, lp_damagingEffect, "No Lifesteal") == true) || (lp_amount <= 0.0))) {
        return ;
    }

    lv_damageType = libCore_gf_CombatDamageTypeFromEffect(lp_damagingEffect);
    lv_isCritical = libCore_gf_CombatCheckDamageCriticalState(lp_triggeringUnit, lp_damagingUnit, lp_damagingEffect, lv_damageType);
    if ((UnitIsAlive(lp_damagingUnit) == true) && (libGame_gf_BehaviorCategoriesUnitHasBehaviorFromCategory(lp_damagingUnit, libGame_ge_BehaviorCategories_SpecialDeathState) == false) && (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
        if ((lp_percentValueIsModifier == true)) {
            lv_modifier = lp_percentValueAdditional;
        }
        else {
            if ((lv_damageType == c_unitDamageTypeRanged)) {
                lv_modifier = libGame_gf_UnitStatsLifestealValue(lp_damagingUnit, libGame_ge_UnitStatsDamageType_Physical);
            }
            else if ((lv_damageType == c_unitDamageTypeSpell)) {
                lv_modifier = libGame_gf_UnitStatsLifestealValue(lp_damagingUnit, libGame_ge_UnitStatsDamageType_Spell);
            }
            if ((lp_percentValueAdditional > 0.0)) {
                lv_modifier += lp_percentValueAdditional;
            }

        }
        if ((lv_modifier > 0.0)) {
            lv_healingAmount = (lv_modifier * lp_amount);
            libGame_gf_UnitStatsLifestealExecute(lp_damagingUnit, lv_healingAmount, lp_damagingEffect, lv_isCritical);
        }

    }

    if ((lp_useOnSummoner == true)) {
        lv_summoner = libGame_gf_GetSummonerofSummonedUnit(lp_damagingUnit);
        if ((lv_summoner != null) && (UnitIsAlive(lv_summoner) == true) && (libGame_gf_BehaviorCategoriesUnitHasBehaviorFromCategory(lv_summoner, libGame_ge_BehaviorCategories_SpecialDeathState) == false) && (UnitGetPropertyFixed(lv_summoner, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
            if ((lp_percentValueIsModifier == true)) {
                lv_modifier = lp_percentValueAdditional;
            }
            else {
                if ((lv_damageType == c_unitDamageTypeRanged)) {
                    lv_modifier = libGame_gf_UnitStatsLifestealValue(lv_summoner, libGame_ge_UnitStatsDamageType_Physical);
                }
                else if ((lv_damageType == c_unitDamageTypeSpell)) {
                    lv_modifier = libGame_gf_UnitStatsLifestealValue(lv_summoner, libGame_ge_UnitStatsDamageType_Spell);
                }
                if ((lp_percentValueAdditional > 0.0)) {
                    lv_modifier += lp_percentValueAdditional;
                }

            }
            if ((lv_modifier > 0.0)) {
                lv_healingAmount = (lv_modifier * lp_amount);
                libGame_gf_UnitStatsLifestealExecute(lv_summoner, lv_healingAmount, lp_damagingEffect, lv_isCritical);
            }

        }

    }

}

int libGame_gf_UnitStatsPowerCustomValueIndex (int lp_powerType) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    int auto7DBA169A_val;

    // Variable Initialization

    // Implementation
    auto7DBA169A_val = lp_powerType;
    if (auto7DBA169A_val == libGame_ge_UnitStatsPowerType_DamagePhysical) {
        lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsDamagePhysical);
    }
    else if (auto7DBA169A_val == libGame_ge_UnitStatsPowerType_DamageSpell) {
        lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsDamageSpell);
    }
    else if (auto7DBA169A_val == libGame_ge_UnitStatsPowerType_HealingDealt) {
        lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingDealt);
    }
    else {
    }
    return lv_value;
}

int libGame_gf_UnitStatsValidPowerValueOfUnit (int lp_powerType, unit lp_unit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_UnitStatsPowerCustomValueIndex(lp_powerType)));
    if ((lv_value < libGame_gv_unitStatsPowerMaxValueNegative)) {
        return libGame_gv_unitStatsPowerMaxValueNegative;
    }
    if ((lv_value > libGame_gv_unitStatsPowerMaxValuePositive)) {
        return libGame_gv_unitStatsPowerMaxValuePositive;
    }
    return lv_value;
}

void libGame_gf_UnitStatsSummonedUnitUpdateStatsAllUnitsFromSummoner (unit lp_summoner, int lp_value, int lp_customValueIndex) {
    // Variable Declarations
    unit lv_itSummonedUnit;

    // Automatic Variable Declarations
    unitgroup auto63E04888_g;
    int auto63E04888_u;

    // Variable Initialization

    // Implementation
    auto63E04888_g = UnitGetTrackedUnitGroup(lp_summoner, "Summon@SummonerUnitTracker");
    auto63E04888_u = UnitGroupCount(auto63E04888_g, c_unitCountAll);
    for (;; auto63E04888_u -= 1) {
        lv_itSummonedUnit = UnitGroupUnitFromEnd(auto63E04888_g, auto63E04888_u);
        if (lv_itSummonedUnit == null) { break; }
        libGame_gf_UnitStatsSummonedUnitUpdateStatsFromSummoner(lp_summoner, lv_itSummonedUnit, lp_value, lp_customValueIndex);
    }
}

void libGame_gf_UnitStatsSummonedUnitUpdateStatsFromSummoner (unit lp_summoner, unit lp_summoned, int lp_value, int lp_customValueIndex) {
    // Variable Declarations
    int lv_customValue;
    int lv_currentValue_Summoner;
    int lv_currentValue_Summoned;
    int lv_finalValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_customValueIndex != libGame_ge_CustomValueIndexes_UnitStatsDamagePhysical) && (lp_customValueIndex != libGame_ge_CustomValueIndexes_UnitStatsDamageSpell) && (lp_customValueIndex != libGame_ge_CustomValueIndexes_UnitStatsHealingDealt)) {
        return ;
    }

    lv_currentValue_Summoned = libGame_gf_CustomValueGetAsInteger(lp_customValueIndex, lp_summoned);
    lv_finalValue = (lv_currentValue_Summoned + lp_value);
    UnitSetCustomValue(lp_summoned, lp_customValueIndex, lv_finalValue);
}

void libGame_gf_UnitStatsSummonedUnitUpdateStatsFromSummonerBirth (unit lp_summoned) {
    // Variable Declarations
    unit lv_summoner;
    int lv_currentValue_Summoner;
    int lv_currentValue_Summoned;
    int lv_finalValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoner = libGame_gf_GetSummonerofSummonedUnit(lp_summoned);

    // Implementation
    lv_currentValue_Summoner = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsDamagePhysical, lv_summoner);
    lv_currentValue_Summoned = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsDamagePhysical, lp_summoned);
    lv_finalValue = (lv_currentValue_Summoned + lv_currentValue_Summoner);
    UnitSetCustomValue(lp_summoned, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsDamagePhysical), lv_finalValue);
    lv_currentValue_Summoner = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsDamageSpell, lv_summoner);
    lv_currentValue_Summoned = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsDamageSpell, lp_summoned);
    lv_finalValue = (lv_currentValue_Summoned + lv_currentValue_Summoner);
    UnitSetCustomValue(lp_summoned, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsDamageSpell), lv_finalValue);
    lv_currentValue_Summoner = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingDealt, lv_summoner);
    lv_currentValue_Summoned = libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingDealt, lp_summoned);
    lv_finalValue = (lv_currentValue_Summoned + lv_currentValue_Summoner);
    UnitSetCustomValue(lp_summoned, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingDealt), lv_finalValue);
}

int libGame_gf_UnitStatsAttributeValueOfBehavior (string lp_behavior, string lp_unitStatsArrtibute) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ((lp_behavior) + "#" + (lp_unitStatsArrtibute)));
}

int libGame_gf_UnitStatsAttributeValueOfBehaviorOnUnit (string lp_behavior, string lp_unitStatsArrtibute, unit lp_unit) {
    // Variable Declarations
    int lv_attributeValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_attributeValue = libGame_gf_UnitStatsAttributeValueOfBehavior(lp_behavior, lp_unitStatsArrtibute);
    return (lv_attributeValue*UnitBehaviorCount(lp_unit, lp_behavior));
}

void libGame_gf_UnitStatsChangeCustomValue (string lp_behavior, int lp_behaviorChange, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorPhysicalHero", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalHero, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorPhysicalMerc", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalMerc, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorPhysicalMinion", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalMinion, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorPhysicalMonster", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalMonster, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorPhysicalStructure", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalStructure, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorPhysicalSummon", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalSummon, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorSpellHero", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorSpellHero, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorSpellMerc", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorSpellMerc, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorSpellMinion", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorSpellMinion, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorSpellMonster", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorSpellMonster, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorSpellStructure", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorSpellStructure, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsArmorSpellSummon", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsArmorSpellSummon, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsHealingReceived", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsHealingReceived, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsHealingDealt", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsHealingDealt, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsDamagePhysical", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsDamagePhysical, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsDamageSpell", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsDamageSpell, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsRelentless", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsRelentless, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsLifestealPhysical", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsLifestealPhysical, lp_targetUnit);
    libGame_gf_UnitStatsChangeCustomValueOfBehavior(lp_behavior, "UnitStatsLifestealSpell", lp_behaviorChange, libGame_ge_CustomValueIndexes_UnitStatsLifestealSpell, lp_targetUnit);
}

void libGame_gf_UnitStatsChangeCustomValueOfBehavior (string lp_behavior, string lp_attribute, int lp_behaviorChange, int lp_customValueIndex, unit lp_unit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, ((lp_behavior) + "#" + (lp_attribute)));
    if ((lv_value == 0)) {
        return ;
    }

    if ((lp_behaviorChange == c_unitBehaviorChangeIncrease)) {
        lv_value *= 1;
    }
    else if ((lp_behaviorChange == c_unitBehaviorChangeDecrease)) {
        lv_value *= -1;
    }
    UnitSetCustomValue(lp_unit, lp_customValueIndex, (UnitGetCustomValue(lp_unit, lp_customValueIndex) + lv_value));
    libGame_gf_UnitStatsSummonedUnitUpdateStatsAllUnitsFromSummoner(lp_unit, lv_value, lp_customValueIndex);
}

void libGame_gf_CooldownUniversalHeroCDR (unit lp_unit, fixed lp_time, bool lp_reset, bool lp_ignoreCDRRequirment, bool lp_includeHeroic, bool lp_includeTrait) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_abilityIndex;
    int lv_itAbility;
    string lv_abilLink;
    string lv_cooldownLink;
    string lv_chargeLink;
    fixed lv_cooldown_reduction_time;
    int lv_player;

    // Automatic Variable Declarations
    int auto48ABB72C_ae;
    const int auto48ABB72C_ai = 1;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";
    lv_player = UnitGetOwner(lp_unit);

    // Implementation
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(lp_unit);
    if ((lv_heroIndex > 0)) {
    }
    else {
        return ;
    }
    lv_cooldown_reduction_time = (-1.0 * lp_time);
    auto48ABB72C_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto48ABB72C_ai >= 0 && lv_itAbility <= auto48ABB72C_ae) || (auto48ABB72C_ai < 0 && lv_itAbility >= auto48ABB72C_ae) ) ; lv_itAbility += auto48ABB72C_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbility];
        lv_abilLink = libCore_gv_abilityData[lv_abilityIndex].lv_abilityLink;
        if ((lp_ignoreCDRRequirment == true)) {
        }
        else {
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_isAffectedByCooldownReduction == false)) {
                continue;
            }

            if ((libCore_gv_abilityData[lv_abilityIndex].lv_cDRSkipValidator != null) && (libCore_gf_ExecuteValidatorOnUnit(libCore_gv_abilityData[lv_abilityIndex].lv_cDRSkipValidator, lp_unit, lp_unit) == true)) {
                continue;
            }

            if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Inventory")) {
                continue;
            }

            if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Heroic") && (lp_includeHeroic == false)) {
                continue;
            }

            if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Trait") && (lp_includeTrait == false)) {
                continue;
            }

        }
        if ((lp_reset == false)) {
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_isUsesCharges == false)) {
                lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", lv_player);
                UnitModifyCooldown(lp_unit, lv_cooldownLink, lv_cooldown_reduction_time, c_cooldownOperationAdd);
            }
            else {
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", lv_player);
                UnitAddChargeRegenRemaining(lp_unit, lv_chargeLink, lv_cooldown_reduction_time);
            }
        }
        else {
            UnitAbilityReset(lp_unit, AbilityCommand(lv_abilLink, 0), c_spendLocationAll);
        }
    }
}

void libGame_gf_CooldownDebugHeroCDR (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itAbility;
    int lv_abilityIndex;
    unit lv_itHero;
    unit lv_itInventory;

    // Automatic Variable Declarations
    int auto47E50E42_ae;
    const int auto47E50E42_ai = 1;
    unitgroup auto521A197B_g;
    int auto521A197B_u;
    unitgroup auto2B35C144_g;
    int auto2B35C144_u;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    auto47E50E42_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto47E50E42_ai >= 0 && lv_itAbility <= auto47E50E42_ae) || (auto47E50E42_ai < 0 && lv_itAbility >= auto47E50E42_ae) ) ; lv_itAbility += auto47E50E42_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbility];
        auto521A197B_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
        auto521A197B_u = UnitGroupCount(auto521A197B_g, c_unitCountAll);
        for (;; auto521A197B_u -= 1) {
            lv_itHero = UnitGroupUnitFromEnd(auto521A197B_g, auto521A197B_u);
            if (lv_itHero == null) { break; }
            auto2B35C144_g = UnitInventoryGroup(lv_itHero);
            auto2B35C144_u = UnitGroupCount(auto2B35C144_g, c_unitCountAll);
            for (;; auto2B35C144_u -= 1) {
                lv_itInventory = UnitGroupUnitFromEnd(auto2B35C144_g, auto2B35C144_u);
                if (lv_itInventory == null) { break; }
            }
        }
    }
}

void libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary (int lp_player, point lp_point, fixed lp_duration, fixed lp_initialVelocity, fixed lp_decelerate, bool lp_smart) {
    // Variable Declarations
    int lv_itBound;
    fixed lv_actualDuration;

    // Automatic Variable Declarations
    int auto9561BDB8_ae;
    const int auto9561BDB8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_actualDuration = lp_duration;
    auto9561BDB8_ae = libGame_gv_cameraBound_Count;
    lv_itBound = 1;
    for ( ; ( (auto9561BDB8_ai >= 0 && lv_itBound <= auto9561BDB8_ae) || (auto9561BDB8_ai < 0 && lv_itBound >= auto9561BDB8_ae) ) ; lv_itBound += auto9561BDB8_ai ) {
        if ((RegionContainsPoint(libGame_gv_cameraBound_Regions[lv_itBound], lp_point) == true)) {
            if ((libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] != lv_itBound)) {
                libGame_gf_SetCameraBoundCCIndexForPlayer(lp_player, lv_itBound);
                lv_actualDuration = 0.0;
            }

            break;
        }

    }
    CameraPan(lp_player, lp_point, lv_actualDuration, lp_initialVelocity, lp_decelerate, lp_smart);
    libGame_gf_SendEventCameraPannedFromScript(lp_player, lp_point);
}

void libGame_gf_CameraTrackNextAliveAllyForPlayer (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Automatic Variable Declarations
    const int autoA329EA21_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoA329EA21_ai = 1;
    int auto78F9AC02_ae;
    const int auto78F9AC02_ai = 1;

    // Variable Initialization
    lv_playerFaction = libGame_ge_Faction_Neutral;

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack < libCore_gv_bALMaxEnginePlayerCount)) {
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack + 1);
        for ( ; ( (autoA329EA21_ai >= 0 && lv_i <= autoA329EA21_ae) || (autoA329EA21_ai < 0 && lv_i >= autoA329EA21_ae) ) ; lv_i += autoA329EA21_ai ) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_i) == true) && (libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lp_player].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        auto78F9AC02_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        lv_i = 1;
        for ( ; ( (auto78F9AC02_ai >= 0 && lv_i <= auto78F9AC02_ae) || (auto78F9AC02_ai < 0 && lv_i >= auto78F9AC02_ae) ) ; lv_i += auto78F9AC02_ai ) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_i) == true) && (libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }

}

void libGame_gf_CameraTrackPreviousAliveAllyForPlayer (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Automatic Variable Declarations
    const int auto286D1281_ae = 1;
    const int auto286D1281_ai = -1;
    int auto591788ED_ae;
    const int auto591788ED_ai = -1;

    // Variable Initialization
    lv_playerFaction = libGame_ge_Faction_Neutral;

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack == 1)) {
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack - 1);
        for ( ; ( (auto286D1281_ai >= 0 && lv_i <= auto286D1281_ae) || (auto286D1281_ai < 0 && lv_i >= auto286D1281_ae) ) ; lv_i += auto286D1281_ai ) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_i) == true) && (libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        auto591788ED_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        lv_i = libCore_gv_bALMaxEnginePlayerCount;
        for ( ; ( (auto591788ED_ai >= 0 && lv_i <= auto591788ED_ae) || (auto591788ED_ai < 0 && lv_i >= auto591788ED_ae) ) ; lv_i += auto591788ED_ai ) {
            if ((libGame_gf_PlayerIsHeroPlayer(lv_i) == true) && (libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }

}

trigger auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = null;
int auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

void libGame_gf_CameraUpdateCameraForPlayer (int lp_player) {
    auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player = lp_player;

    if (auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger == null) {
        auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = TriggerCreate("auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger, false, false);
}

bool auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

    // Variable Declarations
    int lv_playerBeingTracked;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_playerBeingTracked = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
    if ((libGame_gv_cameraFollowForced[lp_player] == true)) {
        libGame_gv_cameraFollowForced[lp_player] = false;
        CameraForceFollowUnitGroup(lp_player, false);
    }

    PlayerOptionOverride(lp_player, "camerafollow", null);
    if ((libGame_gv_players[lp_player].lv_cameraForcedLock == true) && (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn != null)) {
        libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
        CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
        CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
        PlayerOptionOverride(lp_player, "camerafollow", "1");
    }
    else {
        if ((lv_playerBeingTracked != 0) && (libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitGroupToFocusOn != null)) {
            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitGroupToFocusOn;
            libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGroupCenterOfGroup(libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup), 0.0, -1, 0.0, false);
            CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
            CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
            PlayerOptionOverride(lp_player, "camerafollow", "1");
        }
        else {
            if ((libGame_gv_players[lp_player].lv_isDead == false) && (libGame_gv_players[lp_player].lv_cameraPlayerHasControl == false) && (libGame_gv_players[lp_player].lv_cameraCameraLockInterrupt == false) && (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn != null)) {
                libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGroupCenterOfGroup(libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup), 0.0, -1, 0.0, false);
                CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                PlayerOptionOverride(lp_player, "camerafollow", "1");
            }
            else {
                if ((libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn == null)) {
                    libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = null;
                    PlayerOptionOverride(lp_player, "camerafollow", "0");
                    CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                }
                else {
                    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "LeoricUndying") == false) && (libGame_gv_players[lp_player].lv_isDead == true)) {
                        libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                        CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                        CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                    }
                    else {
                        if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "LeoricUndying") == true)) {
                            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_heroUnitGroup;
                        }
                        else {
                            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                            CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                            CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_cameraCurrentTarget), true, false);
                            CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                        }
                    }
                }
            }
        }
    }
    if ((libGame_gv_players[lp_player].lv_cameraPlayerHasControl == true)) {
        CameraLockInput(lp_player, false);
    }
    else {
        CameraLockInput(lp_player, true);
    }
    return true;
}

int libGame_gf_CameraBoundCCIndex (region lp_bound) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoC4AE4220_ae;
    const int autoC4AE4220_ai = 1;

    // Variable Initialization

    // Implementation
    autoC4AE4220_ae = libGame_gv_cameraBound_Count;
    lv_itIndex = 1;
    for ( ; ( (autoC4AE4220_ai >= 0 && lv_itIndex <= autoC4AE4220_ae) || (autoC4AE4220_ai < 0 && lv_itIndex >= autoC4AE4220_ae) ) ; lv_itIndex += autoC4AE4220_ai ) {
        if ((PointGetX(RegionGetBoundsMax(lp_bound)) == PointGetX(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMax(lp_bound)) == PointGetY(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetBoundsMin(lp_bound)) == PointGetX(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMin(lp_bound)) == PointGetY(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetCenter(lp_bound)) == PointGetX(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetCenter(lp_bound)) == PointGetY(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex])))) {
            return lv_itIndex;
        }

    }
    return -1;
}

void libGame_gf_AddCameraBoundsCC (region lp_bounds) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_cameraBound_Count >= libGame_gv_cameraBound_MaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_Game_ABC6140D", "A", IntToText(libGame_gv_cameraBound_MaxCount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_ABC6140D"), true);
        return ;
    }

    libGame_gv_cameraBound_Count += 1;
    libGame_gv_cameraBound_Regions[libGame_gv_cameraBound_Count] = lp_bounds;
}

void libGame_gf_SetCameraBoundsCC (int lp_index, region lp_bounds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index > libGame_gv_cameraBound_Count) && (lp_index < 1)) {
        return ;
    }

    libGame_gv_cameraBound_Regions[lp_index] = lp_bounds;
}

void libGame_gf_SetCameraBoundCCIndexForPlayer (int lp_player, int lp_boundsIndex) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lp_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], libGame_gv_cameraBound_Regions[lp_boundsIndex], true);
}

void libGame_gf_SetCameraBoundCCForPlayer (int lp_player, region lp_bound) {
    // Variable Declarations
    int lv_boundsIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_boundsIndex = libGame_gf_CameraBoundCCIndex(lp_bound);
    if ((lv_boundsIndex <= 0)) {
        libGame_gf_AddCameraBoundsCC(lp_bound);
        lv_boundsIndex = libGame_gv_cameraBound_Count;
    }

    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lv_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], lp_bound, true);
}

void libGame_gf_AnnouncementAddItemForPlayerGroup (playergroup lp_playerGroup, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon, fixed lp_duration, bool lp_isKillAnnouncement) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itQueuePosition;
    int lv_priorityInt;
    int lv_desiredPosition;

    // Automatic Variable Declarations
    playergroup auto494765CB_g;
    int auto28829704_ae;
    const int auto28829704_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_announcement_SystemEnabled == false)) {
        return ;
    }

    auto494765CB_g = lp_playerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto494765CB_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lv_itPlayer) == true)) {
            if ((libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue >= libGame_gv_announcement_QueueMaxCount_C)) {
                TextExpressionSetToken("Param/Expression/lib_Game_DAC2346E", "A", IntToText(lv_itPlayer));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_DAC2346E"), true);
                continue;
            }

            lv_priorityInt = (lp_priority);
            lv_desiredPosition = 0;
            if ((libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue == 0)) {
                lv_desiredPosition = 1;
            }
            else {
                auto28829704_ae = libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue;
                lv_itQueuePosition = 1;
                for ( ; ( (auto28829704_ai >= 0 && lv_itQueuePosition <= auto28829704_ae) || (auto28829704_ai < 0 && lv_itQueuePosition >= auto28829704_ae) ) ; lv_itQueuePosition += auto28829704_ai ) {
                    if ((libGame_gv_announcementQueue[lv_itPlayer].lv_priority[lv_itQueuePosition] > lv_priorityInt)) {
                        lv_desiredPosition = lv_itQueuePosition;
                        break;
                    }

                }
                if ((lv_desiredPosition == 0)) {
                    lv_desiredPosition = (libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue + 1);
                }

            }
            libGame_gf_AnnouncementInsertItemIntoQueueForPlayer(lv_itPlayer, lp_priority, lp_vOEvent, lp_animName, lp_textParam1, lp_textParam2, lp_textParam3, lp_textParam4, lp_icon, lp_duration, lv_desiredPosition, lp_isKillAnnouncement);
            if ((TimerGetRemaining(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer) <= 0.0)) {
                libGame_gf_AnnouncementPlayNextItemForPlayer(lv_itPlayer);
            }
            else {
                if ((lp_isKillAnnouncement == true) && (TimerGetRemaining(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer) > libGame_gv_announcement_KillAnnouncementTimerTreshold_C)) {
                    TimerStart(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer, libGame_gv_announcement_KillAnnouncementTimerTreshold_C, false, c_timeGame);
                }

            }
        }

    }
}

void libGame_gf_AnnouncementClearQueueForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue = 0;
}

void libGame_gf_AnnouncementInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon, fixed lp_duration, int lp_desiredInsertPosition, bool lp_isKillAnnouncement) {
    // Variable Declarations
    int lv_itQueuePosition;
    int lv_insertPosition;

    // Automatic Variable Declarations
    int autoF18450D7_ae;
    const int autoF18450D7_ai = 1;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lp_player) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Game_8B00E70C", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_8B00E70C"), true);
        return ;
    }

    if ((lp_desiredInsertPosition > libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue)) {
        if (((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue + 1) >= 0)) {
            libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue += 1;
            lv_insertPosition = libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue;
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_E3E59036", "A", IntToText(lp_player));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_E3E59036"), true);
            return ;
        }
    }
    else {
        autoF18450D7_ae = lp_desiredInsertPosition;
        lv_itQueuePosition = libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue;
        for ( ; ( (autoF18450D7_ai >= 0 && lv_itQueuePosition <= autoF18450D7_ae) || (autoF18450D7_ai < 0 && lv_itQueuePosition >= autoF18450D7_ae) ) ; lv_itQueuePosition += autoF18450D7_ai ) {
            libGame_gv_announcementQueue[lp_player].lv_priority[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_priority[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_animName[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_animName[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam1[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam2[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam3[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam4[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_icon[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_icon[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_duration[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_duration[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[lv_itQueuePosition];
        }
        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = lp_desiredInsertPosition;
    }
    libGame_gv_announcementQueue[lp_player].lv_priority[lv_insertPosition] = lp_priority;
    libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_insertPosition] = lp_vOEvent;
    libGame_gv_announcementQueue[lp_player].lv_animName[lv_insertPosition] = lp_animName;
    libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_insertPosition] = lp_textParam1;
    libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_insertPosition] = lp_textParam2;
    libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_insertPosition] = lp_textParam3;
    libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_insertPosition] = lp_textParam4;
    libGame_gv_announcementQueue[lp_player].lv_icon[lv_insertPosition] = lp_icon;
    libGame_gv_announcementQueue[lp_player].lv_duration[lv_insertPosition] = lp_duration;
    libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[lv_insertPosition] = lp_isKillAnnouncement;
}

void libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer (int lp_player, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon) {
    // Automatic Variable Declarations
    string autoAB21A62E_val;

    // Implementation
    autoAB21A62E_val = lp_animName;
    if (autoAB21A62E_val == "ShowStandardNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_coreNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_coreNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowEnemyNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTutorialNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier0") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_singleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_singleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier1") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier2") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier3") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowTimedNotification_Tier4") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAB21A62E_val == "ShowQuestNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_megaKillNotificationTitle2, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel2, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_notificationDisplay.lv_megaKillNotificationSubLabel3, lp_icon, PlayerGroupAll());
    }
    else {
    }
}

void libGame_gf_AnnouncementPlayNextItemForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itAnnouncement;
    fixed lv_duration;
    string lv_animName;

    // Automatic Variable Declarations
    int autoCBDD5345_ae;
    const int autoCBDD5345_ai = 1;

    // Variable Initialization
    lv_animName = "";

    // Implementation
    if ((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue > 0)) {
        lv_duration = libGame_gv_announcementQueue[lp_player].lv_duration[1];
        if ((libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[1] == true)) {
            libSond_gf_HeroVOStartHeroTakedownVOTimerForPlayer(lp_player, (lv_duration + libGame_gv_announcement_HeroTakedownVODelay_C));
        }

        lv_animName = libGame_gv_announcementQueue[lp_player].lv_animName[1];
        if ((lv_animName != "")) {
            libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer(lp_player, lv_animName, libGame_gv_announcementQueue[lp_player].lv_textParam1[1], libGame_gv_announcementQueue[lp_player].lv_textParam2[1], libGame_gv_announcementQueue[lp_player].lv_textParam3[1], libGame_gv_announcementQueue[lp_player].lv_textParam4[1], libGame_gv_announcementQueue[lp_player].lv_icon[1]);
            DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lv_animName);
        }

        if ((libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] != libCore_ge_AnnouncerVOEvents_Null)) {
            if ((libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] == libCore_ge_AnnouncerVOEvents_Victory)) {
            }

            libSond_gf_SoundAnnouncerVOPlayAnnouncerVOForPlayer(libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1], lp_player);
        }

        if ((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue > 1)) {
            autoCBDD5345_ae = (libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue - 1);
            lv_itAnnouncement = 1;
            for ( ; ( (autoCBDD5345_ai >= 0 && lv_itAnnouncement <= autoCBDD5345_ae) || (autoCBDD5345_ai < 0 && lv_itAnnouncement >= autoCBDD5345_ae) ) ; lv_itAnnouncement += autoCBDD5345_ai ) {
                libGame_gv_announcementQueue[lp_player].lv_priority[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_priority[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_animName[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_animName[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam1[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam2[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam3[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam4[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_icon[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_icon[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_duration[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_duration[(lv_itAnnouncement + 1)];
            }
        }

        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue -= 1;
        TimerStart(libGame_gv_announcementQueue[lp_player].lv_messageTimer, lv_duration, false, c_timeGame);
    }

}

void libGame_gf_BankInitializePlayerBankForPlayer (int lp_player) {
    // Variable Declarations
    bank lv_playerBank;
    string lv_buildString;
    int lv_itHero;
    int lv_itBuild;
    string lv_bankSection;
    string lv_bankKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buildString = "";
    lv_bankSection = "";
    lv_bankKey = "";

    // Implementation
    BankLoad("PlayerSettings", lp_player);
    libGame_gv_players[lp_player].lv_bankData.lv_bank = BankLastCreated();
    lv_playerBank = BankLastCreated();
    lv_bankSection = "LastGameData";
    lv_bankKey = "Date";
    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == true)) {
        libGame_gv_players[lp_player].lv_bankData.lv_lastGameDate = BankValueGetAsString(lv_playerBank, lv_bankSection, lv_bankKey);
    }
    else {
        libGame_gv_players[lp_player].lv_bankData.lv_lastGameDate = libGame_gv_gameData.lv_gameDate;
    }
    BankValueSetFromString(lv_playerBank, lv_bankSection, lv_bankKey, libGame_gv_gameData.lv_gameDate);
    lv_bankKey = "Version";
    if ((BankKeyExists(lv_playerBank, lv_bankSection, lv_bankKey) == true)) {
        libGame_gv_players[lp_player].lv_bankData.lv_lastGameVersion = BankValueGetAsInt(lv_playerBank, lv_bankSection, lv_bankKey);
    }
    else {
        libGame_gv_players[lp_player].lv_bankData.lv_lastGameVersion = libGame_gv_gameData.lv_gameVersion;
    }
    BankValueSetFromInt(lv_playerBank, lv_bankSection, lv_bankKey, libGame_gv_gameData.lv_gameVersion);

    BankSave(lv_playerBank);
}

void libGame_gf_BankInitializeHeroBankForPlayer (int lp_player, int lp_heroIndex) {
    // Variable Declarations
    bank lv_heroBank;
    string lv_heroAttributeID;
    string lv_contentString;
    int lv_itTalentTier;
    int lv_itBuild;
    bool lv_needsReload;
    int lv_itLoadout;
    int lv_selectedLoadoutSkin;
    int lv_selectedLoadoutMount;
    string lv_bankKey;
    string lv_bankSection;

    // Automatic Variable Declarations
    const int autoDBFC736B_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoDBFC736B_ai = 1;
    const int autoB8D08634_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoB8D08634_ai = 1;
    const int auto848BD9C0_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int auto848BD9C0_ai = 1;
    const int autoEA54268D_ae = libGame_gv_loadoutMaximumLoadoutsPerHero;
    const int autoEA54268D_ai = 1;

    // Variable Initialization
    lv_heroAttributeID = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroAttributeID;
    lv_contentString = "";
    lv_bankKey = "";
    lv_bankSection = "";

    // Implementation
    BankLoad(("Hero" + libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroID), lp_player);
    libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank = BankLastCreated();
    lv_heroBank = BankLastCreated();
    lv_contentString = "";
    lv_bankSection = "TalentBuilds";
    lv_bankKey = "Builds";
    if ((BankKeyExists(lv_heroBank, lv_bankSection, lv_bankKey) == false)) {
        lv_itBuild = 1;
        for ( ; ( (auto848BD9C0_ai >= 0 && lv_itBuild <= auto848BD9C0_ae) || (auto848BD9C0_ai < 0 && lv_itBuild >= auto848BD9C0_ae) ) ; lv_itBuild += auto848BD9C0_ai ) {
            lv_contentString = (lv_contentString + ("[" + lv_heroAttributeID + ",T" + IntToString(lv_itBuild) + "0000000]") + " ");
        }
        libGame_gf_TalentsPrepickedLoadBuildsForPlayer(lp_player, lp_heroIndex, lv_contentString);
        BankValueSetFromString(lv_heroBank, lv_bankSection, lv_bankKey, lv_contentString);
    }
    else {
        lv_contentString = BankValueGetAsString(lv_heroBank, lv_bankSection, lv_bankKey);
        libGame_gf_TalentsPrepickedLoadBuildsForPlayer(lp_player, lp_heroIndex, lv_contentString);
        lv_itBuild = 1;
        for ( ; ( (autoDBFC736B_ai >= 0 && lv_itBuild <= autoDBFC736B_ae) || (autoDBFC736B_ai < 0 && lv_itBuild >= autoDBFC736B_ae) ) ; lv_itBuild += autoDBFC736B_ai ) {
            lv_itTalentTier = 1;
            for ( ; ( (autoB8D08634_ai >= 0 && lv_itTalentTier <= autoB8D08634_ae) || (autoB8D08634_ai < 0 && lv_itTalentTier >= autoB8D08634_ae) ) ; lv_itTalentTier += autoB8D08634_ai ) {
                if ((libGame_gv_players[lp_player].lv_bankData.lv_lastGameVersion < libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_resetFavoriteTalentTierAtPatch[lv_itTalentTier])) {
                    libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedTalentColumn[lv_itBuild][lv_itTalentTier] = 0;
                    lv_needsReload = true;
                }

            }
        }
        if ((lv_needsReload == true)) {
            libGame_gf_TalentsPrepickedStoreBuildStringOfHeroForPlayer(lp_heroIndex, lp_player);
        }

    }

    lv_itLoadout = 1;
    for ( ; ( (autoEA54268D_ai >= 0 && lv_itLoadout <= autoEA54268D_ae) || (autoEA54268D_ai < 0 && lv_itLoadout >= autoEA54268D_ae) ) ; lv_itLoadout += autoEA54268D_ai ) {
        libGame_gf_LoadoutNameLoadNameForPlayer(lp_heroIndex, lp_player, lv_itLoadout);
        libGame_gf_LoadoutSkinsLoadSkinOfHeroForPlayer(lp_heroIndex, lp_player, lv_itLoadout, true);
        libGame_gf_LoadoutMountsLoadMountOfHeroForPlayer(lp_heroIndex, lp_player, lv_itLoadout, true);
        libGame_gf_LoadoutVariationLoadVariationOfHeroForPlayer(lp_heroIndex, lp_player, true);
    }

    BankSave(lv_heroBank);
}

bool libGame_gf_BehaviorCategoriesBehaviorExist (int lp_category, string lp_behaviorLink) {
    // Variable Declarations
    int lv_itBehavior;

    // Automatic Variable Declarations
    const int auto3174DD86_ae = libGame_gv_behaviorCategoriesMaximumBehaviorsPerCategory;
    const int auto3174DD86_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itBehavior = 1;
    for ( ; ( (auto3174DD86_ai >= 0 && lv_itBehavior <= auto3174DD86_ae) || (auto3174DD86_ai < 0 && lv_itBehavior >= auto3174DD86_ae) ) ; lv_itBehavior += auto3174DD86_ai ) {
        if ((libGame_gv_behaviorCategories[(lp_category)].lv_categoryBehaviors[lv_itBehavior] == lp_behaviorLink)) {
            return true;
        }
    }
    return false;
}

void libGame_gf_BehaviorCategoriesIncludeBehaviorInList (int lp_category, string lp_behavior) {
    // Variable Declarations
    int lv_category;
    int lv_behaviorIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_category = (lp_category);

    // Implementation
    if ((libGame_gv_behaviorCategories[lv_category].lv_currentBehaviorCount < libGame_gv_behaviorCategoriesMaximumBehaviorsPerCategory)) {
        libGame_gv_behaviorCategories[lv_category].lv_currentBehaviorCount += 1;
        lv_behaviorIndex = libGame_gv_behaviorCategories[lv_category].lv_currentBehaviorCount;
        libGame_gv_behaviorCategories[lv_category].lv_categoryBehaviors[lv_behaviorIndex] = lp_behavior;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_E890B411", "A", StringToText(libGame_ge_BehaviorCategories_Ident(lp_category)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_E890B411"), true);
    }
}

void libGame_gf_BehaviorCategoriesRemoveCategoryBehaviorsFromUnit (int lp_category, unit lp_unit) {
    // Variable Declarations
    int lv_itBehavior;

    // Automatic Variable Declarations
    int autoCD0523C8_ae;
    const int autoCD0523C8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_behaviorCategories[lp_category].lv_currentBehaviorCount > 0)) {
        autoCD0523C8_ae = libGame_gv_behaviorCategories[lv_itBehavior].lv_currentBehaviorCount;
        lv_itBehavior = 1;
        for ( ; ( (autoCD0523C8_ai >= 0 && lv_itBehavior <= autoCD0523C8_ae) || (autoCD0523C8_ai < 0 && lv_itBehavior >= autoCD0523C8_ae) ) ; lv_itBehavior += autoCD0523C8_ai ) {
            UnitBehaviorRemove(lp_unit, libGame_gv_behaviorCategories[lp_category].lv_categoryBehaviors[lv_itBehavior], 0);
        }
    }
}

void libGame_gf_BehaviorCategoriesSetBehaviorCategoryController (int lp_category, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_behaviorCategories[lp_category].lv_categoryController = lp_behavior;
    libGame_gv_behaviorCategoriesCurrentCategoryAmount += 1;
    if ((libGame_gv_behaviorCategoriesCurrentCategoryAmount > libGame_gv_behaviorCategoriesMaximumCategoryCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_Game_B89F4D7B", "A", IntToText(libGame_gv_behaviorCategoriesCurrentCategoryAmount));
        TextExpressionSetToken("Param/Expression/lib_Game_B89F4D7B", "B", IntToText(libGame_gv_behaviorCategoriesMaximumCategoryCount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_B89F4D7B"), true);
    }

}

int libGame_gf_BehaviorCategoriesCoreCategoryPresetOfBehavior (string lp_behavior) {
    // Variable Declarations
    int lv_itCategory;
    int lv_itBehaviorInList;

    // Automatic Variable Declarations
    int autoC737F71E_ae;
    const int autoC737F71E_ai = 1;
    int autoC47DEB82_ae;
    const int autoC47DEB82_ai = 1;

    // Variable Initialization

    // Implementation
    autoC737F71E_ae = libGame_gv_behaviorCategoriesCurrentCategoryAmount;
    lv_itCategory = 1;
    for ( ; ( (autoC737F71E_ai >= 0 && lv_itCategory <= autoC737F71E_ae) || (autoC737F71E_ai < 0 && lv_itCategory >= autoC737F71E_ae) ) ; lv_itCategory += autoC737F71E_ai ) {
        if ((libGame_gv_behaviorCategories[lv_itCategory].lv_categoryController == lp_behavior)) {
            return libGame_gf_BehaviorCategoriesCategoryPresetFromInteger(lv_itCategory);
        }
        autoC47DEB82_ae = libGame_gv_behaviorCategories[lv_itCategory].lv_currentBehaviorCount;
        lv_itBehaviorInList = 1;
        for ( ; ( (autoC47DEB82_ai >= 0 && lv_itBehaviorInList <= autoC47DEB82_ae) || (autoC47DEB82_ai < 0 && lv_itBehaviorInList >= autoC47DEB82_ae) ) ; lv_itBehaviorInList += autoC47DEB82_ai ) {
            if ((libGame_gv_behaviorCategories[lv_itCategory].lv_categoryBehaviors[lv_itBehaviorInList] == lp_behavior)) {
                return libGame_gf_BehaviorCategoriesCategoryPresetFromInteger(lv_itCategory);
            }
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_4FD0042E"), true);
    return libGame_ge_BehaviorCategories_None;
}

int libGame_gf_BehaviorCategoriesCoreCategoryIntegerOfBehavior (string lp_behavior) {
    // Variable Declarations
    int lv_itCategory;
    int lv_itBehaviorIndex;

    // Automatic Variable Declarations
    int auto81E0C248_ae;
    const int auto81E0C248_ai = 1;
    int auto44DEF68E_ae;
    const int auto44DEF68E_ai = 1;

    // Variable Initialization

    // Implementation
    auto81E0C248_ae = libGame_gv_behaviorCategoriesCurrentCategoryAmount;
    lv_itCategory = 1;
    for ( ; ( (auto81E0C248_ai >= 0 && lv_itCategory <= auto81E0C248_ae) || (auto81E0C248_ai < 0 && lv_itCategory >= auto81E0C248_ae) ) ; lv_itCategory += auto81E0C248_ai ) {
        if ((libGame_gv_behaviorCategories[lv_itCategory].lv_categoryController == lp_behavior)) {
            return lv_itCategory;
        }
        auto44DEF68E_ae = libGame_gv_behaviorCategories[lv_itCategory].lv_currentBehaviorCount;
        lv_itBehaviorIndex = 1;
        for ( ; ( (auto44DEF68E_ai >= 0 && lv_itBehaviorIndex <= auto44DEF68E_ae) || (auto44DEF68E_ai < 0 && lv_itBehaviorIndex >= auto44DEF68E_ae) ) ; lv_itBehaviorIndex += auto44DEF68E_ai ) {
            if ((libGame_gv_behaviorCategories[lv_itCategory].lv_categoryBehaviors[lv_itBehaviorIndex] == lp_behavior)) {
                return lv_itCategory;
            }
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_CD2342E7"), true);
    return -1;
}

int libGame_gf_BehaviorCategoriesCategoryPresetFromInteger (int lp_categoryNumber) {
    // Automatic Variable Declarations
    // Implementation
    return lp_categoryNumber;
}

bool libGame_gf_BehaviorCategoriesUnitHasCategoryBehavior (unit lp_unit, int lp_category) {
    // Variable Declarations
    string lv_itUnitBehavior;
    int lv_itCategoryBehaviorIndex;

    // Automatic Variable Declarations
    unit auto5741B435_u;
    int auto5741B435_i;
    int auto7C2E6E63_ae;
    const int auto7C2E6E63_ai = 1;

    // Variable Initialization

    // Implementation
    auto5741B435_u = lp_unit;
    auto5741B435_i = 1;
    for ( ; auto5741B435_i <= UnitBehaviorCountAll(auto5741B435_u) ; auto5741B435_i += BoolToInt(lv_itUnitBehavior == UnitBehaviorGet(auto5741B435_u, auto5741B435_i)) ) {
        lv_itUnitBehavior = UnitBehaviorGet(auto5741B435_u, auto5741B435_i);
        if ((UnitBehaviorHasFlag(lv_itUnitBehavior, c_unitBehaviorFlagTimedLife) == true)) {
            auto7C2E6E63_ae = libGame_gv_behaviorCategories[lp_category].lv_currentBehaviorCount;
            lv_itCategoryBehaviorIndex = 1;
            for ( ; ( (auto7C2E6E63_ai >= 0 && lv_itCategoryBehaviorIndex <= auto7C2E6E63_ae) || (auto7C2E6E63_ai < 0 && lv_itCategoryBehaviorIndex >= auto7C2E6E63_ae) ) ; lv_itCategoryBehaviorIndex += auto7C2E6E63_ai ) {
                if ((lv_itUnitBehavior == libGame_gv_behaviorCategories[lp_category].lv_categoryBehaviors[lv_itCategoryBehaviorIndex])) {
                    return true;
                }

            }
        }

    }
    return false;
}

bool libGame_gf_BehaviorCategoriesUnitHasBehaviorFromCategory (unit lp_unit, int lp_category) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitHasBehavior2(lp_unit, libGame_gv_behaviorCategories[lp_category].lv_categoryController) == true);
}

void libGame_gf_CapturePointChangeOwnership (int lp_capturePointIndex, int lp_newAIOwner, int lp_newPlayerOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent) {
    // Variable Declarations
    int lv_currentOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentOwner = UnitGetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit);
    if ((lp_newAIOwner == lv_currentOwner)) {
        return ;
    }

    if ((UnitGetType(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
        if (((lp_newAIOwner == libCore_gv_cOMPUTER_TeamOrder) || (lp_newAIOwner == libCore_gv_cOMPUTER_TeamChaos))) {
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, "AnimPlay Spell Spell");
        }

    }

    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, lp_newAIOwner, true);
    libGame_gf_SendEventCapturePointChangesOwner(lp_capturePointIndex, lp_newAIOwner, lp_newPlayerOwner, lp_capturingPlayers, lp_hasMercLordTalent);
}

void libGame_gf_CapturePointCreate (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, bool lp_decayToOwner, bool lp_rememberLastOwner) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_capturePointCurrentCount == libGame_gv_capturePointMaxCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_ECE525DC"), true);
        return ;
    }

    libGame_gv_capturePointCurrentCount += 1;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_enabled = false;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureBeaconUnit = lp_beaconUnit;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureRegion = RegionCircle(UnitGetPosition(lp_beaconUnit), lp_captureRadius);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureCounter = 0;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_pointsNeededToCapture = FixedToInt((lp_captureTime * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints = FixedToInt(((lp_captureTime + lp_overCaptureTime) * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_decayToOwner = lp_decayToOwner;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_rememberLastOwner = lp_rememberLastOwner;
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "CaptureProgressBar", lp_beaconUnit);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), (libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints * 2.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DimmingFrame", lp_beaconUnit);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBarDimmingFrame = DialogControlLastCreated();
    UnitStatusBarOverride(lp_beaconUnit, c_unitStatusGroupAll);
    libGame_gf_CapturePointEnable(libGame_gv_capturePointCurrentCount);
    if ((TriggerIsEnabled(libGame_gt_CapturePointLogic) == false)) {
        TriggerEnable(libGame_gt_CapturePointLogic, true);
    }

    DataTableSetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C, libGame_gv_capturePointCurrentCount);
}

void libGame_gf_CapturePointEnable (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == true))) {
        return ;
    }

    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = true;
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Neutral, true);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Show");
    libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter = 0;
}

trigger auto_libGame_gf_CapturePointDisable_Trigger = null;
int auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

void libGame_gf_CapturePointDisable (int lp_capturePointIndex) {
    auto_libGame_gf_CapturePointDisable_lp_capturePointIndex = lp_capturePointIndex;

    if (auto_libGame_gf_CapturePointDisable_Trigger == null) {
        auto_libGame_gf_CapturePointDisable_Trigger = TriggerCreate("auto_libGame_gf_CapturePointDisable_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CapturePointDisable_Trigger, false, false);
}

bool auto_libGame_gf_CapturePointDisable_TriggerFunc (bool testConds, bool runActions) {
    int lp_capturePointIndex = auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == false))) {
        return true;
    }

    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = false;
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Hide");
    Wait(1.0, c_timeGame);
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Neutral, true);
    return true;
}

int libGame_gf_LastCreatedCapturePoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C);
}

bool libGame_gf_CapturePointFullyCaptured (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return false;
    }

    if (((libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == (libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints * -1)))) {
        return true;
    }
    else {
        return false;
    }
}

bool libGame_gf_DeathRecapCheckforCombineEvent (int lp_deadPlayer, int lp_currentEffectBarIndex, fixed lp_currentEffectInstanceTime, int lp_effectingPlayer, string lp_effectingUnitType, string lp_effectingSourceButton, bool lp_nPCSource, bool lp_structureSource) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_currentEffectInstanceTime - libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_time) < libGame_gv_deathRecap_MaxEffectCombineTimeElapsed_C) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_combinedNumOfEvents < libGame_gv_deathRecap_MaxEffectCombinePerSlot_C)) {
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer == lp_effectingPlayer) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_button == lp_effectingSourceButton) && (((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer) == false) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_nPCSource == lp_nPCSource) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_structureSource == lp_structureSource)) || ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer) == true) && (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_unitType == lp_effectingUnitType)))) {
            return true;
        }
    }
    return false;
}

void libGame_gf_DeathRecapAddSpecialDamageAbility (string lp_abilityLink) {
    // Variable Declarations
    int lv_itSpecialDamageAbility;

    // Automatic Variable Declarations
    int autoC6B4F397_ae;

    // Variable Initialization

    // Implementation
    autoC6B4F397_ae = libGame_gv_deathRecap_SpecialDamageEffectsCount_C;
    lv_itSpecialDamageAbility = 1;
    for ( ; lv_itSpecialDamageAbility <= autoC6B4F397_ae ; lv_itSpecialDamageAbility += 1 ) {
        if ((libGame_gv_deathRecapSpecialDamageAbilities[lv_itSpecialDamageAbility].lv_ability == null)) {
            libGame_gv_deathRecapSpecialDamageAbilities[lv_itSpecialDamageAbility].lv_ability = lp_abilityLink;
            return ;
        }
    }
    TextExpressionSetToken("Param/Expression/lib_Game_2FA00FB2", "A", StringExternal((lp_abilityLink)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_2FA00FB2"), true);
}

void libGame_gf_DeathRecapSortMaxDamageAbils (int lp_deadPlayer, int lp_maxDamagerIndex, int lp_currentMaxDamagerAbilIndex) {
    // Variable Declarations
    int lv_swapIndex;
    string lv_swapAbil;
    int lv_swapAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_currentMaxDamagerAbilIndex <= 1)) {
        return ;
    }
    lv_swapIndex = (lp_currentMaxDamagerAbilIndex-1);
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount < libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount)) {
        lv_swapAbil = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_button;
        lv_swapAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_button = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_button;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_button = lv_swapAbil;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount = lv_swapAmount;
    }
}

void libGame_gf_DeathRecapSortMaxDamagers (int lp_deadPlayer) {
    // Variable Declarations
    int lv_swapIndex;
    int lv_swapHeroIndex;
    int lv_swapAmount;
    int lv_swapPlayer;
    int lv_swapAbilCount;
    string lv_swapAbil;
    int lv_swapAbilAmount;
    int lv_itAbil;
    int lv_itMaxDamagers;
    bool lv_sortingComplete;

    // Automatic Variable Declarations
    int auto3C1B7C61_ae;
    const int autoEE129799_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
    const int autoEE129799_ai = 1;

    // Variable Initialization
    lv_sortingComplete = true;

    // Implementation
    auto3C1B7C61_ae = (libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount-1);
    lv_itMaxDamagers = 1;
    for ( ; lv_itMaxDamagers <= auto3C1B7C61_ae ; lv_itMaxDamagers += 1 ) {
        lv_swapIndex = (lv_itMaxDamagers+1);
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_amount < libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[(lv_itMaxDamagers+1)].lv_amount)) {
            lv_sortingComplete = false;
            lv_swapHeroIndex = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_heroIndex;
            lv_swapAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_amount;
            lv_swapPlayer = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_player;
            lv_swapAbilCount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbilCount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_heroIndex = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_heroIndex;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_amount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_amount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_player = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_player;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbilCount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbilCount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_heroIndex = lv_swapHeroIndex;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_amount = lv_swapAmount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_player = lv_swapPlayer;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbilCount = lv_swapAbilCount;
            lv_itAbil = 1;
            for ( ; ( (autoEE129799_ai >= 0 && lv_itAbil <= autoEE129799_ae) || (autoEE129799_ai < 0 && lv_itAbil >= autoEE129799_ae) ) ; lv_itAbil += autoEE129799_ai ) {
                lv_swapAbil = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_button;
                lv_swapAbilAmount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_amount;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_button = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_button;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_amount = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_amount;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_button = lv_swapAbil;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_amount = lv_swapAbilAmount;
            }
        }
    }
    if ((lv_sortingComplete == false)) {
        libGame_gf_DeathRecapSortMaxDamagers(lp_deadPlayer);
    }
    else {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount = MinI(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount, libGame_gv_deathRecap_MaxMaxDamagers_C);
    }
}

void libGame_gf_DeathRecapAddMaxDamageAbilForPlayer (int lp_deadPlayer, int lp_maxDamagerIndex, string lp_effectingAbilityButton, int lp_effectAmount) {
    // Variable Declarations
    int lv_effectingPlayer;
    int lv_itMaxDamagerAbilIndex;

    // Automatic Variable Declarations
    const int auto58B50B68_ae = libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C;
    const int auto58B50B68_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itMaxDamagerAbilIndex = 1;
    for ( ; ( (auto58B50B68_ai >= 0 && lv_itMaxDamagerAbilIndex <= auto58B50B68_ae) || (auto58B50B68_ai < 0 && lv_itMaxDamagerAbilIndex >= auto58B50B68_ae) ) ; lv_itMaxDamagerAbilIndex += auto58B50B68_ai ) {
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_button != null)) {
            if ((lp_effectingAbilityButton == libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_button)) {
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_amount += lp_effectAmount;
                break;
            }
        }
        else {
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_button = lp_effectingAbilityButton;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilIndex].lv_amount += lp_effectAmount;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount += 1;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount = MinI(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount, libGame_gv_deathRecap_MaxMaxDamageAbils_C);
            break;
        }
    }
    libGame_gf_DeathRecapSortMaxDamageAbils(lp_deadPlayer, lp_maxDamagerIndex, lv_itMaxDamagerAbilIndex);
}

void libGame_gf_DeathRecapAddEffectInstanceForPlayer (int lp_deadPlayer, string lp_effect, int lp_effectingPlayer, string lp_effectingAbility, string lp_effectingUnitType, int lp_effectAmount, int lp_effectAmountAttempted, int lp_effectAmountAbsorbed, bool lp_isHeal, fixed lp_effectTime, string lp_debugString, string lp_sourceButton) {
    // Variable Declarations
    int lv_effectingPlayer;
    int lv_effectHeroIndex;
    int lv_effectEventTimeIndex;
    bool lv_nPCPlayer;
    bool lv_structureSource;
    int lv_itEffect;
    int lv_itMaxDamagerIndex;

    // Automatic Variable Declarations
    int autoFD3C08DC_ae;
    const int autoFD3C08DC_ai = 1;
    const int auto19CBBE60_ae = libGame_gv_deathRecap_MaxMaxDamagersSort_C;
    const int auto19CBBE60_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectEventCount <= 0) && (lp_isHeal == true)) {
        return ;
    }
    lv_effectingPlayer = lp_effectingPlayer;
    if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lv_effectingPlayer) == true)) {
        lv_effectHeroIndex = libGame_gv_players[lv_effectingPlayer].lv_heroIndex;
    }
    else {
        lv_nPCPlayer = true;
        lv_structureSource = UnitTypeTestAttribute(lp_effectingUnitType, c_unitAttributeStructure);
    }
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectEventCount += 1;
    if ((libGame_gf_DeathRecapCheckforCombineEvent(lp_deadPlayer, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount, lp_effectTime, lv_effectingPlayer, lp_effectingUnitType, lp_sourceButton, lv_nPCPlayer, lv_structureSource) == true)) {
        lv_effectEventTimeIndex = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amount += lp_effectAmount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAttempted += lp_effectAmountAttempted;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAbsorbed += lp_effectAmountAbsorbed;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth = 0;
    }
    else {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount += 1;
        lv_effectEventTimeIndex = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_effect = lp_effect;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_effectPlayer = lv_effectingPlayer;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_heroIndex = lv_effectHeroIndex;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_isHeal = lp_isHeal;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_nPCSource = lv_nPCPlayer;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_structureSource = lv_structureSource;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amount = lp_effectAmount;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAttempted = lp_effectAmountAttempted;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAbsorbed = lp_effectAmountAbsorbed;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountOverkill = (lp_effectAmountAttempted - (lp_effectAmount + lp_effectAmountAbsorbed));
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_abilityLink = lp_effectingAbility;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_button = lp_sourceButton;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_unitType = lp_effectingUnitType;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_time = lp_effectTime;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_debugString = lp_debugString;
    }
    autoFD3C08DC_ae = (lv_effectEventTimeIndex-1);
    lv_itEffect = 1;
    for ( ; ( (autoFD3C08DC_ai >= 0 && lv_itEffect <= autoFD3C08DC_ae) || (autoFD3C08DC_ai < 0 && lv_itEffect >= autoFD3C08DC_ae) ) ; lv_itEffect += autoFD3C08DC_ai ) {
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth -= libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }
        else {
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth += libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }
    }
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_combinedNumOfEvents += 1;
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_isHeal == true)) {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroStartHealth -= lp_effectAmount;
    }
    else {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroStartHealth += lp_effectAmount;
    }
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth = MaxI(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroStartHealth, libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
    if ((lp_isHeal == false)) {
        lv_itMaxDamagerIndex = 1;
        for ( ; ( (auto19CBBE60_ai >= 0 && lv_itMaxDamagerIndex <= auto19CBBE60_ae) || (auto19CBBE60_ai < 0 && lv_itMaxDamagerIndex >= auto19CBBE60_ae) ) ; lv_itMaxDamagerIndex += auto19CBBE60_ai ) {
            if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_player != 0)) {
                if ((lv_effectHeroIndex == libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_heroIndex)) {
                    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_amount += lp_effectAmount;
                    break;
                }

            }
            else {
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_player = libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_effectPlayer;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_heroIndex = lv_effectHeroIndex;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamagerIndex].lv_amount += lp_effectAmount;
                libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount += 1;
                break;
            }
        }
        libGame_gf_DeathRecapAddMaxDamageAbilForPlayer(lp_deadPlayer, lv_itMaxDamagerIndex, lp_sourceButton, lp_effectAmount);
    }
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "A", IntToText(lv_effectHeroIndex));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "B", libNtve_gf_ConvertBooleanToText(lv_nPCPlayer));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "C", libNtve_gf_ConvertBooleanToText(lp_isHeal));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "D", IntToText(lp_effectAmount));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "E", StringToText((lp_sourceButton)));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "F", StringToText((lp_effectingUnitType)));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "G", IntToText(lv_effectEventTimeIndex));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "H", IntToText(libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "J", IntToText(lp_effectAmountAbsorbed));
    TextExpressionSetToken("Param/Expression/lib_Game_9E2C10D0", "I", FixedToText(lp_effectTime, c_fixedPrecisionAny));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_9E2C10D0"), false);
}

void libGame_gf_DeathRecapClearDeathRecapForPlayer (int lp_deadPlayer) {
    // Variable Declarations
    int lv_itTimeIndex;
    int lv_itMaxDamager;
    int lv_itMaxDamagerAbil;

    // Automatic Variable Declarations
    const int auto11C61CEE_ae = libGame_gv_deathRecap_MaxEffectsBars_C;
    const int auto11C61CEE_ai = 1;
    const int autoEE652FEF_ae = libGame_gv_deathRecap_MaxMaxDamagersSort_C;
    const int autoEE652FEF_ai = 1;
    const int autoAC36BCFA_ae = libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C;
    const int autoAC36BCFA_ai = 1;

    // Variable Initialization

    // Implementation
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroHighestHealth = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroStartHealth = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroMaxHealth = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectEventCount = 0;
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagersCount = 0;
    lv_itTimeIndex = 1;
    for ( ; ( (auto11C61CEE_ai >= 0 && lv_itTimeIndex <= auto11C61CEE_ae) || (auto11C61CEE_ai < 0 && lv_itTimeIndex >= auto11C61CEE_ae) ) ; lv_itTimeIndex += auto11C61CEE_ai ) {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_effect = null;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_effectPlayer = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_heroIndex = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_isHeal = false;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_nPCSource = false;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amount = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountAttempted = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountAbsorbed = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountOverkill = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_postEffectHealth = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_combinedNumOfEvents = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_combinedTimeDelta = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_abilityLink = null;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_button = null;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_unitType = null;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_time = 0.0;
    }
    lv_itMaxDamager = 1;
    for ( ; ( (autoEE652FEF_ai >= 0 && lv_itMaxDamager <= autoEE652FEF_ae) || (autoEE652FEF_ai < 0 && lv_itMaxDamager >= autoEE652FEF_ae) ) ; lv_itMaxDamager += autoEE652FEF_ai ) {
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_player = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_heroIndex = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_amount = 0;
        libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_maxDamageAbilCount = 0;
        lv_itMaxDamagerAbil = 1;
        for ( ; ( (autoAC36BCFA_ai >= 0 && lv_itMaxDamagerAbil <= autoAC36BCFA_ae) || (autoAC36BCFA_ai < 0 && lv_itMaxDamagerAbil >= autoAC36BCFA_ae) ) ; lv_itMaxDamagerAbil += autoAC36BCFA_ai ) {
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbil].lv_button = null;
            libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_highestDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbil].lv_amount = 0;
        }
    }
}

trigger auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_Trigger = null;
unit auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_playerHero;
int auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_deadPlayer;

void libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer (unit lp_playerHero, int lp_deadPlayer) {
    auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_playerHero = lp_playerHero;
    auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_deadPlayer = lp_deadPlayer;

    if (auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_Trigger == null) {
        auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_Trigger = TriggerCreate("auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_Trigger, false, false);
}

bool auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_playerHero = auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_playerHero;
    int lp_deadPlayer = auto_libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer_lp_deadPlayer;

    // Variable Declarations
    unit lv_deadHeroUnit;
    unit lv_effectingUnit;
    string lv_effectingUnitType;
    int lv_effectingPlayer;
    int lv_itEffectHistoryEntry;
    fixed lv_currentTime;
    fixed lv_effectHistoryEntryTime;
    string lv_effectHistoryEntryAbility;
    string lv_effectHistoryEntryArtifactTalent;
    string lv_effectHistoryEntryBehavior;
    int lv_effectType;
    int lv_effectAmount;
    int lv_effectAmountAttempted;
    int lv_effectAmountAbsorbed;
    bool lv_isHeal;
    bool lv_isWeapon;
    fixed lv_effectTime;
    string lv_debugString;
    string lv_unitTypeAsString;
    int lv_effectTypePreset;
    int lv_effectTypePresetAttempted;
    bool lv_effectKill;
    bool lv_killingBlowFound;
    string lv_sourceButton;
    int lv_specialDamageAbilityCount;
    string lv_specialDamageAbilityLink;
    int lv_itSpecialDamageAbilitytEntry;
    bool lv_foundSpecialDamageAbility;
    int lv_historyType;

    // Automatic Variable Declarations
    const int auto65923482_ae = libGame_gv_effectHistoryMaxEffectsInHistory;
    const int auto65923482_ai = 1;

    // Variable Initialization
    lv_debugString = "";
    lv_unitTypeAsString = "";
    lv_specialDamageAbilityCount = libGame_gv_deathRecap_SpecialDamageEffectsCount_C;

    // Implementation
    if ((libSprt_gv_dEBUGDeathRecapEnabled == false)) {
        return true;
    }

    lv_deadHeroUnit = lp_playerHero;
    lv_currentTime = GameGetMissionTime();
    libGame_gf_DeathRecapClearDeathRecapForPlayer(lp_deadPlayer);
    libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroMaxHealth = FixedToInt(Round(UnitGetPropertyFixed(lv_deadHeroUnit, c_unitPropLifeMax, c_unitPropCurrent)));
    while (!((libGame_gf_EffectHistoryCalculatingEffects(lp_deadPlayer) == false))) {
        Wait(0.0625, c_timeGame);
    }
    lv_itEffectHistoryEntry = 1;
    for ( ; ( (auto65923482_ai >= 0 && lv_itEffectHistoryEntry <= auto65923482_ae) || (auto65923482_ai < 0 && lv_itEffectHistoryEntry >= auto65923482_ae) ) ; lv_itEffectHistoryEntry += auto65923482_ai ) {
        lv_effectHistoryEntryTime = libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_time;
        lv_effectTime = (lv_currentTime - lv_effectHistoryEntryTime);
        if ((lv_effectTime > libGame_gv_deathRecap_MaxTimeElapsed_C)) {
            break;
        }
        lv_debugString = "";
        lv_effectingPlayer = libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_originPlayer;
        lv_foundSpecialDamageAbility = false;
        lv_historyType = libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_abilityTalentWeapon;
        lv_effectTypePreset = libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_damagedOrHealed;
        if ((lv_foundSpecialDamageAbility == true)) {
            lv_specialDamageAbilityLink = libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_abilityLink;
            lv_effectAmount = FixedToInt(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_specialDamageAbilityLink, "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", lv_effectingPlayer));
        }
        else {
            if ((libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_damagedOrHealed == libGame_ge_EffectHistoryDamagedOrHealed_Healed)) {
                lv_isHeal = true;
            }
            else {
                lv_isHeal = false;
            }
            if ((lv_killingBlowFound == false)) {
                lv_killingBlowFound = libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_isKill;
            }
            lv_effectAmount = FixedToInt(Round(libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_amount));
            lv_effectAmountAttempted = FixedToInt(Round(libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_amountAttempted));
            lv_effectAmountAbsorbed = FixedToInt(Round(libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_amountAbsorbed));
        }
        if ((lv_effectAmount <= 0)) {
            if ((lv_killingBlowFound == false) && (lv_effectAmountAttempted > lv_effectAmountAbsorbed) && (lv_itEffectHistoryEntry == 1)) {
                lv_effectAmount = MaxI(FixedToInt(Floor(UnitGetPropertyFixed(lv_deadHeroUnit, c_unitPropLife, c_unitPropCurrent))), PlayerScoreValueGetAsInt(lp_deadPlayer, "DeadHeroLastKnownHealth"));
                lv_effectKill = true;
                if ((lv_effectAmount == libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_deadHeroMaxHealth)) {
                    lv_effectAmount = 1;
                }
            }
            else {
                continue;
            }
        }
        lv_effectingUnit = libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_casterUnit;
        lv_effectingUnitType = UnitGetType(lv_effectingUnit);
        if (((lv_foundSpecialDamageAbility == true) || (lv_historyType == libGame_ge_EffectHistoryAbilityTalentWeapon_Unknown))) {
            lv_sourceButton = null;
        }
        else if (true) {
            lv_sourceButton = libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_buttonEntry;
        }
        if (((lv_effectingUnitType == null) || (lv_historyType == libGame_ge_EffectHistoryAbilityTalentWeapon_Unknown))) {
            lv_debugString = ("[DEBUG] Unknown Ability/Talent/Weapon of damaging effect: " + CatalogFieldValueGet(c_gameCatalogEffect, libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_effectLink, "Name", c_playerAny));
            lv_effectHistoryEntryAbility = "DebugUnknownAbility";
            lv_sourceButton = "DebugUnknownAbility";
        }
        else {
            lv_unitTypeAsString = (UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit));
            if ((lv_effectingUnitType != UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit)) && (((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == true) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) != lv_unitTypeAsString)) || ((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == false) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) == lv_unitTypeAsString)))) {
                lv_effectHistoryEntryAbility = AbilityCommandGetAbility(TechTreeUnitProducedAbilCmd(lv_effectingUnitType, 0));
                if ((lv_sourceButton == null)) {
                    lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogAbil, lv_effectHistoryEntryAbility, "CmdButtonArray[" + IntToString(0) + "].DefaultButtonFace", c_playerAny));
                }
                lv_effectingUnit = libGame_gv_players[lv_effectingPlayer].lv_heroUnit;
                lv_effectingUnitType = UnitGetType(lv_effectingUnit);
            }
            else {
                if ((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == true) && (lv_effectingUnitType != UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit)) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) == lv_unitTypeAsString)) {
                    lv_effectingUnit = libGame_gv_players[lv_effectingPlayer].lv_heroUnit;
                    lv_effectingUnitType = UnitGetType(lv_effectingUnit);
                }
                if ((lv_historyType == libGame_ge_EffectHistoryAbilityTalentWeapon_Ability)) {
                    if ((lv_sourceButton == null)) {
                        lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogAbil, lv_effectHistoryEntryAbility, "CmdButtonArray[" + IntToString(0) + "].DefaultButtonFace", c_playerAny));
                    }
                }
                else if ((lv_historyType == libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon)) {
                    if ((lv_sourceButton == null)) {
                        lv_sourceButton = "Attack";
                    }
                }
                else if ((lv_historyType == libGame_ge_EffectHistoryAbilityTalentWeapon_Unknown)) {
                    lv_debugString = ("[DEBUG] Unknow Ability/Talent/Weapon of damaging effect: " + CatalogFieldValueGet(c_gameCatalogEffect, libGame_gv_effectHistoryData[lp_deadPlayer][lv_itEffectHistoryEntry].lv_effectLink, "Name", c_playerAny));
                    lv_effectHistoryEntryAbility = "DebugUnknownAbility";
                    lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogAbil, "DebugUnknownAbility", "CmdButtonArray[" + IntToString(0) + "].DefaultButtonFace", c_playerAny));
                }
            }
        }
        if ((lv_effectKill == true) && (lv_killingBlowFound == false)) {
            lv_killingBlowFound = true;
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_EDCF9306"), false);
            TextExpressionSetToken("Param/Expression/lib_Game_AD290507", "A", FixedToText(lv_effectHistoryEntryTime, c_fixedPrecisionAny));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_AD290507"), false);
        }

        TriggerDebugOutput(1, StringToText(("Shields: " + IntToString(lv_effectAmountAbsorbed))), false);
        libGame_gf_DeathRecapAddEffectInstanceForPlayer(lp_deadPlayer, null, lv_effectingPlayer, lv_effectHistoryEntryAbility, lv_effectingUnitType, lv_effectAmount, lv_effectAmountAttempted, lv_effectAmountAbsorbed, lv_isHeal, lv_effectTime, lv_debugString, lv_sourceButton);
        if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectBarCount >= libGame_gv_deathRecap_MaxEffectsBars_C)) {
            break;
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_F5725B13"), false);
    libGame_gf_DeathRecapSortMaxDamagers(lp_deadPlayer);
    if ((libGame_gv_deathRecapDeathData[lp_deadPlayer].lv_effectEventCount >= 1)) {
        libUIUI_gf_DeathRecapPopulateHighestDamagersForPlayer(lp_deadPlayer);
        libUIUI_gf_DeathRecapPopulateEffectInstancesForAbilitiesPanel(lp_deadPlayer);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_81DCE6DE"), true);
    }
    return true;
}

bool libGame_gf_EffectHistoryCalculatingEffects (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libGame_gv_effectHistoryCalculatingEffectsCount[lp_player] > 0);
}

bool libGame_gf_EffectHistoryEffectExist (string lp_effect) {
    // Variable Declarations
    int lv_itEffect;

    // Automatic Variable Declarations
    int auto23EB6FE4_ae;
    const int auto23EB6FE4_ai = 1;

    // Variable Initialization

    // Implementation
    auto23EB6FE4_ae = libGame_gv_effectHistoryExistedEffectCurrentAmount;
    lv_itEffect = 1;
    for ( ; ( (auto23EB6FE4_ai >= 0 && lv_itEffect <= auto23EB6FE4_ae) || (auto23EB6FE4_ai < 0 && lv_itEffect >= auto23EB6FE4_ae) ) ; lv_itEffect += auto23EB6FE4_ai ) {
        if ((libGame_gv_effectHistoryExistedEffect[lv_itEffect].lv_effect == libCore_gf_ConvertStringToAnyGameLink(lp_effect))) {
            return true;
        }

    }
    return false;
}

int libGame_gf_EffectHistoryExistedEffectIndex (string lp_effect) {
    // Variable Declarations
    int lv_itEffect;

    // Automatic Variable Declarations
    int auto47FD25BE_ae;
    const int auto47FD25BE_ai = 1;

    // Variable Initialization

    // Implementation
    auto47FD25BE_ae = libGame_gv_effectHistoryExistedEffectCurrentAmount;
    lv_itEffect = 1;
    for ( ; ( (auto47FD25BE_ai >= 0 && lv_itEffect <= auto47FD25BE_ae) || (auto47FD25BE_ai < 0 && lv_itEffect >= auto47FD25BE_ae) ) ; lv_itEffect += auto47FD25BE_ai ) {
        if ((libGame_gv_effectHistoryExistedEffect[lv_itEffect].lv_effect == libCore_gf_ConvertStringToAnyGameLink(lp_effect))) {
            return lv_itEffect;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_Game_83B3FFB0", "A", StringToText(lp_effect));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_83B3FFB0"), true);
    return -1;
}

void libGame_gf_EffectHistoryAddEffectToExistedEffects (string lp_effectEntry, string lp_buttonEntry, int lp_effectType) {
    // Variable Declarations
    int lv_itEffect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_effectHistoryExistedEffectCurrentAmount += 1;
    if ((libGame_gv_effectHistoryExistedEffectCurrentAmount > libGame_gv_effectHistoryExistedEffectMaxAmount_C)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A3DAE196", "A", IntToText(libGame_gv_effectHistoryExistedEffectMaxAmount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_A3DAE196"), true);
        return ;
    }

    libGame_gv_effectHistoryExistedEffect[libGame_gv_effectHistoryExistedEffectCurrentAmount].lv_buttonEntry = lp_buttonEntry;
    libGame_gv_effectHistoryExistedEffect[libGame_gv_effectHistoryExistedEffectCurrentAmount].lv_effect = lp_effectEntry;
    libGame_gv_effectHistoryExistedEffect[libGame_gv_effectHistoryExistedEffectCurrentAmount].lv_effectHistoryType = lp_effectType;
}

void libGame_gf_EffectHistoryAddEffectBehaviorToExistedEffects (string lp_effectEntry, string lp_buttonEntry, int lp_effectType) {
    // Variable Declarations
    int lv_itEffect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_effectHistoryExistedEffectCurrentAmount += 1;
    if ((libGame_gv_effectHistoryExistedEffectCurrentAmount > libGame_gv_effectHistoryExistedEffectMaxAmount_C)) {
        TextExpressionSetToken("Param/Expression/lib_Game_289BF7D7", "A", IntToText(libGame_gv_effectHistoryExistedEffectMaxAmount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_289BF7D7"), true);
        return ;
    }

    libGame_gv_effectHistoryExistedEffect[libGame_gv_effectHistoryExistedEffectCurrentAmount].lv_buttonEntry = lp_buttonEntry;
    libGame_gv_effectHistoryExistedEffect[libGame_gv_effectHistoryExistedEffectCurrentAmount].lv_effect = lp_effectEntry;
    libGame_gv_effectHistoryExistedEffect[libGame_gv_effectHistoryExistedEffectCurrentAmount].lv_effectHistoryType = lp_effectType;
}

void libGame_gf_EffectHistoryAddEffectInHistoryForPlayer (unit lp_casterUnit, unit lp_targetUnit, fixed lp_amount, fixed lp_amountAttempted, fixed lp_amountAbsorbed, int lp_damagedOrHealed, string lp_effectLink) {
    // Variable Declarations
    int lv_casterPlayer;
    int lv_targetPlayer;
    fixed lv_currentTime;
    int lv_itEffectHistory;
    string lv_abilityLink;
    string lv_talentLink;
    int lv_effectHistoryIndex;
    int lv_type;
    string lv_stringEntry;
    string lv_buttonEntry;
    int lv_existedEffectIndex;
    int lv_calculatingPosition000000000000;
    string lv_dataCollectionEntry;

    // Automatic Variable Declarations
    const int auto6EB8E26C_ae = 2;
    const int auto6EB8E26C_ai = -1;

    // Variable Initialization
    lv_casterPlayer = UnitGetOwner(lp_casterUnit);
    lv_targetPlayer = UnitGetOwner(lp_targetUnit);
    lv_currentTime = GameGetMissionTime();
    lv_abilityLink = "";
    lv_talentLink = "";
    lv_type = libGame_ge_EffectHistoryAbilityTalentWeapon_Unknown;
    lv_stringEntry = "";
    lv_dataCollectionEntry = "";

    // Implementation
    if (((libGame_gf_PlayerIsHeroPlayer(lv_targetPlayer) == false) || (UnitGroupHasUnit(libGame_gv_players[lv_targetPlayer].lv_heroUnitGroup, lp_targetUnit) == false) || (lp_effectLink == null))) {
        return ;
    }
    if ((lp_effectLink != null)) {
        lv_stringEntry = (lp_effectLink);
        if ((StringContains(lv_stringEntry, "@", c_stringAnywhere, c_stringCase) == true)) {
            lv_stringEntry = StringReplaceWord(lv_stringEntry, "@", " ", c_stringReplaceAll, c_stringCase);
            lv_stringEntry = StringWord(lv_stringEntry, 1);
            lv_dataCollectionEntry = lv_stringEntry;
        }

        if ((libGame_gf_EffectHistoryEffectExist(lv_stringEntry) == true)) {
            lv_existedEffectIndex = libGame_gf_EffectHistoryExistedEffectIndex(lv_stringEntry);
            lv_type = libGame_gv_effectHistoryExistedEffect[lv_existedEffectIndex].lv_effectHistoryType;
            lv_buttonEntry = libGame_gv_effectHistoryExistedEffect[lv_existedEffectIndex].lv_buttonEntry;
        }
        else {
            if ((CatalogEntryIsValid(c_gameCatalogDataCollection, lv_dataCollectionEntry) == true)) {
                lv_buttonEntry = libCore_gf_ConvertStringToAnyGameLink(CatalogFieldValueGet(c_gameCatalogDataCollection, lv_dataCollectionEntry, "Button", c_playerAny));
                if ((CatalogEntryIsValid(c_gameCatalogTalent, (lv_stringEntry)) == true)) {
                    lv_type = libGame_ge_EffectHistoryAbilityTalentWeapon_Talent;
                }
                else if ((CatalogEntryIsValid(c_gameCatalogAbil, (lv_stringEntry)) == true)) {
                    lv_type = libGame_ge_EffectHistoryAbilityTalentWeapon_Ability;
                }
                else if ((CatalogEntryIsValid(c_gameCatalogWeapon, (lv_stringEntry)) == true)) {
                    lv_type = libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon;
                }
            }
            else {
                lv_buttonEntry = "DebugUnknownAbility";
            }
        }
        if ((CatalogEntryIsValid(c_gameCatalogButton, lv_buttonEntry) == false)) {
            lv_buttonEntry = "DebugUnknownAbility";
        }

    }
    lv_itEffectHistory = libGame_gv_effectHistoryMaxEffectsInHistory;
    for ( ; ( (auto6EB8E26C_ai >= 0 && lv_itEffectHistory <= auto6EB8E26C_ae) || (auto6EB8E26C_ai < 0 && lv_itEffectHistory >= auto6EB8E26C_ae) ) ; lv_itEffectHistory += auto6EB8E26C_ai ) {
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_abilityTalentWeapon = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_abilityTalentWeapon;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_amount = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_amount;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_amountAbsorbed = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_amountAbsorbed;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_amountAttempted = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_amountAttempted;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_talentLink = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_talentLink;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_abilityLink = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_abilityLink;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_damagedOrHealed = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_damagedOrHealed;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_isKill = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_isKill;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_time = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_time;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_casterUnit = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_casterUnit;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_originPlayer = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_originPlayer;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_effectLink = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_effectLink;
        libGame_gv_effectHistoryData[lv_targetPlayer][lv_itEffectHistory].lv_buttonEntry = libGame_gv_effectHistoryData[lv_targetPlayer][(lv_itEffectHistory-1)].lv_buttonEntry;
    }
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_abilityTalentWeapon = lv_type;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_amount = lp_amount;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_amountAbsorbed = lp_amountAbsorbed;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_amountAttempted = lp_amountAttempted;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_talentLink = (lv_talentLink);
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_abilityLink = (lv_abilityLink);
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_damagedOrHealed = lp_damagedOrHealed;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_time = lv_currentTime;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_casterUnit = lp_casterUnit;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_originPlayer = lv_casterPlayer;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_effectLink = lp_effectLink;
    libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_buttonEntry = lv_buttonEntry;
    if ((lp_damagedOrHealed == libGame_ge_EffectHistoryDamagedOrHealed_Damaged) && ((libGame_gf_BehaviorCategoriesUnitHasBehaviorFromCategory(lp_targetUnit, libGame_ge_BehaviorCategories_SpecialDeathState) == true) || (UnitIsAlive(lp_targetUnit) == false))) {
        libGame_gv_effectHistoryData[lv_targetPlayer][1].lv_isKill = true;
        libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer(lp_targetUnit, lv_targetPlayer);
    }
}

void libGame_gf_EffectHistoryClearHistoryIndexForPlayer (int lp_player, int lp_effectHistoryIndex) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_amount = 0.0;
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_talentLink = null;
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_abilityLink = null;
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_time = 0.0;
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_casterUnit = null;
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_originPlayer = 0;
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_abilityTalentWeapon = libGame_ge_EffectHistoryAbilityTalentWeapon_Unknown;
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_damagedOrHealed = libGame_ge_EffectHistoryDamagedOrHealed_Unknown;
    libGame_gv_effectHistoryData[lp_player][lp_effectHistoryIndex].lv_isKill = false;
}

void libGame_gf_EffectHistoryClearHistoryForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itEffectHistoryIndex;

    // Automatic Variable Declarations
    const int auto82C4B319_ae = libGame_gv_effectHistoryMaxEffectsInHistory;
    const int auto82C4B319_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itEffectHistoryIndex = 1;
    for ( ; ( (auto82C4B319_ai >= 0 && lv_itEffectHistoryIndex <= auto82C4B319_ae) || (auto82C4B319_ai < 0 && lv_itEffectHistoryIndex >= auto82C4B319_ae) ) ; lv_itEffectHistoryIndex += auto82C4B319_ai ) {
        libGame_gf_EffectHistoryClearHistoryIndexForPlayer(lp_player, lv_itEffectHistoryIndex);
    }
}

void libGame_gf_BehaviorCategoriesChanges (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_BehaviorCategories_C);
}

void libGame_gf_SendEventBehaviorCategoriesChanges (string lp_behavior, int lp_category, int lp_change, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_BehaviorCategories_C, libGame_gv_eventParam_BehaviorCategories_Behavior_C), (lp_behavior));
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_BehaviorCategories_C, libGame_gv_eventParam_BehaviorCategories_Category_C), (lp_category));
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_BehaviorCategories_C, libGame_gv_eventParam_BehaviorCategories_Change_C), (lp_change));
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_BehaviorCategories_C, libGame_gv_eventParam_BehaviorCategories_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_BehaviorCategories_C);
}

int libGame_gf_BehaviorCategoriesChangesChange () {
    // Variable Declarations
    int lv_change;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_change = DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_BehaviorCategories_C, libGame_gv_eventParam_BehaviorCategories_Unit_C));
    return lv_change;
}

unit libGame_gf_BehaviorCategoriesChangesUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_BehaviorCategories_C, libGame_gv_eventParam_BehaviorCategories_Unit_C));
}

string libGame_gf_BehaviorCategoriesChangesBehavior () {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_ConvertStringToAnyGameLink(DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_BehaviorCategories_C, libGame_gv_eventParam_BehaviorCategories_Behavior_C)));
}

int libGame_gf_BehaviorCategoriesChangesCategory () {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_BehaviorCategoriesCategoryPresetFromInteger(DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_BehaviorCategories_C, libGame_gv_eventParam_BehaviorCategories_Category_C)));
}

void libGame_gf_CameraPannedFromScript (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CameraPannedFromScript_C);
}

void libGame_gf_SendEventCameraPannedFromScript (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C), lp_point);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_CameraPannedFromScript_C);
}

point libGame_gf_CameraPannedFromScriptPoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C));
}

int libGame_gf_CameraPannedFromScriptPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C));
}

void libGame_gf_CapturePointChangesOwner (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointChangesOwner_C);
}

void libGame_gf_SendEventCapturePointChangesOwner (int lp_capturePointIndex, int lp_aIOwner, int lp_playerOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C), lp_capturePointIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_AIOwner_C), lp_aIOwner);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_PlayerOwner_C), lp_playerOwner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C), lp_capturingPlayers);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C), lp_hasMercLordTalent);
    TriggerSendEvent(libGame_gv_eventID_CapturePointChangesOwner_C);
}

int libGame_gf_CapturePointChangesOwnerCapturePointIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C));
}

int libGame_gf_CapturePointChangesOwnerAIOwner () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_AIOwner_C));
}

int libGame_gf_CapturePointChangesOwnerNewOwnerPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_PlayerOwner_C));
}

playergroup libGame_gf_CapturePointChangesOwnerCapturingPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C));
}

bool libGame_gf_CapturePointChangesOwnerHasMercLordTalent () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C));
}

void libGame_gf_CapturePointBecomesFullyOverCaptured (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

void libGame_gf_SendEventCapturePointBecomesFullyOverCaptured (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C), lp_capturePointIndex);
    TriggerSendEvent(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

int libGame_gf_CapturePointBecomesFullyOverCapturedCapturePointIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C));
}

void libGame_gf_JungleDefenderAIDefendersBeginFighting (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersBeginFightingIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefendersEndFighting (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersEndFighting (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersEndFightingIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefenderKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIDefenderKilled (int lp_defenderAIIndex, unit lp_unit, unit lp_killingUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C), lp_defenderAIIndex);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C), lp_unit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingUnit_C), lp_killingUnit);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

int libGame_gf_JungleDefenderAIDefenderKilledIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C));
}

unit libGame_gf_JungleDefenderAIDefenderKilledUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C));
}

unit libGame_gf_JungleDefenderAIDefenderKilledKillingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingUnit_C));
}

void libGame_gf_JungleDefenderAIAllDefendersKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIAllDefendersKilled (int lp_defenderAIIndex, unit lp_killingUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C), lp_defenderAIIndex);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingUnit_C), lp_killingUnit);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

int libGame_gf_JungleDefenderAIAllDefendersKilledIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C));
}

unit libGame_gf_JungleDefenderAIAllDefendersKilledKillingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingUnit_C));
}

void libGame_gf_MetaDataDataBaseInitialization (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MetaDataDataBaseInitialization_C);
}

void libGame_gf_SendEventMetaDataDataBaseInitialization () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MetaDataDataBaseInitialization_C);
}

void libGame_gf_GateOpenTimerStarted (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_GateOpenTimerStarted_C);
}

void libGame_gf_SendEventGateOpenTimerStarted () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_GateOpenTimerStarted_C);
}

void libGame_gf_TownDataInitialized (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TownDataInitialized_C);
}

void libGame_gf_SendEventTownDataInitialized () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_TownDataInitialized_C);
}

void libGame_gf_GameOverEvent (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_GameOverEvent_C);
}

void libGame_gf_SendEventGameOverEvent () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_GameOverEvent_C);
}

void libGame_gf_HeroExitedTransport (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroExitedTransport_C);
}

void libGame_gf_SendEventHeroExitedTransport (int lp_player, unit lp_transport) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Transport_C), lp_transport);
    TriggerSendEvent(libGame_gv_eventID_HeroExitedTransport_C);
}

int libGame_gf_HeroExitingTransportPlayerExiting () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Player_C));
}

unit libGame_gf_HeroExitingTransportTransport () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Transport_C));
}

void libGame_gf_HeroEnteredTransport (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroExitedTransport_C);
}

void libGame_gf_SendEventHeroEnteredTransport (int lp_player, unit lp_transportUnit, unit lp_cargoUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Transport_C), lp_transportUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_UnitEntered_C), lp_cargoUnit);
    TriggerSendEvent(libGame_gv_eventID_HeroEnteredTransport_C);
}

int libGame_gf_HeroEnteredTransportPlayerEntering () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Player_C));
}

unit libGame_gf_HeroEnteredTransportTransport () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Transport_C));
}

unit libGame_gf_HeroEnteredTransportCargoUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_UnitEntered_C));
}

void libGame_gf_HeroLifesteal (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroLifesteal_C);
}

void libGame_gf_SendEventHeroLifesteal (unit lp_hero, fixed lp_healingAmount, string lp_damagingEffect) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroLifesteal_C, libGame_gv_eventParam_HeroLifesteal_Hero_C), lp_hero);
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_HeroLifesteal_C, libGame_gv_eventParam_HeroLifesteal_Amount_C), lp_healingAmount);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_HeroLifesteal_C, libGame_gv_eventParam_HeroLifesteal_DamagingEffect_C), (lp_damagingEffect));
    TriggerSendEvent(libGame_gv_eventID_HeroLifesteal_C);
}

unit libGame_gf_HeroLifestealHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroLifesteal_C, libGame_gv_eventParam_HeroLifesteal_Hero_C));
}

fixed libGame_gf_HeroLifestealAmount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_HeroLifesteal_C, libGame_gv_eventParam_HeroLifesteal_Amount_C));
}

string libGame_gf_HeroLifestealDamagingEffect () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_HeroLifesteal_C, libGame_gv_eventParam_HeroLifesteal_DamagingEffect_C)));
}

void libGame_gf_HeroHealPrevented (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroHealPrevented_C);
}

void libGame_gf_SendEventHeroHealPrevented (unit lp_targetUnit, fixed lp_amount, string lp_behavior, unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_TargetUnit_C), lp_targetUnit);
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Amount_C), lp_amount);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Buff_C), (lp_behavior));
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Hero_C), lp_hero);
    TriggerSendEvent(libGame_gv_eventID_HeroHealPrevented_C);
}

unit libGame_gf_HeroHealPreventedTargetUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_TargetUnit_C));
}

fixed libGame_gf_HeroHealPreventedAmount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Amount_C));
}

string libGame_gf_HeroHealPreventedBehavior () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Buff_C)));
}

unit libGame_gf_HeroHealPreventedHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroHealPrevented_C, libGame_gv_eventID_HeroHealPrevented_Hero_C));
}

void libGame_gf_HeroLevelUp (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroLevelUp_C);
}

void libGame_gf_SendEventHeroLevelUp (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroLevelUp_C);
}

int libGame_gf_HeroLevelUpPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Player_C));
}

void libGame_gf_HeroParticipatedInNPCTakedown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInNPCTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInNPCTakedown (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C);
}

int libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C));
}

unit libGame_gf_HeroParticipatedInNPCTakedownMinion () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C));
}

void libGame_gf_HeroParticipatedInTakedown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInTakedown (int lp_lastHitPlayer, int lp_player, int lp_playerKilled, unit lp_heroKilled, point lp_heroKilledPosition) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_LastHitPlayer_C), lp_lastHitPlayer);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C), lp_playerKilled);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C), lp_heroKilled);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilledPosition_C), lp_heroKilledPosition);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

int libGame_gf_HeroParticipatedInTakedownKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C));
}

int libGame_gf_HeroParticipatedInTakedownLastHitPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_LastHitPlayer_C));
}

int libGame_gf_HeroParticipatedInTakedownKilledPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C));
}

int libGame_gf_HeroParticipatedInTakedownKilledHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C));
}

point libGame_gf_HeroParticipatedInTakedownKilledHeroPosition () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilledPosition_C));
}

void libGame_gf_HeroWitnessedAlliedNPCDeath (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C);
}

void libGame_gf_SendEventHeroWitnessedAlliedNPCDeath (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C);
}

int libGame_gf_HeroWitnessedAlliedNPCDeathAlliedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C));
}

unit libGame_gf_HeroWitnessedAlliedNPCDeathMinion () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C));
}

void libGame_gf_HeroPortedBackToTown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroPortedBackToTown_C);
}

void libGame_gf_SendEventHeroPortedBackToTown (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroPortedBackToTown_C);
}

int libGame_gf_HeroPortedBackToTownPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Player_C));
}

unit libGame_gf_HeroPortedBackToTownUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Unit_C));
}

void libGame_gf_SpecialCaseParticipatedInNPCTakedown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C);
}

void libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C);
}

int libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C));
}

unit libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C));
}

void libGame_gf_HeroSpecialCaseMounting (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroSpecialCaseMounting_C);
}

void libGame_gf_SendEventHeroSpecialCaseMounting (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpecialCaseMounting_C, libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroSpecialCaseMounting_C);
}

int libGame_gf_HeroSpecialCaseMountingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpecialCaseMounting_C, libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C));
}

void libGame_gf_HeroEntersSpecialDeathState (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroEntersSpecialDeathState_C);
}

void libGame_gf_SendEventHeroEntersSpecialDeathState (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEntersSpecialDeathState_C, libGame_gv_eventParam_HeroEntersSpecialDeathState_Hero_C), lp_hero);
}

unit libGame_gf_HeroEntersSpecialDeathStateHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEntersSpecialDeathState_C, libGame_gv_eventParam_HeroEntersSpecialDeathState_Hero_C));
}

void libGame_gf_HeroKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroKilled_C);
}

void libGame_gf_SendEventHeroKilled (int lp_playerKilling, unit lp_killedUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C), lp_playerKilling);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_KilledUnit_C), lp_killedUnit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C), UnitGetOwner(lp_killedUnit));
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C), UnitGetPosition(lp_killedUnit));
    TriggerSendEvent(libGame_gv_eventID_HeroKilled_C);
}

int libGame_gf_HeroKilledKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C));
}

int libGame_gf_HeroKilledPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C));
}

unit libGame_gf_HeroKilledUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_KilledUnit_C));
}

point libGame_gf_HeroKilledLocaiton () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C));
}

void libGame_gf_HeroSpawn (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroSpawn_C);
}

void libGame_gf_SendEventHeroSpawn (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpawn_C, libGame_gv_eventParam_HeroSpawn_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroSpawn_C);
}

int libGame_gf_HeroSpawnPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpawn_C, libGame_gv_eventParam_HeroSpawn_Player_C));
}

void libGame_gf_HeroRespawn (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroRespawn_C);
}

void libGame_gf_SendEventHeroRespawn (int lp_player, unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Hero_C), lp_hero);
    TriggerSendEvent(libGame_gv_eventID_HeroRespawn_C);
}

int libGame_gf_HeroRespawnPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C));
}

unit libGame_gf_HeroRespawnHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Hero_C));
}

void libGame_gf_RequestCustomRespawn (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_RequestCustomRespawn_C);
}

void libGame_gf_SendEventRequestCustomRespawn (int lp_player, bool lp_respawnMounted, point lp_respawnLocation, fixed lp_respawnHealthPercent) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_Player_C), lp_player);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnMounted_C), lp_respawnMounted);
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnHealthPercent_C), lp_respawnHealthPercent);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnLocation_C), lp_respawnLocation);
    TriggerSendEvent(libGame_gv_eventID_RequestCustomRespawn_C);
}

int libGame_gf_RequestCustomRespawnPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_Player_C));
}

bool libGame_gf_RequestCustomRespawnRespawnMounted () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnMounted_C));
}

point libGame_gf_RequestCustomRespawnRespawnLocation () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnLocation_C));
}

fixed libGame_gf_RequestCustomRespawnRespawnHealthPercent () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_RequestCustomRespawn_C, libGame_gv_eventParam_RequestCustomRespawn_RespawnHealthPercent_C));
}

void libGame_gf_SpecialCaseTalentCooldownReset (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_SpecialCaseTalentCooldownReset_C);
}

void libGame_gf_SendEventSpecialCaseTalentCooldownReset (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C, libGame_gv_eventParam_SpecialCaseTalentCooldownReset_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C);
}

int libGame_gf_SpecialCaseTalentCooldownResetPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C, libGame_gv_eventParam_SpecialCaseTalentCooldownReset_Player_C));
}

void libGame_gf_JungleCampSpawned (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampSpawned_C);
}

void libGame_gf_SendEventJungleCampSpawned (int lp_camp) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampSpawned_C, libGame_gv_eventParam_JungleCampSpawned_Camp_C), lp_camp);
    TriggerSendEvent(libGame_gv_eventID_JungleCampSpawned_C);
}

int libGame_gf_JungleCampSpawnedIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampSpawned_C, libGame_gv_eventParam_JungleCampSpawned_Camp_C));
}

void libGame_gf_JungleCampDefenderCreated (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampDefenderCreated_C);
}

void libGame_gf_SendEventJungleCampDefenderCreated (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampDefenderCreated_C, libGame_gv_eventParam_JungleCampDefenderCreated_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_JungleCampDefenderCreated_C);
}

unit libGame_gf_JungleCampDefenderUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampDefenderCreated_C, libGame_gv_eventParam_JungleCampDefenderCreated_Unit_C));
}

void libGame_gf_JungleCampLanerCreated (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampLanerCreated_C);
}

void libGame_gf_SendEventJungleCampLanerCreated (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampLanerCreated_C, libGame_gv_eventParam_JungleCampLanerCreated_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_JungleCampLanerCreated_C);
}

unit libGame_gf_JungleCampLanerUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampLanerCreated_C, libGame_gv_eventParam_JungleCampLanerCreated_C));
}

void libGame_gf_MercCampCaptured (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MercCampCaptured_C);
}

void libGame_gf_SendEventMercCampCaptured (int lp_camp, int lp_owner, playergroup lp_capturingPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C), lp_camp);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Owner_C), lp_owner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C), lp_capturingPlayers);
}

int libGame_gf_MercCampCapturedIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C));
}

int libGame_gf_MercCampCapturedOwner () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Owner_C));
}

playergroup libGame_gf_MercCampCapturedCapturingPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPlayerGroup(true, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C));
}

void libGame_gf_MapObjectiveCapturedByUnit (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitCapturedMapObjective_C);
}

void libGame_gf_SendEventMapObjectiveCapturedByUnit (unit lp_capturingUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitCapturedMapObjective_C, libGame_gv_eventParam_UnitCapturedMapObjective_Unit_C), lp_capturingUnit);
    TriggerSendEvent(libGame_gv_eventID_UnitCapturedMapObjective_C);
}

unit libGame_gf_MapObjectiveCapturingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitCapturedMapObjective_C, libGame_gv_eventParam_UnitCapturedMapObjective_Unit_C));
}

void libGame_gf_MapRavenLordTributeWarning (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeWarning_C);
}

void libGame_gf_SendEventMapTributeWarning (point lp_position) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C), lp_position);
    TriggerSendEvent(libGame_gv_eventID_MapTributeWarning_C);
}

point libGame_gf_MapTributeWarningPosition () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C));
}

void libGame_gf_MapRavenLordTributeSpawned (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeSpawned_C);
}

void libGame_gf_SendEventMapTributeSpawned (unit lp_tribute) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C), lp_tribute);
    TriggerSendEvent(libGame_gv_eventID_MapTributeSpawned_C);
}

unit libGame_gf_MapTributeSpawnedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C));
}

void libGame_gf_MapRavenLordTributePickedUp (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributePickedup_C);
}

void libGame_gf_SendEventMapTributePickedUp (int lp_player, point lp_positioin) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C), lp_player);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C), lp_positioin);
    TriggerSendEvent(libGame_gv_eventID_MapTributePickedup_C);
}

int libGame_gf_MapTributePickedUpPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C));
}

point libGame_gf_MapTributePickedUpPosition () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C));
}

void libGame_gf_MapRavenLordCurseStarts (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseStarts_C);
}

void libGame_gf_SendEventMapRavenLordCurseStarts (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseStarts_C);
}

int libGame_gf_MapRavenLordCurseActivatedTeam () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C));
}

void libGame_gf_MapRavenLordCurseEnds (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_SendEventMapRavenLordCurseEnds () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_PlayerAchievesMultiKill (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerAchievesMultiKill_C);
}

void libGame_gf_SendEventPlayerAchievesMultiKill (int lp_player, int lp_killCount) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_KillCount_C), lp_killCount);
    TriggerSendEvent(libGame_gv_eventID_PlayerAchievesMultiKill_C);
}

int libGame_gf_PlayerAchievesMultiKillPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_Player_C));
}

int libGame_gf_PlayerAchievesMultiKillKillCount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_KillCount_C));
}

void libGame_gf_QuestTokenCompleted (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_QuestTokenCompleted_C);
}

void libGame_gf_SendEventQuestTokenCompleted (string lp_questTokenBehavior, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_QuestTokenCompleted_C, libGame_gv_eventParam_QuestTokenCompleted_Behavior_C), (lp_questTokenBehavior));
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestTokenCompleted_C, libGame_gv_eventParam_QuestTokenCompleted_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_QuestTokenCompleted_C);
}

string libGame_gf_QuestTokenCompletedBehavior () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_QuestTokenCompleted_C, libGame_gv_eventParam_QuestTokenCompleted_Behavior_C)));
}

unit libGame_gf_QuestTokenCompletedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_QuestTokenCompleted_C, libGame_gv_eventParam_QuestTokenCompleted_Unit_C));
}

void libGame_gf_UnitEntersSafeZonePuntRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C);
}

void libGame_gf_SendEventUnitEntersSafeZonePuntRegion (unit lp_unit, point lp_puntPoint) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C), lp_unit);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C), lp_puntPoint);
    TriggerSendEvent(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C);
}

unit libGame_gf_UnitEntersSafeZonePuntRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C));
}

point libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C));
}

void libGame_gf_UnitEntersSafeZoneRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitEntersSafeZoneRegion_C);
}

void libGame_gf_SendEventUnitEntersSafeZoneRegion (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZoneRegion_C, libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_UnitEntersSafeZoneRegion_C);
}

unit libGame_gf_UnitEntersSafeZoneRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZoneRegion_C, libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C));
}

void libGame_gf_UnitExitsSafeZoneRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitExitsSafeZoneRegion_C);
}

void libGame_gf_SendEventUnitExitsSafeZoneRegion (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitExitsSafeZoneRegion_C, libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_UnitExitsSafeZoneRegion_C);
}

unit libGame_gf_UnitExitsSafeZoneRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitExitsSafeZoneRegion_C, libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C));
}

void libGame_gf_AnnouncerVOInitiated (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_AnnouncerVOInitiated_C);
}

void libGame_gf_SendEventAnnouncerVOInitiated (sound lp_sound, int lp_player, int lp_announcerEvent) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Event_C), lp_announcerEvent);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Player_C), lp_player);
    DataTableSetSound(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Sound_C), lp_sound);
    TriggerSendEvent(libGame_gv_eventID_AnnouncerVOInitiated_C);
}

int libGame_gf_AnnouncerVOInitiatedAnnouncerEvent () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Event_C));
}

int libGame_gf_AnnouncerVOInitiatedAnnouncerPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Player_C));
}

sound libGame_gf_AnnouncerVOInitiatedAnnouncerSound () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetSound(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerVOInitiated_Sound_C));
}

void libGame_gf_PlayerChooseTalent (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerChooseTalent_C);
}

int libGame_gf_PlayerChooseTalentPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_Player_C));
}

int libGame_gf_PlayerChooseTalentTalentTier () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentTier_C));
}

int libGame_gf_PlayerChooseTalentTalentColumn () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentColumn_C));
}

int libGame_gf_PlayerChooseTalentTalentIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentIndex_C));
}

string libGame_gf_PlayerChooseTalentTalentLink () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentLink_C)));
}

void libGame_gf_SendEventPlayerChooseTalent (int lp_player, int lp_talentTier, int lp_talentColumn) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lp_talentTier][lp_talentColumn];

    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentTier_C), lp_talentTier);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentColumn_C), lp_talentColumn);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentIndex_C), lv_talentIndex);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentLink_C), (libCore_gv_talentData[lv_talentIndex].lv_talentLink));
    TriggerSendEvent(libGame_gv_eventID_PlayerChooseTalent_C);
}

void libGame_gf_PlayerSelectPrepickedTalent (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerSelectPrepickedTalent_C);
}

int libGame_gf_PlayerSelectPrepickedTalentPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerSelectPrepickedTalent_C, libGame_gv_eventParam_PlayerSelectPrepickedTalent_Player_C));
}

int libGame_gf_PlayerSelectPrepickedTalentTier () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerSelectPrepickedTalent_C, libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentTier_C));
}

int libGame_gf_PlayerSelectPrepickedTalentColumn () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerSelectPrepickedTalent_C, libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentColumn_C));
}

int libGame_gf_PlayerSelectPrepickedTalentIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerSelectPrepickedTalent_C, libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentIndex_C));
}

void libGame_gf_SendEventPlayerSelectPrepickedTalent (int lp_player, int lp_talentTier, int lp_talentColumn) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lp_talentTier][lp_talentColumn];

    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerSelectPrepickedTalent_C, libGame_gv_eventParam_PlayerSelectPrepickedTalent_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerSelectPrepickedTalent_C, libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentTier_C), lp_talentTier);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerSelectPrepickedTalent_C, libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentColumn_C), lp_talentColumn);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerSelectPrepickedTalent_C, libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentIndex_C), lv_talentIndex);
    TriggerSendEvent(libGame_gv_eventID_PlayerSelectPrepickedTalent_C);
}

void libGame_gf_SendEventTeamGetLevelUp (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_TeamLevelUp_C, libGame_gv_eventParam_TeamLevelUp_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_TeamLevelUp_C);
}

int libGame_gf_TeamLevelUpTeam () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_TeamLevelUp_C, libGame_gv_eventParam_TeamLevelUp_Team_C));
}

void libGame_gf_TeamLevelUp (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TeamLevelUp_C);
}

text libGame_gf_EncouragementFormatStatCalloutText (int lp_calloutStatIndex, int lp_thresholdIndex, fixed lp_statValue) {
    // Variable Declarations
    text lv_formattedText;
    text lv_fontStyle;

    // Automatic Variable Declarations
    int auto5E9E20B8_val;
    int autoAA027A12_val;

    // Variable Initialization

    // Implementation
    auto5E9E20B8_val = lp_calloutStatIndex;
    if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_TimeSpentAlive)) {
        TextExpressionSetToken("Param/Expression/lib_Game_6350DC0D", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(lp_statValue)));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_6350DC0D");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered)) {
        TextExpressionSetToken("Param/Expression/lib_Game_BCB8D4D9", "A", FixedToText((lp_statValue * 100.0), 1));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_BCB8D4D9");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_Takedowns)) {
        TextExpressionSetToken("Param/Expression/lib_Game_C4BCAEF6", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_C4BCAEF6");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_FDD35B27", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_FDD35B27");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_AC767B09", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_AC767B09");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MapTributesCollected)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_CAE3CE95", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_CAE3CE95");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_D9C82864", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_D9C82864");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_0D0E0150", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_0D0E0150");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_7A26F51D", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_7A26F51D");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_BDE15A67", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_BDE15A67");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_28CCA76C", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_28CCA76C");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MapSkullsCollected)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_86E58DF9", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_86E58DF9");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_31924C56", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_31924C56");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_MercCampsCaptured)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_34CE69E9", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_34CE69E9");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_8B90578E", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_8B90578E");
        }
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_DamageDoneToTowns)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A5A1DB3F", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_A5A1DB3F");
    }
    else if (auto5E9E20B8_val == (libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A0E02851", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_A0E02851");
    }
    else {
    }
    autoAA027A12_val = lp_thresholdIndex;
    if (autoAA027A12_val == (libGame_ge_EncouragementStatCalloutThresholds_Display)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_27F49393");
    }
    else if (autoAA027A12_val == (libGame_ge_EncouragementStatCalloutThresholds_GreatJob)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_DB629667");
        TextExpressionSetToken("Param/Expression/lib_Game_79D435FA", "A", lv_formattedText);
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_79D435FA");
    }
    else if (autoAA027A12_val == (libGame_ge_EncouragementStatCalloutThresholds_Amazing)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_69883CA4");
        TextExpressionSetToken("Param/Expression/lib_Game_4AEC64D5", "A", lv_formattedText);
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_4AEC64D5");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_Game_66A312DB", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_Game_66A312DB", "B", lv_formattedText);
    lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_66A312DB");
    return lv_formattedText;
}

int libGame_gf_EncouragementConvertIntegerToDeathTipNamePreset (int lp_int) {
    // Automatic Variable Declarations
    int autoCA4EB926_val;

    // Implementation
    autoCA4EB926_val = lp_int;
    if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath)) {
        return libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_FollowMinions)) {
        return libGame_ge_EncouragementDeathTipsNames_FollowMinions;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_Gangups)) {
        return libGame_ge_EncouragementDeathTipsNames_Gangups;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_Retreat)) {
        return libGame_ge_EncouragementDeathTipsNames_Retreat;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns)) {
        return libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_Moonwell)) {
        return libGame_ge_EncouragementDeathTipsNames_Moonwell;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_Mount)) {
        return libGame_ge_EncouragementDeathTipsNames_Mount;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_TrainTalents)) {
        return libGame_ge_EncouragementDeathTipsNames_TrainTalents;
    }
    else if (autoCA4EB926_val == (libGame_ge_EncouragementDeathTipsNames_UseYourAbilities)) {
        return libGame_ge_EncouragementDeathTipsNames_UseYourAbilities;
    }
    else {
    }
    return libGame_ge_EncouragementDeathTipsNames_Null;
}

text libGame_gf_EncouragementGetDeathTipText (int lp_deathTip) {
    // Automatic Variable Declarations
    int auto7E511F16_val;

    // Implementation
    auto7E511F16_val = lp_deathTip;
    if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath) {
        return StringExternal("Param/Value/lib_Game_2E1B7B18");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_FollowMinions) {
        return StringExternal("Param/Value/lib_Game_64E93780");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_Gangups) {
        return StringExternal("Param/Value/lib_Game_81596D38");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns) {
        return StringExternal("Param/Value/lib_Game_EA446F88");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_Moonwell) {
        return StringExternal("Param/Value/lib_Game_12A6A432");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_Mount) {
        return StringExternal("Param/Value/lib_Game_42D3DAB4");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_Retreat) {
        return StringExternal("Param/Value/lib_Game_24733279");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_TrainTalents) {
        return StringExternal("Param/Value/lib_Game_39E58A85");
    }
    else if (auto7E511F16_val == libGame_ge_EncouragementDeathTipsNames_UseYourAbilities) {
        return StringExternal("Param/Value/lib_Game_21FDBD6B");
    }
    else {
    }
    return StringToText("");
}

void libGame_gf_EncouragementDataTrackingRegisterMinionDamageForPlayer (int lp_player, fixed lp_damage) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_enemyMinionDamageTaken += lp_damage;
}

void libGame_gf_EncouragementDataTrackingRegisterRecentHeroKillForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_recentHeroKills += 1;
    TimerStart(libGame_gv_encouragement_DeathTipData[lp_player].lv_recentHeroKillTimer, libGame_gv_encouragement_DeathTipRecentHeroKillTimeout_C, false, c_timeGame);
}

void libGame_gf_EncouragementDataTrackingRegisterRecentStructureDamageForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_recentStructureDamageTaken = true;
    TimerStart(libGame_gv_encouragement_DeathTipData[lp_player].lv_recentStructureDamageTimer, libGame_gv_encouragement_DeathTipRecentStructureDamageTimeout_C, false, c_timeGame);
}

trigger auto_libGame_gf_PlayGameOverStinger_Trigger = null;
int auto_libGame_gf_PlayGameOverStinger_lp_winningTeam;

void libGame_gf_PlayGameOverStinger (int lp_winningTeam) {
    auto_libGame_gf_PlayGameOverStinger_lp_winningTeam = lp_winningTeam;

    if (auto_libGame_gf_PlayGameOverStinger_Trigger == null) {
        auto_libGame_gf_PlayGameOverStinger_Trigger = TriggerCreate("auto_libGame_gf_PlayGameOverStinger_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayGameOverStinger_Trigger, false, false);
}

bool auto_libGame_gf_PlayGameOverStinger_TriggerFunc (bool testConds, bool runActions) {
    int lp_winningTeam = auto_libGame_gf_PlayGameOverStinger_lp_winningTeam;

    // Automatic Variable Declarations
    // Implementation
    Wait(2.17, c_timeGame);
    libSond_gf_SoundtrackSetUniqueSoundtrackState(false);
    if ((lp_winningTeam == 0)) {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", PlayerGroupAll());
    }
    else {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Victory", libGame_gf_PlayersOnTeamHeroes(lp_winningTeam, false));
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfTeam(lp_winningTeam), false));
    }
    return true;
}

trigger auto_libGame_gf_PlayVictoryDefeatVO_Trigger = null;
int auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam;

void libGame_gf_PlayVictoryDefeatVO (int lp_winningTeam) {
    auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam = lp_winningTeam;

    if (auto_libGame_gf_PlayVictoryDefeatVO_Trigger == null) {
        auto_libGame_gf_PlayVictoryDefeatVO_Trigger = TriggerCreate("auto_libGame_gf_PlayVictoryDefeatVO_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayVictoryDefeatVO_Trigger, false, false);
}

bool auto_libGame_gf_PlayVictoryDefeatVO_TriggerFunc (bool testConds, bool runActions) {
    int lp_winningTeam = auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam;

    // Automatic Variable Declarations
    int autoECF744E0_val;

    // Implementation
    Wait(0.52, c_timeGame);
    libGame_gv_announcement_SystemEnabled = true;
    autoECF744E0_val = lp_winningTeam;
    if (autoECF744E0_val == 0) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_teamOrder, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_teamChaos, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else if (autoECF744E0_val == libGame_gv_teamOrderIndex_C) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_teamOrder, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Victory, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_teamChaos, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else if (autoECF744E0_val == libGame_gv_teamChaosIndex_C) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_teamOrder, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_teamChaos, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Victory, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else {
    }
    libGame_gv_announcement_SystemEnabled = false;
    return true;
}

void libGame_gf_GameOver (int lp_winningTeam) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_losingTeam;
    fixed lv_endGameTimeDelay;

    // Automatic Variable Declarations
    playergroup auto3F77691A_g;
    playergroup autoEC15F49D_g;
    playergroup autoAD9F90DF_g;
    playergroup auto83A1C13B_g;

    // Variable Initialization
    lv_endGameTimeDelay = 7.0;

    // Implementation
    libGame_gf_SendEventGameOverEvent();
    if ((lp_winningTeam == 0)) {
        autoAD9F90DF_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoAD9F90DF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverTie;
            }

        }
    }
    else {
        lv_losingTeam = libGame_gf_EnemyTeamNumberOfTeam(lp_winningTeam);
        auto3F77691A_g = libGame_gf_PlayersOnTeamHeroes(lp_winningTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto3F77691A_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverVictory;
            }

        }
        autoEC15F49D_g = libGame_gf_PlayersOnTeamHeroes(lv_losingTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoEC15F49D_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverDefeat;
            }

        }
    }
    TriggerEnable(libGame_gt_XPTrickle, false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto83A1C13B_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto83A1C13B_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        UISetMode(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_uiModeFullscreen, c_transitionDurationImmediate);
        libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer(lv_itPlayer);
    }
    libUIUI_gf_GameOverSplashDisplayForAllPlayers(lp_winningTeam);
}

playergroup libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit (playergroup lp_killingTeamGroup, int lp_killingPlayer, unit lp_deadHero) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    unitgroup lv_nearbyUnits;
    playergroup lv_killingGroup;

    // Automatic Variable Declarations
    playergroup auto1A124A3C_g;
    unitgroup auto62AE9A75_g;
    int auto62AE9A75_u;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    auto1A124A3C_g = lp_killingTeamGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto1A124A3C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos) && ((lv_itPlayer == lp_killingPlayer) || ((GameGetMissionTime() - libGame_gv_players[lv_deadPlayer].lv_lastTimeHeroWasWithingXPRadius[lv_itPlayer]) <= libCore_gv_bALHeroKillCreditTimeWindow) || (libGame_gv_players[lv_deadPlayer].lv_recentPlayerDamageReceived[lv_itPlayer] > 0.0))) {
            PlayerGroupAdd(lv_killingGroup, lv_itPlayer);
        }

    }
    if ((libGame_gf_PlayerIsHeroPlayer(lp_killingPlayer) == true)) {
        lv_nearbyUnits = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else {
        if ((lv_deadPlayer != libCore_gv_cOMPUTER_Hostile)) {
            lv_nearbyUnits = UnitGroupSearch(null, lv_deadPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    auto62AE9A75_g = lv_nearbyUnits;
    auto62AE9A75_u = UnitGroupCount(auto62AE9A75_g, c_unitCountAll);
    for (;; auto62AE9A75_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto62AE9A75_g, auto62AE9A75_u);
        if (lv_itUnit == null) { break; }
        if ((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true) && (libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_itUnit)) != libGame_gf_TeamNumberOfPlayer(lv_deadPlayer))) {
            PlayerGroupAdd(lv_killingGroup, UnitGetOwner(lv_itUnit));
        }

    }
    return lv_killingGroup;
}

trigger auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction;

void libGame_gf_HeroDeathUpdateTeamStats (unit lp_deadHero, int lp_killingFaction) {
    auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction = lp_killingFaction;

    if (auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdateTeamStats_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdateTeamStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero;
    int lp_killingFaction = auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction;

    // Variable Declarations
    int lv_deadPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    if ((lp_killingFaction == libGame_ge_Faction_Chaos)) {
        libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_kills += 1;
        libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_multikillStreak += 1;
        TimerStart(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
        libUIUI_gf_UITabScreenTeamKillsUpdate(libGame_gv_teamChaosIndex_C, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_kills);
    }
    else {
        libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_kills += 1;
        libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_multikillStreak += 1;
        TimerStart(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
        libUIUI_gf_UITabScreenTeamKillsUpdate(libGame_gv_teamOrderIndex_C, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_kills);
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer;
playergroup auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup;
playergroup auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup;

void libGame_gf_HeroDeathUpdatePlayerStats (unit lp_deadHero, int lp_killingPlayer, playergroup lp_killingTeamGroup, playergroup lp_killingGroup) {
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer = lp_killingPlayer;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup = lp_killingTeamGroup;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup = lp_killingGroup;

    if (auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdatePlayerStats_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdatePlayerStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer;
    playergroup lp_killingTeamGroup = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup;
    playergroup lp_killingGroup = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeamPlayer;
    fixed lv_missionTime;
    int lv_deadPlayer;
    fixed lv_xPGranted;
    int lv_levelGap;
    fixed lv_valueCoEfficient;

    // Automatic Variable Declarations
    playergroup autoBCFF2F87_g;
    playergroup autoABFCAAD5_g;

    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_missionTime = GameGetMissionTime();
    if ((PlayerGroupCount(lp_killingGroup) >= 1)) {
        lv_xPGranted = libCore_gf_DataXPXPForHero2(PlayerGroupPlayer(lp_killingGroup, 1), lp_deadHero);
    }
    else {
        autoBCFF2F87_g = lp_killingTeamGroup;
        lv_itTeamPlayer = -1;
        while (true) {
            lv_itTeamPlayer = PlayerGroupNextPlayer(autoBCFF2F87_g, lv_itTeamPlayer);
            if (lv_itTeamPlayer < 0) { break; }
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itTeamPlayer, (libCore_gf_DataXPXPForHero2(lp_killingPlayer, lp_deadHero) / PlayerGroupCount(lp_killingTeamGroup)), false);
            libGame_gf_ScoreValuesRecordGameScoreForPlayer(lv_itTeamPlayer, (libCore_gf_DataXPXPForHero2(lp_killingPlayer, lp_deadHero) / PlayerGroupCount(lp_killingTeamGroup)), libGame_gv_gameScore_HeroTakedownMultiplier, false);
        }
    }
    lv_levelGap = (libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_deadPlayer)].lv_teamLevel - libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(lv_deadPlayer)].lv_teamLevel);
    lv_valueCoEfficient = libCore_gf_DataXPGetValueCoefficientForUnit(lp_deadHero);
    autoABFCAAD5_g = lp_killingTeamGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoABFCAAD5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(lp_killingGroup, lv_itPlayer) == true)) {
            libGame_gv_players[lv_itPlayer].lv_multikillStreak += 1;
            libGame_gf_HeroDeathStartMultikillTimerForPlayer(lv_itPlayer);
            if ((libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
                libGame_gv_players[lv_itPlayer].lv_killingSpreeCount += 1;
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "IngameKillStreak", libGame_gv_players[lv_itPlayer].lv_killingSpreeCount);
            }

            libSond_gf_HeroVORegisterHeroTakedownForPlayer(lv_itPlayer, lp_killingGroup, lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount, lv_levelGap);
            libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer(lv_deadPlayer, lp_deadHero, lv_itPlayer, true, lv_xPGranted);
            libGame_gf_HeroDeathCheckForKillingSpree(lv_itPlayer);
        }
        else {
            libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer(lv_deadPlayer, lp_deadHero, lv_itPlayer, false, 0.0);
        }
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathAwardXP_Trigger = null;
unit auto_libGame_gf_HeroDeathAwardXP_lp_deadHero;
int auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer;
playergroup auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup;
playergroup auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup;
bool auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored;

void libGame_gf_HeroDeathAwardXP (unit lp_deadHero, int lp_killingPlayer, playergroup lp_awardGroup, playergroup lp_killingGroup, bool lp_takedownScored) {
    auto_libGame_gf_HeroDeathAwardXP_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer = lp_killingPlayer;
    auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup = lp_awardGroup;
    auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup = lp_killingGroup;
    auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored = lp_takedownScored;

    if (auto_libGame_gf_HeroDeathAwardXP_Trigger == null) {
        auto_libGame_gf_HeroDeathAwardXP_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathAwardXP_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathAwardXP_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathAwardXP_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathAwardXP_lp_deadHero;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer;
    playergroup lp_awardGroup = auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup;
    playergroup lp_killingGroup = auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup;
    bool lp_takedownScored = auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored;

    // Variable Declarations
    int lv_itPlayer;
    int lv_deadPlayer;
    fixed lv_valueCoefficient;
    int lv_levelGap;
    fixed lv_xPGranted;

    // Automatic Variable Declarations
    playergroup autoB8ECE8B5_g;
    playergroup auto7C14A419_g;
    playergroup auto1FFE0FF7_g;
    playergroup autoACCCB290_g;

    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_valueCoefficient = libCore_gf_DataXPGetValueCoefficientForUnit(lp_deadHero);
    if ((lp_takedownScored == true)) {
        libGame_gv_scoreValues[lv_deadPlayer].lv_mainDeaths += lv_valueCoefficient;
        autoB8ECE8B5_g = lp_killingGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoB8ECE8B5_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((lv_itPlayer == lp_killingPlayer)) {
                libGame_gv_scoreValues[lv_itPlayer].lv_mainKills += lv_valueCoefficient;
            }
            else {
                libGame_gv_scoreValues[lv_itPlayer].lv_mainAssists += lv_valueCoefficient;
            }
        }
    }

    if ((libCore_gv_sYSXPOn == false)) {
        return true;
    }

    lv_xPGranted = libCore_gf_DataXPXPForHero2(PlayerGroupPlayer(lp_awardGroup, 1), lp_deadHero);
    if ((PlayerGroupCount(lp_killingGroup) > 0)) {
        auto1FFE0FF7_g = lp_killingGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto1FFE0FF7_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (lv_xPGranted / IntToFixed(PlayerGroupCount(lp_killingGroup))), false);
        }
    }
    else {
        auto7C14A419_g = lp_killingGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto7C14A419_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (lv_xPGranted / IntToFixed(PlayerGroupCount(lp_awardGroup))), false);
        }
    }
    autoACCCB290_g = lp_awardGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoACCCB290_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_GrantXPForPlayer(lv_xPGranted, lv_itPlayer, libGame_ge_XPSource_Hero);
    }
    libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_deadHero, FixedToText(lv_xPGranted, 0), lp_awardGroup, "FCT_XP_Crit", libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    return true;
}

trigger auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger = null;
unit auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero;
playergroup auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup;
int auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction;

void libGame_gf_HeroDeathDeadTeamAnnouncements (unit lp_deadHero, playergroup lp_deadPlayerTeamGroup, int lp_killingFaction) {
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup = lp_deadPlayerTeamGroup;
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction = lp_killingFaction;

    if (auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger == null) {
        auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathDeadTeamAnnouncements_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathDeadTeamAnnouncements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero;
    playergroup lp_deadPlayerTeamGroup = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup;
    int lp_killingFaction = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction;

    // Variable Declarations
    int lv_itPlayer;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_deadPlayerTeamGroupMinusDeadPlayer;
    bool lv_entireTeamDead;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupEmpty();
    lv_entireTeamDead = true;

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupCopy(lp_deadPlayerTeamGroup);
    PlayerGroupRemove(lv_deadPlayerTeamGroupMinusDeadPlayer, lv_deadPlayer);
    if ((UnitGroupCount(libGame_gv_players[lv_deadPlayer].lv_heroUnitGroup, c_unitCountAlive) < 1)) {
        libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer(lv_deadPlayer);
    }
    else {
        libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer(lv_deadPlayer, lp_deadHero);
    }
    libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup(lv_deadPlayer, lp_deadHero, lv_deadPlayerTeamGroupMinusDeadPlayer);
    libGame_gf_HeroDeathHeroKilledAnnouncementToObserver(lv_deadPlayer, lp_deadHero);
    libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement(lv_deadPlayerTeam);
    libGame_gf_HeroDeathCheckToSeeIfLivingAlliesExist(lp_deadHero, lv_deadPlayerTeam, lv_deadPlayerTeamGroupMinusDeadPlayer);
    return true;
}

void libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement (int lp_deadPlayerTeam) {
    // Variable Declarations
    int lv_itPlayer;
    bool lv_entireTeamDead;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    playergroup auto8950737C_g;
    playergroup auto4F0040A1_g;

    // Variable Initialization
    lv_entireTeamDead = true;

    // Implementation
    lv_entireTeamDead = true;
    auto8950737C_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeam, false);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8950737C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalDevotionRezDelay") == false)) {
            lv_entireTeamDead = false;
            break;
        }

    }
    if ((lv_entireTeamDead == true)) {
        auto4F0040A1_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto4F0040A1_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSond_gf_HeroVOStartTeamKilledVOTimerForPlayer(lv_itPlayer, libGame_gv_heroDeathTeamKilledVODelay);
        }
        lv_enemyTeam = (3 - lp_deadPlayerTeam);
        if ((lv_enemyTeam <= libCore_gv_bALMaxTeams)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_TeamKill, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, true);
            if ((lp_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
            }

        }

    }

}

void libGame_gf_HeroDeathCheckToSeeIfLivingAlliesExist (unit lp_deadUnit, int lp_deadPlayerTeamNumber, playergroup lp_deadPlayersTeam) {
    // Variable Declarations
    bool lv_entireTeamDead;
    int lv_itPlayer;
    int lv_numberOfPlayersOnDeadPlayersTeam;
    int lv_speakingPlayer;

    // Automatic Variable Declarations
    playergroup auto58051A45_g;

    // Variable Initialization
    lv_entireTeamDead = true;

    // Implementation
    lv_entireTeamDead = true;
    auto58051A45_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeamNumber, true);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto58051A45_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalDevotionRezDelay") == false)) {
            lv_entireTeamDead = false;
            break;
        }

    }
    if ((lv_entireTeamDead == false)) {
        lv_numberOfPlayersOnDeadPlayersTeam = PlayerGroupCount(lp_deadPlayersTeam);
        lv_speakingPlayer = PlayerGroupPlayer(lp_deadPlayersTeam, RandomInt(1, lv_numberOfPlayersOnDeadPlayersTeam));
        libSond_gf_HeroVOStartAlliedTakedownVOTimerForPlayer(lv_speakingPlayer, 3.5);
    }

}

void libGame_gf_HeroDeathResetRespawnTimerOfPlayerHero (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(libGame_gv_players[lp_player].lv_respawnTimer, 0.0625, false, c_timeGame);
}

void libGame_gf_HeroDeathStartRespawnTimer (int lp_player, fixed lp_initialRespawnTime) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, false);
    if ((libGame_gv_heroDeathRespawnSetting == libGame_ge_HeroDeathRespawnOption_NoRespawn)) {
        return ;
    }

    TimerStart(libGame_gv_players[lp_player].lv_respawnTimer, lp_initialRespawnTime, false, c_timeGame);
    TimerStart(libGame_gv_players[lp_player].lv_respawnSoundCueTimer, MaxF((lp_initialRespawnTime - libGame_gv_heroDeathRespawnCueSoundTiming), 0.0625), false, c_timeGame);
}

void libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer (bool lp_enableDisable, int lp_player) {
    // Variable Declarations
    fixed lv_deathTimeRemaining;
    fixed lv_soundOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser2, "Heroes_Lowpass_Death");
        SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, true);
        lv_deathTimeRemaining = TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer);
        lv_soundOffset = (libCore_gv_bALMaxDeathTime-lv_deathTimeRemaining);
        SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Amb", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, lv_soundOffset);
        libGame_gv_heroDeath_DeathAmbientSound[lp_player] = SoundLastPlayed();
        SoundtrackPlay(libCore_gv_playerGroupFromPlayer[lp_player], c_soundtrackCategoryMusic, "MX_Dead", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser2, "Heroes_Lowpass_Death");
        SoundStop(libGame_gv_heroDeath_DeathAmbientSound[lp_player], true);
        libSond_gf_SoundtrackStopDeadSoundtrackforPlayer(lp_player);
        SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, false);
    }
}

void libGame_gf_HeroDeathUpdateUIElementsForDeath (bool lp_showOverlay, bool lp_registerwithAnnouncementUI, bool lp_showDeathRecapToast, int lp_player, int lp_killingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_heroDeathRunDeathUIUpdates == false)) {
        return ;
    }

    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(false, lp_player);
    libUIUI_gf_UIPartyFrameHeroDies(lp_player, libGame_gv_players[lp_player].lv_heroUnit);
    if ((lp_registerwithAnnouncementUI == true)) {
    }

    if ((lp_showOverlay == true)) {
        libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lp_player);
    }

    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(SoundLink("Gen_Hero_Death_Self", -1), libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_player);
    if ((lp_showDeathRecapToast == true)) {
        libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(true, lp_player);
    }

}

void libGame_gf_HeroDeathUpdateUIElementsForRespawn (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lp_player);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(true, lp_player);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer2(true, lp_player);
}

void libGame_gf_HeroDeathPortHeroBackAndSetDeathState (int lp_player, point lp_portLocation) {
    // Variable Declarations
    int lv_i;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(lv_heroUnit, "Dead", lv_heroUnit, 1);
    if ((TimerGetDuration(libGame_gv_players[lp_player].lv_respawnTimer) > 0.0)) {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer));
    }
    else {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", 0.0);
    }
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", lv_heroUnit);
    Wait(0.5, c_timeGame);
    if (true) {
        UnitSetPosition(lv_heroUnit, lp_portLocation, false);
        UnitSetFacing(lv_heroUnit, PointGetFacing(libGame_gv_players[lp_player].lv_spawnPoint), 0.0);
    }

}

void libGame_gf_HeroDeathModifyRespawnTimer (int lp_respawningPlayer, fixed lp_modificationAmount) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_newRespawnTimer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }

    lv_newRespawnTimer = (lv_currentRespawnTimer + lp_modificationAmount);
    if ((lv_newRespawnTimer < 0.5)) {
        lv_newRespawnTimer = 0.5;
    }

    libGame_gf_HeroDeathUpdateRespawnTimer(lp_respawningPlayer, lv_newRespawnTimer);
}

void libGame_gf_HeroDeathUpdateRespawnTimer (int lp_respawningPlayer, fixed lp_newRespawnTimerDuration) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_soundOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }

    if ((lv_currentRespawnTimer < lp_newRespawnTimerDuration)) {
        UnitBehaviorSetDuration(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "Dead", lp_newRespawnTimerDuration);
    }
    else {
        UnitBehaviorSetDurationRemaining(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "Dead", lp_newRespawnTimerDuration);
    }
    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer, lp_newRespawnTimerDuration, false, c_timeGame);
    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnSoundCueTimer, MaxF((lp_newRespawnTimerDuration - libGame_gv_heroDeathRespawnCueSoundTiming), 0.0625), false, c_timeGame);
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_respawningPlayer], false);
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", libGame_gv_players[lp_respawningPlayer].lv_heroUnit);
    if ((UnitHasBehavior2(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "HeroGenericIgnoreDeathSounds") == false)) {
        SoundStop(libGame_gv_heroDeath_DeathAmbientSound[lp_respawningPlayer], false);
        if ((lp_newRespawnTimerDuration > 0.0)) {
            lv_soundOffset = (libCore_gv_bALMaxDeathTime - lp_newRespawnTimerDuration);
            SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Amb", -1), lp_respawningPlayer, libCore_gv_playerGroupFromPlayer[lp_respawningPlayer], 100.0, lv_soundOffset);
        }

    }
    else {
        if ((lp_newRespawnTimerDuration > 0.0)) {
            lv_soundOffset = (libCore_gv_bALMaxDeathTime - lp_newRespawnTimerDuration);
        }

    }
}

void libGame_gf_HeroDeathRespawnHeroForPlayerAtPoint (int lp_player, bool lp_respawnMounted, point lp_respawnLocation, fixed lp_respawnHealthPercent) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    if ((libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_heroAbnormalRespawn == true)) {
        return ;
    }

    UnitBehaviorRemove(lv_heroUnit, "Dead", 1);
    UnitBehaviorRemove(lv_heroUnit, "DeadMechanics", 1);
    UnitRevive(lv_heroUnit);
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, true);
    UnitIssueOrder(lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 4), lp_respawnLocation), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, lp_respawnHealthPercent);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropShieldsPercent, lp_respawnHealthPercent);
    if ((libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_hero0EnergyOnRespawn == true)) {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 0.0);
    }
    else {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    }
    libGame_gv_players[lp_player].lv_isDead = false;
    UnitCreateEffectUnit(lv_heroUnit, "HallOfStormsAllyApplySet", lv_heroUnit);
    UnitSetPosition(lv_heroUnit, lp_respawnLocation, false);
    libGame_gf_SendEventHeroRespawn(lp_player, lv_heroUnit);
    libGame_gf_HeroDeathUpdateUIElementsForRespawn(lp_player);
    libNtve_gf_SendActorMessageToUnit(lv_heroUnit, "Signal Respawn");
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lp_player);
    libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_Revive, lp_player, libCore_gv_playerGroupFromPlayer[lp_player]);
    if ((lp_respawnMounted == true) && (UnitHasBehavior2(lv_heroUnit, "HallOfStormsProtectionBuff") == true)) {
        libGame_gf_ApplyMountBehaviorToHero(lv_heroUnit);
        libGame_gf_SendEventHeroSpecialCaseMounting(lp_player);
    }
}

void libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer (int lp_deadPlayer, unit lp_deadHero, int lp_killingTeamPlayer, bool lp_playerWasInvolvedInKill, fixed lp_xPValue) {
    // Variable Declarations
    int lv_killingTeam;
    int lv_vOEvent;
    soundlink lv_deathStingerSound;
    string lv_animName;
    text lv_titleText;
    fixed lv_duration;

    // Automatic Variable Declarations
    int autoF4D7D771_val;

    // Variable Initialization
    lv_deathStingerSound = SoundLink("EditorDefaultSound", -1);
    lv_animName = "";

    // Implementation
    lv_killingTeam = libGame_gf_TeamNumberOfPlayer(lp_killingTeamPlayer);
    if ((lp_playerWasInvolvedInKill == true)) {
        autoF4D7D771_val = libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak;
        if (autoF4D7D771_val == 2) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_DoubleKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Double_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Double_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier1";
            lv_titleText = StringExternal("Param/Value/lib_Game_52863D33");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_473B23E8"), StringExternal("Param/Value/lib_Game_3CC31083"));
            libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
        }
        else if (autoF4D7D771_val == 3) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_TripleKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Triple_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Triple_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier2";
            lv_titleText = StringExternal("Param/Value/lib_Game_995FD7D9");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_72A24DC6"), StringExternal("Param/Value/lib_Game_E90D5FDB"));
            libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
        }
        else if (autoF4D7D771_val == 4) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_QuadraKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Four_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Four_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier3";
            lv_titleText = StringExternal("Param/Value/lib_Game_335C46D1");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_5833DD43"), StringExternal("Param/Value/lib_Game_CA5C2B45"));
            libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
        }
        else if (autoF4D7D771_val == 5) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_PentaKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Penta_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Penta_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier4";
            lv_titleText = StringExternal("Param/Value/lib_Game_50D01A76");
            lv_duration = libGame_gv_announcement_LongAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_1D81E657"), StringExternal("Param/Value/lib_Game_B5E09B14"));
            libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
        }
        else {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_R")), c_soundIndexAny);
            }
            else {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_L")), c_soundIndexAny);
            }
            lv_animName = "ShowStandardNotification";
            lv_titleText = StringExternal("Param/Value/lib_Game_4EBB983A");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_E85DA354"), StringExternal("Param/Value/lib_Game_0BB68021"));
        }
    }
    else {
        if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
            lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_Offscreen_R")), c_soundIndexAny);
        }
        else {
            lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_Offscreen_L")), c_soundIndexAny);
        }
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(lv_deathStingerSound, libGame_ge_HeroDeathKillStingerQueueType_Enemy, lp_killingTeamPlayer);
    if ((libGame_gv_gAMEFirstBloodAvailable == true)) {
        lv_vOEvent = libCore_ge_AnnouncerVOEvents_AllyFirstBlood;
        lv_titleText = StringExternal("Param/Value/lib_Game_7D5962B6");
    }

    if ((lp_playerWasInvolvedInKill == true) && (libGame_gv_players[lp_deadPlayer].lv_suppressHeroAnnouncements == false)) {
        if ((libGame_gv_players[lp_deadPlayer].lv_heroUsesAnnouncementAlias == true)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_killingTeamPlayer], libGame_ge_AnnouncemetPriorities_Critical, lv_vOEvent, lv_animName, lv_titleText, libGame_gv_players[lp_deadPlayer].lv_heroAnnouncementAliasText, null, null, null, lv_duration, true);
        }
        else {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_killingTeamPlayer], libGame_ge_AnnouncemetPriorities_Critical, lv_vOEvent, lv_animName, lv_titleText, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, null, lv_duration, true);
        }
    }

}

void libGame_gf_HeroDeathHeroKilledAnnouncementToObserver (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    int lv_killingTeam;
    text lv_killMessage;
    int lv_vOEvent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_killingTeam = libGame_gf_EnemyTeamNumberOfPlayer(lp_deadPlayer);
    if ((lv_killingTeam == 1)) {
        lv_killMessage = StringExternal("Param/Value/lib_Game_C2114111");
    }
    else {
        lv_killMessage = StringExternal("Param/Value/lib_Game_BC66F5AB");
    }
    if ((libGame_gv_gAMEFirstBloodAvailable == true)) {
        if ((lv_killingTeam == 1)) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood;
        }
        else {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood;
        }
    }
    else {
        lv_vOEvent = libCore_ge_AnnouncerVOEvents_HeroSlainObserver;
    }
    if ((lv_killingTeam == 1)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncemetPriorities_Critical, lv_vOEvent, "ShowStandardNotification", lv_killMessage, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncemetPriorities_Critical, lv_vOEvent, "ShowEnemyNotification", lv_killMessage, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
}

void libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup (int lp_deadPlayer, unit lp_deadHero, playergroup lp_alliedPlayerGroup) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    int lv_teamOfDeadPlayer;
    bool[libCore_gv_bALMaxEnginePlayerCount + 1] lv_playerIsNearDeadPlayer;
    unitgroup lv_nearbyUnits;
    int lv_heroPlayer;
    soundlink lv_deathStingerSound;

    // Automatic Variable Declarations
    unitgroup autoE8B36308_g;
    int autoE8B36308_u;
    playergroup auto9A6B8BFA_g;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_deathStingerSound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_teamOfDeadPlayer = libGame_gf_TeamNumberOfPlayer(lp_deadPlayer);
    lv_nearbyUnits = UnitGroupSearch(null, lp_deadPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8B36308_g = lv_nearbyUnits;
    autoE8B36308_u = UnitGroupCount(autoE8B36308_g, c_unitCountAll);
    for (;; autoE8B36308_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoE8B36308_g, autoE8B36308_u);
        if (lv_itUnit == null) { break; }
        lv_heroPlayer = UnitGetOwner(lv_itUnit);
        if (((lv_itUnit == lp_deadHero) || (lv_itUnit == libGame_gv_players[lv_heroPlayer].lv_activeVehicle) || (libGame_gf_UnitIsHero(lv_itUnit) == true))) {
            lv_playerIsNearDeadPlayer[lv_heroPlayer] = true;
            continue;
        }

        if ((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true)) {
            lv_heroPlayer = UnitBehaviorEffectPlayer(lv_itUnit, "EarnsXP", c_effectPlayerOrigin, 0);
            if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lv_heroPlayer) == true)) {
                lv_playerIsNearDeadPlayer[lv_heroPlayer] = true;
                continue;
            }

        }

    }
    auto9A6B8BFA_g = lp_alliedPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9A6B8BFA_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Game_3CB51814", "A", IntToText(lv_itPlayer));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_3CB51814"), true);
            continue;
        }

        if ((lv_playerIsNearDeadPlayer[lv_itPlayer] == true)) {
            if ((lv_teamOfDeadPlayer == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_L")), c_soundIndexAny);
            }
            else {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_R")), c_soundIndexAny);
            }
        }
        else {
            if ((lv_teamOfDeadPlayer == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_Offscreen_L")), c_soundIndexAny);
            }
            else {
                lv_deathStingerSound = SoundLink(((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_Offscreen_R")), c_soundIndexAny);
            }
        }
        libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(lv_deathStingerSound, libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_itPlayer);
    }
}

void libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer (int lp_deadPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_deadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_03B94D1B"), null, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_HeroSlain, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_DED0D201"), null, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(SoundLink("UI_HeroDeath_Gen_Self", -1), libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_deadPlayer);
}

void libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    text lv_heroDiedText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_deadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_114C2DC6"), null, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_EB47F580", "A", UnitTypeGetName(UnitGetType(lp_deadHero)));
        lv_heroDiedText = TextExpressionAssemble("Param/Expression/lib_Game_EB47F580");
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_HeroSlain, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_53FD5D60"), lv_heroDiedText, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(SoundLink("UI_HeroDeath_Gen_Self", -1), libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_deadPlayer);
}

void libGame_gf_HeroDeathCheckForKillingSpree (int lp_killingPlayer) {
    // Variable Declarations
    int lv_killingSpreeCount;
    playergroup lv_announcementGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Implementation
    lv_killingSpreeCount = libGame_gv_players[lp_killingPlayer].lv_killingSpreeCount;
    lv_announcementGroup = PlayerGroupCopy(libCore_gv_playerGroupFromPlayer[libGame_gv_players[lp_killingPlayer].lv_killingSpreeCount]);
    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][1] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade1_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][2] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade2_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][3] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade3_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][4] = true;
        return ;
    }

}

void libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement (int lp_player) {
    // Variable Declarations
    int lv_itThreshold;
    int lv_registeredThreshold;

    // Automatic Variable Declarations
    const int autoF78FDF11_ae = libCore_gv_killingSpree_KillThresholdCount_C;
    const int autoF78FDF11_ai = 1;
    int auto5DF8EA7E_val;

    // Variable Initialization

    // Implementation
    lv_itThreshold = 1;
    for ( ; ( (autoF78FDF11_ai >= 0 && lv_itThreshold <= autoF78FDF11_ae) || (autoF78FDF11_ai < 0 && lv_itThreshold >= autoF78FDF11_ae) ) ; lv_itThreshold += autoF78FDF11_ai ) {
        if ((libGame_gv_heroDeathKillStreakRegistered[lp_player][lv_itThreshold] == true)) {
            libGame_gv_heroDeathKillStreakRegistered[lp_player][lv_itThreshold] = false;
            lv_registeredThreshold = lv_itThreshold;
            break;
        }

    }
    auto5DF8EA7E_val = lv_registeredThreshold;
    if (auto5DF8EA7E_val == 1) {
        TextExpressionSetToken("Param/Expression/lib_Game_26D39FE4", "A", IntToText(libCore_gv_killingSpree_KillThresholdBase_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeStart, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_FB0DE88C"), TextExpressionAssemble("Param/Expression/lib_Game_26D39FE4"), StringToText(""), null, null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (auto5DF8EA7E_val == 2) {
        TextExpressionSetToken("Param/Expression/lib_Game_4A735C8B", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade1_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_0B813617"), TextExpressionAssemble("Param/Expression/lib_Game_4A735C8B"), StringToText(""), null, null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (auto5DF8EA7E_val == 3) {
        TextExpressionSetToken("Param/Expression/lib_Game_948CDB6D", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade2_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3Untouchable, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_EC27B19F"), TextExpressionAssemble("Param/Expression/lib_Game_948CDB6D"), StringToText(""), null, null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (auto5DF8EA7E_val == 4) {
        TextExpressionSetToken("Param/Expression/lib_Game_F1A276C7", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade3_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncemetPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStar, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_E8FFCDE1"), TextExpressionAssemble("Param/Expression/lib_Game_F1A276C7"), StringToText(""), null, null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else {
    }
}

void libGame_gf_HeroDeathStartMultikillTimerForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(libGame_gv_players[lp_player].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
    TriggerEnable(libGame_gt_HeroDeathUpdateMultikillTimerUI, true);
}

void libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer (soundlink lp_sound, int lp_queueType, int lp_player) {
    // Variable Declarations
    int lv_queueTypeInt;
    int lv_currentQueueCount;
    int lv_nextPlayIndex;
    int lv_insertIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_queueTypeInt = (lp_queueType);
    lv_currentQueueCount = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt];
    lv_nextPlayIndex = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt];
    if ((lv_currentQueueCount >= libCore_gv_bALMaxPlayersOnATeam)) {
        return ;
    }

    lv_insertIndex = (lv_nextPlayIndex + lv_currentQueueCount);
    if ((lv_insertIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        lv_insertIndex -= libCore_gv_bALMaxPlayersOnATeam;
    }

    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_soundQueue[lv_queueTypeInt][lv_insertIndex] = lp_sound;
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] += 1;
    if ((TimerGetRemaining(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_killStingerTimer[lv_queueTypeInt]) <= 0.0)) {
        libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(lp_queueType, lp_player);
    }

}

void libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer (int lp_queueType, int lp_player) {
    // Variable Declarations
    int lv_queueTypeInt;
    int lv_nextPlayIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_queueTypeInt = (lp_queueType);
    if ((libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] <= 0)) {
        return ;
    }

    lv_nextPlayIndex = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt];
    SoundPlayForPlayer(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_soundQueue[lv_queueTypeInt][lv_nextPlayIndex], lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] -= 1;
    lv_nextPlayIndex += 1;
    if ((lv_nextPlayIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        lv_nextPlayIndex = 1;
    }

    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt] = lv_nextPlayIndex;
    TimerStart(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_killStingerTimer[lv_queueTypeInt], libGame_gv_heroDeathKillStingerQueueTimerDuration, false, c_timeGame);
}

void libGame_gf_CalculateClosestLaneDataForLane (point lp_testPoint, int lp_curLane) {
    // Automatic Variable Declarations
    // Implementation
    AILaneWaypointCalcClosestDataForLane(lp_curLane, lp_testPoint);
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestIndex = AILaneWaypointGetCalcDataClosestWaypointIndex();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_secondaryIndex = AILaneWaypointGetCalcDataSecondWaypointIndex();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestPoint = AILaneWaypointGetCalcDataClosestPoint();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestDist = AILaneWaypointGetCalcDataClosestDist();
}

void libGame_gf_CalculateClosestLaneData (point lp_testPoint) {
    // Variable Declarations
    int lv_curLane;
    int lv_curWaypointIndex;
    point lv_curWaypoint;
    fixed lv_curDist;
    fixed lv_tempBestDistance;
    point lv_tempClosestPoint;
    int lv_closestIndex;
    point lv_closestWaypoint;
    int lv_secondaryIndex;
    point lv_secondaryWaypoint;
    point lv_closestPoint;
    fixed lv_finalBestDistanceAnyLane;
    fixed lv_finalBestDistanceMinionLane;

    // Automatic Variable Declarations
    int autoE6AC4987_ae;
    const int autoE6AC4987_ai = 1;

    // Variable Initialization

    // Implementation
    lv_finalBestDistanceAnyLane = 524287.0;
    lv_finalBestDistanceMinionLane = 524287.0;
    libGame_gv_closestLaneData.lv_closestLane = 0;
    libGame_gv_closestLaneData.lv_closestMinionLane = 0;
    autoE6AC4987_ae = libGame_gv_laneCount;
    lv_curLane = 1;
    for ( ; ( (autoE6AC4987_ai >= 0 && lv_curLane <= autoE6AC4987_ae) || (autoE6AC4987_ai < 0 && lv_curLane >= autoE6AC4987_ae) ) ; lv_curLane += autoE6AC4987_ai ) {
        libGame_gf_CalculateClosestLaneDataForLane(lp_testPoint, lv_curLane);
        if ((libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist < lv_finalBestDistanceAnyLane)) {
            libGame_gv_closestLaneData.lv_closestLane = lv_curLane;
            lv_finalBestDistanceAnyLane = libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist;
        }

        if ((libGame_gv_laneData[lv_curLane].lv_minionSpawningEnabled == true) && (libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist < lv_finalBestDistanceMinionLane)) {
            libGame_gv_closestLaneData.lv_closestMinionLane = lv_curLane;
            lv_finalBestDistanceMinionLane = libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist;
        }

    }
}

bool libGame_gf_LaneIndexIsValid (int lp_laneIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_laneIndex > 0) || (lp_laneIndex == libGame_gv_laneCustomLane))) {
        return true;
    }
    else {
        return false;
    }
}

void libGame_gf_SetCoreMapLighting (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoBF073263_g;

    // Variable Initialization

    // Implementation
    autoBF073263_g = lp_players;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoBF073263_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lp_lighting == libGame_gv_coreMapLightingCurrent[lv_itPlayer])) {
            continue;
        }

        libGame_gv_coreMapLightingCurrent[lv_itPlayer] = lp_lighting;
        PlayerSetLighting(lv_itPlayer, lp_lighting, lp_blendtime);
    }
}

void libGame_gf_LevelUpApplyHeroStatsForHeroSingleLevel (unit lp_heroUnit) {
    // Variable Declarations
    int lv_player;
    int lv_heroIndex;
    fixed lv_energyMaximumBeforeLevelUp;
    fixed lv_energyMaximumAfterLevelUp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_heroUnit);
    lv_energyMaximumBeforeLevelUp = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lp_heroUnit), "EnergyMax", lv_player);
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(lp_heroUnit);
    UnitCreateEffectUnit(lp_heroUnit, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect, lp_heroUnit);
    if ((UnitHasBehavior2(lp_heroUnit, "NotManaUserDummy") == false)) {
        lv_energyMaximumAfterLevelUp = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lp_heroUnit), "EnergyMax", lv_player);
        UnitSetPropertyFixed(lp_heroUnit, c_unitPropEnergy, (UnitGetPropertyFixed(lp_heroUnit, c_unitPropEnergy, c_unitPropCurrent) + (lv_energyMaximumAfterLevelUp - lv_energyMaximumBeforeLevelUp)));
    }

}

void libGame_gf_LevelUpResetHeroStats (unit lp_heroUnit) {
    // Variable Declarations
    int lv_player;
    int lv_heroIndex;
    int lv_itArray;
    int lv_maxArrayValue;
    string lv_reference;

    // Automatic Variable Declarations
    int auto768A2CB6_ae;
    const int auto768A2CB6_ai = 1;

    // Variable Initialization
    lv_reference = "";

    // Implementation
    lv_player = UnitGetOwner(lp_heroUnit);
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(lp_heroUnit);
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect != null)) {
        lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect, "EffectArray", c_playerAny);
        if ((lv_maxArrayValue > 0)) {
            auto768A2CB6_ae = (lv_maxArrayValue-1);
            lv_itArray = 0;
            for ( ; ( (auto768A2CB6_ai >= 0 && lv_itArray <= auto768A2CB6_ae) || (auto768A2CB6_ai < 0 && lv_itArray >= auto768A2CB6_ae) ) ; lv_itArray += auto768A2CB6_ai ) {
                lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                CatalogReferenceSet(((lv_reference)), lv_player, CatalogReferenceGet((lv_reference), libCore_gv_cOMPUTER_Neutral));
            }
        }

    }

}

void libGame_gf_LevelUpLevelUpHero (unit lp_hero) {
    // Variable Declarations
    int lv_player;
    int lv_level;
    int lv_heroIndex;
    int lv_team;
    int lv_itTalentTier;

    // Automatic Variable Declarations
    int autoE8B8631D_val;
    const int auto00AF27DA_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto00AF27DA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_player) == false)) {
        libGame_gf_LevelUpLevelUpHero(null);
        return ;
    }

    lv_level = UnitXPGetCurrentLevel(lp_hero, null);
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    lv_team = libGame_gf_TeamNumberOfPlayer(lv_player);
    libGame_gv_teams[lv_team].lv_teamLevel = MaxI(libGame_gv_teams[lv_team].lv_teamLevel, lv_level);
    libGame_gv_players[lv_player].lv_heroLevel = lv_level;
    if ((libSond_gf_SoundtrackIsIntroPlaying() == false)) {
        autoE8B8631D_val = libGame_gv_teams[lv_team].lv_teamLevel;
        if (autoE8B8631D_val == 10) {
            libSond_gf_SoundtrackUpdateMapSoundtrackIndex();
        }
        else if (autoE8B8631D_val == 20) {
            libSond_gf_SoundtrackUpdateMapSoundtrackIndex();
        }
        else {
        }
    }

    libUIUI_gf_UIPartyFrameTeamLevelUpdate(lv_team, lv_level);
    libUIUI_gf_UITabScreenTeamLevelUpdate(lv_team, lv_level);
    libGame_gf_LevelUpApplyHeroStatsForHeroSingleLevel(lp_hero);
    libGame_gf_LevelUpAddLevelEffectForPlayer(lv_level, lv_player);
    libGame_gf_SendEventHeroLevelUp(lv_player);
    if ((libGame_gv_players[lv_player].lv_suppressLevelUpFXAndTeamXPTracking == false) && (lv_level > 0)) {
        libNtve_gf_SendActorMessageToUnit(lp_hero, "Signal LevelUp");
        SoundPlayOnUnitForPlayer(SoundLink("UI_Game_LevelUp_Team", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], lp_hero, 8.0, 100.0, 0.0);
        SoundPlayOnUnitForPlayer(SoundLink("UI_Game_LevelUp_Enemy", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupEnemy, lv_player), lp_hero, 8.0, 100.0, 0.0);
        lv_itTalentTier = 1;
        for ( ; ( (auto00AF27DA_ai >= 0 && lv_itTalentTier <= auto00AF27DA_ae) || (auto00AF27DA_ai < 0 && lv_itTalentTier >= auto00AF27DA_ae) ) ; lv_itTalentTier += auto00AF27DA_ai ) {
            if ((lv_level == libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTalentTier])) {
                libGame_gv_players[lv_player].lv_talentPoints += 1;
                SoundPlayOnUnitForPlayer(SoundLink("UI_Game_LevelUp_Talent", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], lp_hero, 8.0, 100.0, 0.0);
                break;
            }

        }
    }

    libGame_gf_TalentChoicesUpdateChoicePanelForPlayer(lv_player);
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsAvailabilityOfPlayer(lv_player);
}

void libGame_gf_LevelUpAddLevelEffectForPlayer (int lp_level, int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lp_level] != null)) {
        PlayerCreateEffectUnit(lp_player, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lp_level], libGame_gv_players[lp_player].lv_heroUnit);
    }

}

void libGame_gf_LevelUpRemoveLevelEffectsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itLevel;
    int lv_itArray;
    int lv_maxArrayValue;
    string lv_reference;

    // Automatic Variable Declarations
    const int auto4328D879_ae = libCore_gv_bALMaxLevel;
    const int auto4328D879_ai = 1;
    int autoE2A61E7D_ae;
    const int autoE2A61E7D_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_reference = "";

    // Implementation
    lv_itLevel = 1;
    for ( ; ( (auto4328D879_ai >= 0 && lv_itLevel <= auto4328D879_ae) || (auto4328D879_ai < 0 && lv_itLevel >= auto4328D879_ae) ) ; lv_itLevel += auto4328D879_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel] != null) && (CatalogEntryScope(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel]) == "CEffectModifyPlayer")) {
            lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel], "EffectArray", c_playerAny);
            if ((lv_maxArrayValue > 0)) {
                autoE2A61E7D_ae = (lv_maxArrayValue-1);
                lv_itArray = 0;
                for ( ; ( (autoE2A61E7D_ai >= 0 && lv_itArray <= autoE2A61E7D_ae) || (autoE2A61E7D_ai < 0 && lv_itArray >= autoE2A61E7D_ae) ) ; lv_itArray += autoE2A61E7D_ai ) {
                    lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel], "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                    CatalogReferenceSet(((lv_reference)), lp_player, CatalogReferenceGet((lv_reference), libCore_gv_cOMPUTER_Neutral));
                }
            }

        }

    }
}

void libGame_gf_LoadoutNameUpdateNameOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_player, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    if ((StringLength(lp_name) > libGame_gv_loadoutMaximumCharsInName)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = StringToText(StringSub(lp_name, 1, libGame_gv_loadoutMaximumCharsInName));
        libGame_gf_LoadoutNameStoreLoadNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
    else if ((StringLength(lp_name) <= 0)) {
        libGame_gf_LoadoutNameLoadDefaultNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
    else if (true) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = StringToText(lp_name);
        libGame_gf_LoadoutNameStoreLoadNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
}

void libGame_gf_LoadoutNameLoadNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout) {
    // Variable Declarations
    bank lv_heroBank;
    string lv_bankSection;
    string lv_bankKey;
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;
    lv_bankSection = ("LoadoutArray" + IntToString(lp_loadout));
    lv_bankKey = "Name";
    lv_name = "";

    // Implementation
    if ((BankKeyExists(lv_heroBank, lv_bankSection, lv_bankKey) == false)) {
        libGame_gf_LoadoutNameLoadDefaultNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
        return ;
    }
    else {
        lv_name = libCore_gf_ConvertTextToString(BankValueGetAsText(lv_heroBank, lv_bankSection, lv_bankKey));
    }
    if ((StringLength(lv_name) > libGame_gv_loadoutMaximumCharsInName)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = StringToText(StringSub(lv_name, 1, libGame_gv_loadoutMaximumCharsInName));
        libGame_gf_LoadoutNameStoreLoadNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
    else if ((StringLength(lv_name) <= 0)) {
        libGame_gf_LoadoutNameLoadDefaultNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }
    else if (true) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = StringToText(lv_name);
    }
}

void libGame_gf_LoadoutNameLoadDefaultNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout) {
    // Variable Declarations
    text lv_defaultName;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_defaultName = StringExternal("UI/HeroSelectPanel/Loadout/DefaultName");
    libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout] = lv_defaultName;
    libGame_gf_LoadoutNameStoreLoadNameForPlayer(lp_heroIndex, lp_player, lp_loadout);
}

void libGame_gf_LoadoutNameStoreLoadNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout) {
    // Variable Declarations
    bank lv_heroBank;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;

    // Implementation
    BankValueSetFromText(lv_heroBank, ("LoadoutArray" + IntToString(lp_loadout)), "Name", libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutName[lp_loadout]);
    BankSave(lv_heroBank);
}

void libGame_gf_LoadoutVariationUpdateVariationOfHeroForPlayer (int lp_heroIndex, int lp_loadoutVariation, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gf_LoadoutVariationStoreVariationOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadoutVariation);
    libGame_gf_LoadoutVariationLoadVariationOfHeroForPlayer(lp_heroIndex, lp_player, true);
}

void libGame_gf_LoadoutVariationLoadVariationOfHeroForPlayer (int lp_heroIndex, int lp_player, bool lp_displayErrorMessage) {
    // Variable Declarations
    bank lv_heroBank;
    bool lv_invalidVariationFounded;
    string lv_bankSection;
    string lv_bankKey;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;
    lv_bankSection = "DefaultSettings";
    lv_bankKey = "ChoosenVariation";

    // Implementation
    if ((BankKeyExists(lv_heroBank, lv_bankSection, lv_bankKey) == false)) {
        libGame_gf_LoadoutVariationLoadDefaultVariationOfHeroForPlayer(lp_heroIndex, lp_player);
        return ;
    }
    else {
        lv_variation = BankValueGetAsInt(lv_heroBank, lv_bankSection, lv_bankKey);
    }
    if ((lv_variation > 0) && (lv_variation <= libGame_gv_loadoutMaximumLoadoutsPerHero)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutVariation = lv_variation;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_DBDEC6BC", "A", libGame_gv_players[lp_player].lv_playerName);
        TextExpressionSetToken("Param/Expression/lib_Game_DBDEC6BC", "B", IntToText(lv_variation));
        TextExpressionSetToken("Param/Expression/lib_Game_DBDEC6BC", "C", libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_name);
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_DBDEC6BC"), lp_displayErrorMessage);
        lv_invalidVariationFounded = true;
    }
    if ((lv_invalidVariationFounded == true)) {
        libGame_gf_LoadoutVariationLoadDefaultVariationOfHeroForPlayer(lp_heroIndex, lp_player);
    }

}

void libGame_gf_LoadoutVariationLoadDefaultVariationOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_defaultVariationIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_defaultVariationIndex = 1;
    libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutVariation = lv_defaultVariationIndex;
    libGame_gf_LoadoutVariationStoreVariationOfHeroForPlayer(lp_heroIndex, lp_player, lv_defaultVariationIndex);
}

void libGame_gf_LoadoutVariationStoreVariationOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_variation) {
    // Variable Declarations
    bank lv_heroBank;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;

    // Implementation
    BankValueSetFromInt(lv_heroBank, "DefaultSettings", "ChoosenVariation", lp_variation);
    BankSave(lv_heroBank);
}

void libGame_gf_LoadoutSkinsUpdateSkinOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_skin, int lp_player, bool lp_resetOnAccessError) {
    // Automatic Variable Declarations
    // Implementation
    if ((libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lp_skin) == true) && (libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lp_skin) == true)) {
        libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer(lp_heroIndex, lp_player, lp_skin, lp_loadout);
        libGame_gf_LoadoutSkinsLoadSkinOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadout, true);
    }
    else {
        if ((lp_resetOnAccessError == true)) {
            libGame_gf_LoadoutSkinsLoadDefaultSkinOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadout);
        }

    }
}

void libGame_gf_LoadoutSkinsLoadSkinOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_loadout, bool lp_displayErrorMessage) {
    // Variable Declarations
    int lv_skinIndex;
    string lv_skinIDPersonal;
    bool lv_invalidSkinFounded;
    bank lv_heroBank;
    string lv_bankSection;
    string lv_bankKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_skinIDPersonal = "";
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;
    lv_bankSection = ("LoadoutArray" + IntToString(lp_loadout));
    lv_bankKey = "Skin";

    // Implementation
    if ((BankKeyExists(lv_heroBank, lv_bankSection, lv_bankKey) == false)) {
        libGame_gf_LoadoutSkinsLoadDefaultSkinOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadout);
        return ;
    }
    else {
        lv_skinIDPersonal = BankValueGetAsString(lv_heroBank, lv_bankSection, lv_bankKey);
        lv_skinIndex = libCore_gf_DataSkinsFindSkinWithSkinIDPersonal(lv_skinIDPersonal);
    }
    if ((lv_skinIndex > 0)) {
        if ((libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex) == true) && (libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Skin, lv_skinIndex) == true)) {
            if ((lv_skinIndex != libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutSkinItem[lp_loadout])) {
                libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutSkinItem[lp_loadout] = lv_skinIndex;
                libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer(lp_heroIndex, lp_player, lv_skinIndex, lp_loadout);
            }

        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_233BEE8B", "A", libGame_gv_players[lp_player].lv_playerName);
            TextExpressionSetToken("Param/Expression/lib_Game_233BEE8B", "B", StringToText(lv_skinIDPersonal));
            TextExpressionSetToken("Param/Expression/lib_Game_233BEE8B", "C", libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_Game_233BEE8B", "D", IntToText(lp_loadout));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_233BEE8B"), false);
            lv_invalidSkinFounded = true;
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_FB1C4ACA", "A", libGame_gv_players[lp_player].lv_playerName);
        TextExpressionSetToken("Param/Expression/lib_Game_FB1C4ACA", "B", StringToText(lv_skinIDPersonal));
        TextExpressionSetToken("Param/Expression/lib_Game_FB1C4ACA", "C", libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_name);
        TextExpressionSetToken("Param/Expression/lib_Game_FB1C4ACA", "D", IntToText(lp_loadout));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_FB1C4ACA"), lp_displayErrorMessage);
        lv_invalidSkinFounded = true;
    }
    if ((lv_invalidSkinFounded == true)) {
        libGame_gf_LoadoutSkinsLoadDefaultSkinOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }

}

void libGame_gf_LoadoutSkinsLoadDefaultSkinOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_loadout) {
    // Variable Declarations
    int lv_selectedLoadoutSkinIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_selectedLoadoutSkinIndex = libCore_gf_DataHeroesDefaultSkinIndexOfHero(lp_heroIndex);
    libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutSkinItem[lp_loadout] = lv_selectedLoadoutSkinIndex;
    libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer(lp_heroIndex, lp_player, lv_selectedLoadoutSkinIndex, lp_loadout);
}

void libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_skinIndex, int lp_loadout) {
    // Variable Declarations
    bank lv_heroBank;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;

    // Implementation
    BankValueSetFromString(lv_heroBank, ("LoadoutArray" + IntToString(lp_loadout)), "Skin", libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinIDPersonal);
    BankSave(lv_heroBank);
}

void libGame_gf_LoadoutMountsUpdateMountOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_mount, int lp_player, bool lp_resetOnFalse) {
    // Automatic Variable Declarations
    // Implementation
    if ((libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lp_mount) == true) && (libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lp_mount) == true)) {
        libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer(lp_heroIndex, lp_player, lp_mount, lp_loadout);
        libGame_gf_LoadoutMountsLoadMountOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadout, true);
    }
    else {
        if ((lp_resetOnFalse == true)) {
            libGame_gf_LoadoutMountsLoadDefaultMountOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadout);
        }

    }
}

void libGame_gf_LoadoutMountsLoadMountOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_loadout, bool lp_displayErrorMessage) {
    // Variable Declarations
    int lv_mountIndex;
    string lv_mountIDPersonal;
    bool lv_invalidMountFounded;
    bank lv_heroBank;
    string lv_bankSection;
    string lv_bankKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountIDPersonal = "";
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;
    lv_bankSection = ("LoadoutArray" + IntToString(lp_loadout));
    lv_bankKey = "Mount";

    // Implementation
    if ((BankKeyExists(lv_heroBank, lv_bankSection, lv_bankKey) == false)) {
        libGame_gf_LoadoutMountsLoadDefaultMountOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadout);
        return ;
    }
    else {
        lv_mountIDPersonal = BankValueGetAsString(lv_heroBank, lv_bankSection, lv_bankKey);
        lv_mountIndex = libCore_gf_DataMountsFindMountWithMountIDPersonal(lv_mountIDPersonal);
    }
    if ((lv_mountIndex > 0)) {
        if ((libMeta_gf_MetaDataIngameElementVisibleForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex) == true) && (libMeta_gf_MetaDataIngameElementAccessedForPlayer(lp_player, libMeta_ge_MetaDataLoadoutType_Mount, lv_mountIndex) == true)) {
            if ((lv_mountIndex != libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutMountItem[lp_loadout])) {
                libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutMountItem[lp_loadout] = lv_mountIndex;
                libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer(lp_heroIndex, lp_player, lv_mountIndex, lp_loadout);
            }

        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_129C56CA", "A", libGame_gv_players[lp_player].lv_playerName);
            TextExpressionSetToken("Param/Expression/lib_Game_129C56CA", "B", StringToText(lv_mountIDPersonal));
            TextExpressionSetToken("Param/Expression/lib_Game_129C56CA", "C", libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_Game_129C56CA", "D", IntToText(lp_loadout));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_129C56CA"), false);
            lv_invalidMountFounded = true;
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_2C1F9891", "A", libGame_gv_players[lp_player].lv_playerName);
        TextExpressionSetToken("Param/Expression/lib_Game_2C1F9891", "B", StringToText(lv_mountIDPersonal));
        TextExpressionSetToken("Param/Expression/lib_Game_2C1F9891", "C", libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_name);
        TextExpressionSetToken("Param/Expression/lib_Game_2C1F9891", "D", IntToText(lp_loadout));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_2C1F9891"), lp_displayErrorMessage);
        lv_invalidMountFounded = true;
    }
    if ((lv_invalidMountFounded == true)) {
        libGame_gf_LoadoutMountsLoadDefaultMountOfHeroForPlayer(lp_heroIndex, lp_player, lp_loadout);
    }

}

void libGame_gf_LoadoutMountsLoadDefaultMountOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_loadout) {
    // Variable Declarations
    int lv_selectedLoadoutMountIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_selectedLoadoutMountIndex = libCore_gf_DataHeroesDefaultMountIndexOfHero(lp_heroIndex);
    libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_loadoutMountItem[lp_loadout] = lv_selectedLoadoutMountIndex;
    libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer(lp_heroIndex, lp_player, lv_selectedLoadoutMountIndex, lp_loadout);
}

void libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_mountIndex, int lp_loadout) {
    // Variable Declarations
    bank lv_heroBank;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;

    // Implementation
    BankValueSetFromString(lv_heroBank, ("LoadoutArray" + IntToString(lp_loadout)), "Mount", libCore_gv_dataMountsMountData[lp_mountIndex].lv_mountIDPersonal);
    BankSave(lv_heroBank);
}

int libGame_gf_LoadoutGetPlayerVariation (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;
}

int libGame_gf_LoadoutGetPlayerSkin (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_variation = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutSkinItem[lv_variation];
}

int libGame_gf_LoadoutGetPlayerMount (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_variation = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutVariation;

    // Implementation
    return libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_loadoutMountItem[lv_variation];
}

bool libGame_gf_MinionSystemStarted () {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_minionSystemStarted;
}

void libGame_gf_MinionTurnOnOffCatapults (bool lp_onOff) {
    // Automatic Variable Declarations
    bool autoE8158F53_val;

    // Implementation
    autoE8158F53_val = lp_onOff;
    if (autoE8158F53_val == true) {
        libGame_gv_minionMapNeverSpawnsCatapults = false;
    }
    else if (autoE8158F53_val == false) {
        libGame_gv_minionMapNeverSpawnsCatapults = true;
    }
    else {
    }
}

void libGame_gf_MinionStartStopMinionSystem (bool lp_startStop) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_startStop == true)) {
        if ((libCore_gv_sYSMinionAI == false)) {
            return ;
        }

        if ((libGame_gv_minionSystemStarted == false)) {
            libGame_gv_minionSystemStarted = true;
            libGame_gv_minionSystemPaused = false;
            libAIAI_gf_MinionAITurnMinionAISystemOnOff(true);
        }

    }
    else {
        libGame_gv_minionSystemStarted = false;
        libGame_gf_MinionStartStopMinionSpawnCycle(false);
        libAIAI_gf_MinionAITurnMinionAISystemOnOff(false);
    }
}

void libGame_gf_MinionStartStopMinionSpawnCycle (bool lp_startStop) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_startStop == true)) {
        TriggerExecute(libGame_gt_MinionSpawnCycle, true, false);
    }
    else {
        TriggerStop(libGame_gt_MinionSpawnCycle);
    }
}

void libGame_gf_MinionPauseUnpauseMinionSystem (bool lp_pauseUnpause) {
    // Variable Declarations
    int lv_in;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gv_minionSystemStarted == true)) {
        if ((lp_pauseUnpause == true)) {
            libGame_gv_minionSystemPaused = true;
            libGame_gv_minionSpawningEnabled = false;
            TimerPause(libGame_gv_scalingTimer, true);
            libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(true);
        }
        else {
            libGame_gv_minionSystemPaused = false;
            libGame_gv_minionSpawningEnabled = true;
            if ((libGame_gv_minionScalingEnabled == true)) {
                TimerPause(libGame_gv_scalingTimer, false);
            }

            libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(false);
        }
    }

}

void libGame_gf_MinionSpawnMinion (int lp_lane, int lp_owner, int lp_type, point lp_spawnPoint) {
    // Variable Declarations
    int lv_team;
    int lv_bruiserLevel;
    string lv_spawnUnitType;
    bool lv_prefersStructures;

    // Automatic Variable Declarations
    int autoFF6DD103_val;

    // Variable Initialization

    // Implementation
    if (((libCore_gv_gameOver == true) || (libGame_gv_minionSpawningEnabled == false))) {
        return ;
    }

    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    lv_spawnUnitType = libCore_gf_DataMinionUnitTypeFromPreset(lp_type, lv_team);
    if ((lv_spawnUnitType == null)) {
        return ;
    }

    if ((lp_type == libCore_ge_MinionType_Catapult) && ((libGame_gv_minionMapNeverSpawnsCatapults == true) || (libGame_gf_TownsAliveinLane(libGame_gf_EnemyTeamNumberOfTeam(lv_team), lp_lane) >= 2) || ((libGame_gf_TownsAliveinLane(libGame_gf_EnemyTeamNumberOfTeam(lv_team), lp_lane) == 1) && (ModI((libGame_gv_minionWaveSpawnCounter - libGame_gv_minionPeriodicCatapultsFirstWave), libGame_gv_minionPeriodicCatapultsWavePeriod_C) != 0)))) {
        return ;
    }

    if ((lp_type == libCore_ge_MinionType_Catapult)) {
        lv_prefersStructures = true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, lv_spawnUnitType, 0, lp_owner, lp_spawnPoint, libGame_gv_laneData[lp_lane].lv_waypoints[4]);
    if ((libGame_gv_minionScalingEnabled == true)) {
        libGame_gf_UpdateScalingForUnit(UnitLastCreated(), libGame_gv_scalingTicks, 0);
    }

    libGame_gf_CalculateSpawnedMinionGoalPoints(lp_owner, lp_spawnPoint);
    libAIAI_gf_MinionAIStartMinionAI(-1, UnitLastCreated(), lp_lane, libGame_gv_spawnedMinionFirstWaypointIndex, false, 0, lv_prefersStructures);
    autoFF6DD103_val = libCore_gv_mAPCurrentMap;
    {
    }
}

trigger auto_libGame_gf_MinionSpawnWave_Trigger = null;
int auto_libGame_gf_MinionSpawnWave_lp_lane;
int auto_libGame_gf_MinionSpawnWave_lp_owner;

void libGame_gf_MinionSpawnWave (int lp_lane, int lp_owner) {
    auto_libGame_gf_MinionSpawnWave_lp_lane = lp_lane;
    auto_libGame_gf_MinionSpawnWave_lp_owner = lp_owner;

    if (auto_libGame_gf_MinionSpawnWave_Trigger == null) {
        auto_libGame_gf_MinionSpawnWave_Trigger = TriggerCreate("auto_libGame_gf_MinionSpawnWave_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_MinionSpawnWave_Trigger, false, false);
}

bool auto_libGame_gf_MinionSpawnWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_lane = auto_libGame_gf_MinionSpawnWave_lp_lane;
    int lp_owner = auto_libGame_gf_MinionSpawnWave_lp_owner;

    // Variable Declarations
    const fixed lv_offsetChangePerGroup = 1.875;
    int lv_itGroup;
    int lv_itMinion;
    int lv_groupCount;
    point lv_basePoint;
    point lv_offsetPoint;
    fixed lv_currentOffsetAmount;
    point lv_spawnPoint;
    int lv_team;
    int lv_minionType;

    // Automatic Variable Declarations
    int auto691059B0_ae;
    const int auto691059B0_ai = 1;
    int auto42D45D0C_ae;
    const int auto42D45D0C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_groupCount = libCore_gv_dataMinionWaveCompositionMaxGroupCount;
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_basePoint = libGame_gv_laneData[lp_lane].lv_waypoints[2];
        lv_offsetPoint = libGame_gv_laneData[lp_lane].lv_waypoints[3];
        lv_team = libGame_gv_teamOrderIndex_C;
    }

    lv_currentOffsetAmount = ((lv_groupCount - 1) * lv_offsetChangePerGroup);
    if ((lp_owner == libCore_gv_cOMPUTER_TeamChaos)) {
        lv_basePoint = libGame_gv_laneData[lp_lane].lv_waypoints[(libGame_gv_laneData[lp_lane].lv_waypointCount - 1)];
        lv_offsetPoint = libGame_gv_laneData[lp_lane].lv_waypoints[(libGame_gv_laneData[lp_lane].lv_waypointCount - 2)];
        lv_team = libGame_gv_teamChaosIndex_C;
    }

    if ((lv_basePoint == null)) {
        return true;
    }

    Wait(libCore_gv_bALMinionTeamSpawnDelay[lv_team], c_timeGame);
    Wait(libGame_gv_laneData[lp_lane].lv_spawnDelay, c_timeGame);
    auto691059B0_ae = lv_groupCount;
    lv_itGroup = 1;
    for ( ; ( (auto691059B0_ai >= 0 && lv_itGroup <= auto691059B0_ae) || (auto691059B0_ai < 0 && lv_itGroup >= auto691059B0_ae) ) ; lv_itGroup += auto691059B0_ai ) {
        lv_minionType = libCore_gv_dataMinionWaveComposition[lv_team].lv_groupMinionType[lv_itGroup];
        lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_basePoint, lv_currentOffsetAmount, lv_offsetPoint);
        auto42D45D0C_ae = libCore_gv_dataMinionWaveComposition[lv_team].lv_groupMinionCount[lv_itGroup];
        lv_itMinion = 1;
        for ( ; ( (auto42D45D0C_ai >= 0 && lv_itMinion <= auto42D45D0C_ae) || (auto42D45D0C_ai < 0 && lv_itMinion >= auto42D45D0C_ae) ) ; lv_itMinion += auto42D45D0C_ai ) {
            libGame_gf_MinionSpawnMinion(lp_lane, lp_owner, lv_minionType, lv_spawnPoint);
        }
        lv_currentOffsetAmount -= lv_offsetChangePerGroup;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libGame_gf_MinionTurnMinionScalingOnOff (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libGame_gv_minionScalingEnabled = true;
        TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    }
    else {
        libGame_gv_minionScalingEnabled = false;
        TimerPause(libGame_gv_scalingTimer, true);
    }
}

void libGame_gf_MinionPauseUnpauseMinionScaling (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_minionScalingEnabled == true)) {
        if ((lp_pauseUnpause == false)) {
            TimerPause(libGame_gv_scalingTimer, false);
        }
        else {
            TimerPause(libGame_gv_scalingTimer, true);
        }
    }

}

point libGame_gf_ClampSpawnedMinionPointsAgainstEnemyTowers (int lp_player, point lp_minPoint, point lp_maxPoint) {
    // Variable Declarations
    fixed lv_midX;
    fixed lv_midY;
    point lv_midPoint;
    fixed lv_searchDist;
    region lv_enemyRegion;
    int lv_loopIndex;
    unit lv_curUnit;

    // Automatic Variable Declarations
    int auto997BA8E6_ae;
    const int auto997BA8E6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_midX = ((PointGetX(lp_minPoint) + PointGetX(lp_maxPoint)) * 0.5);
    lv_midY = ((PointGetY(lp_minPoint) + PointGetY(lp_maxPoint)) * 0.5);
    lv_midPoint = Point(lv_midX, lv_midY);
    lv_searchDist = DistanceBetweenPoints(lv_midPoint, lp_maxPoint);
    lv_enemyRegion = RegionEmpty();
    RegionAddCircle(lv_enemyRegion, true, lv_midPoint, lv_searchDist);
    auto997BA8E6_ae = libAIAI_gv_towerTowerCount;
    lv_loopIndex = 1;
    for ( ; ( (auto997BA8E6_ai >= 0 && lv_loopIndex <= auto997BA8E6_ae) || (auto997BA8E6_ai < 0 && lv_loopIndex >= auto997BA8E6_ae) ) ; lv_loopIndex += auto997BA8E6_ai ) {
        lv_curUnit = libAIAI_gv_towerTowers[lv_loopIndex].lv_towerUnit;
        if ((UnitIsAlive(lv_curUnit) == true)) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_curUnit), lp_player, libNtve_ge_PlayerRelation_Enemy) == true)) {
                if ((RegionContainsPoint(lv_enemyRegion, UnitGetPosition(lv_curUnit)) == true)) {
                    return UnitGetPosition(lv_curUnit);
                }

            }

        }

    }
    return lp_maxPoint;
}

void libGame_gf_CalculateSpawnedMinionGoalPoints (int lp_ownerPlayer, point lp_positionofSpawner) {
    // Automatic Variable Declarations
    // Implementation
    if (((libGame_gv_laneCount <= 0) || (lp_positionofSpawner == null) || (lp_ownerPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        libGame_gv_spawnedMinionLane = 0;
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    libGame_gf_CalculateClosestLaneData(lp_positionofSpawner);
    libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData(lp_ownerPlayer);
}

void libGame_gf_CalculateSpawnedMinionGoalPointsFromLane (int lp_ownerPlayer, point lp_positionofSpawner, int lp_lane) {
    // Automatic Variable Declarations
    // Implementation
    if (((libGame_gv_laneCount <= 0) || (lp_positionofSpawner == null) || (lp_ownerPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        libGame_gv_spawnedMinionLane = 0;
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    libGame_gv_closestLaneData.lv_closestLane = lp_lane;
    libGame_gf_CalculateClosestLaneDataForLane(lp_positionofSpawner, lp_lane);
    libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData(lp_ownerPlayer);
}

void libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData (int lp_ownerPlayer) {
    // Variable Declarations
    int lv_closestIndex;
    int lv_secondaryIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_spawnedMinionLane = libGame_gv_closestLaneData.lv_closestLane;
    if (((libGame_gv_spawnedMinionLane == 0) || (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount < 1))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_BB9C2CEB"), true);
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[libGame_gv_spawnedMinionLane].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[libGame_gv_spawnedMinionLane].lv_secondaryIndex;
    if ((libGame_gv_players[lp_ownerPlayer].lv_faction == libGame_ge_Faction_Order)) {
        libGame_gv_spawnedMinionFirstWaypointIndex = MaxI(lv_closestIndex, lv_secondaryIndex);
        if ((libCore_gv_mAPUsesCirclingAI == false)) {
            if ((libGame_gv_spawnedMinionFirstWaypointIndex >= libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount)) {
                libGame_gv_spawnedMinionFirstWaypointIndex = (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount - 1);
            }

        }
        else {
            while ((libGame_gv_spawnedMinionFirstWaypointIndex >= (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount - libCore_gv_mAPPathNodesBeforeLooping))) {
                libGame_gv_spawnedMinionFirstWaypointIndex -= 1;
            }
        }
    }
    else {
        libGame_gv_spawnedMinionFirstWaypointIndex = MinI(lv_closestIndex, lv_secondaryIndex);
        if ((libCore_gv_mAPUsesCirclingAI == false)) {
            if ((libGame_gv_spawnedMinionFirstWaypointIndex <= 1)) {
                libGame_gv_spawnedMinionFirstWaypointIndex = 2;
            }

        }
        else {
            while ((libGame_gv_spawnedMinionFirstWaypointIndex <= libCore_gv_mAPPathNodesBeforeLooping)) {
                libGame_gv_spawnedMinionFirstWaypointIndex += 1;
            }
        }
    }
}

void libGame_gf_ApplyMountBehaviorToHero (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gv_dataHeroesHeroData[libCore_gf_HeroIndexOfUnit(lp_hero)].lv_usesMount == true)) {
        UnitBehaviorAdd(lp_hero, "HeroGenericMount@Mounted", lp_hero, 1);
    }

}

void libGame_gf_SendMountActorMessagesToActor (int lp_mountIndex, actor lp_actor) {
    // Variable Declarations
    string lv_mountMacro;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountMacro = (libCore_gv_dataMountsMountData[lp_mountIndex].lv_creationActorMessageMacro);

    // Implementation
    ActorSend(lp_actor, (("EventMacroRun " + lv_mountMacro)));
}

bool libGame_gf_MountEnabled (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitAbilityCheck(lp_hero, "HeroGenericMount", true) == true))) {
        return true;
    }

    return false;
}

trigger auto_libGame_gf_BuildingDiesCameraShake_Trigger = null;
fixed auto_libGame_gf_BuildingDiesCameraShake_lp_delay;
string auto_libGame_gf_BuildingDiesCameraShake_lp_intensity;
playergroup auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup;

void libGame_gf_BuildingDiesCameraShake (fixed lp_delay, string lp_intensity, playergroup lp_playerGroup) {
    auto_libGame_gf_BuildingDiesCameraShake_lp_delay = lp_delay;
    auto_libGame_gf_BuildingDiesCameraShake_lp_intensity = lp_intensity;
    auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup = lp_playerGroup;

    if (auto_libGame_gf_BuildingDiesCameraShake_Trigger == null) {
        auto_libGame_gf_BuildingDiesCameraShake_Trigger = TriggerCreate("auto_libGame_gf_BuildingDiesCameraShake_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_BuildingDiesCameraShake_Trigger, false, false);
}

bool auto_libGame_gf_BuildingDiesCameraShake_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_libGame_gf_BuildingDiesCameraShake_lp_delay;
    string lp_intensity = auto_libGame_gf_BuildingDiesCameraShake_lp_intensity;
    playergroup lp_playerGroup = auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup;

    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoA58721C2_g;

    // Variable Initialization

    // Implementation
    Wait(lp_delay, c_timeGame);
    autoA58721C2_g = lp_playerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoA58721C2_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        CameraShake(lv_itPlayer, lp_intensity, "Shake", 0.1, 0.4, 0.5);
    }
    return true;
}

int libGame_gf_TownsAliveinLane (int lp_team, int lp_lane) {
    // Variable Declarations
    int lv_townCount;
    int lv_itTown;

    // Automatic Variable Declarations
    int autoCD91ABB2_ae;
    const int autoCD91ABB2_ai = 1;

    // Variable Initialization

    // Implementation
    autoCD91ABB2_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoCD91ABB2_ai >= 0 && lv_itTown <= autoCD91ABB2_ae) || (autoCD91ABB2_ai < 0 && lv_itTown >= autoCD91ABB2_ae) ) ; lv_itTown += autoCD91ABB2_ai ) {
        if ((libGame_gv_townTownData[lv_itTown].lv_owner == libGame_gf_ComputerPlayerInTeam(lp_team)) && (libGame_gv_townTownData[lv_itTown].lv_lane == lp_lane) && (libGame_gv_townTownData[lv_itTown].lv_townHallIndex > 0) && (libGame_gf_TownTownHallIsAlive(lv_itTown) == true)) {
            lv_townCount += 1;
        }

    }
    return lv_townCount;
}

bool libGame_gf_TownAliveInLane (int lp_team, int lp_lane) {
    // Variable Declarations
    int lv_itTown;

    // Automatic Variable Declarations
    int autoF615D6C3_ae;
    const int autoF615D6C3_ai = 1;

    // Variable Initialization

    // Implementation
    autoF615D6C3_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoF615D6C3_ai >= 0 && lv_itTown <= autoF615D6C3_ae) || (autoF615D6C3_ai < 0 && lv_itTown >= autoF615D6C3_ae) ) ; lv_itTown += autoF615D6C3_ai ) {
        if ((libGame_gv_townTownData[lv_itTown].lv_owner == libGame_gv_teams[lp_team].lv_nPCPlayer) && (libGame_gv_townTownData[lv_itTown].lv_lane == lp_lane) && (libGame_gv_townTownData[lv_itTown].lv_townHallIndex > 0) && (libGame_gf_TownTownHallIsAlive(lv_itTown) == true)) {
            return true;
        }

    }
    return false;
}

bool libGame_gf_AllTownDeadInLane (int lp_team, int lp_lane) {
    // Variable Declarations
    int lv_itTown;

    // Automatic Variable Declarations
    int autoAC353D60_ae;
    const int autoAC353D60_ai = 1;

    // Variable Initialization

    // Implementation
    autoAC353D60_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoAC353D60_ai >= 0 && lv_itTown <= autoAC353D60_ae) || (autoAC353D60_ai < 0 && lv_itTown >= autoAC353D60_ae) ) ; lv_itTown += autoAC353D60_ai ) {
        if ((libGame_gv_townTownData[lv_itTown].lv_owner == libGame_gv_teams[lp_team].lv_nPCPlayer) && (libGame_gv_townTownData[lv_itTown].lv_lane == lp_lane) && (libGame_gv_townTownData[lv_itTown].lv_townHallIndex > 0) && (libGame_gf_TownTownHallIsAlive(lv_itTown) == true)) {
            return false;
        }

    }
    return true;
}

trigger auto_libGame_gf_AwardXPForNPCKill_Trigger = null;
unit auto_libGame_gf_AwardXPForNPCKill_lp_killedUnit;
int auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitPlayer;
int auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitClassification;
int auto_libGame_gf_AwardXPForNPCKill_lp_killingPlayer;
fixed auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitXPAward;

void libGame_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer, fixed lp_killedUnitXPAward) {
    auto_libGame_gf_AwardXPForNPCKill_lp_killedUnit = lp_killedUnit;
    auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitPlayer = lp_killedUnitPlayer;
    auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitClassification = lp_killedUnitClassification;
    auto_libGame_gf_AwardXPForNPCKill_lp_killingPlayer = lp_killingPlayer;
    auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitXPAward = lp_killedUnitXPAward;

    if (auto_libGame_gf_AwardXPForNPCKill_Trigger == null) {
        auto_libGame_gf_AwardXPForNPCKill_Trigger = TriggerCreate("auto_libGame_gf_AwardXPForNPCKill_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_AwardXPForNPCKill_Trigger, false, false);
}

bool auto_libGame_gf_AwardXPForNPCKill_TriggerFunc (bool testConds, bool runActions) {
    unit lp_killedUnit = auto_libGame_gf_AwardXPForNPCKill_lp_killedUnit;
    int lp_killedUnitPlayer = auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitPlayer;
    int lp_killedUnitClassification = auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitClassification;
    int lp_killingPlayer = auto_libGame_gf_AwardXPForNPCKill_lp_killingPlayer;
    fixed lp_killedUnitXPAward = auto_libGame_gf_AwardXPForNPCKill_lp_killedUnitXPAward;

    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    int lv_itTeamPlayer;
    unit lv_itAlliedUnit;
    int lv_itLeaderboardViewingPlayer;
    int lv_creditPlayer;
    fixed lv_xPValue;
    unitgroup lv_nearbyUnits;
    unitgroup lv_nearbyUnitsAlliedToKilledUnit;
    playergroup lv_killCreditGroup;
    playergroup lv_xPAwardGroup;
    int lv_xPSource;

    // Automatic Variable Declarations
    unitgroup autoFAF72CA0_g;
    int autoFAF72CA0_u;
    unitgroup auto74351308_g;
    int auto74351308_u;
    playergroup auto12F1725F_g;
    playergroup autoE88E6323_g;
    playergroup autoD781FCE8_g;
    playergroup autoEB0614A8_g;
    playergroup autoE158BE37_g;
    int auto714D442F_val;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_nearbyUnitsAlliedToKilledUnit = UnitGroupEmpty();
    lv_killCreditGroup = PlayerGroupEmpty();
    lv_xPAwardGroup = PlayerGroupEmpty();

    // Implementation
    if ((libCore_gv_sYSXPOn == false)) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lp_killingPlayer) == true)) {
        lv_nearbyUnits = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_nearbyUnitsAlliedToKilledUnit = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFAF72CA0_g = lv_nearbyUnitsAlliedToKilledUnit;
        autoFAF72CA0_u = UnitGroupCount(autoFAF72CA0_g, c_unitCountAll);
        for (;; autoFAF72CA0_u -= 1) {
            lv_itAlliedUnit = UnitGroupUnitFromEnd(autoFAF72CA0_g, autoFAF72CA0_u);
            if (lv_itAlliedUnit == null) { break; }
            libGame_gf_SendEventHeroWitnessedAlliedNPCDeath(UnitGetOwner(lv_itAlliedUnit), lp_killedUnit);
        }
    }
    else {
        if ((lp_killedUnitPlayer != libCore_gv_cOMPUTER_Hostile)) {
            lv_nearbyUnits = UnitGroupSearch(null, lp_killedUnitPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
            if ((lp_killedUnitXPAward > 0.0) && (UnitHasBehavior2(lp_killedUnit, "UnitGivesNoXP") == false)) {
                TextExpressionSetToken("Param/Expression/lib_Game_6D5F86AA", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
                TextExpressionSetToken("Param/Expression/lib_Game_6D5F86AA", "B", IntToText(lp_killedUnitPlayer));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_6D5F86AA"), true);
                return true;
            }

        }
    }
    auto74351308_g = lv_nearbyUnits;
    auto74351308_u = UnitGroupCount(auto74351308_g, c_unitCountAll);
    for (;; auto74351308_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto74351308_g, auto74351308_u);
        if (lv_itUnit == null) { break; }
        if ((UnitHasBehavior2(lv_itUnit, "SpecialCaseNPCTakedownParticipant") == true) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_itUnit), UnitGetOwner(lp_killedUnit), libNtve_ge_PlayerRelation_Enemy) == true)) {
            libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown(UnitGetOwner(lv_itUnit), lp_killedUnit);
        }

        if (((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true) || ((UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeHeroic) == true) && (UnitHasBehavior2(lv_itUnit, "HeroAbathurUltimateEvolution@VehicleCasterBehavior") == false) && (UnitTestState(lv_itUnit, c_unitStateHallucination) == false)))) {
            lv_creditPlayer = UnitGetOwner(lv_itUnit);
            if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lv_creditPlayer) == true)) {
                PlayerGroupAdd(lv_killCreditGroup, lv_creditPlayer);
            }

        }

    }
    if ((libGame_gf_PlayerIsHeroPlayer(lp_killingPlayer) == true)) {
        PlayerGroupAdd(lv_killCreditGroup, lp_killingPlayer);
    }

    if ((PlayerGroupCount(lv_killCreditGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == false)) {
        return true;
    }

    auto12F1725F_g = lv_killCreditGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto12F1725F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_SendEventHeroParticipatedInNPCTakedown(lv_itPlayer, lp_killedUnit);
    }
    lv_xPValue = lp_killedUnitXPAward;
    if ((libSprt_gv_dEBUGXPTextEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Game_BFAA4B59", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TextExpressionSetToken("Param/Expression/lib_Game_BFAA4B59", "B", FixedToText(lv_xPValue, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_BFAA4B59"), true);
    }

    if (((lv_xPValue <= 0.0) || (UnitHasBehavior2(lp_killedUnit, "UnitGivesNoXP") == true))) {
        return true;
    }

    if ((PlayerGroupCount(lv_killCreditGroup) == 0)) {
        lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_EnemyPlayerGroupOfPlayer(lp_killedUnitPlayer));
        if ((PlayerGroupCount(lv_xPAwardGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == true) && (lp_killedUnitPlayer == libCore_gv_cOMPUTER_Hostile)) {
            lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_AlliedPlayerGroupOfPlayer(lp_killingPlayer));
        }

        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamOrder);
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamChaos);
        if (((lp_killedUnitPlayer < 0) || (lp_killedUnitPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
            TextExpressionSetToken("Param/Expression/lib_Game_916A40F9", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
            TextExpressionSetToken("Param/Expression/lib_Game_916A40F9", "B", IntToText(lp_killedUnitPlayer));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_916A40F9"), true);
        }
        else {
            autoEB0614A8_g = lv_xPAwardGroup;
            lv_itTeamPlayer = -1;
            while (true) {
                lv_itTeamPlayer = PlayerGroupNextPlayer(autoEB0614A8_g, lv_itTeamPlayer);
                if (lv_itTeamPlayer < 0) { break; }
                libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itTeamPlayer, (lv_xPValue / PlayerGroupCount(lv_xPAwardGroup)), false);
                libGame_gf_ScoreValuesRecordGameScoreForPlayer(lv_itTeamPlayer, (lv_xPValue / PlayerGroupCount(lv_xPAwardGroup)), libGame_gv_gameScore_NPCTakedownMultiplier, false);
            }
        }
    }
    else {
        autoE88E6323_g = lv_killCreditGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoE88E6323_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (lv_xPValue / PlayerGroupCount(lv_killCreditGroup)), true);
            libGame_gf_ScoreValuesRecordGameScoreForPlayer(lv_itPlayer, (lv_xPValue / PlayerGroupCount(lv_killCreditGroup)), libGame_gv_gameScore_NPCTakedownMultiplier, false);
            autoD781FCE8_g = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)].lv_teamPlayerGroupNoNPCPlayers;
            lv_itTeamPlayer = -1;
            while (true) {
                lv_itTeamPlayer = PlayerGroupNextPlayer(autoD781FCE8_g, lv_itTeamPlayer);
                if (lv_itTeamPlayer < 0) { break; }
                if ((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lv_itPlayer) == true)) {
                }
                else {
                    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_2D19C006"), true);
                }
            }
        }
        lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_AlliedPlayerGroupOfPlayer(PlayerGroupPlayer(lv_killCreditGroup, 1)));
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamOrder);
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamChaos);
    }
    if ((PlayerGroupCount(lv_xPAwardGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == true) && (PlayerGroupCount(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers) > 0) && (PlayerGroupCount(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_142809AC", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_142809AC"), true);
    }

    autoE158BE37_g = lv_xPAwardGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE158BE37_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        auto714D442F_val = lp_killedUnitClassification;
        if (auto714D442F_val == c_unitAttributeStructure) {
            lv_xPSource = libGame_ge_XPSource_Structure;
        }
        else if (auto714D442F_val == c_unitAttributeLight) {
            lv_xPSource = libGame_ge_XPSource_Creep;
        }
        else if (auto714D442F_val == c_unitAttributeBiological) {
            lv_xPSource = libGame_ge_XPSource_Minion;
        }
        else {
        }
        libGame_gf_GrantXPForPlayer(lv_xPValue, lv_itPlayer, lv_xPSource);
    }
    if ((lp_killedUnitClassification != c_unitAttributeStructure)) {
        libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_killedUnit, FixedToText(lv_xPValue, 0), lv_xPAwardGroup, "FCT_XP_Greater", libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    }
    else {
        libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_killedUnit, FixedToText(lv_xPValue, 0), lv_xPAwardGroup, "FCT_XP_Crit", libUIUI_gv_floatingCombatTextCoreDuration, libUIUI_gv_floatingCombatTextFadeDuration2, 0.0);
    }
    return true;
}

int libGame_gf_QuestTokenGetCurrentTokenCountForPlayer (string lp_tokenCounterBehavior, int lp_player) {
    // Variable Declarations
    int lv_maxTokenCount;
    int lv_currentTokenUsed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_maxTokenCount = libGame_gf_QuestTokenGetMaximumTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
    lv_currentTokenUsed = FixedToInt(PlayerGetChargeUsed(lp_player, CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.Link", c_playerAny)));
    return (lv_maxTokenCount - lv_currentTokenUsed);
}

int libGame_gf_QuestTokenGetMaximumTokenCountForPlayer (string lp_tokenCounterBehavior, int lp_player) {
    // Variable Declarations
    int lv_maxTokenCount;

    // Automatic Variable Declarations
    int auto9603DA1A_val;

    // Variable Initialization

    // Implementation
    auto9603DA1A_val = libGame_gf_QuestTokenGetTokenCountType(lp_tokenCounterBehavior);
    if (auto9603DA1A_val == libGame_ge_QuestTokenMaximumTokenCountType_Unlimited) {
        lv_maxTokenCount = libCore_gv_coreMaxBehaviorStacks;
    }
    else if (auto9603DA1A_val == libGame_ge_QuestTokenMaximumTokenCountType_UnlimitedWithTargetCount) {
        lv_maxTokenCount = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", lp_player);
    }
    else if (auto9603DA1A_val == libGame_ge_QuestTokenMaximumTokenCountType_Limited) {
        lv_maxTokenCount = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", 0);
    }
    else if (auto9603DA1A_val == libGame_ge_QuestTokenMaximumTokenCountType_LimitedByPlayer) {
        lv_maxTokenCount = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", lp_player);
    }
    else {
    }
    if ((lv_maxTokenCount == 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_76249545", "A", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "Name", c_playerAny)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_76249545"), true);
    }

    return lv_maxTokenCount;
}

int libGame_gf_QuestTokenGetTargetTokenCountForPlayer (string lp_tokenCounterBehavior, int lp_player) {
    // Variable Declarations
    int lv_targetTokenCount;

    // Automatic Variable Declarations
    int auto30219880_val;

    // Variable Initialization

    // Implementation
    auto30219880_val = libGame_gf_QuestTokenGetTokenCountType(lp_tokenCounterBehavior);
    if (auto30219880_val == libGame_ge_QuestTokenMaximumTokenCountType_Unlimited) {
        lv_targetTokenCount = libCore_gv_coreMaxBehaviorStacks;
    }
    else if (auto30219880_val == libGame_ge_QuestTokenMaximumTokenCountType_UnlimitedWithTargetCount) {
        lv_targetTokenCount = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", 0);
    }
    else if (auto30219880_val == libGame_ge_QuestTokenMaximumTokenCountType_Limited) {
        lv_targetTokenCount = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", 0);
    }
    else if (auto30219880_val == libGame_ge_QuestTokenMaximumTokenCountType_LimitedByPlayer) {
        lv_targetTokenCount = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", lp_player);
    }
    else {
    }
    return lv_targetTokenCount;
}

int libGame_gf_QuestTokenGetTokenCountType (string lp_tokenCounterBehavior) {
    // Variable Declarations
    int lv_preset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, lp_tokenCounterBehavior, "QuestData Unlimited") == true)) {
        lv_preset = libGame_ge_QuestTokenMaximumTokenCountType_Unlimited;
    }
    else if ((libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, lp_tokenCounterBehavior, "QuestData UnlimitedWithTargetCount") == true)) {
        lv_preset = libGame_ge_QuestTokenMaximumTokenCountType_UnlimitedWithTargetCount;
    }
    else if ((libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, lp_tokenCounterBehavior, "QuestData Limited") == true)) {
        lv_preset = libGame_ge_QuestTokenMaximumTokenCountType_Limited;
    }
    else if ((libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, lp_tokenCounterBehavior, "QuestData LimitedByPlayer") == true)) {
        lv_preset = libGame_ge_QuestTokenMaximumTokenCountType_LimitedByPlayer;
    }
    else if (true) {
        TextExpressionSetToken("Param/Expression/lib_Game_E7ED6717", "A", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "Name", c_playerAny)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_E7ED6717"), true);
    }
    return lv_preset;
}

int libGame_gf_QuestTokenGetTokenCountDeltaEvents (string lp_tokenCounterBehavior, unit lp_unit) {
    // Variable Declarations
    int lv_itTechAlias;
    int lv_techAliasMax;
    string lv_techAliasValue;
    int lv_delta;

    // Automatic Variable Declarations
    int auto2EEF7A77_ae;
    const int auto2EEF7A77_ai = 1;

    // Variable Initialization
    lv_techAliasValue = "";

    // Implementation
    lv_techAliasMax = CatalogFieldValueCount(c_gameCatalogBehavior, lp_tokenCounterBehavior, "TechAliasArray", c_playerAny);
    if ((lv_techAliasMax == 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_5B1AC302", "A", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "Name", c_playerAny)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_5B1AC302"), true);
        return -1;
    }

    auto2EEF7A77_ae = (lv_techAliasMax-1);
    lv_itTechAlias = 0;
    for ( ; ( (auto2EEF7A77_ai >= 0 && lv_itTechAlias <= auto2EEF7A77_ae) || (auto2EEF7A77_ai < 0 && lv_itTechAlias >= auto2EEF7A77_ae) ) ; lv_itTechAlias += auto2EEF7A77_ai ) {
        lv_techAliasValue = CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "TechAliasArray[" + IntToString(lv_itTechAlias) + "]", c_playerAny);
        if ((lv_techAliasValue == "QuestData DeltaEvents 1")) {
            lv_delta = 1;
        }
        else if ((lv_techAliasValue == "QuestData DeltaEvents 5")) {
            lv_delta = 5;
        }
    }
    if ((lv_delta != 1) && (lv_delta != 5)) {
        TextExpressionSetToken("Param/Expression/lib_Game_1941E29E", "A", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "Name", c_playerAny)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_1941E29E"), true);
        return libCore_gv_coreMaxBehaviorStacks;
    }

    return lv_delta;
}

void libGame_gf_QuestTokenModifyTokenData (int lp_modification, string lp_tokenCounterBehavior, int lp_player) {
    // Variable Declarations
    int lv_currentCount;
    int lv_countToAdd;
    int lv_maxCountValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentCount = libGame_gf_QuestTokenGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
    lv_maxCountValue = libGame_gf_QuestTokenGetMaximumTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
    if (((lv_currentCount + lp_modification) > lv_maxCountValue)) {
        lv_countToAdd = (lv_maxCountValue - lv_currentCount);
    }
    else if (((lv_currentCount + lp_modification) < 0)) {
        lv_countToAdd = lv_currentCount;
    }
    else if (true) {
        lv_countToAdd = lp_modification;
    }
    if ((lv_countToAdd != 0)) {
        PlayerAddChargeUsed(lp_player, CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.Link", c_playerAny), IntToFixed((-lv_countToAdd)));
    }

}

void libGame_gf_QuestTokenResetTokenData (string lp_tokenCounterBehavior, int lp_player) {
    // Variable Declarations
    int lv_currentCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentCount = libGame_gf_QuestTokenGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
    if ((lv_currentCount > 0)) {
        PlayerAddChargeUsed(lp_player, CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.Link", c_playerAny), IntToFixed(lv_currentCount));
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", lp_player, CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", libCore_gv_cOMPUTER_Neutral));
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountStart", lp_player, CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountStart", libCore_gv_cOMPUTER_Neutral));
}

void libGame_gf_QuestTokenRemoveTokenData (string lp_tokenCounterBehavior, int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_currentCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentCount = libGame_gf_QuestTokenGetCurrentTokenCountForPlayer(lp_tokenCounterBehavior, lp_player);
    if ((lv_currentCount > 0)) {
        PlayerAddChargeUsed(lp_player, CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.Link", c_playerAny), IntToFixed(lv_currentCount));
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", lp_player, CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "DamageResponse.Cost.Charge.CountMax", libCore_gv_cOMPUTER_Neutral));
    UnitBehaviorRemove(lp_unit, lp_tokenCounterBehavior, 1);
}

int libGame_gf_QuestTokenQuestIsHeroTalent (string lp_tokenCounterBehavior, int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTier;
    int lv_talentIndex;

    // Automatic Variable Declarations
    const int autoCD3E64C6_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoCD3E64C6_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior == lp_tokenCounterBehavior)) {
        return libGame_ge_BehaviorsQuestTalentHeroBasic_HeroBasic;
    }
    else {
        lv_itTier = 1;
        for ( ; ( (autoCD3E64C6_ai >= 0 && lv_itTier <= autoCD3E64C6_ae) || (autoCD3E64C6_ai < 0 && lv_itTier >= autoCD3E64C6_ae) ) ; lv_itTier += autoCD3E64C6_ai ) {
            lv_talentIndex = libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex;
            if ((lv_talentIndex > 0) && (libCore_gv_talentData[lv_talentIndex].lv_questTokenCounterBehavior == lp_tokenCounterBehavior)) {
                return libGame_ge_BehaviorsQuestTalentHeroBasic_Talent;
            }

        }
    }
    return libGame_ge_BehaviorsQuestTalentHeroBasic_None;
}

bool libGame_gf_QuestTokenResetOnDeath (string lp_tokenCounterBehavior) {
    // Variable Declarations
    int lv_itTechAlias;
    int lv_techAliasMax;
    string lv_techAliasValue;

    // Automatic Variable Declarations
    int autoB1E7E4D3_ae;
    const int autoB1E7E4D3_ai = 1;

    // Variable Initialization
    lv_techAliasValue = "";

    // Implementation
    lv_techAliasMax = CatalogFieldValueCount(c_gameCatalogBehavior, lp_tokenCounterBehavior, "TechAliasArray", c_playerAny);
    if ((lv_techAliasMax == 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_E4F2EBB1", "A", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "Name", c_playerAny)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_E4F2EBB1"), true);
    }

    autoB1E7E4D3_ae = (lv_techAliasMax-1);
    lv_itTechAlias = 0;
    for ( ; ( (autoB1E7E4D3_ai >= 0 && lv_itTechAlias <= autoB1E7E4D3_ae) || (autoB1E7E4D3_ai < 0 && lv_itTechAlias >= autoB1E7E4D3_ae) ) ; lv_itTechAlias += autoB1E7E4D3_ai ) {
        lv_techAliasValue = CatalogFieldValueGet(c_gameCatalogBehavior, lp_tokenCounterBehavior, "TechAliasArray[" + IntToString(lv_itTechAlias) + "]", c_playerAny);
        if (((lv_techAliasValue == "QuestData ResetOnDeath") || (lv_techAliasValue == "QuestData ResetOnDeathCompleted"))) {
            return true;
        }

    }
    return false;
}

playergroup libGame_gf_AlliedPlayerGroupOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == false)) {
        return PlayerGroupEmpty();
    }

    return libGame_gf_PlayersOnTeamHeroes(lv_team, false);
}

playergroup libGame_gf_EnemyPlayerGroupOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == false)) {
        return PlayerGroupEmpty();
    }

    return libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(lp_player), false);
}

bool libGame_gf_TeamNumberIsValid (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_team == libGame_gv_teamOrderIndex_C) || (lp_team == libGame_gv_teamChaosIndex_C));
}

void libGame_gf_GrantXPForPlayer (fixed lp_xP, int lp_player, int lp_source) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_playerLevel;
    fixed lv_totalXPForNextLevel;
    fixed lv_totalXPForCurrentLevel;
    fixed lv_currentXPForPlayer;
    fixed lv_fractionalLevelValue;
    fixed lv_xPDifference;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    if ((lv_heroUnit == null)) {
        return ;
    }

    UnitXPAddXP(lv_heroUnit, null, lp_xP);
}

bool libGame_gf_PlayerIsHeroPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, lp_player) == true);
}

bool libGame_gf_UnitIsHero (unit lp_testUnit) {
    // Variable Declarations
    int lv_owner;
    unit lv_itHero;

    // Automatic Variable Declarations
    unitgroup autoD3509FDF_g;
    int autoD3509FDF_u;

    // Variable Initialization

    // Implementation
    lv_owner = UnitGetOwner(lp_testUnit);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == false)) {
        return false;
    }

    if ((UnitFilterMatch(lp_testUnit, lv_owner, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), 0)) == true) && ((lp_testUnit == libGame_gv_players[lv_owner].lv_heroUnit) || (lp_testUnit == libGame_gv_players[lv_owner].lv_activeVehicle))) {
        return true;
    }

    autoD3509FDF_g = libGame_gv_players[lv_owner].lv_heroUnitGroup;
    autoD3509FDF_u = UnitGroupCount(autoD3509FDF_g, c_unitCountAll);
    for (;; autoD3509FDF_u -= 1) {
        lv_itHero = UnitGroupUnitFromEnd(autoD3509FDF_g, autoD3509FDF_u);
        if (lv_itHero == null) { break; }
        if ((lp_testUnit == lv_itHero)) {
            return true;
        }

    }
    return false;
}

int libGame_gf_PlayersAliveOnTeam (int lp_team) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_count;

    // Automatic Variable Declarations
    playergroup autoB3CAA3DD_g;

    // Variable Initialization

    // Implementation
    autoB3CAA3DD_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoB3CAA3DD_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

int libGame_gf_TeamNumberOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_teamOrder, lp_player) == true)) {
        return 1;
    }

    if ((PlayerGroupHasPlayer(libCore_gv_teamChaos, lp_player) == true)) {
        return 2;
    }

    return 0;
}

int libGame_gf_EnemyTeamNumberOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (3-libGame_gf_PlayerGetPlayerTeam(lp_player));
}

int libGame_gf_EnemyTeamNumberOfTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return (3 - lp_team);
}

int libGame_gf_ComputerPlayerInTeam (int lp_team) {
    // Automatic Variable Declarations
    int auto1F0E7845_val;

    // Implementation
    auto1F0E7845_val = lp_team;
    if (auto1F0E7845_val == libGame_gv_teamOrderIndex_C) {
        return libCore_gv_cOMPUTER_TeamOrder;
    }
    else if (auto1F0E7845_val == libGame_gv_teamChaosIndex_C) {
        return libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
    }
    return 0;
}

int libGame_gf_GetPlayerNumberFromRosterSlot (int lp_rosterSlot) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto17908686_g;

    // Variable Initialization

    // Implementation
    auto17908686_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto17908686_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_rosterSlot == lp_rosterSlot)) {
            return lv_itPlayer;
        }

    }
    return 0;
}

unit libGame_gf_PlayerHeroUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_players[lp_player].lv_heroUnit;
}

playergroup libGame_gf_PlayersOnTeamHeroes (int lp_team, bool lp_nPCOption) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_team < 1) || (lp_team > 2))) {
        TextExpressionSetToken("Param/Expression/lib_Game_7590EFAC", "A", IntToText(lp_team));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_7590EFAC"));
        return PlayerGroupEmpty();
    }

    if ((lp_nPCOption == true)) {
        return libGame_gv_teams[lp_team].lv_teamPlayerGroup;
    }
    else {
        return libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    }
}

int libGame_gf_PlayerGetPlayerTeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libGame_gv_teams[1].lv_teamPlayerGroup, lp_player) == true)) {
        return 1;
    }
    else if ((PlayerGroupHasPlayer(libGame_gv_teams[2].lv_teamPlayerGroup, lp_player) == true)) {
        return 2;
    }
    return -1;
}

int libGame_gf_GetPlayerIDfromTeamSlot (int lp_slot, int lp_team) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoEB0ACDD5_g;

    // Variable Initialization

    // Implementation
    autoEB0ACDD5_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoEB0ACDD5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_playerAllySlot == lp_slot) && (libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == lp_team)) {
            return lv_itPlayer;
        }

    }
    return 0;
}

trigger auto_libGame_gf_SpawnHero_Trigger = null;
int auto_libGame_gf_SpawnHero_lp_player;

void libGame_gf_SpawnHero (int lp_player) {
    auto_libGame_gf_SpawnHero_lp_player = lp_player;

    if (auto_libGame_gf_SpawnHero_Trigger == null) {
        auto_libGame_gf_SpawnHero_Trigger = TriggerCreate("auto_libGame_gf_SpawnHero_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnHero_Trigger, false, false);
}

bool auto_libGame_gf_SpawnHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_SpawnHero_lp_player;

    // Variable Declarations
    int lv_playerTeam;
    int lv_itAbil;
    int lv_abilityIndex;
    int lv_itPlayerResponse;
    int lv_storedSkinIndex;

    // Automatic Variable Declarations
    int auto79097A77_ae;
    const int auto79097A77_ai = 1;

    // Variable Initialization
    lv_playerTeam = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_storedSkinIndex = libGame_gf_LoadoutGetPlayerSkin(lp_player);

    // Implementation
    libGame_gf_PlayerResponseAddHeroPlayerResponsesToPlayer(libGame_gv_players[lp_player].lv_heroIndex, lp_player);
    libGame_gv_players[lp_player].lv_playerStatus = libGame_ge_PlayerStatusCore_Playing;
    libGame_gf_ActivateSkinForPlayer(lv_storedSkinIndex, lp_player);
    libNtve_gf_CreateUnitsAtPoint2(1, libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_heroUnitType, 0, lp_player, libGame_gv_players[lp_player].lv_spawnPoint);
    libGame_gv_players[lp_player].lv_heroUnit = UnitLastCreated();
    libGame_gv_players[lp_player].lv_selectedUnit = libGame_gv_players[lp_player].lv_heroUnit;
    libGame_gv_players[lp_player].lv_heroName = UnitGetName(libGame_gv_players[lp_player].lv_heroUnit);
    libGame_gv_players[lp_player].lv_soundDeathAlertPrefix = "UI_HeroDeath_Gen_";
    UnitGroupClear(libGame_gv_players[lp_player].lv_heroUnitGroup);
    UnitGroupAdd(libGame_gv_players[lp_player].lv_heroUnitGroup, UnitLastCreated());
    UnitGroupAdd(libGame_gv_heroes, UnitLastCreated());
    libUIUI_gf_InitPathingLines(UnitLastCreated(), lp_player);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_players[lp_player].lv_heroUnit, "Signal Respawn");
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == false)) {
        UISetMode(libCore_gv_playerGroupFromPlayer[lp_player], c_uiModeConsole, c_transitionDurationImmediate);
        libNtve_gf_HideGameUI(true, libCore_gv_playerGroupFromPlayer[lp_player]);
    }

    UnitSelect(libGame_gv_players[lp_player].lv_heroUnit, lp_player, true);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lp_player, libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(true, lp_player);
    libUIUI_gf_UIPartyFrameAddPlayerToPartyFrame(lp_player);
    libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(true, lp_player);
    libUIUI_gf_UIPartyFrameTeamLevelHookUpXPBarUnitForTeamAndShowTeamLevelLabel(lv_playerTeam, libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libUIUI_gf_UIUnitStatusFramesShowUnitNameLabelForUnit(libGame_gv_players[lp_player].lv_heroUnit);
    libGame_gv_players[lp_player].lv_allowInput = true;
    CameraLockInput(lp_player, false);
    libCore_gf_ChangeCollisionToTeamForPlayerHero(lp_player);
    auto79097A77_ae = libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_abilitiesCount;
    lv_itAbil = 1;
    for ( ; ( (auto79097A77_ai >= 0 && lv_itAbil <= auto79097A77_ae) || (auto79097A77_ai < 0 && lv_itAbil >= auto79097A77_ae) ) ; lv_itAbil += auto79097A77_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_abilityIndex[lv_itAbil];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_isInventory == true)) {
            UnitInventoryCreate(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_abilityData[lv_abilityIndex].lv_inventoryUnit);
        }

    }
    if ((libGame_gv_heroDeath_RespawnMounted == true) && (libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_usesMount == true)) {
        libGame_gf_ApplyMountBehaviorToHero(libGame_gv_players[lp_player].lv_heroUnit);
        libGame_gf_SendEventHeroSpecialCaseMounting(lp_player);
    }
    Wait(0.125, c_timeGame);
    libGame_gf_GrantXPForPlayer(libCore_gf_GetTotalXPForLevel(libCore_gv_sYSHeroStartLevel), lp_player, libGame_ge_XPSource_Trickle);
    libGame_gf_LevelUpLevelUpHero(libGame_gv_players[lp_player].lv_heroUnit);
    libGame_gf_SendEventHeroSpawn(lp_player);
    libUIUI_gf_UIHeroLeaderboardSetUpPlayeronLeaderboard(lp_player);
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsAvailabilityOfPlayer(lp_player);
    libUIUI_gf_UIHeroLeaderboardTalentsSetupStartQuestOfPlayer(lp_player);
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsQuestsOfPlayer(lp_player);
    libUIUI_gf_UITalentsChoicePanelSetTierLevelsForPlayer(lp_player);
    libUIUI_gf_UITalentsPrepickedSelectBuildButtonForPlayerIngame(lp_player, libUIUI_gv_uITalentsPrepickedSelectedBuild[lp_player]);
    return true;
}

trigger auto_libGame_gf_SpawnHeroesForTeam_Trigger = null;
int auto_libGame_gf_SpawnHeroesForTeam_lp_team;

void libGame_gf_SpawnHeroesForTeam (int lp_team) {
    auto_libGame_gf_SpawnHeroesForTeam_lp_team = lp_team;

    if (auto_libGame_gf_SpawnHeroesForTeam_Trigger == null) {
        auto_libGame_gf_SpawnHeroesForTeam_Trigger = TriggerCreate("auto_libGame_gf_SpawnHeroesForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnHeroesForTeam_Trigger, false, false);
}

bool auto_libGame_gf_SpawnHeroesForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGame_gf_SpawnHeroesForTeam_lp_team;

    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto7C27482C_g;

    // Variable Initialization

    // Implementation
    auto7C27482C_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7C27482C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == true) && (libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
            libGame_gf_SpawnHero(lv_itPlayer);
        }

        Wait(libGame_gv_individualHeroSpawnMiniDelay_C, c_timeGame);
    }
    libGame_gf_ReloadTrackedHeroesForTeam(lp_team);
    return true;
}

void libGame_gf_SpawnHeroesForBothTeams () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    bool lv_ready;

    // Automatic Variable Declarations
    const int autoD7C58E40_ae = libCore_gv_bALMaxTeams;
    const int autoD7C58E40_ai = 1;
    const int autoF8A4DF6E_ae = libCore_gv_bALMaxTeams;
    const int autoF8A4DF6E_ai = 1;
    playergroup auto4964C2BB_g;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (autoD7C58E40_ai >= 0 && lv_itTeam <= autoD7C58E40_ae) || (autoD7C58E40_ai < 0 && lv_itTeam >= autoD7C58E40_ae) ) ; lv_itTeam += autoD7C58E40_ai ) {
        libGame_gf_SpawnHeroesForTeam(lv_itTeam);
    }
    while (true) {
        lv_ready = true;
        lv_itTeam = 1;
        for ( ; ( (autoF8A4DF6E_ai >= 0 && lv_itTeam <= autoF8A4DF6E_ae) || (autoF8A4DF6E_ai < 0 && lv_itTeam >= autoF8A4DF6E_ae) ) ; lv_itTeam += autoF8A4DF6E_ai ) {
            auto4964C2BB_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto4964C2BB_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((libGame_gf_PlayerIsHeroPlayer(lv_itPlayer) == true)) {
                    if ((libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
                        lv_ready = false;
                        break;
                    }

                }

            }
            if ((lv_ready == false)) {
                break;
            }

        }
        if ((lv_ready == true)) {
            return ;
        }

        Wait(0.125, c_timeGame);
    }
}

void libGame_gf_ShareUnshareVisionOfAlliesForPlayer (bool lp_onOff, int lp_player) {
    // Variable Declarations
    int lv_i;
    unit lv_u;
    playergroup lv_allyPlayerGroup;

    // Automatic Variable Declarations
    playergroup autoB4DBE070_g;

    // Variable Initialization
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        lv_allyPlayerGroup = libCore_gv_teamOrder;
    }
    else {
        lv_allyPlayerGroup = libCore_gv_teamChaos;
    }
    autoB4DBE070_g = lv_allyPlayerGroup;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoB4DBE070_g, lv_i);
        if (lv_i < 0) { break; }
        if ((lv_i != lp_player)) {
            PlayerSetAlliance(lv_i, c_allianceIdVision, lp_player, lp_onOff);
        }

    }
}

void libGame_gf_ReloadTrackedHeroesForTeam (int lp_team) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    playergroup auto4982F4A4_g;
    string autoDC25ED5F_val;
    unitgroup auto2597529F_g;
    int auto2597529F_u;

    // Variable Initialization

    // Implementation
    UnitGroupClear(libGame_gv_players_Heroes_AllTrackedHeroesForTeam[lp_team]);
    auto4982F4A4_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4982F4A4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        autoDC25ED5F_val = UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit);
        if (autoDC25ED5F_val == "HeroLostVikingsController") {
            auto2597529F_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
            auto2597529F_u = UnitGroupCount(auto2597529F_g, c_unitCountAll);
            for (;; auto2597529F_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto2597529F_g, auto2597529F_u);
                if (lv_itUnit == null) { break; }
                if ((UnitGetType(lv_itUnit) != "HeroLostVikingsController")) {
                    UnitGroupAdd(libGame_gv_players_Heroes_AllTrackedHeroesForTeam[lp_team], lv_itUnit);
                }

            }
        }
        else if (autoDC25ED5F_val == "HeroGall") {
        }
        else if (autoDC25ED5F_val == null) {
            UnitGroupAdd(libGame_gv_players_Heroes_AllTrackedHeroesForTeam[lp_team], libGame_gv_players[lv_itPlayer].lv_heroUnit);
        }
        else {
        }
    }
}

bool libGame_gf_TargetIsVehicle (unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_ExecuteValidatorOnUnit("IsVehicle", lp_targetUnit, lp_targetUnit);
}

void libGame_gf_PlayerResponseAddHeroPlayerResponsesToPlayer (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_itAbility;
    int lv_abilityIndex;
    int lv_itPlayerResponse;

    // Automatic Variable Declarations
    int auto835DE3C7_ae;
    const int auto835DE3C7_ai = 1;
    int auto529E4F0D_ae;
    const int auto529E4F0D_ai = 1;
    int auto726BB27A_ae;
    const int auto726BB27A_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_playerResponseCount > 0)) {
        auto835DE3C7_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_playerResponseCount;
        lv_itPlayerResponse = 1;
        for ( ; ( (auto835DE3C7_ai >= 0 && lv_itPlayerResponse <= auto835DE3C7_ae) || (auto835DE3C7_ai < 0 && lv_itPlayerResponse >= auto835DE3C7_ae) ) ; lv_itPlayerResponse += auto835DE3C7_ai ) {
            PlayerAddResponse(lp_player, libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_playerResponse[lv_itPlayerResponse]);
        }
    }

    auto529E4F0D_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto529E4F0D_ai >= 0 && lv_itAbility <= auto529E4F0D_ae) || (auto529E4F0D_ai < 0 && lv_itAbility >= auto529E4F0D_ae) ) ; lv_itAbility += auto529E4F0D_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_playerResponseCount > 0)) {
            auto726BB27A_ae = libCore_gv_abilityData[lv_abilityIndex].lv_playerResponseCount;
            lv_itPlayerResponse = 1;
            for ( ; ( (auto726BB27A_ai >= 0 && lv_itPlayerResponse <= auto726BB27A_ae) || (auto726BB27A_ai < 0 && lv_itPlayerResponse >= auto726BB27A_ae) ) ; lv_itPlayerResponse += auto726BB27A_ai ) {
                PlayerAddResponse(lp_player, libCore_gv_abilityData[lv_abilityIndex].lv_playerResponse[lv_itPlayerResponse]);
            }
        }

    }
}

void libGame_gf_PlayerResponseAddHeroTalentPlayerResponsesForPlayer (int lp_talentIndex, int lp_player) {
    // Variable Declarations
    int lv_itPlayerResponse;

    // Automatic Variable Declarations
    int autoD1D0A0AC_ae;
    const int autoD1D0A0AC_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_talentData[lp_talentIndex].lv_playerResponseCount > 0)) {
        autoD1D0A0AC_ae = libCore_gv_talentData[lp_talentIndex].lv_playerResponseCount;
        lv_itPlayerResponse = 1;
        for ( ; ( (autoD1D0A0AC_ai >= 0 && lv_itPlayerResponse <= autoD1D0A0AC_ae) || (autoD1D0A0AC_ai < 0 && lv_itPlayerResponse >= autoD1D0A0AC_ae) ) ; lv_itPlayerResponse += autoD1D0A0AC_ai ) {
            PlayerAddResponse(lp_player, libCore_gv_talentData[lp_talentIndex].lv_playerResponse[lv_itPlayerResponse]);
        }
    }

}

void libGame_gf_PreloadingPreloadModel (string lp_modelEntry, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateModelAtPoint(lp_modelEntry, lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), "Destroy Immediate");
    Wait(0.0, c_timeGame);
}

void libGame_gf_PreloadingPreloadStoreModels () {
    // Variable Declarations
    point lv_point;
    string lv_modelEntry;
    int lv_variationCount;
    revealer[libCore_gv_bALMaxEnginePlayerCount + 1] lv_revealer;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoCC536AD7_g;
    int autoB2B94C12_catalog;
    int autoB2B94C12_i;
    int autoDCCFCEE4_catalog;
    int autoDCCFCEE4_i;
    playergroup auto722F9752_g;

    // Variable Initialization
    lv_point = RegionGetBoundsMax(RegionEntireMap());

    // Implementation
    autoCC536AD7_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoCC536AD7_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        VisRevealerCreate(lv_itPlayer, RegionCircle(lv_point, 3.0));
        lv_revealer[lv_itPlayer] = VisRevealerLastCreated();
    }
    libGame_gv_preloadingCurrentValue = 0;
    libGame_gv_preloadingMaxValue = 0;
    autoB2B94C12_catalog = c_gameCatalogModel;
    autoB2B94C12_i = 1;
    for ( ; autoB2B94C12_i <= CatalogEntryCount(c_gameCatalogModel) ; autoB2B94C12_i += 1 ) {
        lv_modelEntry = CatalogEntryGet(autoB2B94C12_catalog, autoB2B94C12_i);
        if ((StringContains((lv_modelEntry), "Store", c_stringAnywhere, c_stringNoCase) == true) && ((StringContains((lv_modelEntry), "Mount", c_stringAnywhere, c_stringNoCase) == true) || (StringContains((lv_modelEntry), "Hero", c_stringAnywhere, c_stringNoCase) == true))) {
            lv_variationCount = CatalogFieldValueGetAsInt(c_gameCatalogModel, lv_modelEntry, "VariationCount", c_playerAny);
            libGame_gv_preloadingMaxValue += lv_variationCount;
        }

    }
    autoDCCFCEE4_catalog = c_gameCatalogModel;
    autoDCCFCEE4_i = 1;
    for ( ; autoDCCFCEE4_i <= CatalogEntryCount(c_gameCatalogModel) ; autoDCCFCEE4_i += 1 ) {
        lv_modelEntry = CatalogEntryGet(autoDCCFCEE4_catalog, autoDCCFCEE4_i);
        if ((StringContains((lv_modelEntry), "Store", c_stringAnywhere, c_stringNoCase) == true) && ((StringContains((lv_modelEntry), "Mount", c_stringAnywhere, c_stringNoCase) == true) || (StringContains((lv_modelEntry), "Hero", c_stringAnywhere, c_stringNoCase) == true))) {
            libGame_gf_PreloadingPreloadStoreModelWithVariations(lv_modelEntry, lv_point);
        }

    }
    auto722F9752_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto722F9752_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        VisRevealerDestroy(lv_revealer[lv_itPlayer]);
    }
}

void libGame_gf_PreloadingPreloadStoreModelWithVariations (string lp_modelEntry, point lp_point) {
    // Variable Declarations
    int lv_itVariation;
    actor lv_actor;
    int lv_variationCount;

    // Automatic Variable Declarations
    int auto48DF2444_ae;
    const int auto48DF2444_ai = 1;

    // Variable Initialization
    lv_variationCount = CatalogFieldValueGetAsInt(c_gameCatalogModel, lp_modelEntry, "VariationCount", c_playerAny);

    // Implementation
    auto48DF2444_ae = (lv_variationCount-1);
    lv_itVariation = 0;
    for ( ; ( (auto48DF2444_ai >= 0 && lv_itVariation <= auto48DF2444_ae) || (auto48DF2444_ai < 0 && lv_itVariation >= auto48DF2444_ae) ) ; lv_itVariation += auto48DF2444_ai ) {
        libNtve_gf_CreateModelAtPoint(lp_modelEntry, lp_point);
        lv_actor = libNtve_gf_ActorLastCreated();
        ActorSend(lv_actor, (("ModelSwap " + (lp_modelEntry) + " " + IntToString(lv_itVariation))));
        libGame_gv_preloadingCurrentValue += 1;
        ActorSend(lv_actor, "Destroy WhenReady");
        Wait(0.1, c_timeGame);
    }
}

void libGame_gf_PreloadingPreloadHeroModels () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_heroIndex;
    point lv_point;
    playergroup lv_individualHeroesPlayerGroup;
    int lv_individualHeroCount;
    string lv_modelEntry;
    revealer[libCore_gv_bALMaxEnginePlayerCount + 1] lv_revealer;

    // Automatic Variable Declarations
    playergroup autoC19E248A_g;
    int auto0CEAA2B0_catalog;
    int auto0CEAA2B0_i;
    playergroup autoCFAEF4D2_g;
    playergroup auto657A3470_g;

    // Variable Initialization
    lv_point = RegionGetBoundsMax(RegionEntireMap());
    lv_individualHeroesPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_individualHeroesPlayerGroup = PlayerGroupCopy(libCore_gv_heroPlayersIncludeAIHeroPlayers);
    autoC19E248A_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoC19E248A_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lv_itPlayer);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroHyperlinkID == "")) {
            PlayerGroupRemove(lv_individualHeroesPlayerGroup, lv_itPlayer);
            continue;
        }

        if ((libGame_gv_preloadingHeroIsPreloaded[lv_heroIndex] == false)) {
            libGame_gv_preloadingHeroIsPreloaded[lv_heroIndex] = true;
        }
        else {
            PlayerGroupRemove(lv_individualHeroesPlayerGroup, lv_itPlayer);
        }
    }
    libGame_gv_preloadingCurrentValue = 0;
    libGame_gv_preloadingMaxValue = 0;
    auto0CEAA2B0_catalog = c_gameCatalogModel;
    auto0CEAA2B0_i = 1;
    for ( ; auto0CEAA2B0_i <= CatalogEntryCount(c_gameCatalogModel) ; auto0CEAA2B0_i += 1 ) {
        lv_modelEntry = CatalogEntryGet(auto0CEAA2B0_catalog, auto0CEAA2B0_i);
        autoCFAEF4D2_g = lv_individualHeroesPlayerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoCFAEF4D2_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_heroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;
            if ((StringContains((lv_modelEntry), libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroHyperlinkID, c_stringAnywhere, c_stringNoCase) == true)) {
                libGame_gv_preloadingMaxValue += 1;
            }

        }
    }
    auto657A3470_g = lv_individualHeroesPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto657A3470_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_heroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;
        libGame_gf_PreloadingPreloadHeroIndividually(lv_heroIndex, lv_point);
        if ((ModI(libGame_gv_preloadingCurrentValue, 5) == 0)) {
            Wait(0.0625, c_timeGame);
        }
        else {
            Wait(0.0, c_timeGame);
        }
    }
}

void libGame_gf_PreloadingPreloadHeroIndividually (int lp_heroIndex, point lp_point) {
    // Variable Declarations
    int lv_itModel;
    string[513] lv_model;
    int lv_modelCount;
    string lv_modelEntry;

    // Automatic Variable Declarations
    int autoF1881EEB_catalog;
    int autoF1881EEB_i;
    int auto4E6B0021_ae;
    const int auto4E6B0021_ai = 1;

    // Variable Initialization

    // Implementation
    autoF1881EEB_catalog = c_gameCatalogModel;
    autoF1881EEB_i = 1;
    for ( ; autoF1881EEB_i <= CatalogEntryCount(c_gameCatalogModel) ; autoF1881EEB_i += 1 ) {
        lv_modelEntry = CatalogEntryGet(autoF1881EEB_catalog, autoF1881EEB_i);
        if ((StringContains((lv_modelEntry), libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroHyperlinkID, c_stringAnywhere, c_stringNoCase) == true)) {
            lv_modelCount += 1;
            lv_model[lv_modelCount] = lv_modelEntry;
        }

    }
    auto4E6B0021_ae = lv_modelCount;
    lv_itModel = 1;
    for ( ; ( (auto4E6B0021_ai >= 0 && lv_itModel <= auto4E6B0021_ae) || (auto4E6B0021_ai < 0 && lv_itModel >= auto4E6B0021_ae) ) ; lv_itModel += auto4E6B0021_ai ) {
        libGame_gf_PreloadingPreloadModel(lv_model[lv_itModel], lp_point);
        libGame_gv_preloadingCurrentValue += 1;
    }
}

void libGame_gf_UpdateScalingForUnit (unit lp_unit, int lp_desiredLevel, int lp_existingLevel) {
    // Variable Declarations
    int lv_xPToApply;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_xPToApply = (lp_desiredLevel-lp_existingLevel);
    if ((lv_xPToApply > 0)) {
        UnitXPAddXP(lp_unit, null, lv_xPToApply);
    }

}

void libGame_gf_CoreUpdateScaling () {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto9F071DCC_ae = libCore_gv_bALMaxTeams;
    const int auto9F071DCC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (auto9F071DCC_ai >= 0 && lv_itTeam <= auto9F071DCC_ae) || (auto9F071DCC_ai < 0 && lv_itTeam >= auto9F071DCC_ae) ) ; lv_itTeam += auto9F071DCC_ai ) {
        if ((UnitIsAlive(libGame_gv_teams[lv_itTeam].lv_core) == true) && (UnitHasBehavior2(libGame_gv_teams[lv_itTeam].lv_core, "CoreScaling") == true)) {
            UnitXPSetCurrentLevel(libGame_gv_teams[lv_itTeam].lv_core, null, libGame_gv_scalingTicks);
        }

    }
}

void libGame_gf_JungleUpdateScalingForCamp (int lp_camp, int lp_scalingTicks) {
    // Variable Declarations
    int lv_itDefender;
    int lv_currentDefenderScalingTicks;
    int lv_newDefenderScalingTicks;
    int lv_newMercScalingTicks;
    int lv_campDefenderType;
    unit lv_creepUnit;

    // Automatic Variable Declarations
    int autoEAF2E78D_ae;
    const int autoEAF2E78D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_currentDefenderScalingTicks = libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks;
    lv_newDefenderScalingTicks = MinI(lp_scalingTicks, libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberOfRanks);
    lv_newMercScalingTicks = MinI(lp_scalingTicks, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfRanks);
    autoEAF2E78D_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps;
    lv_itDefender = 1;
    for ( ; ( (autoEAF2E78D_ai >= 0 && lv_itDefender <= autoEAF2E78D_ae) || (autoEAF2E78D_ai < 0 && lv_itDefender >= autoEAF2E78D_ae) ) ; lv_itDefender += autoEAF2E78D_ai ) {
        lv_creepUnit = libAIAI_gf_DefenderUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex, lv_itDefender);
        if ((lv_creepUnit != null) && (UnitIsAlive(lv_creepUnit) == true)) {
            libGame_gf_UpdateScalingForUnit(lv_creepUnit, lv_newDefenderScalingTicks, lv_currentDefenderScalingTicks);
            UnitSetPropertyFixed(lv_creepUnit, c_unitPropLifePercent, 100.0);
        }

    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks = lv_newDefenderScalingTicks;
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentMercScalingTicks = lv_newMercScalingTicks;
}

void libGame_gf_JungleUpdateScalingForCamps () {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int autoAD06CBDB_ae;
    const int autoAD06CBDB_ai = 1;

    // Variable Initialization

    // Implementation
    autoAD06CBDB_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (autoAD06CBDB_ai >= 0 && lv_itCamp <= autoAD06CBDB_ae) || (autoAD06CBDB_ai < 0 && lv_itCamp >= autoAD06CBDB_ae) ) ; lv_itCamp += autoAD06CBDB_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState == libMapM_ge_JungleCampStates_Idle)) {
            libGame_gf_JungleUpdateScalingForCamp(lv_itCamp, libGame_gv_scalingTicks);
        }

    }
}

void libGame_gf_ScoreValueTrackingAddDamage (unit lp_targetUnit, unit lp_damagingUnit, fixed lp_damageAmount, int lp_damageType) {
    // Variable Declarations
    int lv_damagingPlayer;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_targetPlayer = UnitGetOwner(lp_targetUnit);
    lv_damagingPlayer = UnitGetOwner(lp_damagingUnit);
    if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
        if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter(0, 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true)) {
            libGame_gv_scoreValues[lv_targetPlayer].lv_tank += lp_damageAmount;
            libGame_gf_ScoreValueTrackingAddTankConsumedByArmor(lp_targetUnit, lp_damageType, lp_damageAmount);
        }

        if ((libGame_gf_PlayerIsHeroPlayer(lv_damagingPlayer) == true)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_heroDamage += lp_damageAmount;
            if ((lp_damageType == c_unitDamageTypeRanged)) {
                libGame_gv_scoreValues[lv_damagingPlayer].lv_heroDamageTypePhysical += lp_damageAmount;
            }
            else if ((lp_damageType == c_unitDamageTypeSpell)) {
                libGame_gv_scoreValues[lv_damagingPlayer].lv_heroDamageTypeSpell += lp_damageAmount;
            }
            else if ((lp_damageType == c_unitDamageTypeMelee)) {
                libGame_gv_scoreValues[lv_damagingPlayer].lv_heroDamageTypePercent += lp_damageAmount;
            }
            if ((libGame_gf_TargetIsVehicle(lp_targetUnit) == true)) {
                libGame_gv_scoreValues[lv_damagingPlayer].lv_heroDamageVehicle += lp_damageAmount;
            }
            else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter(0, (1 << (c_targetFilterHallucination - 32)), 0, 0)) == true)) {
                libGame_gv_scoreValues[lv_damagingPlayer].lv_heroDamageHallucination += lp_damageAmount;
            }
            else if (true) {
                libGame_gv_scoreValues[lv_damagingPlayer].lv_heroDamageHeroic += lp_damageAmount;
                libGame_gv_scoreValues[lv_targetPlayer].lv_tankHeroicDamageTaken += lp_damageAmount;
                if ((lp_damageType == c_unitDamageTypeRanged)) {
                    libGame_gv_scoreValues[lv_targetPlayer].lv_tankDamageTypePhysical += lp_damageAmount;
                }
                else if ((lp_damageType == c_unitDamageTypeSpell)) {
                    libGame_gv_scoreValues[lv_targetPlayer].lv_tankDamageTypeSpell += lp_damageAmount;
                }
                else if ((lp_damageType == c_unitDamageTypeMelee)) {
                    libGame_gv_scoreValues[lv_targetPlayer].lv_tankDamageTypePercent += lp_damageAmount;
                }
            }
        }

    }
    if ((libGame_gf_PlayerIsHeroPlayer(lv_targetPlayer) == false)) {
        libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamage += lp_damageAmount;
        if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageBuilding += lp_damageAmount;
        }
        else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterLight), 0, 0, 0)) == true)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageMercenary += lp_damageAmount;
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageMercenaryDefender += lp_damageAmount;
        }
        else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterRobotic), 0, 0, 0)) == true)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageMercenary += lp_damageAmount;
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageMercenaryLaner += lp_damageAmount;
        }
        else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterUser1), (1 << (c_targetFilterSummoned - 32)))) == true)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageMinion += lp_damageAmount;
        }
        else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterUser1), 0, 0, 0)) == true)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageMonster += lp_damageAmount;
        }
        else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == true)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageSummon += lp_damageAmount;
        }
        if ((lp_damageType == c_unitDamageTypeRanged)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageTypePhysical += lp_damageAmount;
        }
        else if ((lp_damageType == c_unitDamageTypeSpell)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageTypeSpell += lp_damageAmount;
        }
        else if ((lp_damageType == c_unitDamageTypeMelee)) {
            libGame_gv_scoreValues[lv_damagingPlayer].lv_siegeDamageTypePercent += lp_damageAmount;
        }
    }

}

void libGame_gf_ScoreValueTrackingAddAbsorbed (unit lp_targetUnit, unit lp_damagingUnit, fixed lp_absorbedAmount, string lp_absorbingBehavior, int lp_absorbingBehaviorOwner, int lp_damageType) {
    // Variable Declarations
    int lv_dmgPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_dmgPlayer = UnitGetOwner(lp_damagingUnit);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_dmgPlayer) == true)) {
        if ((libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, lp_absorbingBehavior, "Shield Tank") == true)) {
            libGame_gv_scoreValues[lp_absorbingBehaviorOwner].lv_tank += lp_absorbedAmount;
            libGame_gv_scoreValues[lp_absorbingBehaviorOwner].lv_tankHeroicDamageAbsorbed += lp_absorbedAmount;
            libGame_gf_ScoreValueTrackingAddTankConsumedByArmor(lp_targetUnit, lp_damageType, lp_absorbedAmount);
        }
        else if ((libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, lp_absorbingBehavior, "Shield Support") == true) && (UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
            libGame_gv_scoreValues[lp_absorbingBehaviorOwner].lv_support += lp_absorbedAmount;
            libGame_gv_scoreValues[lp_absorbingBehaviorOwner].lv_supportHeroicDamageAbsorbed += lp_absorbedAmount;
            libGame_gf_ScoreValueTrackingAddTankConsumedByArmor(lp_targetUnit, lp_damageType, lp_absorbedAmount);
        }
    }

    if ((libGame_gf_PlayerIsHeroPlayer(lv_dmgPlayer) == true)) {
        if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
            libGame_gv_scoreValues[lv_dmgPlayer].lv_heroDamage += lp_absorbedAmount;
            libGame_gv_scoreValues[lv_dmgPlayer].lv_heroDamageShields += lp_absorbedAmount;
            if ((lp_damageType == c_unitDamageTypeRanged)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_heroDamageTypePhysical += lp_absorbedAmount;
            }
            else if ((lp_damageType == c_unitDamageTypeSpell)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_heroDamageTypeSpell += lp_absorbedAmount;
            }
            else if ((lp_damageType == c_unitDamageTypeMelee)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_heroDamageTypePercent += lp_absorbedAmount;
            }
        }

        if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter(0, 0, (1 << c_targetFilterHeroic), 0)) == true)) {
            libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamage += lp_absorbedAmount;
            if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageBuilding += lp_absorbedAmount;
            }
            else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterLight), 0, 0, 0)) == true)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageMercenary += lp_absorbedAmount;
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageMercenaryDefender += lp_absorbedAmount;
            }
            else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterRobotic), 0, 0, 0)) == true)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageMercenary += lp_absorbedAmount;
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageMercenaryLaner += lp_absorbedAmount;
            }
            else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterUser1), (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageMinion += lp_absorbedAmount;
            }
            else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterUser1), 0, 0, 0)) == true)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageMonster += lp_absorbedAmount;
            }
            else if ((UnitFilterMatch(lp_targetUnit, 0, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == true)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageSummon += lp_absorbedAmount;
            }
            if ((lp_damageType == c_unitDamageTypeRanged)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageTypePhysical += lp_absorbedAmount;
            }
            else if ((lp_damageType == c_unitDamageTypeSpell)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageTypeSpell += lp_absorbedAmount;
            }
            else if ((lp_damageType == c_unitDamageTypeMelee)) {
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamageTypePercent += lp_absorbedAmount;
            }
        }

    }
}

void libGame_gf_ScoreValueTrackingAddTankSustain (unit lp_targetUnit, fixed lp_amount) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(lp_targetUnit);

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == true) && (UnitFilterMatch(lp_targetUnit, 0, UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true)) {
        libGame_gv_scoreValues[lv_owner].lv_tankSustain += lp_amount;
    }

}

void libGame_gf_ScoreValueTrackingAddTankConsumedByArmor (unit lp_targetUnit, int lp_damageType, fixed lp_amount) {
    // Variable Declarations
    fixed lv_armorValue;
    fixed lv_consumedAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_damageType == c_unitDamageTypeRanged)) {
        lv_armorValue = libGame_gf_UnitStatsValidHeroicArmorValueOfUnit(libGame_ge_UnitStatsDamageType_Physical, lp_targetUnit);
    }
    else if ((lp_damageType == c_unitDamageTypeSpell)) {
        lv_armorValue = libGame_gf_UnitStatsValidHeroicArmorValueOfUnit(libGame_ge_UnitStatsDamageType_Spell, lp_targetUnit);
    }
    else if (true) {
        return ;
    }
    if ((lv_armorValue > 0.0)) {
        lv_consumedAmount = (lp_amount/(100-lv_armorValue)*lv_armorValue);
    }
    else {
        return ;
    }
    if ((lp_damageType == c_unitDamageTypeRanged)) {
        libGame_gv_scoreValues[UnitGetOwner(lp_targetUnit)].lv_tankHeroicDamageConsumedByPhysicalArmor += lv_consumedAmount;
    }
    else if ((lp_damageType == c_unitDamageTypeSpell)) {
        libGame_gv_scoreValues[UnitGetOwner(lp_targetUnit)].lv_tankHeroicDamageConsumedBySpellArmor += lv_consumedAmount;
    }
}

void libGame_gf_ScoreValueTrackingAddTankHeroicDamagePrevented (unit lp_targetUnit, fixed lp_amount) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(lp_targetUnit);

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == true) && (UnitFilterMatch(lp_targetUnit, lv_owner, UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true)) {
        libGame_gv_scoreValues[lv_owner].lv_tankHeroicDamageConsumedByPhysicalArmor += lp_amount;
    }

}

void libGame_gf_ScoreValueTrackingAddSupportHeal (unit lp_targetUnit, fixed lp_amount) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(lp_targetUnit);

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == true) && (UnitFilterMatch(lp_targetUnit, lv_owner, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
        libGame_gv_scoreValues[lv_owner].lv_supportHeal += lp_amount;
    }

}

void libGame_gf_ScoreValueTrackingAddSupportHealingPrevented (int lp_player, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_scoreValues[lp_player].lv_supportHealingPrevented += lp_amount;
}

void libGame_gf_ScoreValueTrackingAddSupportHeroicDamagePrevented (unit lp_targetUnit, fixed lp_amount) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(lp_targetUnit);

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == true) && (UnitFilterMatch(lp_targetUnit, lv_owner, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
        libGame_gv_scoreValues[lv_owner].lv_supportHeroicDamagePrevented += lp_amount;
    }

}

void libGame_gf_ScoreValuesReportIntegerValueAndLog (int lp_player, string lp_score, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueSetFromInt(lp_player, lp_score, lp_value);
}

void libGame_gf_ScoreValuesReportRealValueAndLog (int lp_player, string lp_score, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueSetFromFixed(lp_player, lp_score, lp_value);
}

void libGame_gf_ScoreValuesRecordXPContributionForPlayer (int lp_player, fixed lp_amount, bool lp_resetAFK) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        return ;
    }

    libGame_gv_scoreValues[lp_player].lv_individualXP += lp_amount;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "IngameXPContribution", FixedToInt(lp_amount));
}

void libGame_gf_ScoreValuesRecordGameScoreForPlayer (int lp_player, fixed lp_amount, fixed lp_scoreModifier, bool lp_resetAFK) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false)) {
        return ;
    }

    libGame_gv_scoreValues[lp_player].lv_gameScore += (lp_amount * lp_scoreModifier);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "IngameGameScore", FixedToInt(libGame_gv_scoreValues[lp_player].lv_gameScore));
}

void libGame_gf_ShrubNearbyEnemyHeroRevealCheck (int lp_player, unit lp_unit, point lp_position) {
    // Variable Declarations
    fixed lv_unitRadius;
    region lv_searchRegion;
    unitgroup lv_nearbyEnemyHeroes;
    unit lv_enemyHero;
    fixed lv_enemyHeroRadius;
    fixed lv_distance;
    unitfilter lv_searchFilter;
    const fixed lv_distanceSlop = 0.1;
    const fixed lv_maxHeroRadius = 1.25;

    // Automatic Variable Declarations
    unitgroup autoC1C05AB2_g;
    int autoC1C05AB2_u;

    // Variable Initialization
    lv_nearbyEnemyHeroes = UnitGroupEmpty();
    lv_searchFilter = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)));

    // Implementation
    lv_unitRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "Radius", c_playerAny));
    lv_searchRegion = RegionCircle(lp_position, (lv_unitRadius + lv_maxHeroRadius + lv_distanceSlop));
    lv_nearbyEnemyHeroes = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lp_player, c_unitAllianceEnemy, lv_searchRegion, lv_searchFilter, 0);
    if ((UnitGroupCount(lv_nearbyEnemyHeroes, c_unitCountAlive) > 0)) {
        autoC1C05AB2_g = lv_nearbyEnemyHeroes;
        autoC1C05AB2_u = UnitGroupCount(autoC1C05AB2_g, c_unitCountAll);
        for (;; autoC1C05AB2_u -= 1) {
            lv_enemyHero = UnitGroupUnitFromEnd(autoC1C05AB2_g, autoC1C05AB2_u);
            if (lv_enemyHero == null) { break; }
            lv_enemyHeroRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_enemyHero), "Radius", c_playerAny));
            lv_distance = DistanceBetweenPoints(lp_position, UnitGetPosition(lv_enemyHero));
            if (((lv_unitRadius + lv_enemyHeroRadius) <= (lv_distance + lv_distanceSlop))) {
                UnitBehaviorAdd(lp_unit, "ShrubProximityRevealed", lv_enemyHero, 1);
                return ;
            }

        }
    }

}

void libGame_gf_DeactivateSkinForPlayer (int lp_skinIndex, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_skinIndex > 0)) {
        if ((libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinLink != null)) {
            PlayerApplySkin(lp_skinIndex, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinLink, false);
        }

        if ((libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_upgradeLink != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_upgradeLink, 0);
        }

    }

}

void libGame_gf_ActivateSkinForPlayer (int lp_skinIndex, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_skinIndex > 0)) {
        if ((libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinLink != null)) {
            PlayerApplySkin(lp_player, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinLink, true);
        }

        if ((libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_upgradeLink != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_upgradeLink, 1);
        }

    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_FCE591A1", "A", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_Game_FCE591A1", "B", libCore_gv_dataHeroesHeroData[libCore_gf_HeroIndexOfPlayerHero(lp_player)].lv_name);
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_FCE591A1"), false);
    }
}

void libGame_gf_TalentsPrepickedLoadBuildsForPlayer (int lp_player, int lp_heroIndex, string lp_buildString) {
    // Variable Declarations
    string lv_heroAttributeID;
    int lv_itBuild;
    string lv_stringToWork;
    string lv_stringTalents;
    string lv_stringTalentsNumberList;
    string lv_stringTalentsNumber;
    int lv_itTier;
    int[libCore_gv_dataHeroesMaxTalentTiers + 1] lv_talentColumn;
    string lv_finalTalentsList;
    string lv_buildString;

    // Automatic Variable Declarations
    const int autoD6FFB298_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int autoD6FFB298_ai = 1;
    const int autoDB474C71_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoDB474C71_ai = 1;

    // Variable Initialization
    lv_heroAttributeID = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroAttributeID;
    lv_stringToWork = "";
    lv_stringTalents = "";
    lv_stringTalentsNumberList = "";
    lv_stringTalentsNumber = "";
    lv_finalTalentsList = "";
    lv_buildString = "";

    // Implementation
    lv_stringToWork = lp_buildString;
    lv_itBuild = 1;
    for ( ; ( (autoD6FFB298_ai >= 0 && lv_itBuild <= autoD6FFB298_ae) || (autoD6FFB298_ai < 0 && lv_itBuild >= autoD6FFB298_ae) ) ; lv_itBuild += autoD6FFB298_ai ) {
        lv_finalTalentsList = "";
        lv_stringTalents = StringWord(lv_stringToWork, lv_itBuild);
        lv_stringTalents = StringSub(lv_stringTalents, (1+1), (StringLength(lv_stringToWork)-1));
        lv_stringTalents = StringReplaceWord(lv_stringTalents, ",", " ", c_stringReplaceAll, c_stringCase);
        lv_stringTalentsNumberList = StringWord(lv_stringTalents, 2);
        lv_stringTalentsNumberList = StringSub(lv_stringTalentsNumberList, 3, StringLength(lv_stringTalentsNumberList));
        lv_itTier = 1;
        for ( ; ( (autoDB474C71_ai >= 0 && lv_itTier <= autoDB474C71_ae) || (autoDB474C71_ai < 0 && lv_itTier >= autoDB474C71_ae) ) ; lv_itTier += autoDB474C71_ai ) {
            lv_stringTalentsNumber = StringSub(lv_stringTalentsNumberList, lv_itTier, lv_itTier);
            lv_talentColumn[lv_itTier] = libGame_gf_TalentsPrepickedGetValidTalentColumn(lv_stringTalentsNumber, lv_itTier, lp_heroIndex);
            libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedTalentColumn[lv_itBuild][lv_itTier] = lv_talentColumn[lv_itTier];
            lv_finalTalentsList = (lv_finalTalentsList + IntToString(lv_talentColumn[lv_itTier]));
        }
        lv_buildString = ("[" + lv_heroAttributeID + ",T" + IntToString(lv_itBuild) + lv_finalTalentsList + "]");
        libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedTalentString[lv_itBuild] = lv_buildString;
    }
}

void libGame_gf_TalentsPrepickedUpdatePrepickedTalentToPressedColumnOfPlayer (int lp_player, int lp_pressedColumn) {
    // Variable Declarations
    int lv_tier;
    int lv_build;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_build = libUIUI_gv_uITalentsPrepickedSelectedBuild[lp_player];
    lv_tier = libGame_gf_TalentsPrepickedGetSelectedTierDependsOnPlayerStatusOfPlayer(lp_player);
    if ((libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_tier] > 0) && (libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_tier] == lp_pressedColumn)) {
        libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_tier] = 0;
    }
    else {
        libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lv_build][lv_tier] = lp_pressedColumn;
    }
    if ((libGame_gv_players[lp_player].lv_playerStatus == libGame_ge_PlayerStatusCore_ChoosingaHero)) {
        libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerHeroSelection(lp_player);
    }
    else if ((libGame_gv_players[lp_player].lv_playerStatus == libGame_ge_PlayerStatusCore_Playing)) {
        libUIUI_gf_UITalentsPrepickedUpdatePrepickedTalentsForPlayerIngame(lp_player);
    }
}

int libGame_gf_TalentsPrepickedGetValidTalentColumn (string lp_talentColumn, int lp_talentTier, int lp_heroIndex) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = StringToInt(lp_talentColumn);
    if (((lv_value < 1) || (lv_value > libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentsCountPerTier[lp_talentTier]))) {
        return 0;
    }

    return lv_value;
}

int libGame_gf_TalentsPrepickedGetSelectedTierDependsOnPlayerStatusOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_player].lv_playerStatus == libGame_ge_PlayerStatusCore_ChoosingaHero)) {
        return libUIUI_gv_heroSelectionSetting.lv_talentTierPressedButton[lp_player];
    }
    else if ((libGame_gv_players[lp_player].lv_playerStatus == libGame_ge_PlayerStatusCore_Playing)) {
        return libUIUI_gv_uITalentsChoicePanelPlayer[lp_player].lv_selectedTier;
    }
    return -1;
}

void libGame_gf_TalentsPrepickedUpdateBuildStringOfPlayer (int lp_player, int lp_build) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_itTalent;
    int lv_column;
    string lv_buildString;
    int lv_tier;

    // Automatic Variable Declarations
    const int auto044E01D0_ae = 15;
    const int auto044E01D0_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_buildString = "";

    // Implementation
    lv_buildString = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentString[lp_build];
    lv_itTalent = 9;
    for ( ; ( (auto044E01D0_ai >= 0 && lv_itTalent <= auto044E01D0_ae) || (auto044E01D0_ai < 0 && lv_itTalent >= auto044E01D0_ae) ) ; lv_itTalent += auto044E01D0_ai ) {
        lv_tier = (lv_itTalent - 8);
        lv_column = libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentColumn[lp_build][lv_tier];
        lv_buildString = StringReplace(lv_buildString, IntToString(lv_column), lv_itTalent, lv_itTalent);
    }
    libGame_gv_players[lp_player].lv_bankDataHero[lv_heroIndex].lv_prepickedTalentString[lp_build] = lv_buildString;
}

void libGame_gf_TalentsPrepickedStoreBuildStringOfHeroForPlayer (int lp_heroIndex, int lp_player) {
    int init_i;

    // Variable Declarations
    bank lv_heroBank;
    string lv_finalBuildString;
    string[libCore_gv_talents_MaxPrepickedTalentProfiles_C + 1] lv_buildStringArray;
    int lv_itBuild;

    // Automatic Variable Declarations
    const int auto9B6C00B9_ae = libCore_gv_talents_MaxPrepickedTalentProfiles_C;
    const int auto9B6C00B9_ai = 1;

    // Variable Initialization
    lv_heroBank = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_heroBank;
    lv_finalBuildString = "";
    for (init_i = 0; init_i <= libCore_gv_talents_MaxPrepickedTalentProfiles_C; init_i += 1) {
        lv_buildStringArray[init_i] = "";
    }

    // Implementation
    lv_itBuild = 1;
    for ( ; ( (auto9B6C00B9_ai >= 0 && lv_itBuild <= auto9B6C00B9_ae) || (auto9B6C00B9_ai < 0 && lv_itBuild >= auto9B6C00B9_ae) ) ; lv_itBuild += auto9B6C00B9_ai ) {
        libGame_gf_TalentsPrepickedUpdateBuildStringOfPlayer(lp_player, lv_itBuild);
        lv_buildStringArray[lv_itBuild] = libGame_gv_players[lp_player].lv_bankDataHero[lp_heroIndex].lv_prepickedTalentString[lv_itBuild];
        lv_finalBuildString = (lv_finalBuildString + lv_buildStringArray[lv_itBuild] + " ");
    }
    BankValueSetFromString(lv_heroBank, "TalentBuilds", "Builds", lv_finalBuildString);
    BankSave(lv_heroBank);
}

bool libGame_gf_TalentChoicesIsHeroicTalentTierOfHero (int lp_talentTier, int lp_heroID) {
    // Automatic Variable Declarations
    // Implementation
    return (libCore_gv_dataHeroesHeroData[lp_heroID].lv_talentHeroicTier == lp_talentTier);
}

int libGame_gf_TalentChoicesGetNextTierOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTier;

    // Automatic Variable Declarations
    const int autoBAFC063E_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoBAFC063E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTier = 1;
    for ( ; ( (autoBAFC063E_ai >= 0 && lv_itTier <= autoBAFC063E_ae) || (autoBAFC063E_ai < 0 && lv_itTier >= autoBAFC063E_ae) ) ; lv_itTier += autoBAFC063E_ai ) {
        if ((libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex == 0)) {
            return lv_itTier;
        }

    }
    return -1;
}

int libGame_gf_TalentChoicesGetCurrentTierOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTier;
    int lv_currentTalentTier;
    int lv_playerLevel;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int autoBA740E82_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoBA740E82_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerLevel = UnitLevel(libGame_gv_players[lp_player].lv_heroUnit);
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_itTier = 1;
    for ( ; ( (autoBA740E82_ai >= 0 && lv_itTier <= autoBA740E82_ae) || (autoBA740E82_ai < 0 && lv_itTier >= autoBA740E82_ae) ) ; lv_itTier += autoBA740E82_ai ) {
        if ((lv_playerLevel >= libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTier])) {
            lv_currentTalentTier = lv_itTier;
        }
        else {
            break;
        }
    }
    return lv_currentTalentTier;
}

void libGame_gf_CoreAddHeroTalentForPlayer (int lp_talentIndex, int lp_player) {
    // Variable Declarations
    int lv_itBehavior;
    int lv_heroIndex;
    int lv_itPlayerResponse;
    int lv_itAdditionalTalent;

    // Automatic Variable Declarations
    int auto4BBBCA15_ae;
    const int auto3C0A8263_ae = libCore_gv_dataHeroesMaxAdditionalTalentsPerTalent;
    const int auto3C0A8263_ai = 1;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    PlayerAddTalent(lp_player, libCore_gv_talentData[lp_talentIndex].lv_talentLink);
    if ((libCore_gv_talentData[lp_talentIndex].lv_effectModification != null)) {
        UnitCreateEffectUnit(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_effectModification, libGame_gv_players[lp_player].lv_heroUnit);
    }

    if ((libCore_gv_talentData[lp_talentIndex].lv_effectOnCreation != null)) {
        UnitCreateEffectUnit(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_effectOnCreation, libGame_gv_players[lp_player].lv_heroUnit);
    }

    auto4BBBCA15_ae = libCore_gv_dataHeroesMaxTalentBehaviorsPerTalent;
    lv_itBehavior = 1;
    for ( ; lv_itBehavior <= auto4BBBCA15_ae ; lv_itBehavior += 1 ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior] != null)) {
            UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior], libGame_gv_players[lp_player].lv_heroUnit, 1);
        }

    }
    if ((libCore_gv_talentData[lp_talentIndex].lv_item != null)) {
        UnitInventoryCreate(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_item);
    }

    if ((libCore_gv_talentData[lp_talentIndex].lv_questTokenCounterBehavior != null)) {
        UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_questTokenCounterBehavior, libGame_gv_players[lp_player].lv_heroUnit, 1);
    }

    libGame_gf_PlayerResponseAddHeroTalentPlayerResponsesForPlayer(lp_talentIndex, lp_player);
    lv_itAdditionalTalent = 1;
    for ( ; ( (auto3C0A8263_ai >= 0 && lv_itAdditionalTalent <= auto3C0A8263_ae) || (auto3C0A8263_ai < 0 && lv_itAdditionalTalent >= auto3C0A8263_ae) ) ; lv_itAdditionalTalent += auto3C0A8263_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_additionalTalentIndex[lv_itAdditionalTalent] > 0) && (PlayerHasTalent(lp_player, libCore_gv_talentData[libCore_gv_talentData[lp_talentIndex].lv_additionalTalentIndex[lv_itAdditionalTalent]].lv_talentLink) == false)) {
            libGame_gf_CoreAddHeroTalentForPlayer(libCore_gv_talentData[lp_talentIndex].lv_additionalTalentIndex[lv_itAdditionalTalent], lp_player);
        }

    }
}

void libGame_gf_CoreResetHeroTalentsForPlayer (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_heroQuestTokenCounter_FinishEffect;
    int lv_itTier;
    int lv_talentIndex;
    int lv_maxArrayValue;
    int lv_itPlayerResponse;

    // Automatic Variable Declarations
    const int auto6D5C389E_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto6D5C389E_ai = 1;
    const int auto5B4B1A01_ae = 1;
    const int auto5B4B1A01_ai = -1;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior != null)) {
        lv_heroQuestTokenCounter_FinishEffect = (CatalogFieldValueGet(c_gameCatalogBehavior, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior, "FinalEffect", c_playerAny));
        UnitCreateEffectUnit(libGame_gv_players[lp_player].lv_heroUnit, lv_heroQuestTokenCounter_FinishEffect, libGame_gv_players[lp_player].lv_heroUnit);
    }

    PlayerClearResponse(lp_player, c_classIdCPlayerResponseUnitDamage, c_damageLocationAttacker);
    PlayerClearResponse(lp_player, c_classIdCPlayerResponseUnitDamage, c_damageLocationDefender);
    lv_itTier = 1;
    for ( ; ( (auto6D5C389E_ai >= 0 && lv_itTier <= auto6D5C389E_ae) || (auto6D5C389E_ai < 0 && lv_itTier >= auto6D5C389E_ae) ) ; lv_itTier += auto6D5C389E_ai ) {
        lv_talentIndex = libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex;
        if ((lv_talentIndex == 0)) {
            continue;
        }

        libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentColumn = 0;
        libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex = 0;
        libGame_gf_CoreRemoveHeroTalentForPlayer(lp_player, lv_talentIndex);
    }
    libGame_gf_PlayerResponseAddHeroPlayerResponsesToPlayer(lv_heroIndex, lp_player);
    lv_itTier = libCore_gv_dataHeroesMaxTalentTiers;
    for ( ; ( (auto5B4B1A01_ai >= 0 && lv_itTier <= auto5B4B1A01_ae) || (auto5B4B1A01_ai < 0 && lv_itTier >= auto5B4B1A01_ae) ) ; lv_itTier += auto5B4B1A01_ai ) {
        if ((UnitXPGetCurrentLevel(libGame_gv_players[lp_player].lv_heroUnit, null) == libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTier])) {
            libGame_gv_players[lp_player].lv_talentPoints = lv_itTier;
            break;
        }

    }
    libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsQuestsForPlayer(lp_player);
    libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsForPlayer(lp_player);
    libUIUI_gf_UITalentsChoicePanelUpdateTalentButtonsForPlayer(lp_player);
    libGame_gf_TalentChoicesUpdateChoicePanelForPlayer(lp_player);
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsQuestsOfPlayer(lp_player);
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsAvailabilityOfPlayer(lp_player);
}

void libGame_gf_CoreRemoveHeroTalentForPlayer (int lp_player, int lp_talentIndex) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_itBehavior;
    int lv_itArray;
    int lv_maxArrayValue;
    string lv_reference;
    unit lv_itInventoryUnit;
    int lv_itAdditionTalent;

    // Automatic Variable Declarations
    int auto89DD76EF_ae;
    const int auto89DD76EF_ai = 1;
    const int auto08CFD5A4_ae = libCore_gv_dataHeroesMaxTalentBehaviorsPerTalent;
    const int auto08CFD5A4_ai = 1;
    unitgroup autoCB0DD70E_g;
    int autoCB0DD70E_u;
    const int auto14A5730A_ae = libCore_gv_dataHeroesMaxAdditionalTalentsPerTalent;
    const int auto14A5730A_ai = 1;

    // Variable Initialization
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_reference = "";

    // Implementation
    PlayerRemoveTalent(lp_player, libCore_gv_talentData[lp_talentIndex].lv_talentLink);
    if ((libCore_gv_talentData[lp_talentIndex].lv_effectModification != null)) {
        lv_maxArrayValue = CatalogFieldValueCount(c_gameCatalogEffect, libCore_gv_talentData[lp_talentIndex].lv_effectModification, "EffectArray", c_playerAny);
        if ((lv_maxArrayValue > 0)) {
            auto89DD76EF_ae = (lv_maxArrayValue-1);
            lv_itArray = 0;
            for ( ; ( (auto89DD76EF_ai >= 0 && lv_itArray <= auto89DD76EF_ae) || (auto89DD76EF_ai < 0 && lv_itArray >= auto89DD76EF_ae) ) ; lv_itArray += auto89DD76EF_ai ) {
                lv_reference = CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_talentData[lp_talentIndex].lv_effectModification, "EffectArray[" + IntToString(lv_itArray) + "].Reference", c_playerAny);
                CatalogReferenceSet(((lv_reference)), lp_player, CatalogReferenceGet((lv_reference), libCore_gv_cOMPUTER_Neutral));
            }
        }

    }

    if ((libCore_gv_talentData[lp_talentIndex].lv_effectOnRemove != null)) {
        UnitCreateEffectUnit(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_effectOnRemove, libGame_gv_players[lp_player].lv_heroUnit);
    }

    lv_itBehavior = 1;
    for ( ; ( (auto08CFD5A4_ai >= 0 && lv_itBehavior <= auto08CFD5A4_ae) || (auto08CFD5A4_ai < 0 && lv_itBehavior >= auto08CFD5A4_ae) ) ; lv_itBehavior += auto08CFD5A4_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior] != null)) {
            UnitBehaviorRemove(lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_behavior[lv_itBehavior], 1);
        }

    }
    if ((libCore_gv_talentData[lp_talentIndex].lv_questTokenCounterBehavior != null)) {
        UnitBehaviorRemove(lv_heroUnit, libCore_gv_talentData[lp_talentIndex].lv_questTokenCounterBehavior, 0);
    }
    if ((libCore_gv_talentData[lp_talentIndex].lv_item != null)) {
        autoCB0DD70E_g = UnitInventoryGroup(lv_heroUnit);
        autoCB0DD70E_u = UnitGroupCount(autoCB0DD70E_g, c_unitCountAll);
        for (;; autoCB0DD70E_u -= 1) {
            lv_itInventoryUnit = UnitGroupUnitFromEnd(autoCB0DD70E_g, autoCB0DD70E_u);
            if (lv_itInventoryUnit == null) { break; }
            if ((UnitGetType(lv_itInventoryUnit) == libCore_gv_talentData[lp_talentIndex].lv_item)) {
                UnitInventoryRemove(lv_itInventoryUnit);
            }

        }
    }

    lv_itAdditionTalent = 1;
    for ( ; ( (auto14A5730A_ai >= 0 && lv_itAdditionTalent <= auto14A5730A_ae) || (auto14A5730A_ai < 0 && lv_itAdditionTalent >= auto14A5730A_ae) ) ; lv_itAdditionTalent += auto14A5730A_ai ) {
        if ((libCore_gv_talentData[lp_talentIndex].lv_additionalTalentIndex[lv_itAdditionTalent] != 0) && (PlayerHasTalent(lp_player, libCore_gv_talentData[libCore_gv_talentData[lp_talentIndex].lv_additionalTalentIndex[lv_itAdditionTalent]].lv_talentLink) == true)) {
            libGame_gf_CoreRemoveHeroTalentForPlayer(lp_player, libCore_gv_talentData[lp_talentIndex].lv_additionalTalentIndex[lv_itAdditionTalent]);
        }

    }
}

void libGame_gf_TalentChoicesChooseTalentForPlayer (int lp_tierIndex, int lp_buttonIndex, int lp_talentIndex, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_players[lp_player].lv_talentPoints -= 1;
    SoundPlayForPlayer(SoundLink("UI_Void_Tech_Select_1", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libGame_gv_talentChoices[lp_player][lp_tierIndex].lv_choosedTalentColumn = lp_buttonIndex;
    libGame_gv_talentChoices[lp_player][lp_tierIndex].lv_choosedTalentIndex = lp_talentIndex;
    libGame_gf_CoreAddHeroTalentForPlayer(lp_talentIndex, lp_player);
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsAvailabilityOfPlayer(lp_player);
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentTierOfPlayer(lp_player, lp_tierIndex);
    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsQuestsOfPlayer(lp_player);
    libUIUI_gf_UITalentsChoicePanelUpdateTalentButtonsForPlayer(lp_player);
    libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsForPlayer(lp_player);
    libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsQuestsForPlayer(lp_player);
    libGame_gf_TalentChoicesUpdateChoicePanelForPlayer(lp_player);
    libUIUI_gf_UIPartyFrameHeroicAbilityIconUpdate(lp_player);
}

bool libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierOnlyLevel (int lp_player, int lp_tier) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitLevel(libGame_gv_players[lp_player].lv_heroUnit) >= libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_talentTierLevel[lp_tier]);
}

bool libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierAndColumn (int lp_player, int lp_tier, int lp_column) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    if ((UnitLevel(libGame_gv_players[lp_player].lv_heroUnit) >= libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lp_tier]) && ((lp_tier == 1) || ((lp_tier > 1) && (libGame_gv_talentChoices[lp_player][(lp_tier - 1)].lv_choosedTalentIndex > 0)))) {
        lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lp_tier][lp_column];
        if ((libCore_gv_talentData[lv_talentIndex].lv_prerequisiteTalentIndex == 0)) {
            return true;
        }
        else {
            if ((libGame_gf_TalentChoicesPlayerHasTalent(lp_player, libCore_gv_talentData[lv_talentIndex].lv_prerequisiteTalentIndex) == true)) {
                return true;
            }
            else {
                return false;
            }
        }
    }

    return false;
}

bool libGame_gf_TalentChoicesPlayerHasTalent (int lp_player, int lp_talentIndex) {
    // Variable Declarations
    int lv_itTier;

    // Automatic Variable Declarations
    const int auto2391B17B_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto2391B17B_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_talentIndex > 0)) {
        lv_itTier = 1;
        for ( ; ( (auto2391B17B_ai >= 0 && lv_itTier <= auto2391B17B_ae) || (auto2391B17B_ai < 0 && lv_itTier >= auto2391B17B_ae) ) ; lv_itTier += auto2391B17B_ai ) {
            if ((libGame_gv_talentChoices[lp_player][lv_itTier].lv_choosedTalentIndex == lp_talentIndex)) {
                return true;
            }

        }
    }

    return false;
}

bool libGame_gf_TalentChoicesPlayerHasAnyTalentOnTier (int lp_player, int lp_tier) {
    // Variable Declarations
    int lv_talentIndex;
    int lv_itColumn;
    int lv_heroIndex;

    // Automatic Variable Declarations
    int auto36707AF2_ae;
    const int auto36707AF2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    auto36707AF2_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentsCountPerTier[lp_tier];
    lv_itColumn = 1;
    for ( ; ( (auto36707AF2_ai >= 0 && lv_itColumn <= auto36707AF2_ae) || (auto36707AF2_ai < 0 && lv_itColumn >= auto36707AF2_ae) ) ; lv_itColumn += auto36707AF2_ai ) {
        lv_talentIndex = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lp_tier][lv_itColumn];
        if ((libGame_gf_TalentChoicesPlayerHasTalent(lp_player, lv_talentIndex) == true)) {
            return true;
        }

    }
    return false;
}

void libGame_gf_TalentChoicesUpdateChoicePanelForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itTier;
    int lv_heroIndex;
    int lv_playerLevel;
    int lv_currentChoice;

    // Automatic Variable Declarations
    const int autoABEB74E4_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoABEB74E4_ai = 1;
    const int auto4F7B5E16_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto4F7B5E16_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_player].lv_talentPoints <= 0)) {
        libUIUI_gf_UITalentsChoicePanelSelectTierForPlayer(0, lp_player);
        return ;
    }

    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_playerLevel = UnitLevel(libGame_gv_players[lp_player].lv_heroUnit);
    lv_itTier = 1;
    for ( ; ( (autoABEB74E4_ai >= 0 && lv_itTier <= autoABEB74E4_ae) || (autoABEB74E4_ai < 0 && lv_itTier >= autoABEB74E4_ae) ) ; lv_itTier += autoABEB74E4_ai ) {
        if ((libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierOnlyLevel(lp_player, lv_itTier) == true) && (libGame_gf_TalentChoicesPlayerHasAnyTalentOnTier(lp_player, lv_itTier) == false)) {
            lv_currentChoice = lv_itTier;
            break;
        }

    }
    if ((lv_playerLevel > 1) && (lv_currentChoice > 0)) {
        libSond_gf_SoundAnnouncerVOPlayAnnouncerVOForPlayer(libCore_ge_AnnouncerVOEvents_TalentUnlocked, lp_player);
    }

    lv_itTier = 1;
    for ( ; ( (auto4F7B5E16_ai >= 0 && lv_itTier <= auto4F7B5E16_ae) || (auto4F7B5E16_ai < 0 && lv_itTier >= auto4F7B5E16_ae) ) ; lv_itTier += auto4F7B5E16_ai ) {
        if ((libGame_gf_TalentChoicesPlayerHasAnyTalentOnTier(lp_player, lv_itTier) == false)) {
            libUIUI_gf_UITalentsChoicePanelSelectTierForPlayer(lv_currentChoice, lp_player);
            break;
        }

    }
}

void libGame_gf_TowerCreateCoreUnderAttackPing (unit lp_coreUnit, int lp_teamNumber) {
    // Variable Declarations
    playergroup lv_pingGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingGroup = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[lp_teamNumber].lv_teamPlayerGroup, lv_pingGroup);
    libCore_gf_CreateMinimapPingCore(lv_pingGroup, "StandardWarning", UnitGetPosition(lp_coreUnit), ColorWithAlpha(0.0, 0.0, 0.0, 0.0), 0);
    libGame_gv_towerTeamCoreAlertPing[lp_teamNumber] = PingLastCreated();
    PingSetModel(PingLastCreated(), "StandardPingCoreAttack");
    PingSetUnit(PingLastCreated(), lp_coreUnit);
    PingSetRotation(PingLastCreated(), 270.0);
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_CoreUnderAttack_Ally", -1), c_maxPlayers, libGame_gv_teams[lp_teamNumber].lv_teamPlayerGroup, 100.0, 0.0);
}

void libGame_gf_TownAddStructureToTownArray (int lp_townIndex, unit lp_structureUnit, int lp_structurePresetValue, int lp_enemyTeam) {
    // Variable Declarations
    int lv_structureIndex;

    // Automatic Variable Declarations
    int auto848C22CC_val;

    // Variable Initialization

    // Implementation
    if ((lp_structurePresetValue == libGame_ge_TownStructureTypes_None)) {
        return ;
    }

    libGame_gv_townTownData[lp_townIndex].lv_structureCount += 1;
    lv_structureIndex = libGame_gv_townTownData[lp_townIndex].lv_structureCount;
    UnitSetCustomValue(lp_structureUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_TownIndex), lp_townIndex);
    UnitSetCustomValue(lp_structureUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_TownStructureIndex), lv_structureIndex);
    libGame_gv_townTownData[lp_townIndex].lv_structureTypes[lv_structureIndex] = lp_structurePresetValue;
    libGame_gv_townTownData[lp_townIndex].lv_structureUnits[lv_structureIndex] = lp_structureUnit;
    libGame_gv_townTownData[lp_townIndex].lv_structureUnitIDs[lv_structureIndex] = UnitGetType(lp_structureUnit);
    libGame_gv_townTownData[lp_townIndex].lv_structureSpawnPoints[lv_structureIndex] = UnitGetPosition(lp_structureUnit);
    auto848C22CC_val = lp_structurePresetValue;
    if (auto848C22CC_val == libGame_ge_TownStructureTypes_TownHall) {
        libGame_gv_townTownData[lp_townIndex].lv_townHallIndex = lv_structureIndex;
        libGame_gv_townTownData[lp_townIndex].lv_townHallPosition = UnitGetPosition(lp_structureUnit);
        libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
        UnitBehaviorAddPlayer(lp_structureUnit, "StandardPowerSourceA", libGame_gv_townTownData[lp_townIndex].lv_owner, 1);
        UnitBehaviorAddPlayer(lp_structureUnit, "StandardPowerSourceB", lp_enemyTeam, 1);
    }
    else if (auto848C22CC_val == libGame_ge_TownStructureTypes_CannonTower) {
        libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
    }
    else if (auto848C22CC_val == libGame_ge_TownStructureTypes_Gate) {
        libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
    }
    else if (auto848C22CC_val == libGame_ge_TownStructureTypes_Moonwell) {
        libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
    }
    else {
    }
}

int libGame_gf_TownGetTownForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_TownIndex, lp_unit);
}

int libGame_gf_TownGetTownStructureIndexForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_TownStructureIndex)));
}

int libGame_gf_TownGetTownStructurePresetFromUnit (unit lp_unit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureCannonTower) == true)) {
        return libGame_ge_TownStructureTypes_CannonTower;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureCore) == true)) {
        return libGame_ge_TownStructureTypes_Core;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureGate) == true)) {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureMoonwell) == true)) {
        return libGame_ge_TownStructureTypes_Moonwell;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureTownHall) == true)) {
        return libGame_ge_TownStructureTypes_TownHall;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureWall) == true)) {
        return libGame_ge_TownStructureTypes_Wall;
    }
    return libGame_ge_TownStructureTypes_None;
}

int libGame_gf_TownGetTownHallPresetOfUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_unit, "TownL2") == true)) {
        return libGame_ge_TownHallTypes_FrontTown;
    }
    else if ((UnitHasBehavior2(lp_unit, "TownL3") == true)) {
        return libGame_ge_TownHallTypes_BackTown;
    }
    return libGame_ge_TownHallTypes_None;
}

int libGame_gf_TownGetTownFromPoint (point lp_point) {
    // Variable Declarations
    int lv_town;

    // Automatic Variable Declarations
    int auto4EBC5822_ae;
    const int auto4EBC5822_ai = 1;

    // Variable Initialization

    // Implementation
    auto4EBC5822_ae = libGame_gv_townTownCount;
    lv_town = 1;
    for ( ; ( (auto4EBC5822_ai >= 0 && lv_town <= auto4EBC5822_ae) || (auto4EBC5822_ai < 0 && lv_town >= auto4EBC5822_ae) ) ; lv_town += auto4EBC5822_ai ) {
        if ((RegionContainsPoint(libGame_gv_townTownData[lv_town].lv_townRegion, lp_point) == true)) {
            return lv_town;
        }

    }
    return 0;
}

bool libGame_gf_TownTownIsAlive (int lp_town, int lp_player) {
    // Variable Declarations
    unitgroup lv_buildings;
    unit lv_itBuilding;

    // Automatic Variable Declarations
    unitgroup autoEA0CE0DE_g;
    int autoEA0CE0DE_u;

    // Variable Initialization
    lv_buildings = UnitGroupEmpty();

    // Implementation
    lv_buildings = UnitGroup(null, lp_player, libGame_gv_townTownData[lp_town].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA0CE0DE_g = lv_buildings;
    autoEA0CE0DE_u = UnitGroupCount(autoEA0CE0DE_g, c_unitCountAll);
    for (;; autoEA0CE0DE_u -= 1) {
        lv_itBuilding = UnitGroupUnitFromEnd(autoEA0CE0DE_g, autoEA0CE0DE_u);
        if (lv_itBuilding == null) { break; }
        if ((UnitHasBehavior2(lv_itBuilding, "TownDeadController@DeadBehavior") == true)) {
            UnitGroupRemove(lv_buildings, lv_itBuilding);
        }

    }
    return !(libNtve_gf_UnitGroupIsDead(lv_buildings));
}

unit libGame_gf_TownTownHall (int lp_town) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_townTownData[lp_town].lv_structureUnits[libGame_gv_townTownData[lp_town].lv_townHallIndex];
}

bool libGame_gf_TownTownHallIsAlive (int lp_townIndex) {
    // Variable Declarations
    unit lv_townUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_townUnit = libGame_gv_townTownData[lp_townIndex].lv_structureUnits[libGame_gv_townTownData[lp_townIndex].lv_townHallIndex];

    // Implementation
    if (((UnitIsAlive(lv_townUnit) == false) || (UnitHasBehavior2(lv_townUnit, "TownDeadController@DeadBehavior") == true))) {
        return false;
    }

    return true;
}

void libGame_gf_TownUpgradeBruiserMinions (int lp_town) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gv_townTownData[lp_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    else {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    libGame_gv_laneData[libGame_gv_townTownData[lp_town].lv_lane].lv_bruiserMinionLevel[lv_team] += 1;
}

void libGame_gf_oldTownAnnounceTownDestroyed (unit lp_fortKeep) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_fortKeep) == libCore_gv_cOMPUTER_TeamOrder)) {
        MinimapPing(libCore_gv_teamOrder, UnitGetPosition(lp_fortKeep), 5.0, libCore_gv_cOLOREnemyColor);
        MinimapPing(libCore_gv_teamChaos, UnitGetPosition(lp_fortKeep), 5.0, libCore_gv_cOLORAllyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libCore_gv_teamOrder, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libCore_gv_teamChaos, 100.0, 0.0);
    }
    else {
        MinimapPing(libCore_gv_teamOrder, UnitGetPosition(lp_fortKeep), 5.0, libCore_gv_cOLORAllyColor);
        MinimapPing(libCore_gv_teamChaos, UnitGetPosition(lp_fortKeep), 5.0, libCore_gv_cOLOREnemyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libCore_gv_teamChaos, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libCore_gv_teamOrder, 100.0, 0.0);
    }
}

void libGame_gf_TownUpdateMoonwellIcon (int lp_townIndex) {
    // Variable Declarations
    int lv_itStructure;
    unit lv_townHall;
    unit lv_moonwell;

    // Automatic Variable Declarations
    int autoF6EFF2AA_ae;
    const int autoF6EFF2AA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_townHall = libGame_gv_townTownData[lp_townIndex].lv_structureUnits[libGame_gv_townTownData[lp_townIndex].lv_townHallIndex];
    autoF6EFF2AA_ae = libGame_gv_townTownData[lp_townIndex].lv_structureCount;
    lv_itStructure = 1;
    for ( ; ( (autoF6EFF2AA_ai >= 0 && lv_itStructure <= autoF6EFF2AA_ae) || (autoF6EFF2AA_ai < 0 && lv_itStructure >= autoF6EFF2AA_ae) ) ; lv_itStructure += autoF6EFF2AA_ai ) {
        if ((libGame_gv_townTownData[lp_townIndex].lv_structureTypes[lv_itStructure] == libGame_ge_TownStructureTypes_Moonwell)) {
            lv_moonwell = libGame_gv_townTownData[lp_townIndex].lv_structureUnits[lv_itStructure];
        }

    }
    if ((libGame_gf_TownTownHallIsAlive(lp_townIndex) == true)) {
        if ((UnitIsAlive(lv_moonwell) == true)) {
            UnitBehaviorRemove(lv_moonwell, "MoonwellSelf", 1);
            if ((UnitGetOwner(lv_townHall) == libCore_gv_cOMPUTER_TeamOrder)) {
                UnitBehaviorAdd(lv_townHall, "MoonwellLeft", lv_townHall, 1);
                UnitBehaviorRemove(lv_townHall, "MoonwellRight", 1);
            }
            else {
                UnitBehaviorAdd(lv_townHall, "MoonwellRight", lv_townHall, 1);
                UnitBehaviorRemove(lv_townHall, "MoonwellLeft", 1);
            }
        }
        else {
            UnitBehaviorRemove(lv_townHall, "MoonwellRight", 1);
            UnitBehaviorRemove(lv_townHall, "MoonwellLeft", 1);
        }
    }
    else {
        if ((UnitIsAlive(lv_moonwell) == true)) {
            UnitBehaviorAdd(lv_moonwell, "MoonwellSelf", lv_moonwell, 1);
        }

    }
}

void libGame_gf_TownAnnounceTownDestroyed (int lp_town, int lp_townType) {
    // Variable Declarations
    int lv_townHallIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_townHallIndex = libGame_gv_townTownData[lp_town].lv_townHallIndex;
    if ((lv_townHallIndex < 0)) {
        return ;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Fort_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((libGame_gv_townTownData[lp_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        MinimapPing(libCore_gv_teamOrder, libGame_gv_townTownData[lp_town].lv_townHallPosition, 5.0, libCore_gv_cOLOREnemyColor);
        MinimapPing(libCore_gv_teamChaos, libGame_gv_townTownData[lp_town].lv_townHallPosition, 5.0, libCore_gv_cOLORAllyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libCore_gv_teamOrder, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libCore_gv_teamChaos, 100.0, 0.0);
        if ((lp_townType == libGame_ge_TownHallTypes_FrontTown)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
    }
    else {
        MinimapPing(libCore_gv_teamOrder, libGame_gv_townTownData[lp_town].lv_townHallPosition, 5.0, libCore_gv_cOLORAllyColor);
        MinimapPing(libCore_gv_teamChaos, libGame_gv_townTownData[lp_town].lv_townHallPosition, 5.0, libCore_gv_cOLOREnemyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libCore_gv_teamChaos, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libCore_gv_teamOrder, 100.0, 0.0);
        if ((lp_townType == libGame_ge_TownHallTypes_FrontTown)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
    }
}

unit libGame_gf_GetSummonerofSummonedUnit (unit lp_summonedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_summonedUnit, "Summon@SummonedUnitTracker") == true)) {
        return UnitGroupUnit(UnitGetTrackedUnitGroup(lp_summonedUnit, "Summon@SummonedUnitTracker"), 1);
    }

    return null;
}

void libGame_gf_WatchTowersChangeWatchTowerOwnership (int lp_watchTower, int lp_newOwner) {
    // Variable Declarations
    int lv_player;
    int lv_pillarUnits;

    // Automatic Variable Declarations
    playergroup auto706756FD_g;

    // Variable Initialization

    // Implementation
    if ((lp_newOwner == libCore_gv_cOMPUTER_Neutral)) {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "AnimBracketStop Capture");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "AnimBracketStart Capture Stand,Work,Start Stand,Work Stand,Work,End");
    }
    UnitSetOwner(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, lp_newOwner, true);
    UnitSetOwner(libGame_gv_watchTowers[lp_watchTower].lv_captureBeaconUnit, lp_newOwner, true);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "Signal ActiveSoundTog");
    Wait(0.125, c_timeGame);
    auto706756FD_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto706756FD_g, lv_player);
        if (lv_player < 0) { break; }
        VisRevealArea(lv_player, RegionCircle(UnitGetPosition(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit), 0.75), 0.75, false);
    }
}

int libGame_gf_WatchTowersGetWatchTowerIndexForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_WatchTowerIndex)));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_IncludeGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_IncludeGame_Init () {
    libGame_gt_IncludeGame = TriggerCreate("libGame_gt_IncludeGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Players
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializePlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_itSlot;
    string lv_itAlert;
    bool lv_intoEnemyTeam;

    // Automatic Variable Declarations
    const int auto410EA96E_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto410EA96E_ai = 1;
    const int autoFF467CBC_ae = libCore_gv_bALMaxPlayers;
    const int autoFF467CBC_ai = 1;
    const int auto1C75F2BF_ae = libCore_gv_bALMaxTeams;
    const int auto1C75F2BF_ai = 1;
    const int auto05B9D669_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto05B9D669_ai = 1;
    int auto5C2686C3_ae;
    playergroup autoAAA83211_g;
    int auto72F8807C_catalog;
    int auto72F8807C_i;
    const int autoD074B8B7_ae = libCore_gv_bALMaxTeams;
    const int autoD074B8B7_ai = 1;
    playergroup auto511484E3_g;
    const int auto52BDD463_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto52BDD463_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NeutralPlayerUnitHandle", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, Point(0.0, 0.0));
    lv_itPlayer = 0;
    for ( ; ( (auto410EA96E_ai >= 0 && lv_itPlayer <= auto410EA96E_ae) || (auto410EA96E_ai < 0 && lv_itPlayer >= auto410EA96E_ae) ) ; lv_itPlayer += auto410EA96E_ai ) {
        libCore_gv_playerGroupFromPlayer[lv_itPlayer] = PlayerGroupSingle(lv_itPlayer);
    }
    libGame_gv_teams[1].lv_nPCPlayer = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_teams[2].lv_nPCPlayer = libCore_gv_cOMPUTER_TeamChaos;
    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_TeamOrder, libCore_gv_cOMPUTER_TeamChaos, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_TeamOrder, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_TeamChaos, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Ally);
    if ((GameIsOnline() == false)) {
        PlayerGroupAdd(libCore_gv_teamOrder, 2);
        PlayerGroupAdd(libCore_gv_teamOrder, 3);
        PlayerGroupAdd(libCore_gv_teamOrder, 4);
        PlayerGroupAdd(libCore_gv_teamOrder, 5);
        PlayerGroupAdd(libCore_gv_teamChaos, 7);
        PlayerGroupAdd(libCore_gv_teamChaos, 8);
        PlayerGroupAdd(libCore_gv_teamChaos, 9);
        PlayerGroupAdd(libCore_gv_teamChaos, 10);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 2);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 3);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 4);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 5);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 7);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 8);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 9);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 10);
        PlayerGroupAdd(libCore_gv_teamChaos, 1);
        PlayerGroupAdd(libCore_gv_teamOrder, 6);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 1);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 6);
    }
    lv_itPlayer = 1;
    for ( ; ( (autoFF467CBC_ai >= 0 && lv_itPlayer <= autoFF467CBC_ae) || (autoFF467CBC_ai < 0 && lv_itPlayer >= autoFF467CBC_ae) ) ; lv_itPlayer += autoFF467CBC_ai ) {
        lv_itTeam = 1;
        for ( ; ( (auto1C75F2BF_ai >= 0 && lv_itTeam <= auto1C75F2BF_ae) || (auto1C75F2BF_ai < 0 && lv_itTeam >= auto1C75F2BF_ae) ) ; lv_itTeam += auto1C75F2BF_ai ) {
            lv_itSlot = 1;
            for ( ; ( (auto05B9D669_ai >= 0 && lv_itSlot <= auto05B9D669_ae) || (auto05B9D669_ai < 0 && lv_itSlot >= auto05B9D669_ae) ) ; lv_itSlot += auto05B9D669_ai ) {
                if ((((GameIsOnline() == false) && (PlayerGroupPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, lv_itSlot) == lv_itPlayer)) || ((GameIsOnline() == true) && (PlayerGroupPlayer(GameAttributePlayersForTeam(lv_itTeam), lv_itSlot) == lv_itPlayer) && (PlayerType(lv_itPlayer) == c_playerTypeUser) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive)))) {
                    libGame_gv_players[lv_itPlayer].lv_playerStatus = libGame_ge_PlayerStatusCore_ChoosingaHero;
                    libGame_gv_players[lv_itPlayer].lv_team = lv_itTeam;
                    libGame_gv_players[lv_itPlayer].lv_playerAllySlot = lv_itSlot;
                    libGame_gv_players[lv_itPlayer].lv_playerName = PlayerName(lv_itPlayer);
                    libGame_gv_players[lv_itPlayer].lv_spawnPoint = libCore_gv_mAPStartPoints[lv_itTeam][lv_itSlot];
                    libGame_gv_players[lv_itPlayer].lv_playerisJoinedatStart = true;
                    libGame_gv_teams[lv_itTeam].lv_teamActivePlayersCount += 1;
                    TechTreeUpgradeAddLevel(lv_itPlayer, "IsHeroPlayer", 1);
                    PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, lv_itPlayer);
                    PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, lv_itPlayer);
                    if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
                        PlayerGroupAdd(libCore_gv_teamOrder, lv_itPlayer);
                        libGame_gv_players[lv_itPlayer].lv_faction = libGame_ge_Faction_Order;
                        libGame_gv_players[lv_itPlayer].lv_rosterSlot = (PlayerGroupCount(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers) + 0);
                    }
                    else {
                        PlayerGroupAdd(libCore_gv_teamChaos, lv_itPlayer);
                        libGame_gv_players[lv_itPlayer].lv_faction = libGame_ge_Faction_Chaos;
                        libGame_gv_players[lv_itPlayer].lv_rosterSlot = (PlayerGroupCount(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers) + libCore_gv_bALMaxPlayersOnATeam);
                    }
                    PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObserver, lv_itPlayer);
                    if ((PlayerType(lv_itPlayer) == c_playerTypeUser) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
                        PlayerGroupAdd(libCore_gv_activeHumanPlayers, lv_itPlayer);
                    }

                    PlayerGroupAdd(libCore_gv_heroPlayersIncludeAIHeroPlayers, lv_itPlayer);
                    PlayerOptionOverride(lv_itPlayer, "simplecommandcard", "0");
                    PlayerOptionOverride(lv_itPlayer, "displayunitstatus", "All");
                    PlayerOptionOverride(lv_itPlayer, "teamcoloredlifestatus", "0");
                    PlayerOptionOverride(lv_itPlayer, "gametooltips", "0");
                    PlayerOptionOverride(lv_itPlayer, "showalerts", "0");
                    PlayerSetState(lv_itPlayer, c_playerStateFidgetingEnabled, false);
                    PlayerSetState(lv_itPlayer, c_playerStateDisplayGameResult, false);
                    PlayerSetState(lv_itPlayer, c_playerStateAlwaysShowUnitTooltip, false);
                    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, lv_itPlayer, libNtve_ge_AllianceSetting_Enemy);
                    CameraPan(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_spawnPoint, 0.0625, -1, 0.0, false);
                    CameraLockInput(lv_itPlayer, true);
                    VisExploreArea(lv_itPlayer, libCore_gv_mAPExploredRegion, true, false);
                }

            }
        }
    }
    auto5C2686C3_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto5C2686C3_ae ; lv_itTeam += 1 ) {
        PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, libGame_gv_teams[lv_itTeam].lv_nPCPlayer);
        VisRevealerCreate(libGame_gv_teams[lv_itTeam].lv_nPCPlayer, libGame_gv_teams[lv_itTeam].lv_baseRegion);
        libGame_gv_teams[lv_itTeam].lv_baseRevealer = VisRevealerLastCreated();
        libGame_gv_players[libGame_gv_teams[lv_itTeam].lv_nPCPlayer].lv_team = lv_itTeam;
        autoAAA83211_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoAAA83211_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gv_players[lv_itPlayer].lv_playerEnemySlot = (libGame_gv_players[lv_itPlayer].lv_playerAllySlot+libGame_gv_teams[(3-lv_itTeam)].lv_teamActivePlayersCount);
            libNtve_gf_SetAlliance(libGame_gv_teams[lv_itTeam].lv_nPCPlayer, lv_itPlayer, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        }
    }
    libGame_gv_players[libCore_gv_cOMPUTER_TeamOrder].lv_faction = libGame_ge_Faction_Order;
    libGame_gv_players[libCore_gv_cOMPUTER_TeamChaos].lv_faction = libGame_ge_Faction_Chaos;
    PlayerGroupAdd(libCore_gv_teamOrder, libCore_gv_cOMPUTER_TeamOrder);
    PlayerGroupAdd(libCore_gv_teamChaos, libCore_gv_cOMPUTER_TeamChaos);
    PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObserver, libCore_gv_oBSERVER_ObserverUIPlayer);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[1].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[2].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libGame_gv_teams[1].lv_teamPlayerGroup, libGame_gv_teams[2].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Neutral);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_TeamOrder);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_TeamChaos);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Hostile);
    auto72F8807C_catalog = c_gameCatalogAlert;
    auto72F8807C_i = 1;
    for ( ; auto72F8807C_i <= CatalogEntryCount(c_gameCatalogAlert) ; auto72F8807C_i += 1 ) {
        lv_itAlert = CatalogEntryGet(auto72F8807C_catalog, auto72F8807C_i);
        UISetAlertTypeVisible(PlayerGroupAll(), lv_itAlert, false);
    }
    lv_itTeam = 1;
    for ( ; ( (autoD074B8B7_ai >= 0 && lv_itTeam <= autoD074B8B7_ae) || (autoD074B8B7_ai < 0 && lv_itTeam >= autoD074B8B7_ae) ) ; lv_itTeam += autoD074B8B7_ai ) {
        auto511484E3_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto511484E3_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_itPlayer);
        }
    }
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    lv_itPlayer = 0;
    for ( ; ( (auto52BDD463_ai >= 0 && lv_itPlayer <= auto52BDD463_ae) || (auto52BDD463_ai < 0 && lv_itPlayer >= auto52BDD463_ae) ) ; lv_itPlayer += auto52BDD463_ai ) {
        MeleeSetOption(lv_itPlayer, c_meleeOptionSplitResources, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializePlayers_Init () {
    libGame_gt_InitializePlayers = TriggerCreate("libGame_gt_InitializePlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Game Systems
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeGameSystems_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGame_gt_InitializeCodeLaneSystem, true, true);
    if ((libCore_gv_sYSTowerAI == true)) {
        libAIAI_gf_TowerTurnTowerSystemOnOff(true);
    }

    TriggerExecute(libGame_gt_InitializeWatchTowers, true, true);
    TriggerExecute(libGame_gt_InitializeTownSystem, true, true);
    TriggerExecute(libMapM_gt_InitializeJungleCamps, true, true);
    TriggerExecute(libGame_gt_InitializeExistedEffects, true, true);
    TriggerExecute(libGame_gt_InitializeBehaviorCategories, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeGameSystems_Init () {
    libGame_gt_InitializeGameSystems = TriggerCreate("libGame_gt_InitializeGameSystems_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Game Data
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeGameData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_matchID_Server;
    string lv_matchID_Handle;
    string lv_matchID_Date;

    // Automatic Variable Declarations
    string autoF3F3A361_val;

    // Variable Initialization
    lv_matchID_Server = "";
    lv_matchID_Handle = "";
    lv_matchID_Date = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_gameData.lv_gameVersion = UserDataInstanceCount("GameVersion");
    libGame_gv_gameData.lv_gameVersionID = (UserDataInstance("GameVersion", libGame_gv_gameData.lv_gameVersion));
    libGame_gv_gameData.lv_gameDate = DateTimeToString(CurrentDateTimeGet());
    if ((GameIsOnline() == true)) {
        lv_matchID_Handle = PlayerHandle(PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1));
        lv_matchID_Handle = StringReplaceWord(lv_matchID_Handle, "-", " ", c_stringReplaceAll, c_stringNoCase);
        lv_matchID_Server = StringWord(lv_matchID_Handle, 1);
        lv_matchID_Handle = StringWord(lv_matchID_Handle, 4);
        lv_matchID_Date = StringReplaceWord(libGame_gv_gameData.lv_gameDate, ":", " ", c_stringReplaceAll, c_stringNoCase);
        lv_matchID_Date = StringSub(lv_matchID_Date, (1+2), (StringLength(lv_matchID_Date)-2));
        lv_matchID_Date = StringReplaceWord(lv_matchID_Date, " ", "", c_stringReplaceAll, c_stringNoCase);
        libGame_gv_gameData.lv_gameMatchID = (lv_matchID_Server + lv_matchID_Handle + lv_matchID_Date);
    }
    else {
        libGame_gv_gameData.lv_gameMatchID = "OfflineTest";
    }
    if ((GameIsOnline() == true)) {
        autoF3F3A361_val = lv_matchID_Server;
        if (autoF3F3A361_val == "1") {
            libGame_gv_gameData.lv_gameServer = libGame_ge_GameDataRegion_NA;
        }
        else if (autoF3F3A361_val == "2") {
            libGame_gv_gameData.lv_gameServer = libGame_ge_GameDataRegion_EU;
        }
        else if (autoF3F3A361_val == "3") {
            libGame_gv_gameData.lv_gameServer = libGame_ge_GameDataRegion_KR;
        }
        else {
        }
        libGame_gv_gameData.lv_gameServerID = libGame_ge_GameDataRegion_Ident(libGame_gv_gameData.lv_gameServer);
    }
    else {
        libGame_gv_gameData.lv_gameServer = libGame_ge_GameDataRegion_OfflineTest;
        libGame_gv_gameData.lv_gameServerID = libGame_ge_GameDataRegion_Ident(libGame_gv_gameData.lv_gameServer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeGameData_Init () {
    libGame_gt_InitializeGameData = TriggerCreate("libGame_gt_InitializeGameData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Healing Received Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsHealingReceivedInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    int autoC825E971_ae;
    int autoB27AECDD_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC825E971_ae = libGame_gv_unitStatsHealingTakenMaxValueNegative;
    lv_i = 1;
    for ( ; lv_i <= autoC825E971_ae ; lv_i += 1 ) {
        lv_j = (libGame_gv_unitStatsHealingTakenMaxValueNegative - lv_i);
        if ((lv_i < 10)) {
            libGame_gv_unitStatsHealingTakenBehaviors[lv_j] = (("StandardHealingTakenNegative0" + IntToString(lv_i)));
        }
        else {
            libGame_gv_unitStatsHealingTakenBehaviors[lv_j] = (("StandardHealingTakenNegative" + IntToString(lv_i)));
        }
    }
    autoB27AECDD_ae = libGame_gv_unitStatsHealingTakenTotalValue;
    lv_i = 101;
    for ( ; lv_i <= autoB27AECDD_ae ; lv_i += 1 ) {
        if ((lv_i < 110)) {
            libGame_gv_unitStatsHealingTakenBehaviors[lv_i] = (("StandardHealingTakenPositive0" + IntToString((lv_i - 100))));
        }
        else {
            libGame_gv_unitStatsHealingTakenBehaviors[lv_i] = (("StandardHealingTakenPositive" + IntToString((lv_i - 100))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsHealingReceivedInitialization_Init () {
    libGame_gt_UnitStatsHealingReceivedInitialization = TriggerCreate("libGame_gt_UnitStatsHealingReceivedInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Lifesteal General Controller
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsLifestealGeneralController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitDamageEffect(), "Lifesteal Ignores General Controller Trigger") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_TriggerEventType() == 68)) {
        lv_amount = (EventUnitDamageAmount() + EventUnitDamageBehaviorShield());
    }
    else if ((libCore_gf_TriggerEventType() == 97) && (libCore_gf_AbsorbedDamageLifestealValid(EventUnitBehavior()) == true)) {
        lv_amount = EventUnitDamageAbsorbed();
    }
    if ((lv_amount > 0.0)) {
        libGame_gf_UnitStatsLifestealCalculation(lv_amount, 0.0, false, true, EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageEffect());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsLifestealGeneralController_Init () {
    libGame_gt_UnitStatsLifestealGeneralController = TriggerCreate("libGame_gt_UnitStatsLifestealGeneralController_Func");
    TriggerAddEventUnitDamaged(libGame_gt_UnitStatsLifestealGeneralController, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libGame_gt_UnitStatsLifestealGeneralController, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Behavior Change Category
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsBehaviorChangeCategory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() != c_unitBehaviorChangeRefresh)) {
        libGame_gf_UnitStatsChangeCustomValue(EventUnitBehavior(), EventUnitBehaviorChange(), lv_unit);
        libGame_gf_UnitStatsUpdateHealing(lv_unit);
    }
    libUIUI_gf_UIUnitStatusRelentlessUnstoppableController(lv_unit);
    libUIUI_gf_UIUnitStatusUpdateArmorAndHealthOfUnit(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsBehaviorChangeCategory_Init () {
    libGame_gt_UnitStatsBehaviorChangeCategory = TriggerCreate("libGame_gt_UnitStatsBehaviorChangeCategory_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatsBehaviorChangeCategory, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatsBehaviorChangeCategory, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatsBehaviorChangeCategory, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Damage Timer
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsDamageTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((EventUnitDamageAmount() + EventUnitDamageBehaviorShield()) > 0.0))) {
            return false;
        }

        if (!((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitDamageEffect(), "NoDamageTimerReset") == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(lv_unit, "Combat2Ticks", 0.125, c_cooldownOperationMax);
    UnitModifyCooldown(lv_unit, "Combat4Ticks", 0.25, c_cooldownOperationMax);
    UnitModifyCooldown(lv_unit, "Combat8Ticks", 0.5, c_cooldownOperationMax);
    UnitModifyCooldown(lv_unit, "Combat16Ticks", 1.0, c_cooldownOperationMax);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsDamageTimer_Init () {
    libGame_gt_UnitStatsDamageTimer = TriggerCreate("libGame_gt_UnitStatsDamageTimer_Func");
    TriggerAddEventUnitDamaged(libGame_gt_UnitStatsDamageTimer, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announcement - Message Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnouncementMessageTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoAAEA99AD_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoAAEA99AD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoAAEA99AD_ai >= 0 && lv_itPlayer <= autoAAEA99AD_ae) || (autoAAEA99AD_ai < 0 && lv_itPlayer >= autoAAEA99AD_ae) ) ; lv_itPlayer += autoAAEA99AD_ai ) {
        if ((EventTimer() == libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer)) {
            libGame_gf_AnnouncementPlayNextItemForPlayer(lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnouncementMessageTimerExpires_Init () {
    libGame_gt_AnnouncementMessageTimerExpires = TriggerCreate("libGame_gt_AnnouncementMessageTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[1].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[2].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[3].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[4].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[5].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[6].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[7].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[8].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[9].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[10].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[11].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[12].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[13].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[14].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[15].lv_messageTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Banks
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeBanks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itHero;

    // Automatic Variable Declarations
    const int auto2CBDBD3E_ae = 14;
    const int auto2CBDBD3E_ai = 1;
    int autoAC6C9A3D_ae;
    const int autoAC6C9A3D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto2CBDBD3E_ai >= 0 && lv_itPlayer <= auto2CBDBD3E_ae) || (auto2CBDBD3E_ai < 0 && lv_itPlayer >= auto2CBDBD3E_ae) ) ; lv_itPlayer += auto2CBDBD3E_ai ) {
        if (((lv_itPlayer == libCore_gv_cOMPUTER_TeamOrder) || (lv_itPlayer == libCore_gv_cOMPUTER_TeamChaos) || (PlayerStatus(lv_itPlayer) == c_playerStatusUnused) || ((GameIsOnline() == false) && (PlayerType(lv_itPlayer) != c_playerTypeUser)))) {
            continue;
        }

        libGame_gf_BankInitializePlayerBankForPlayer(lv_itPlayer);
        autoAC6C9A3D_ae = libCore_gv_dataHeroesNumberOfHeroes;
        lv_itHero = 1;
        for ( ; ( (autoAC6C9A3D_ai >= 0 && lv_itHero <= autoAC6C9A3D_ae) || (autoAC6C9A3D_ai < 0 && lv_itHero >= autoAC6C9A3D_ae) ) ; lv_itHero += autoAC6C9A3D_ai ) {
            libGame_gf_BankInitializeHeroBankForPlayer(lv_itPlayer, lv_itHero);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeBanks_Init () {
    libGame_gt_InitializeBanks = TriggerCreate("libGame_gt_InitializeBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Behavior Categories
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeBehaviorCategories_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_customCategory;
    string lv_categoryControllerBehavior;
    int lv_itBehaviorIndex;
    string lv_itBehavior;
    int lv_itCategory;
    int lv_itAttribute;

    // Automatic Variable Declarations
    int auto27737AFD_catalog;
    int auto27737AFD_i;
    int auto175C8C08_ae;
    const int auto175C8C08_ai = 1;
    int autoB6BDAF99_ae;
    const int autoB6BDAF99_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_Avoidance, "CategoryAvoidance");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_BuffSpellPower, "CategoryBuffSpellPower");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_DamageReduction, "CategoryDamageReduction");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_DebuffSpellPower, "CategoryDebuffSpellPower");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_Dodge, "CategoryDodge");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_HealReduction, "CategoryHealReduction");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_HideNameplate, "CategoryHideNameplate");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_HideStatusFrame, "CategoryHideStatusFrame");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_HostileStasisRemoved, "CategoryHostileStasisRemoved");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_ImmunedToAllyDisplacement, "CategoryImmuneToAllyDisplacement");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_ImmunedToEnemyDisplacement, "CategoryImmuneToEnemyDisplacement");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_KnockedOut, "CategoryKnockedOut");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_MindControl, "CategoryMindControl");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_PermanentMaxHealth, "CategoryPermanentMaxHealth");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_PersistentCloak, "CategoryPersistentCloak");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_PseudoStructure, "CategoryPseudoStructure");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_SpecialDeathState, "CategorySpecialDeathState");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_StackingComboMarker, "CategoryStackingComboMarker");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_SuppressVisibility, "CategorySuppressVisibility");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_Taunt, "CategoryTaunt");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_TemporaryCloak, "CategoryTemporaryCloak");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_UnitRemoved, "CategoryUnitRemoved");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_Unreducible, "CategoryUnreducible");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_UnrevealableCloak, "CategoryUnrevealableCloak");
    libGame_gf_BehaviorCategoriesSetBehaviorCategoryController(libGame_ge_BehaviorCategories_VisionRemoval, "CategoryVisionRemoval");
    auto27737AFD_catalog = c_gameCatalogBehavior;
    auto27737AFD_i = 1;
    for ( ; auto27737AFD_i <= CatalogEntryCount(c_gameCatalogBehavior) ; auto27737AFD_i += 1 ) {
        lv_itBehavior = CatalogEntryGet(auto27737AFD_catalog, auto27737AFD_i);
        if ((UnitBehaviorHasFlag(lv_itBehavior, c_unitBehaviorFlagTimedLife) == true)) {
            auto175C8C08_ae = (CatalogFieldValueCount(c_gameCatalogBehavior, lv_itBehavior, "Modification.AttributeChangeArray", c_playerAny)-1);
            lv_itAttribute = 0;
            for ( ; ( (auto175C8C08_ai >= 0 && lv_itAttribute <= auto175C8C08_ae) || (auto175C8C08_ai < 0 && lv_itAttribute >= auto175C8C08_ae) ) ; lv_itAttribute += auto175C8C08_ai ) {
                lv_categoryControllerBehavior = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_itBehavior, "Modification.AttributeChangeArray[" + IntToString(lv_itAttribute) + "].Attribute", c_playerAny));
                autoB6BDAF99_ae = libGame_gv_behaviorCategoriesCurrentCategoryAmount;
                lv_itCategory = 1;
                for ( ; ( (autoB6BDAF99_ai >= 0 && lv_itCategory <= autoB6BDAF99_ae) || (autoB6BDAF99_ai < 0 && lv_itCategory >= autoB6BDAF99_ae) ) ; lv_itCategory += autoB6BDAF99_ai ) {
                    if ((libGame_gv_behaviorCategories[lv_itCategory].lv_categoryController == lv_categoryControllerBehavior)) {
                        libGame_gf_BehaviorCategoriesIncludeBehaviorInList(libGame_gf_BehaviorCategoriesCoreCategoryPresetOfBehavior(lv_categoryControllerBehavior), lv_itBehavior);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeBehaviorCategories_Init () {
    libGame_gt_InitializeBehaviorCategories = TriggerCreate("libGame_gt_InitializeBehaviorCategories_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Add/Remove Controller
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BehaviorCategoriesAddRemoveController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCategory;
    int lv_itBehaviorList;
    int[libGame_gv_behaviorCategoriesMaximumCategoryCount_C + 1] lv_category;
    int lv_foundCategoryAmount;
    string lv_targetBehavior;
    int lv_targetBehaviorChange;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    int auto21056A35_ae;
    const int auto21056A35_ai = 1;
    int autoAE2EE540_ae;
    const int autoAE2EE540_ai = 1;
    int auto0C31B56B_ae;
    const int auto0C31B56B_ai = 1;
    int auto77267417_ae;
    const int auto77267417_ai = 1;

    // Variable Initialization
    lv_targetBehavior = EventUnitBehavior();
    lv_targetBehaviorChange = EventUnitBehaviorChange();
    lv_targetUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto21056A35_ae = libGame_gv_behaviorCategoriesCurrentCategoryAmount;
    lv_itCategory = 1;
    for ( ; ( (auto21056A35_ai >= 0 && lv_itCategory <= auto21056A35_ae) || (auto21056A35_ai < 0 && lv_itCategory >= auto21056A35_ae) ) ; lv_itCategory += auto21056A35_ai ) {
        autoAE2EE540_ae = libGame_gv_behaviorCategories[lv_itCategory].lv_currentBehaviorCount;
        lv_itBehaviorList = 1;
        for ( ; ( (autoAE2EE540_ai >= 0 && lv_itBehaviorList <= autoAE2EE540_ae) || (autoAE2EE540_ai < 0 && lv_itBehaviorList >= autoAE2EE540_ae) ) ; lv_itBehaviorList += autoAE2EE540_ai ) {
            if ((libGame_gv_behaviorCategories[lv_itCategory].lv_categoryBehaviors[lv_itBehaviorList] == lv_targetBehavior)) {
                lv_foundCategoryAmount += 1;
                lv_category[lv_foundCategoryAmount] = libGame_gf_BehaviorCategoriesCategoryPresetFromInteger(lv_itCategory);
                break;
            }

        }
    }
    if ((lv_foundCategoryAmount == 0)) {
        return true;
    }

    if ((lv_targetBehaviorChange == c_unitBehaviorChangeActivate)) {
        auto0C31B56B_ae = lv_foundCategoryAmount;
        lv_itCategory = 1;
        for ( ; ( (auto0C31B56B_ai >= 0 && lv_itCategory <= auto0C31B56B_ae) || (auto0C31B56B_ai < 0 && lv_itCategory >= auto0C31B56B_ae) ) ; lv_itCategory += auto0C31B56B_ai ) {
            UnitBehaviorAdd(lv_targetUnit, libGame_gv_behaviorCategories[lv_category[lv_itCategory]].lv_categoryController, lv_targetUnit, 1);
            libGame_gf_SendEventBehaviorCategoriesChanges(lv_targetBehavior, lv_category[lv_itCategory], lv_targetBehaviorChange, lv_targetUnit);
        }
    }
    else if ((lv_targetBehaviorChange == c_unitBehaviorChangeDeactivate)) {
        auto77267417_ae = lv_foundCategoryAmount;
        lv_itCategory = 1;
        for ( ; ( (auto77267417_ai >= 0 && lv_itCategory <= auto77267417_ae) || (auto77267417_ai < 0 && lv_itCategory >= auto77267417_ae) ) ; lv_itCategory += auto77267417_ai ) {
            if ((libGame_gf_BehaviorCategoriesUnitHasCategoryBehavior(lv_targetUnit, lv_category[lv_itCategory]) == false)) {
                UnitBehaviorRemove(lv_targetUnit, libGame_gv_behaviorCategories[lv_category[lv_itCategory]].lv_categoryController, 1);
                libGame_gf_SendEventBehaviorCategoriesChanges(lv_targetBehavior, lv_category[lv_itCategory], lv_targetBehaviorChange, lv_targetUnit);
            }

        }
    }
    libUIUI_gf_UIUnitStatusUpdateArmorAndHealthOfUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BehaviorCategoriesAddRemoveController_Init () {
    libGame_gt_BehaviorCategoriesAddRemoveController = TriggerCreate("libGame_gt_BehaviorCategoriesAddRemoveController_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_BehaviorCategoriesAddRemoveController, null, c_unitBehaviorFlagTimedLife, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_BehaviorCategoriesAddRemoveController, null, c_unitBehaviorFlagTimedLife, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Decloak Unrevealable Cloak
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_BehaviorCategoriesRemoveCategoryBehaviorsFromUnit(libGame_ge_BehaviorCategories_UnrevealableCloak, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak_Init () {
    libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak = TriggerCreate("libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak, c_playerAny, "DecloakUnrevealableCloakCaster");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak, c_playerAny, "DecloakUnrevealableCloakSource");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak, c_playerAny, "DecloakUnrevealableCloakTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Decloak Temporary Cloak
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BehaviorCategoriesDecloakTemporaryCloak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_BehaviorCategoriesRemoveCategoryBehaviorsFromUnit(libGame_ge_BehaviorCategories_TemporaryCloak, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BehaviorCategoriesDecloakTemporaryCloak_Init () {
    libGame_gt_BehaviorCategoriesDecloakTemporaryCloak = TriggerCreate("libGame_gt_BehaviorCategoriesDecloakTemporaryCloak_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BehaviorCategoriesDecloakTemporaryCloak, c_playerAny, "DecloakTemporaryCloakCaster");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BehaviorCategoriesDecloakTemporaryCloak, c_playerAny, "DecloakTemporaryCloakSource");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BehaviorCategoriesDecloakTemporaryCloak, c_playerAny, "DecloakTemporaryCloakTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Cleanse Remove CC Behavior Categories Expanded
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BehaviorCategoriesCleanseRemoveCCBehaviorCategoriesExpanded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_BehaviorCategoriesRemoveCategoryBehaviorsFromUnit(libGame_ge_BehaviorCategories_VisionRemoval, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    libGame_gf_BehaviorCategoriesRemoveCategoryBehaviorsFromUnit(libGame_ge_BehaviorCategories_StackingComboMarker, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BehaviorCategoriesCleanseRemoveCCBehaviorCategoriesExpanded_Init () {
    libGame_gt_BehaviorCategoriesCleanseRemoveCCBehaviorCategoriesExpanded = TriggerCreate("libGame_gt_BehaviorCategoriesCleanseRemoveCCBehaviorCategoriesExpanded_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BehaviorCategoriesCleanseRemoveCCBehaviorCategoriesExpanded, c_playerAny, "HeroGenericCleanseRemoveCCBehaviorCategoriesExpandedTarget");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BehaviorCategoriesCleanseRemoveCCBehaviorCategoriesExpanded, c_playerAny, "HeroGenericCleanseRemoveCCBehaviorCategoriesExpandedCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Movement Controller
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BehaviorCategoriesMovementController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_movespeedCurrent;
    fixed lv_movespeedDefault;
    bool lv_isSlowed;
    bool lv_isFast;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(lv_unit) == true) || (UnitHasBehavior2(lv_unit, "CategorySpecialDeathState") == true))) {
        libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck0");
        libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck0");
        return true;
    }

    lv_isSlowed = libCore_gf_ExecuteValidatorOnUnit("TargetIsSlowed", lv_unit, lv_unit);
    lv_isFast = libCore_gf_ExecuteValidatorOnUnit("TargetIsFast", lv_unit, lv_unit);
    lv_movespeedCurrent = UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropCurrent);
    lv_movespeedDefault = UnitGetPropertyFixed(lv_unit, c_unitPropMovementSpeed, c_unitPropNormal);
    if ((lv_isSlowed == true)) {
        if ((lv_movespeedCurrent >= lv_movespeedDefault)) {
            libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck0");
        }
        else if ((lv_movespeedCurrent < lv_movespeedDefault) && (lv_movespeedCurrent > (lv_movespeedDefault / 2.0))) {
            libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck1");
        }
        else if ((lv_movespeedCurrent <= (lv_movespeedDefault / 2.0))) {
            libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck2");
        }
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedSlowCheck0");
    }
    if ((lv_isFast == true)) {
        if ((UnitHasBehavior2(lv_unit, "HeroGenericMount@Mounted") == false)) {
            if ((lv_movespeedCurrent <= (lv_movespeedDefault * 1.1))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck0");
            }
            else if ((lv_movespeedCurrent > (lv_movespeedDefault * 1.1)) && (lv_movespeedCurrent <= (lv_movespeedDefault * 1.25))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck1");
            }
            else if ((lv_movespeedCurrent > (lv_movespeedDefault * 1.25))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck2");
            }
        }
        else {
            if ((lv_movespeedCurrent <= (lv_movespeedDefault * 1.3))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck0");
            }
            else if ((lv_movespeedCurrent > (lv_movespeedDefault * 1.3))) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck2");
            }
        }
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedFastCheck0");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BehaviorCategoriesMovementController_Init () {
    libGame_gt_BehaviorCategoriesMovementController = TriggerCreate("libGame_gt_BehaviorCategoriesMovementController_Func");
    TriggerAddEventUnitProperty(libGame_gt_BehaviorCategoriesMovementController, null, c_unitPropMovementSpeed);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_BehaviorCategoriesMovementController, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_BehaviorCategoriesMovementController, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Logic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CapturePointLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_captureIncrement = 1;
    unit lv_itUnit;
    int lv_capturePointIndex;
    int lv_orderTeamHeroes;
    int lv_chaosTeamHeroes;
    playergroup lv_capturingPlayers;
    bool lv_hasOverCaptureRegion;
    bool lv_becameFullyCaptured;
    bool lv_capperHasMercLordTalent;
    int lv_newOwnerPlayer;

    // Automatic Variable Declarations
    int auto318A7F83_ae;
    const int auto318A7F83_ai = 1;
    unitgroup autoD0047345_g;
    int autoD0047345_u;
    int auto7A18317D_val;
    playergroup auto35C6319C_g;
    int auto35C6319C_var;
    playergroup autoCCFBCF4A_g;
    int autoCCFBCF4A_var;

    // Variable Initialization
    lv_capturingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto318A7F83_ae = libGame_gv_capturePointCurrentCount;
    lv_capturePointIndex = 1;
    for ( ; ( (auto318A7F83_ai >= 0 && lv_capturePointIndex <= auto318A7F83_ae) || (auto318A7F83_ai < 0 && lv_capturePointIndex >= auto318A7F83_ae) ) ; lv_capturePointIndex += auto318A7F83_ai ) {
        if ((UnitHasBehavior2(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "DisableBeaconBuff") == true)) {
            continue;
        }

        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_enabled == false)) {
            continue;
        }

        lv_orderTeamHeroes = 0;
        lv_chaosTeamHeroes = 0;
        autoD0047345_g = UnitGroup(null, c_playerAny, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion, libCore_gv_filtersHeroic, 0);
        autoD0047345_u = UnitGroupCount(autoD0047345_g, c_unitCountAll);
        for (;; autoD0047345_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoD0047345_g, autoD0047345_u);
            if (lv_itUnit == null) { break; }
            UnitBehaviorAdd(lv_itUnit, "HeroGenericHeroOnCapturePoint", lv_itUnit, 1);
            if (((UnitFilterMatch(lv_itUnit, UnitGetOwner(lv_itUnit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true) || ((UnitHasBehavior2(lv_itUnit, "CapturePointAllowed") == true) && (UnitHasBehavior2(lv_itUnit, "HeroAbathurUltimateEvolution@Buff") == true)) || ((UnitHasBehavior2(lv_itUnit, "CapturePointAllowed") == true) && (UnitTestState(lv_itUnit, c_unitStateHallucination) == false)))) {
                if ((libGame_gv_players[UnitGetOwner(lv_itUnit)].lv_faction == libGame_ge_Faction_Order)) {
                    lv_orderTeamHeroes += 1;
                }
                else {
                    lv_chaosTeamHeroes += 1;
                }
                PlayerGroupAdd(lv_capturingPlayers, UnitGetOwner(lv_itUnit));
                if ((UnitHasBehavior2(lv_itUnit, "TalentBucket_MercenaryLord_CarryBehavior") == true)) {
                    lv_capperHasMercLordTalent = true;
                }

            }

        }
        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_decayToOwner == true)) {
            auto7A18317D_val = UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit);
            if (auto7A18317D_val == libCore_gv_cOMPUTER_TeamOrder) {
                if ((lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                }

            }
            else if (auto7A18317D_val == libCore_gv_cOMPUTER_TeamChaos) {
                if ((lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                }

            }
            else if (auto7A18317D_val == libCore_gv_cOMPUTER_Neutral) {
                if ((lv_orderTeamHeroes == 0) && (lv_chaosTeamHeroes == 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                    }

                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                    }

                }

            }
            else {
            }
        }

        if ((lv_orderTeamHeroes > 0) && (lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + lv_captureIncrement) >= libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints;
            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
            }
        }

        if ((lv_chaosTeamHeroes > 0) && (lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter - lv_captureIncrement) <= (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints);
            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
            }
        }

        libNtve_gf_SetDialogItemCurrentValue(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureProgressBar, (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints), PlayerGroupAll());
        if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_Neutral) && (((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_TeamOrder) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == false) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1)) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)))) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_Neutral, 0, lv_capturingPlayers, lv_capperHasMercLordTalent);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_TeamOrder) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
            auto35C6319C_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers;
            auto35C6319C_var = -1;
            while (true) {
                auto35C6319C_var = PlayerGroupNextPlayer(auto35C6319C_g, auto35C6319C_var);
                if (auto35C6319C_var < 0) { break; }
                if (((libNtve_gf_UnitInRegion(libGame_gv_players[auto35C6319C_var].lv_heroUnit, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true) || (libNtve_gf_UnitInRegion(libGame_gv_players[auto35C6319C_var].lv_activeVehicle, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true))) {
                    lv_newOwnerPlayer = auto35C6319C_var;
                    break;
                }

            }
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_TeamOrder, lv_newOwnerPlayer, lv_capturingPlayers, lv_capperHasMercLordTalent);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
            autoCCFBCF4A_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers;
            autoCCFBCF4A_var = -1;
            while (true) {
                autoCCFBCF4A_var = PlayerGroupNextPlayer(autoCCFBCF4A_g, autoCCFBCF4A_var);
                if (autoCCFBCF4A_var < 0) { break; }
                if (((libNtve_gf_UnitInRegion(libGame_gv_players[autoCCFBCF4A_var].lv_heroUnit, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true) || (libNtve_gf_UnitInRegion(libGame_gv_players[autoCCFBCF4A_var].lv_activeVehicle, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true))) {
                    lv_newOwnerPlayer = autoCCFBCF4A_var;
                    break;
                }

            }
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_TeamChaos, lv_newOwnerPlayer, lv_capturingPlayers, lv_capperHasMercLordTalent);
        }
        lv_hasOverCaptureRegion = (libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints >= libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture);
        if ((lv_becameFullyCaptured == true) && (lv_hasOverCaptureRegion == true)) {
            libGame_gf_SendEventCapturePointBecomesFullyOverCaptured(lv_capturePointIndex);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CapturePointLogic_Init () {
    libGame_gt_CapturePointLogic = TriggerCreate("libGame_gt_CapturePointLogic_Func");
    TriggerEnable(libGame_gt_CapturePointLogic, false);
    TriggerAddEventTimePeriodic(libGame_gt_CapturePointLogic, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dim Capture Point
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DimCapturePoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCapturePointIndex;

    // Automatic Variable Declarations
    const int autoC075120A_ae = libGame_gv_capturePointMaxCount_C;
    const int autoC075120A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itCapturePointIndex = 1;
    for ( ; ( (autoC075120A_ai >= 0 && lv_itCapturePointIndex <= autoC075120A_ae) || (autoC075120A_ai < 0 && lv_itCapturePointIndex >= autoC075120A_ae) ) ; lv_itCapturePointIndex += autoC075120A_ai ) {
        if ((EventUnit() == libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit)) {
            DialogControlSetAnimationState(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureProgressBarDimmingFrame, PlayerGroupAll(), "IsDim", "DimmedOn");
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit, "SetTintColor 35,35,35 0.000000 OneShot VoidPrisonTint");
            libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal PauseCapturePoint", null, RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit), 12.0));
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DimCapturePoint_Init () {
    libGame_gt_DimCapturePoint = TriggerCreate("libGame_gt_DimCapturePoint_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_DimCapturePoint, null, "DisableBeaconBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnDim Capture Point
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnDimCapturePoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCapturePointIndex;

    // Automatic Variable Declarations
    const int auto34124284_ae = libGame_gv_capturePointMaxCount_C;
    const int auto34124284_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itCapturePointIndex = 1;
    for ( ; ( (auto34124284_ai >= 0 && lv_itCapturePointIndex <= auto34124284_ae) || (auto34124284_ai < 0 && lv_itCapturePointIndex >= auto34124284_ae) ) ; lv_itCapturePointIndex += auto34124284_ai ) {
        if ((EventUnit() == libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit)) {
            DialogControlSetAnimationState(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureProgressBarDimmingFrame, PlayerGroupAll(), "IsDim", "DimmedOff");
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit, "ClearTintColor 0.000000 VoidPrisonTint");
            libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal UnPauseCapturePoint", null, RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit), 12.0));
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnDimCapturePoint_Init () {
    libGame_gt_UnDimCapturePoint = TriggerCreate("libGame_gt_UnDimCapturePoint_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_UnDimCapturePoint, null, "DisableBeaconBuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Root
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionRoot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(EventUnitBehavior(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionRoot_Init () {
    libGame_gt_CCRecognitionRoot = TriggerCreate("libGame_gt_CCRecognitionRoot_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionRoot, null, c_unitBehaviorFlagUser6, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Stun
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionStun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(EventUnitBehavior(), EventUnit());
    if ((EventUnit() == libCore_gf_CoreCurrentHeroOrVehicleOfPlayer(EventPlayer()))) {
        libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(EventPlayer(), UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionStun_Init () {
    libGame_gt_CCRecognitionStun = TriggerCreate("libGame_gt_CCRecognitionStun_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionStun, null, c_unitBehaviorFlagStun, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Silenced
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionSilenced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(EventUnitBehavior(), EventUnit());
    if ((EventUnit() == libCore_gf_CoreCurrentHeroOrVehicleOfPlayer(EventPlayer()))) {
        libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(EventPlayer(), UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionSilenced_Init () {
    libGame_gt_CCRecognitionSilenced = TriggerCreate("libGame_gt_CCRecognitionSilenced_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSilenced, null, c_unitBehaviorFlagUser7, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Stasis
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionStasis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(EventUnitBehavior(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionStasis_Init () {
    libGame_gt_CCRecognitionStasis = TriggerCreate("libGame_gt_CCRecognitionStasis_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionStasis, null, c_unitBehaviorFlagAura, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Color Blind Update
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ColorBlindUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal UpdateColorBlind");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ColorBlindUpdate_Init () {
    libGame_gt_ColorBlindUpdate = TriggerCreate("libGame_gt_ColorBlindUpdate_Func");
    TriggerAddEventTimePeriodic(libGame_gt_ColorBlindUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Existed Effects
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeExistedEffects_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_EffectHistoryAddEffectToExistedEffects("GuardTowerL1WeaponDamage", "BasicAttack", libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon);
    libGame_gf_EffectHistoryAddEffectToExistedEffects("GuardTowerL2WeaponDamage", "BasicAttack", libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon);
    libGame_gf_EffectHistoryAddEffectToExistedEffects("GuardTowerL3WeaponDamage", "BasicAttack", libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon);
    libGame_gf_EffectHistoryAddEffectToExistedEffects("TownHallL1WeaponDamage", "BasicAttack", libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon);
    libGame_gf_EffectHistoryAddEffectToExistedEffects("TownHallL2WeaponDamage", "BasicAttack", libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon);
    libGame_gf_EffectHistoryAddEffectToExistedEffects("TownHallL3WeaponDamage", "BasicAttack", libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon);
    libGame_gf_EffectHistoryAddEffectToExistedEffects("KingsCoreWeaponDamage", "BasicAttack", libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon);
    libGame_gf_EffectHistoryAddEffectToExistedEffects("RegenGlobe@PickupHealthPercentModifier", "RegenGlobe", libGame_ge_EffectHistoryAbilityTalentWeapon_Ability);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeExistedEffects_Init () {
    libGame_gt_InitializeExistedEffects = TriggerCreate("libGame_gt_InitializeExistedEffects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect History - Damage Taken
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EffectHistoryDamageTaken_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == libGame_gf_PlayerHeroUnit(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_TriggerEventType() == 68)) {
        libGame_gf_EffectHistoryAddEffectInHistoryForPlayer(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageAmount(), EventUnitDamageAttempted(), EventUnitDamageBehaviorShield(), libGame_ge_EffectHistoryDamagedOrHealed_Damaged, EventUnitDamageEffect());
    }
    else if ((libCore_gf_TriggerEventType() == 97)) {
        if ((UnitBehaviorHasFlag(EventUnitBehavior(), c_unitBehaviorFlagPhysical) == true)) {
            libGame_gf_EffectHistoryAddEffectInHistoryForPlayer(EventUnitDamageSourceUnit(), EventUnit(), 0.0, EventUnitDamageAttempted(), EventUnitDamageAbsorbed(), libGame_ge_EffectHistoryDamagedOrHealed_Damaged, EventUnitDamageEffect());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EffectHistoryDamageTaken_Init () {
    libGame_gt_EffectHistoryDamageTaken = TriggerCreate("libGame_gt_EffectHistoryDamageTaken_Func");
    TriggerAddEventUnitDamaged(libGame_gt_EffectHistoryDamageTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libGame_gt_EffectHistoryDamageTaken, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect History - Healed
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EffectHistoryHealed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == libGame_gf_PlayerHeroUnit(EventPlayer())))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "StandardLifesteal"))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "StandardLifestealCritical"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_EffectHistoryAddEffectInHistoryForPlayer(EventUnitHealLaunchUnit(), EventUnit(), EventUnitHealAmount(), 0.0, 0.0, libGame_ge_EffectHistoryDamagedOrHealed_Healed, EventUnitHealEffect());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EffectHistoryHealed_Init () {
    libGame_gt_EffectHistoryHealed = TriggerCreate("libGame_gt_EffectHistoryHealed_Func");
    TriggerAddEventUnitHealed(libGame_gt_EffectHistoryHealed, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect History - Lifesteal
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EffectHistoryLifesteal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerHeroUnit(UnitGetOwner(libGame_gf_HeroLifestealHero())) == libGame_gf_HeroLifestealHero()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_EffectHistoryAddEffectInHistoryForPlayer(libGame_gf_HeroLifestealHero(), libGame_gf_HeroLifestealHero(), libGame_gf_HeroLifestealAmount(), 0.0, 0.0, libGame_ge_EffectHistoryDamagedOrHealed_Healed, libGame_gf_HeroLifestealDamagingEffect());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EffectHistoryLifesteal_Init () {
    libGame_gt_EffectHistoryLifesteal = TriggerCreate("libGame_gt_EffectHistoryLifesteal_Func");
    libGame_gf_HeroLifesteal(libGame_gt_EffectHistoryLifesteal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking In Combat Start
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingInCombatStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagingUnit;
    unit lv_targetUnit;
    int lv_damagingPlayer;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damagingUnit = EventUnitDamageSourceUnit();
    lv_targetUnit = EventUnit();
    lv_damagingPlayer = EventUnitDamageSourcePlayer();
    lv_targetPlayer = EventPlayer();
    if ((UnitIsValid(lv_damagingUnit) == true) && (lv_damagingUnit == libGame_gv_players[lv_damagingPlayer].lv_heroUnit)) {
        libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombat = true;
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombatDurationTimer, c_timerDurationInfinite, false, c_timeGame);
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombatTimeoutTimer, libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C, false, c_timeGame);
    }

    if ((UnitIsValid(lv_targetUnit) == true) && (lv_targetUnit == libGame_gv_players[lv_damagingPlayer].lv_heroUnit)) {
        libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombat = true;
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombatDurationTimer, c_timerDurationInfinite, false, c_timeGame);
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombatTimeoutTimer, libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingInCombatStart_Init () {
    libGame_gt_EncouragementDataTrackingInCombatStart = TriggerCreate("libGame_gt_EncouragementDataTrackingInCombatStart_Func");
    TriggerAddEventUnitDamaged(libGame_gt_EncouragementDataTrackingInCombatStart, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking In Combat Timeout
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingInCombatTimeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    const int auto8FCFB595_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto8FCFB595_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto8FCFB595_ai >= 0 && lv_itPlayer <= auto8FCFB595_ae) || (auto8FCFB595_ai < 0 && lv_itPlayer >= auto8FCFB595_ae) ) ; lv_itPlayer += auto8FCFB595_ai ) {
        if ((EventTimer() == libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_inCombatTimeoutTimer)) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }

    }
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_inCombat = false;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_inCombatDurationTimer, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_alliedHeroesNearby = true;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_timeWithNoAlliedHeroesNearby, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_alliedMinionsNearby = true;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_timeWithNoAlliedMinionsNearby, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_enemyMinionDamageTaken = 0.0;
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentHeroKills = 0;
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentStructureDamageTaken = false;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentStructureDamageTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingInCombatTimeout_Init () {
    libGame_gt_EncouragementDataTrackingInCombatTimeout = TriggerCreate("libGame_gt_EncouragementDataTrackingInCombatTimeout_Func");
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[1].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[2].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[3].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[4].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[5].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[6].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[7].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[8].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[9].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[10].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[11].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[12].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[13].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[14].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[15].lv_inCombatTimeoutTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Animations
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RunAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTown;
    int lv_itStructure;

    // Automatic Variable Declarations
    int auto19E6853A_ae;
    const int auto19E6853A_ai = 1;
    int autoE8EF6B85_ae;
    const int autoE8EF6B85_ai = 1;
    int autoA1216A7E_ae;
    const int autoA1216A7E_ai = 1;
    int auto731D81D5_ae;
    const int auto731D81D5_ai = 1;
    int auto68779A05_ae;
    const int auto68779A05_ai = 1;
    int auto0665BF1F_ae;
    const int auto0665BF1F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSCustomRunAnimationsEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, "Signal PlayBuild");
    libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "Signal PlayBuild");
    Wait(12.0, c_timeGame);
    auto19E6853A_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (auto19E6853A_ai >= 0 && lv_itTown <= auto19E6853A_ae) || (auto19E6853A_ai < 0 && lv_itTown >= auto19E6853A_ae) ) ; lv_itTown += auto19E6853A_ai ) {
        autoE8EF6B85_ae = libGame_gv_townTownData[lv_itTown].lv_structureCount;
        lv_itStructure = 1;
        for ( ; ( (autoE8EF6B85_ai >= 0 && lv_itStructure <= autoE8EF6B85_ae) || (autoE8EF6B85_ai < 0 && lv_itStructure >= autoE8EF6B85_ae) ) ; lv_itStructure += autoE8EF6B85_ai ) {
            if ((libGame_gv_townTownData[lv_itTown].lv_structureTypes[lv_itStructure] == libGame_ge_TownStructureTypes_TownHall)) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_townTownData[lv_itTown].lv_structureUnits[lv_itStructure], "Signal PlayBuild");
            }

        }
    }
    Wait(2.0, c_timeGame);
    autoA1216A7E_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoA1216A7E_ai >= 0 && lv_itTown <= autoA1216A7E_ae) || (autoA1216A7E_ai < 0 && lv_itTown >= autoA1216A7E_ae) ) ; lv_itTown += autoA1216A7E_ai ) {
        auto731D81D5_ae = libGame_gv_townTownData[lv_itTown].lv_structureCount;
        lv_itStructure = 1;
        for ( ; ( (auto731D81D5_ai >= 0 && lv_itStructure <= auto731D81D5_ae) || (auto731D81D5_ai < 0 && lv_itStructure >= auto731D81D5_ae) ) ; lv_itStructure += auto731D81D5_ai ) {
            if ((libGame_gv_townTownData[lv_itTown].lv_structureTypes[lv_itStructure] == libGame_ge_TownStructureTypes_CannonTower)) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_townTownData[lv_itTown].lv_structureUnits[lv_itStructure], "Signal PlayBuild");
            }

        }
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 6.0, false);
    auto68779A05_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (auto68779A05_ai >= 0 && lv_itTown <= auto68779A05_ae) || (auto68779A05_ai < 0 && lv_itTown >= auto68779A05_ae) ) ; lv_itTown += auto68779A05_ai ) {
        auto0665BF1F_ae = libGame_gv_townTownData[lv_itTown].lv_structureCount;
        lv_itStructure = 1;
        for ( ; ( (auto0665BF1F_ai >= 0 && lv_itStructure <= auto0665BF1F_ae) || (auto0665BF1F_ai < 0 && lv_itStructure >= auto0665BF1F_ae) ) ; lv_itStructure += auto0665BF1F_ai ) {
            if ((libGame_gv_townTownData[lv_itTown].lv_structureTypes[lv_itStructure] == libGame_ge_TownStructureTypes_Gate)) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_townTownData[lv_itTown].lv_structureUnits[lv_itStructure], "Signal PlayBuild");
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RunAnimations_Init () {
    libGame_gt_RunAnimations = TriggerCreate("libGame_gt_RunAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open The Gates (Open The Gates Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    unitgroup auto4C45A59A_g;
    int auto4C45A59A_u;
    unit auto4C45A59A_var;
    unitgroup autoA56EBEB5_g;
    int autoA56EBEB5_u;
    unit autoA56EBEB5_var;
    playergroup autoE473043F_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetMissionTimePaused(false);
    libCore_gv_gameStarted = true;
    TimerStart(libGame_gv_gameTimer, c_timerDurationInfinite, false, c_timeGame);
    TriggerExecute(libGame_gt_SpawnMinions, true, false);
    TriggerExecute(libMapM_gt_JungleTurnOnCamps, true, false);
    TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    TimerStart(libGame_gv_xPTrickleStartTimer, libCore_gv_bALXPTrickleStartDelay, false, c_timeGame);
    TimerStart(libGame_gv_towerMainCoreAlertTimer, libGame_gv_towerCoreUnderAttackScanPeriod, false, c_timeGame);
    auto4C45A59A_g = UnitGroup("StormGameStartPathingBlocker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4C45A59A_u = UnitGroupCount(auto4C45A59A_g, c_unitCountAll);
    for (;; auto4C45A59A_u -= 1) {
        auto4C45A59A_var = UnitGroupUnitFromEnd(auto4C45A59A_g, auto4C45A59A_u);
        if (auto4C45A59A_var == null) { break; }
        UnitRemove(auto4C45A59A_var);
    }
    autoA56EBEB5_g = UnitGroup("StormGameStartPathingBlockerDiagonal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA56EBEB5_u = UnitGroupCount(autoA56EBEB5_g, c_unitCountAll);
    for (;; autoA56EBEB5_u -= 1) {
        autoA56EBEB5_var = UnitGroupUnitFromEnd(autoA56EBEB5_g, autoA56EBEB5_u);
        if (autoA56EBEB5_var == null) { break; }
        UnitRemove(autoA56EBEB5_var);
    }
    autoE473043F_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE473043F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "GatesAreOpen", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Init () {
    libGame_gt_OpenTheGatesOpenTheGatesTimerExpires = TriggerCreate("libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_OpenTheGatesOpenTheGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On XP Trickle (XP Trickle Start Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGame_gt_XPTrickle, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Init () {
    libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires = TriggerCreate("libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires, libGame_gv_xPTrickleStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Minions
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SpawnMinions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto598B40D5_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto598B40D5_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto598B40D5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "MinionsAreSpawning", 1);
    }
    if ((libCore_gv_sYSMinionAI == true)) {
        libGame_gf_MinionStartStopMinionSystem(true);
        if ((libGame_gv_minionSpawningEnabled == true)) {
            libGame_gf_MinionStartStopMinionSpawnCycle(true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SpawnMinions_Init () {
    libGame_gt_SpawnMinions = TriggerCreate("libGame_gt_SpawnMinions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_StartGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transparencyCurrent;
    int lv_itTeam;
    int lv_itPlayer;
    int lv_itLevel;
    int lv_itLevelEXPValue;
    fixed lv_itDelay;

    // Automatic Variable Declarations
    const int auto44903501_ae = libCore_gv_bALMaxTeams;
    const int auto44903501_ai = 1;
    const int auto7CDB7FF0_ae = 10;
    const int auto7CDB7FF0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mainPanel, PlayerGroupAll(), true);
    libUIUI_gf_UIUpdateTimeLabels();
    SoundPlayForPlayer(SoundLink("Gen_HeroRespawn_GameStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(libGame_gv_heroSpawnDelay_C, c_timeGame);
    lv_itTeam = 1;
    for ( ; ( (auto44903501_ai >= 0 && lv_itTeam <= auto44903501_ae) || (auto44903501_ai < 0 && lv_itTeam >= auto44903501_ae) ) ; lv_itTeam += auto44903501_ai ) {
        libUIUI_gf_UIPartyFrameSetUpCoreHealthBarforTeam(lv_itTeam);
        if ((PlayerGroupCount(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
            libGame_gv_teams[lv_itTeam].lv_teamLevel += 1;
        }

    }
    TriggerExecute(libUIUI_gt_UIGameUITurnOnFactionStates, true, false);
    TriggerEnable(libUIUI_gt_UIHeroLeaderboardUpdateStats, true);
    TriggerEnable(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, true);
    TriggerEnable(libUIUI_gt_InputUILeaderBoard, true);
    TriggerEnable(libUIUI_gt_UIInputIngameButtonUsed, true);
    TriggerEnable(libUIUI_gt_InputUITalentTreeSelectionDown, true);
    TriggerEnable(libUIUI_gt_InputUITalentTreeSelectionUp, true);
    TriggerEnable(libGame_gt_HallOfStormsUnitEntersRegion, true);
    TriggerEnable(libGame_gt_HallOfStormsKnockbackUnitEntersRegion, true);
    TriggerEnable(libGame_gt_HallOfStormsUnitExitsRegion, true);
    TriggerExecute(libMapM_gt_MMRepulseRegionPunchBehavior, true, false);
    TriggerExecute(libMapM_gt_MMSafeRegionBehavior, true, false);

    if ((GameIsOnline() == true)) {
        TimerStart(libGame_gv_openTheGatesTimer, libCore_gv_bALOpenTheGatesDelay, false, c_timeGame);
    }
    else {
        TimerStart(libGame_gv_openTheGatesTimer, 10.0, false, c_timeGame);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/lib_Game_4AEE27E7"));
    libGame_gf_SpawnHeroesForBothTeams();
    libGame_gf_SendEventGateOpenTimerStarted();
    TriggerExecute(libGame_gt_AnnounceCountdown, true, false);
    TriggerExecute(libGame_gt_RunAnimations, true, false);
    GameSetPauseable(true);
    if ((GameIsOnline() == false)) {
        lv_itPlayer = 1;
        for ( ; ( (auto7CDB7FF0_ai >= 0 && lv_itPlayer <= auto7CDB7FF0_ae) || (auto7CDB7FF0_ai < 0 && lv_itPlayer >= auto7CDB7FF0_ae) ) ; lv_itPlayer += auto7CDB7FF0_ai ) {
            PlayerSetAlliance(lv_itPlayer, c_allianceIdVision, 1, true);
            PlayerSetAlliance(lv_itPlayer, c_allianceIdControl, 1, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_StartGame_Init () {
    libGame_gt_StartGame = TriggerCreate("libGame_gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announce Countdown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnounceCountdown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 34.0, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_ChooseYourHero, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_CountdownRemain, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 10.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown10, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown5, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown4, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown3, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown2, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown1, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_GameStart, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnounceCountdown_Init () {
    libGame_gt_AnnounceCountdown = TriggerCreate("libGame_gt_AnnounceCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Determine Winning Team
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DetermineWinningTeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    bool[libCore_gv_bALMaxTeams + 1] lv_teamCorAlive;
    int lv_winningTeam;

    // Automatic Variable Declarations
    unitgroup auto0279AE3E_g;
    int auto0279AE3E_u;
    unitgroup auto7A0D5146_g;
    int auto7A0D5146_u;
    playergroup auto8E747106_g;

    // Variable Initialization
    lv_winningTeam = -1;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOverDetermineWinningTeamHasRun == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_gameOverDetermineWinningTeamHasRun = true;
    if ((UnitIsAlive(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == true)) {
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
    }
    if ((lv_winningTeam == -1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_5B6E34F2"), true);
    }

    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libSond_gf_MuteMostSoundChannelsForGameOverState(true);
    libGame_gf_PlayGameOverStinger(lv_winningTeam);
    if ((lv_winningTeam > 0)) {
        auto0279AE3E_g = UnitGroupAlliance(libGame_gv_teams[lv_winningTeam].lv_nPCPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_winningTeam)].lv_core), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0279AE3E_u = UnitGroupCount(auto0279AE3E_g, c_unitCountAll);
        for (;; auto0279AE3E_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto0279AE3E_g, auto0279AE3E_u);
            if (lv_itUnit == null) { break; }
            UnitBehaviorRemove(lv_itUnit, "HeroGenericMount@Mounted", 1);
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal GameWon");
        }
        auto7A0D5146_g = UnitGroupAlliance(libGame_gv_teams[lv_winningTeam].lv_nPCPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_winningTeam)].lv_core), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7A0D5146_u = UnitGroupCount(auto7A0D5146_g, c_unitCountAll);
        for (;; auto7A0D5146_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto7A0D5146_g, auto7A0D5146_u);
            if (lv_itUnit == null) { break; }
            UnitBehaviorRemove(lv_itUnit, "HeroGenericMount@Mounted", 1);
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal GameLost");
        }
    }

    Wait(libGame_gv_gameOverCameraPanTime_C, c_timeGame);
    SoundPlayForPlayer(SoundLink("Doodad_Core_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(libGame_gv_gameOverCoreAnimationWaitTime_C, c_timeGame);
    auto8E747106_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8E747106_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libGame_gf_AnnouncementClearQueueForPlayer(lv_itPlayer);
    }
    libGame_gv_announcement_SystemEnabled = false;
    libGame_gf_PlayVictoryDefeatVO(lv_winningTeam);
    libGame_gf_GameOver(lv_winningTeam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DetermineWinningTeam_Init () {
    libGame_gt_DetermineWinningTeam = TriggerCreate("libGame_gt_DetermineWinningTeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hall Of Storms - Knockback Launch Missile
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HallOfStormsKnockbackLaunchMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_base;
    unit lv_targetUnit;
    fixed lv_abilityRange;
    fixed lv_distanceFromBasePlayerTargetPoint;
    fixed lv_baseRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_base = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGame_gv_hallOfStormsKnockbackLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_base), libGame_gv_hallOfStormsKnockbackLaunchDistance, UnitGetPosition(lv_targetUnit));
    lv_actualTargetPoint = lv_targetPoint;
    if ((PointPathingPassable(lv_actualTargetPoint) == true)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lv_base))].lv_core), 7.5, UnitGetPosition(lv_base));
    }
    UnitCreateEffectPoint(lv_targetUnit, "HallOfStormsKnockbackLaunchMissile", lv_actualTargetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HallOfStormsKnockbackLaunchMissile_Init () {
    libGame_gt_HallOfStormsKnockbackLaunchMissile = TriggerCreate("libGame_gt_HallOfStormsKnockbackLaunchMissile_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_HallOfStormsKnockbackLaunchMissile, c_playerAny, "HallOfStormsKnockbackDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hall Of Storms - Knockback Unit Enters Region
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HallOfStormsKnockbackUnitEntersRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), "HallOfStormsKnockbackKillable") == true)) {
        UnitKill(libGame_gf_UnitEntersSafeZonePuntRegionUnit());
    }
    else {
        UnitCreateEffectPoint(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), "HallOfStormsKnockbackLaunchMissile", libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint());
        PlayerCreateEffectUnit(UnitGetOwner(libGame_gf_UnitEntersSafeZonePuntRegionUnit()), "HallOfStormsKnockbackImpactSet", libGame_gf_UnitEntersSafeZonePuntRegionUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HallOfStormsKnockbackUnitEntersRegion_Init () {
    libGame_gt_HallOfStormsKnockbackUnitEntersRegion = TriggerCreate("libGame_gt_HallOfStormsKnockbackUnitEntersRegion_Func");
    TriggerEnable(libGame_gt_HallOfStormsKnockbackUnitEntersRegion, false);
    libGame_gf_UnitEntersSafeZonePuntRegion(libGame_gt_HallOfStormsKnockbackUnitEntersRegion);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hall Of Storms - Unit Enters Region
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HallOfStormsUnitEntersRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gf_UnitEntersSafeZoneRegionUnit(), "HallOfStormsAllyApplySet", libGame_gf_UnitEntersSafeZoneRegionUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HallOfStormsUnitEntersRegion_Init () {
    libGame_gt_HallOfStormsUnitEntersRegion = TriggerCreate("libGame_gt_HallOfStormsUnitEntersRegion_Func");
    TriggerEnable(libGame_gt_HallOfStormsUnitEntersRegion, false);
    libGame_gf_UnitEntersSafeZoneRegion(libGame_gt_HallOfStormsUnitEntersRegion);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hall Of Storms - Unit Exits Region
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HallOfStormsUnitExitsRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(libGame_gf_UnitExitsSafeZoneRegionUnit(), "HallOfStormsProtectionBuff", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HallOfStormsUnitExitsRegion_Init () {
    libGame_gt_HallOfStormsUnitExitsRegion = TriggerCreate("libGame_gt_HallOfStormsUnitExitsRegion_Func");
    TriggerEnable(libGame_gt_HallOfStormsUnitExitsRegion, false);
    libGame_gf_UnitExitsSafeZoneRegion(libGame_gt_HallOfStormsUnitExitsRegion);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Update Stats, Award XP, Make Annouccements CORE
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadHero;
    int lv_killingPlayer;
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_killingTeamGroup;
    unitgroup lv_nearbyUnits;
    playergroup lv_awardGroup;
    playergroup lv_deadPlayerTeamGroup;
    playergroup lv_killingGroup;
    int lv_killingFaction;
    point lv_deadHeroPosition;

    // Automatic Variable Declarations
    playergroup auto262C5A21_g;
    playergroup auto1C310CDF_g;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();
    lv_awardGroup = PlayerGroupEmpty();
    lv_deadPlayerTeamGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();
    lv_killingFaction = libGame_ge_Faction_Neutral;

    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(libGame_gf_HeroKilledPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroKilledKillingPlayer();
    lv_deadHero = libGame_gf_HeroKilledUnit();
    if ((libGame_gv_heroDeath_UpdateStats == false)) {
        return true;
    }

    if (((lv_killingPlayer < 1) || (lv_killingPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_EC1A1505", "A", IntToText(lv_killingPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_EC1A1505"), true);
        return true;
    }

    lv_deadPlayer = UnitGetOwner(lv_deadHero);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_deadHeroPosition = UnitGetPosition(lv_deadHero);
    if ((lv_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    lv_deadPlayerTeamGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_deadPlayer);
    lv_killingTeamGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lv_deadPlayer);
    auto262C5A21_g = lv_killingTeamGroup;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto262C5A21_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
            PlayerGroupAdd(lv_awardGroup, lv_itPlayer);
        }

    }
    lv_killingGroup = libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit(lv_killingTeamGroup, lv_killingPlayer, lv_deadHero);
    if (((PlayerGroupCount(lv_killingGroup) > 0) || (lv_killingPlayer == libCore_gv_cOMPUTER_TeamOrder) || (lv_killingPlayer == libCore_gv_cOMPUTER_TeamChaos))) {
        libGame_gf_HeroDeathUpdateTeamStats(lv_deadHero, lv_killingFaction);
    }

    libGame_gf_HeroDeathAwardXP(lv_deadHero, lv_killingPlayer, lv_awardGroup, lv_killingGroup, true);
    libGame_gf_HeroDeathUpdatePlayerStats(lv_deadHero, lv_killingPlayer, lv_killingTeamGroup, lv_killingGroup);
    libGame_gf_HeroDeathDeadTeamAnnouncements(lv_deadHero, lv_deadPlayerTeamGroup, lv_killingFaction);
    libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount = 0;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_deadPlayer, "IngameKillStreak", libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount);
    if ((libGame_gv_gAMEFirstBloodAvailable == true)) {
        libGame_gv_gAMEFirstBloodAvailable = false;
    }

    if ((PlayerGroupCount(lv_killingGroup) > 0)) {
        auto1C310CDF_g = lv_killingGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto1C310CDF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(lv_deadHero), c_unitAttributeSummoned) == false)) {
                libGame_gf_SendEventHeroParticipatedInTakedown(lv_killingPlayer, lv_itPlayer, lv_deadPlayer, lv_deadHero, lv_deadHeroPosition);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Init () {
    libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE = TriggerCreate("libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Func");
    libGame_gf_HeroKilled(libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gf_PlayerIsHeroPlayer(lv_deadPlayer) == true))) {
            return false;
        }

        if (!((lv_deadUnit == libGame_gv_players[lv_deadPlayer].lv_heroUnit))) {
            return false;
        }

        if (!((UnitTestState(lv_deadUnit, c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libGame_gv_players[lv_deadPlayer].lv_heroUnitGroup, lv_deadUnit) == true))) {
            return false;
        }

        if (!((libCore_gv_dataHeroesHeroData[libCore_gf_HeroIndexOfUnit(lv_deadUnit)].lv_heroAbnormalDeath == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_deadUnit, "HeroAbathurUltimateEvolution@Buff") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(libCore_gv_playerGroupFromPlayer[lv_deadPlayer], libNtve_gf_ConvertUnitToUnitGroup(lv_deadUnit), null, false);
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    UnitSetState(lv_deadUnit, c_unitStateStatusBar, false);
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit)));
    libGame_gf_HeroDeathUpdateUIElementsForDeath(true, true, true, lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_spawnPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDies_Init () {
    libGame_gt_HeroDeathHeroDies = TriggerCreate("libGame_gt_HeroDeathHeroDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroRespawnTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int autoE25EFFC3_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoE25EFFC3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (autoE25EFFC3_ai >= 0 && lv_player <= autoE25EFFC3_ae) || (autoE25EFFC3_ai < 0 && lv_player >= autoE25EFFC3_ae) ) ; lv_player += autoE25EFFC3_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_player].lv_respawnTimer)) {
            lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
            if ((libGame_gv_players[lv_player].lv_noRespawn == true)) {
                break;
            }

            if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroRequiresCustomRespawn == false)) {
                libGame_gf_HeroDeathRespawnHeroForPlayerAtPoint(lv_player, libGame_gv_heroDeath_RespawnMounted, libGame_gv_players[lv_player].lv_spawnPoint, 100.0);
                break;
            }
            else {
                libGame_gf_SendEventRequestCustomRespawn(lv_player, libGame_gv_heroDeath_RespawnMounted, libGame_gv_players[lv_player].lv_spawnPoint, 100.0);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroRespawnTimerExpires_Init () {
    libGame_gt_HeroDeathHeroRespawnTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroRespawnTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[1].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[2].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[3].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[4].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[5].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[6].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[7].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[8].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[9].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[10].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[13].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[14].lv_respawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Team Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathTeamMultikillTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoF9524C8D_ae = libCore_gv_bALMaxTeams;
    const int autoF9524C8D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (autoF9524C8D_ai >= 0 && lv_itTeam <= autoF9524C8D_ae) || (autoF9524C8D_ai < 0 && lv_itTeam >= autoF9524C8D_ae) ) ; lv_itTeam += autoF9524C8D_ai ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_multikillTimer)) {
            libGame_gv_teams[lv_itTeam].lv_multikillStreak = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathTeamMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathTeamMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathTeamMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathTeamMultikillTimerExpires, libGame_gv_teams[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathTeamMultikillTimerExpires, libGame_gv_teams[2].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Player Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto57604967_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto57604967_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto57604967_ai >= 0 && lv_itPlayer <= auto57604967_ae) || (auto57604967_ai < 0 && lv_itPlayer >= auto57604967_ae) ) ; lv_itPlayer += auto57604967_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_multikillTimer)) {
            if ((libGame_gv_players[lv_itPlayer].lv_multikillStreak > 1)) {
                DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "ShowTimedNotification_Expire");
            }

            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement(lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathPlayerMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[2].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[3].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[4].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[5].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[6].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[7].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[8].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[9].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[10].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[13].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[14].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Update Multikill Timer UI
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUpdateMultikillTimerUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_remainingTimerDuration;
    bool lv_playerStillUpdating;
    fixed lv_animTime;

    // Automatic Variable Declarations
    const int auto1500C4D7_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto1500C4D7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto1500C4D7_ai >= 0 && lv_itPlayer <= auto1500C4D7_ae) || (auto1500C4D7_ai < 0 && lv_itPlayer >= auto1500C4D7_ae) ) ; lv_itPlayer += auto1500C4D7_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_multikillStreak == 5)) {
            TimerPause(libGame_gv_players[lv_itPlayer].lv_multikillTimer, true);
            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement(lv_itPlayer);
            continue;
        }

        lv_remainingTimerDuration = TimerGetRemaining(libGame_gv_players[lv_itPlayer].lv_multikillTimer);
        if ((lv_remainingTimerDuration > 0.0)) {
            lv_playerStillUpdating = true;
            lv_animTime = (libGame_gv_heroDeathMultikillTimeoutDuration - lv_remainingTimerDuration);
            libNtve_gf_SetDialogItemAnimationTime(libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage, lv_animTime, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }

    }
    if ((lv_playerStillUpdating == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUpdateMultikillTimerUI_Init () {
    libGame_gt_HeroDeathUpdateMultikillTimerUI = TriggerCreate("libGame_gt_HeroDeathUpdateMultikillTimerUI_Func");
    TriggerEnable(libGame_gt_HeroDeathUpdateMultikillTimerUI, false);
    TriggerAddEventTimePeriodic(libGame_gt_HeroDeathUpdateMultikillTimerUI, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Kill Stinger Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathKillStingerTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto9CAC6F06_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto9CAC6F06_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto9CAC6F06_ai >= 0 && lv_itPlayer <= auto9CAC6F06_ae) || (auto9CAC6F06_ai < 0 && lv_itPlayer >= auto9CAC6F06_ae) ) ; lv_itPlayer += auto9CAC6F06_ai ) {
        if ((EventTimer() == libGame_gv_heroDeathKillStingerQueue[lv_itPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)])) {
            libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_itPlayer);
            break;
        }

        if ((EventTimer() == libGame_gv_heroDeathKillStingerQueue[lv_itPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)])) {
            libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(libGame_ge_HeroDeathKillStingerQueueType_Enemy, lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathKillStingerTimerExpires_Init () {
    libGame_gt_HeroDeathKillStingerTimerExpires = TriggerCreate("libGame_gt_HeroDeathKillStingerTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[1].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[2].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[3].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[4].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[5].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[6].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[7].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[8].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[9].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[10].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[13].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[14].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[1].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[2].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[3].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[4].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[5].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[6].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[7].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[8].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[9].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[10].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[13].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[14].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Death Toast Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDeathToastTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoB0832484_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoB0832484_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoB0832484_ai >= 0 && lv_itPlayer <= autoB0832484_ae) || (autoB0832484_ai < 0 && lv_itPlayer >= autoB0832484_ae) ) ; lv_itPlayer += autoB0832484_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_deathToastTimer)) {
            libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(false, lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDeathToastTimerExpires_Init () {
    libGame_gt_HeroDeathHeroDeathToastTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroDeathToastTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[1].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[2].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[3].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[4].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[5].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[6].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[7].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[8].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[9].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[10].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[11].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[12].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[13].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[14].lv_deathToastTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Code Lane System
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeCodeLaneSystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laneIndex;
    int lv_waypointIndex;

    // Automatic Variable Declarations
    int autoDE3B1032_ae;
    const int autoDE3B1032_ai = 1;
    int auto71FE6EAB_ae;
    const int auto71FE6EAB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AILaneWaypointClearAll();
    autoDE3B1032_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; ( (autoDE3B1032_ai >= 0 && lv_laneIndex <= autoDE3B1032_ae) || (autoDE3B1032_ai < 0 && lv_laneIndex >= autoDE3B1032_ae) ) ; lv_laneIndex += autoDE3B1032_ai ) {
        auto71FE6EAB_ae = libGame_gv_laneData[lv_laneIndex].lv_waypointCount;
        lv_waypointIndex = 1;
        for ( ; ( (auto71FE6EAB_ai >= 0 && lv_waypointIndex <= auto71FE6EAB_ae) || (auto71FE6EAB_ai < 0 && lv_waypointIndex >= auto71FE6EAB_ae) ) ; lv_waypointIndex += auto71FE6EAB_ai ) {
            AILaneWaypointAdd(lv_laneIndex, libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_waypointIndex]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeCodeLaneSystem_Init () {
    libGame_gt_InitializeCodeLaneSystem = TriggerCreate("libGame_gt_InitializeCodeLaneSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[lv_player].lv_gameEndsForPlayer == false))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_playerStatus = libGame_ge_PlayerStatusCore_LefttheGame;
    TimerStart(libGame_gv_players[lv_player].lv_playerLeftAnnouncementTimer, libGame_gv_playerLeftAnnouncementTimerDuration_C, false, c_timeGame);
    lv_team = libGame_gf_PlayerGetPlayerTeam(lv_player);
    libGame_gv_teams[lv_team].lv_teamActivePlayersCount -= 1;
    if ((libGame_gv_teams[lv_team].lv_teamActivePlayersCount == 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A99F0F34", "A", FixedToText(libGame_gv_teamAbandonedTheGameTimerDuration_C, 0));
        UIDisplayMessage(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_team)].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_A99F0F34"));
        TimerStart(libGame_gv_teams[lv_team].lv_abandonedTheGame, libGame_gv_playerLeftAnnouncementTimerDuration_C, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeavesGame_Init () {
    libGame_gt_PlayerLeavesGame = TriggerCreate("libGame_gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(libGame_gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Rejoins Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerRejoinsGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_playerStatus = libGame_ge_PlayerStatusCore_Playing;
    if ((libGame_gv_players[lv_player].lv_playerLeftAnnouncementPlayed == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (PlayerName(lv_player) + StringExternal("Param/Value/lib_Game_1D924A03")));
    }
    else {
        TimerPause(libGame_gv_players[lv_player].lv_playerLeftAnnouncementTimer, true);
    }
    lv_team = libGame_gf_PlayerGetPlayerTeam(lv_player);
    libGame_gv_teams[lv_team].lv_teamActivePlayersCount += 1;
    TimerPause(libGame_gv_teams[lv_team].lv_abandonedTheGame, true);
    if ((libGame_gv_players[lv_player].lv_activeVehicle == null)) {
        CameraPan(lv_player, UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), 0.0, -1, 0.0, false);
    }
    else {
        CameraPan(lv_player, UnitGetPosition(libGame_gv_players[lv_player].lv_activeVehicle), 0.0, -1, 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerRejoinsGame_Init () {
    libGame_gt_PlayerRejoinsGame = TriggerCreate("libGame_gt_PlayerRejoinsGame_Func");
    TriggerAddEventPlayerJoin(libGame_gt_PlayerRejoinsGame, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Abandoned The Game Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamAbandonedTheGameTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto1395198A_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1395198A_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto1395198A_ae ; lv_itTeam += 1 ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_abandonedTheGame)) {
            lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam);
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, StringExternal("Param/Value/lib_Game_7B9AE285"));
            UnitBehaviorRemove(libGame_gv_teams[lv_itTeam].lv_core, "CoreInvulnerability", 1);
            UnitKill(libGame_gv_teams[lv_itTeam].lv_core);
            TriggerEnable(TriggerGetCurrent(), false);
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamAbandonedTheGameTimerExpires_Init () {
    libGame_gt_TeamAbandonedTheGameTimerExpires = TriggerCreate("libGame_gt_TeamAbandonedTheGameTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[1].lv_abandonedTheGame);
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[2].lv_abandonedTheGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Left Announcement Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeftAnnouncementTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_announcementGroup;
    int lv_itPlayer;
    int lv_itTriggeringPlayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto1CEBCB76_ae;

    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto1CEBCB76_ae = libCore_gv_bALMaxEnginePlayerCount;
    lv_itTriggeringPlayer = 1;
    for ( ; lv_itTriggeringPlayer <= auto1CEBCB76_ae ; lv_itTriggeringPlayer += 1 ) {
        if ((EventTimer() == libGame_gv_players[lv_itTriggeringPlayer].lv_playerLeftAnnouncementTimer)) {
            libGame_gv_players[lv_itTriggeringPlayer].lv_playerLeftAnnouncementPlayed = true;
            libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, lv_announcementGroup);
            libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, lv_announcementGroup);
            PlayerGroupRemove(lv_announcementGroup, lv_itTriggeringPlayer);
            UIDisplayMessage(lv_announcementGroup, c_messageAreaChat, (PlayerName(lv_itPlayer) + StringExternal("Param/Value/lib_Game_F6BC144F")));
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeftAnnouncementTimerExpires_Init () {
    libGame_gt_PlayerLeftAnnouncementTimerExpires = TriggerCreate("libGame_gt_PlayerLeftAnnouncementTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[0].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[1].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[2].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[3].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[4].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[5].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[6].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[7].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[8].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[9].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[10].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[11].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[12].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[13].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[14].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[15].lv_playerLeftAnnouncementTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Up - Hero Gains Level
//--------------------------------------------------------------------------------------------------
bool libGame_gt_LevelUpHeroGainsLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((libGame_gv_players[EventPlayer()].lv_heroUnit == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_LevelUpLevelUpHero(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_LevelUpHeroGainsLevel_Init () {
    libGame_gt_LevelUpHeroGainsLevel = TriggerCreate("libGame_gt_LevelUpHeroGainsLevel_Func");
    TriggerAddEventUnitGainLevel(libGame_gt_LevelUpHeroGainsLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Spawn Cycle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MinionSpawnCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_lane;
    timer lv_waveTimer;
    bool lv_paused;

    // Automatic Variable Declarations
    int autoEF0C47DC_ae;
    const int autoEF0C47DC_ai = 1;

    // Variable Initialization
    lv_waveTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((libCore_gv_gameOver == true) || (libCore_gv_sYSMinionAI == false))) {
            return true;
        }

        TimerStart(lv_waveTimer, libCore_gv_bALMinionWaveInterval, false, c_timeGame);
        libGame_gv_minionWaveSpawnCounter += 1;
        autoEF0C47DC_ae = libGame_gv_laneCount;
        lv_lane = 1;
        for ( ; ( (autoEF0C47DC_ai >= 0 && lv_lane <= autoEF0C47DC_ae) || (autoEF0C47DC_ai < 0 && lv_lane >= autoEF0C47DC_ae) ) ; lv_lane += autoEF0C47DC_ai ) {
            if ((libGame_gv_laneData[lv_lane].lv_minionSpawningEnabled == true)) {
                libGame_gf_MinionSpawnWave(lv_lane, libCore_gv_cOMPUTER_TeamOrder);
                libGame_gf_MinionSpawnWave(lv_lane, libCore_gv_cOMPUTER_TeamChaos);
                Wait(0.1875, c_timeGame);
            }

        }
        while ((TimerGetRemaining(lv_waveTimer) > 0.0)) {
            if ((libGame_gv_minionSpawningEnabled == false)) {
                if ((lv_paused == false)) {
                    TimerPause(lv_waveTimer, true);
                    lv_paused = true;
                }

            }
            else {
                if ((lv_paused == true)) {
                    TimerPause(lv_waveTimer, false);
                    lv_paused = false;
                }

            }
            Wait(0.25, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MinionSpawnCycle_Init () {
    libGame_gt_MinionSpawnCycle = TriggerCreate("libGame_gt_MinionSpawnCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Cooldown On/Off
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMoonwellCooldownOnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_itPlayerIndex;
    bool lv_isHeroUnit;
    unit lv_itMoonwell;
    int lv_owner;

    // Automatic Variable Declarations
    const int auto79509178_ae = libCore_gv_bALMaxPlayers;
    const int auto79509178_ai = 1;
    unitgroup auto0BB97B31_g;
    int auto0BB97B31_u;
    unitgroup autoF5A3BD5F_g;
    int autoF5A3BD5F_u;
    unitgroup autoA70316D5_g;
    int autoA70316D5_u;
    const int autoD53F9E12_ae = libGame_gv_moonwellMaxMoonwellCount;
    int autoD53F9E12_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayerIndex = 1;
    for ( ; ( (auto79509178_ai >= 0 && lv_itPlayerIndex <= auto79509178_ae) || (auto79509178_ai < 0 && lv_itPlayerIndex >= auto79509178_ae) ) ; lv_itPlayerIndex += auto79509178_ai ) {
        if ((EventUnit() == libGame_gv_players[lv_itPlayerIndex].lv_heroUnit)) {
            lv_owner = lv_itPlayerIndex;
            lv_isHeroUnit = true;
            break;
        }

    }
    if (((UnitIsValid(EventUnit()) == false) || (lv_isHeroUnit == false))) {
        return true;
    }

    UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[lv_owner], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[lv_owner], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        if ((libGame_gf_PlayerIsHeroPlayer(lv_owner) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Game_4E700B52", "A", IntToText(lv_owner));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_4E700B52"), true);
        }

        autoF5A3BD5F_g = UnitGroup(null, libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_owner)].lv_nPCPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF5A3BD5F_u = UnitGroupCount(autoF5A3BD5F_g, c_unitCountAll);
        for (;; autoF5A3BD5F_u -= 1) {
            lv_itMoonwell = UnitGroupUnitFromEnd(autoF5A3BD5F_g, autoF5A3BD5F_u);
            if (lv_itMoonwell == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(lv_itMoonwell), c_unitFlagTownStructureMoonwell) == true)) {
                libNtve_gf_SendActorMessageToUnit(lv_itMoonwell, "Signal MoonwellDrink");
                UnitGroupAdd(libGame_gv_moonwellTextTagsUnitGroup[lv_owner], lv_itMoonwell);
            }

        }
        autoA70316D5_g = libGame_gv_moonwellTextTagsUnitGroup[lv_owner];
        autoA70316D5_u = UnitGroupCount(autoA70316D5_g, c_unitCountAll);
        for (;; autoA70316D5_u -= 1) {
            lv_itMoonwell = UnitGroupUnitFromEnd(autoA70316D5_g, autoA70316D5_u);
            if (lv_itMoonwell == null) { break; }
            lv_index += 1;
            TextTagCreate((StringExternal("Param/Value/lib_Game_483A4F7C") + FixedToText(UnitBehaviorDuration(EventUnit(), "HeroGenericFountainDrink@HealingFountainCooldown"), 0)), 20, UnitGetPosition(lv_itMoonwell), 4.2, false, false, PlayerGroupSingle(lv_owner));
            libGame_gv_moonwellTextTags[lv_owner][lv_index] = TextTagLastCreated();
            libGame_gv_moonwellTextTagsUnit[lv_owner][lv_index] = lv_itMoonwell;
        }
    }
    else {
        libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_owner] = false;
        UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[lv_owner], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        auto0BB97B31_g = libGame_gv_moonwellTextTagsUnitGroup[lv_owner];
        auto0BB97B31_u = UnitGroupCount(auto0BB97B31_g, c_unitCountAll);
        for (;; auto0BB97B31_u -= 1) {
            lv_itMoonwell = UnitGroupUnitFromEnd(auto0BB97B31_g, auto0BB97B31_u);
            if (lv_itMoonwell == null) { break; }
            libNtve_gf_SendActorMessageToUnit(lv_itMoonwell, "Signal MoonwellReset");
            UnitGroupRemove(libGame_gv_moonwellTextTagsUnitGroup[lv_owner], lv_itMoonwell);
        }
        autoD53F9E12_var = 1;
        for ( ; autoD53F9E12_var <= autoD53F9E12_ae; autoD53F9E12_var += 1 ) {
            libGame_gv_moonwellTextTagsUnit[lv_owner][autoD53F9E12_var] = null;
            TextTagDestroy(libGame_gv_moonwellTextTags[lv_owner][autoD53F9E12_var]);
        }
    }
    Wait(0.0625, c_timeGame);
    UIFlyerHelperClearOverride(libCore_gv_playerGroupFromPlayer[lv_owner]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMoonwellCooldownOnOff_Init () {
    libGame_gt_HeroMoonwellCooldownOnOff = TriggerCreate("libGame_gt_HeroMoonwellCooldownOnOff_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMoonwellCooldownOnOff, null, "HeroGenericFountainDrink@HealingFountainCooldown", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMoonwellCooldownOnOff, null, "HeroGenericFountainDrink@HealingFountainCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Duration Text Tag Updates
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMoonwellDurationTextTagUpdates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itMoonwell;
    text lv_helpLabel;
    int lv_team;
    fixed lv_remainingCooldown;

    // Automatic Variable Declarations
    const int autoEBD80256_ae = libCore_gv_bALMaxPlayers;
    const int autoEBD80256_ai = 1;
    const int auto64F0DDE2_ae = libGame_gv_moonwellMaxMoonwellCount;
    const int auto64F0DDE2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoEBD80256_ai >= 0 && lv_itPlayer <= autoEBD80256_ae) || (autoEBD80256_ai < 0 && lv_itPlayer >= autoEBD80256_ae) ) ; lv_itPlayer += autoEBD80256_ai ) {
        if ((UnitGroupCount(libGame_gv_moonwellTextTagsUnitGroup[lv_itPlayer], c_unitCountAlive) > 0)) {
            lv_team = libGame_gf_TeamNumberOfPlayer(lv_itPlayer);
            lv_remainingCooldown = UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroGenericFountainDrink@HealingFountainCooldown");
            lv_itMoonwell = 1;
            for ( ; ( (auto64F0DDE2_ai >= 0 && lv_itMoonwell <= auto64F0DDE2_ae) || (auto64F0DDE2_ai < 0 && lv_itMoonwell >= auto64F0DDE2_ae) ) ; lv_itMoonwell += auto64F0DDE2_ai ) {
                if ((UnitIsAlive(libGame_gv_moonwellTextTagsUnit[lv_itPlayer][lv_itMoonwell]) == true)) {
                    if ((libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_itPlayer] == true)) {
                        TextTagShow(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell], libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
                        TextTagSetText(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell], (StringExternal("Param/Value/lib_Game_187E158B") + FixedToText(lv_remainingCooldown, 0)));
                    }
                    else {
                        lv_helpLabel = StringExternal("Param/Value/lib_Game_59D420AA");
                        TextTagSetText(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell], lv_helpLabel);
                        TextTagShow(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell], PlayerGroupSingle(lv_itPlayer), false);
                    }
                }
                else {
                    TextTagDestroy(libGame_gv_moonwellTextTags[lv_itPlayer][lv_itMoonwell]);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMoonwellDurationTextTagUpdates_Init () {
    libGame_gt_HeroMoonwellDurationTextTagUpdates = TriggerCreate("libGame_gt_HeroMoonwellDurationTextTagUpdates_Func");
    TriggerAddEventTimePeriodic(libGame_gt_HeroMoonwellDurationTextTagUpdates, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Mount
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_heroActor;
    int lv_heroIndex;
    int lv_mountIndex;
    string lv_poseAnimGroup;
    string lv_poseAnimGroupStatus;
    fixed lv_mountScale;
    fixed lv_mountWalkAnimMoveSpeed;
    string lv_mountModel;
    actor lv_mountActor;

    // Automatic Variable Declarations
    playergroup auto40CEBA1A_g;
    int auto40CEBA1A_var;

    // Variable Initialization
    lv_poseAnimGroup = "";
    lv_poseAnimGroupStatus = "";

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroActor = libNtve_gf_MainActorofUnit(EventUnit());
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "HeroAbathurUltimateEvolution@TimedLife") == true)) {
        auto40CEBA1A_g = libGame_gf_AlliedPlayerGroupOfPlayer(UnitGetOwner(EventUnit()));
        auto40CEBA1A_var = -1;
        while (true) {
            auto40CEBA1A_var = PlayerGroupNextPlayer(auto40CEBA1A_g, auto40CEBA1A_var);
            if (auto40CEBA1A_var < 0) { break; }
            if ((UnitGetType(EventUnit()) == UnitGetType(libGame_gv_players[auto40CEBA1A_var].lv_heroUnit))) {
                lv_mountIndex = libGame_gf_LoadoutGetPlayerMount(auto40CEBA1A_var);
                break;
            }

        }
    }
    else {
        lv_mountIndex = libGame_gf_LoadoutGetPlayerMount(UnitGetOwner(EventUnit()));
    }
    lv_poseAnimGroup = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroup;
    lv_poseAnimGroupStatus = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroupStatus;
    lv_mountScale = MaxF(libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModelScale, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountScaling);
    lv_mountWalkAnimMoveSpeed = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModelWalkAnimMoveSpeed;
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(0) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(1) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(2) + "]", EventPlayer(), "0");
    if ((UnitHasBehavior2(EventUnit(), "SiegeMode") == true)) {
        UnitCreateEffectUnit(EventUnit(), "SiegeModeRemoveSet", EventUnit());
    }

    if ((UnitHasBehavior2(EventUnit(), "DeathAndDecay") == true)) {
        UnitBehaviorRemove(EventUnit(), "DeathAndDecay", 1);
    }

    ActorSend(lv_heroActor, (("StatusSet " + lv_poseAnimGroupStatus + " 1")));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_attachedMountModel == true)) {
        ActorSend(lv_heroActor, "PhysicsTerminate");
        lv_mountModel = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModel;
        ActorSend(lv_heroActor, libNtve_gf_Create(libGame_gv_mountModelActor, (lv_mountModel)));
        lv_mountActor = ActorFromActor(lv_heroActor, libGame_gv_mountModelActor);
        libGame_gf_SendMountActorMessagesToActor(lv_mountIndex, lv_mountActor);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isFlyer == true)) {
            ActorSend(lv_mountActor, libNtve_gf_RefSet("::Host", "FlyerBillboard"));
        }

        ActorSend(lv_mountActor, libNtve_gf_SetScaleAbsolute(lv_mountScale, lv_mountScale, lv_mountScale, 0.0));
        ActorSend(lv_heroActor, (("AnimGroupApply " + lv_poseAnimGroup + " {} {} Instant")));
        if ((lv_poseAnimGroup == "Ridebike")) {
            UnitBehaviorAdd(EventUnit(), "HideHandAttachmentsWhileMounted", EventUnit(), 1);
        }

        ActorSend(lv_heroActor, libNtve_gf_RefSet("::Host", libGame_gv_mountModelActor));
        ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpAttachMount", 0, 0));
        ActorSend(lv_heroActor, libNtve_gf_RefSet("::HostForProps", "PropsHost"));
        ActorSend(lv_mountActor, libNtve_gf_RefSet("::HostForProps", (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType)));
    }
    else {
        ActorSend(lv_heroActor, (("AnimGroupApply " + lv_poseAnimGroup)));
    }
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_mountWalkAnimMoveSpeed));
    ActorSend(lv_mountActor, libNtve_gf_Signal("MountSound"));
    ActorSend(lv_heroActor, libNtve_gf_Signal("Mounted"));
    ActorSend(lv_heroActor, libNtve_gf_Create((libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountUpFXActor), ""));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMountSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountDismountSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMountSound)));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOLoopingSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountLoopingSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOLoopingSound)));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOStationarySound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountStationarySound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOStationarySound)));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMovingSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountMovingSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMovingSound)));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMoveStartSound != "")) {
        CatalogLinkReplace(UnitGetOwner(EventUnit()), c_gameCatalogSound, "GenericMountMoveStartSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMoveStartSound));
    }

    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMoveStopSound != "")) {
        CatalogLinkReplace(UnitGetOwner(EventUnit()), c_gameCatalogSound, "GenericMountMoveStopSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vOMoveStopSound));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMount_Init () {
    libGame_gt_HeroMount = TriggerCreate("libGame_gt_HeroMount_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMount, null, "HeroGenericMount@Mounted", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dismount
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDismount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_heroActor;
    int lv_heroIndex;
    int lv_mountIndex;
    fixed lv_heroWalkAnimMoveSpeed;
    string lv_poseAnimGroup;
    string lv_poseAnimGroupStatus;

    // Automatic Variable Declarations
    playergroup auto91BD071D_g;
    int auto91BD071D_var;

    // Variable Initialization
    lv_poseAnimGroup = "";
    lv_poseAnimGroupStatus = "";

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCore_gv_heroPlayersIncludeAIHeroPlayers, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroActor = libNtve_gf_MainActorofUnit(EventUnit());
    lv_heroIndex = libCore_gf_HeroIndexOfUnit(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "HeroAbathurUltimateEvolution@TimedLife") == true)) {
        auto91BD071D_g = libGame_gf_AlliedPlayerGroupOfPlayer(UnitGetOwner(EventUnit()));
        auto91BD071D_var = -1;
        while (true) {
            auto91BD071D_var = PlayerGroupNextPlayer(auto91BD071D_g, auto91BD071D_var);
            if (auto91BD071D_var < 0) { break; }
            if ((UnitGetType(EventUnit()) == UnitGetType(libGame_gv_players[auto91BD071D_var].lv_heroUnit))) {
                lv_mountIndex = libGame_gf_LoadoutGetPlayerMount(auto91BD071D_var);
                break;
            }

        }
    }
    else {
        lv_mountIndex = libGame_gf_LoadoutGetPlayerMount(UnitGetOwner(EventUnit()));
    }
    lv_heroWalkAnimMoveSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(EventUnit()), "WalkAnimMoveSpeed", UnitGetOwner(EventUnit())));
    lv_poseAnimGroup = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroup;
    lv_poseAnimGroupStatus = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroupStatus;
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(0) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(1) + "]", EventPlayer(), "5");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(2) + "]", EventPlayer(), "2.5");
    if ((UnitHasBehavior2(EventUnit(), "WarSpurs") == true)) {
        UnitBehaviorAdd(EventUnit(), "WarSpursSpeedBuff", EventUnit(), 1);
    }

    ActorSend(lv_heroActor, (("StatusSet " + lv_poseAnimGroupStatus + " 0")));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_attachedMountModel == true)) {
        ActorSend(lv_heroActor, (("AnimBlendTimeApply 0")));
        ActorSend(lv_heroActor, (("AnimGroupRemove " + lv_poseAnimGroup + " Instant")));
        ActorSend(lv_heroActor, (("AnimBlendTimeApply")));
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isFlyer == true)) {
            ActorSend(lv_heroActor, libNtve_gf_RefSet("::Host", "FlyerBillboard"));
            ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "", 0, 0));
        }
        else {
            if (((UnitHasBehavior2(EventUnit(), "TychusOverkillTargetedActive") == true))) {
            }
            else {
                ActorSend(lv_heroActor, libNtve_gf_RefClear("::Host"));
                ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpBasicScopeFollow", 0, 0));
            }
        }
        ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), libGame_gv_mountModelActor), libNtve_gf_Destroy());
    }
    else {
        ActorSend(lv_heroActor, (("AnimGroupRemove " + lv_poseAnimGroup)));
    }
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_heroWalkAnimMoveSpeed));
    if ((UnitIsAlive(EventUnit()) == true)) {
        ActorSend(lv_heroActor, libNtve_gf_Create("DismountSmokeScreen", ""));
    }

    ActorSend(lv_heroActor, libNtve_gf_Signal("Dismounted"));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_vODismountSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountMovingSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_vODismountSound)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDismount_Init () {
    libGame_gt_HeroDismount = TriggerCreate("libGame_gt_HeroDismount_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroDismount, null, "HeroGenericMount@Mounted", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Dies (Game Over)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreDiesGameOver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_i;
    unit lv_u;
    const fixed lv_cameraPanTime = 2.0;
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    const fixed lv_coreAnimationWaitTime = 5.0;
    int lv_killingFaction;
    int lv_winningTeam;
    int lv_losingTeam;

    // Automatic Variable Declarations
    playergroup autoDBB5F078_g;
    unitgroup auto20E6C678_g;
    int auto20E6C678_u;
    unit auto20E6C678_var;
    playergroup autoF83D87B4_g;
    int autoF83D87B4_var;
    playergroup auto20E05A0A_g;
    int auto20E05A0A_var;
    unitgroup auto82B0AB44_g;
    int auto82B0AB44_u;
    unit auto82B0AB44_var;
    playergroup auto23398500_g;
    int auto23398500_var;
    playergroup auto742BA61F_g;
    int auto742BA61F_var;

    // Variable Initialization
    lv_killingFaction = libGame_ge_Faction_Neutral;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameSetMissionTimePaused(true);
    TimerPause(libGame_gv_gameTimer, true);
    libCore_gv_gameOver = true;
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, true);
    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) {
        lv_killingFaction = libGame_ge_Faction_Order;
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Chaos;
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
    }
    lv_losingTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_winningTeam);
    UnitPauseAll(true);
    autoDBB5F078_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoDBB5F078_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        auto20E6C678_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        auto20E6C678_u = UnitGroupCount(auto20E6C678_g, c_unitCountAll);
        for (;; auto20E6C678_u -= 1) {
            auto20E6C678_var = UnitGroupUnitFromEnd(auto20E6C678_g, auto20E6C678_u);
            if (auto20E6C678_var == null) { break; }
            libNtve_gf_ChangeUnitDamage(auto20E6C678_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(auto20E6C678_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
        }
    }
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[1].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[2].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    Wait(0.0625, c_timeGame);
    libUIUI_gf_UIPartyFrameSetCoreLifeTo0(lv_losingTeam);
    libGame_gf_MinionPauseUnpauseMinionSystem(true);
    VisRevealerCreate(libGame_gv_teamOrderIndex_C, RegionCircle(UnitGetPosition(EventUnit()), 4.0));
    VisRevealerCreate(libGame_gv_teamChaosIndex_C, RegionCircle(UnitGetPosition(EventUnit()), 4.0));
    libGame_gf_BuildingDiesCameraShake(lv_coreAnimationWaitExplodeTime, "Massive", PlayerGroupAll());
    autoF83D87B4_g = libGame_gv_teams[lv_winningTeam].lv_teamPlayerGroupNoNPCPlayers;
    autoF83D87B4_var = -1;
    while (true) {
        autoF83D87B4_var = PlayerGroupNextPlayer(autoF83D87B4_g, autoF83D87B4_var);
        if (autoF83D87B4_var < 0) { break; }
        libGame_gv_players[autoF83D87B4_var].lv_victoryDefeat = c_gameOverVictory;
        libNtve_gf_SetDialogItemText(libUIUI_gv_gameOverSplash.lv_leaveButton, StringExternal("Param/Value/lib_Game_A4D58EF2"), libCore_gv_playerGroupFromPlayer[autoF83D87B4_var]);
    }
    auto20E05A0A_g = libGame_gv_teams[lv_losingTeam].lv_teamPlayerGroupNoNPCPlayers;
    auto20E05A0A_var = -1;
    while (true) {
        auto20E05A0A_var = PlayerGroupNextPlayer(auto20E05A0A_g, auto20E05A0A_var);
        if (auto20E05A0A_var < 0) { break; }
        libGame_gv_players[auto20E05A0A_var].lv_victoryDefeat = c_gameOverDefeat;
        libNtve_gf_SetDialogItemText(libUIUI_gv_gameOverSplash.lv_leaveButton, StringExternal("Param/Value/lib_Game_8563B60A"), libCore_gv_playerGroupFromPlayer[auto20E05A0A_var]);
    }
    auto82B0AB44_g = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82B0AB44_u = UnitGroupCount(auto82B0AB44_g, c_unitCountAll);
    for (;; auto82B0AB44_u -= 1) {
        auto82B0AB44_var = UnitGroupUnitFromEnd(auto82B0AB44_g, auto82B0AB44_u);
        if (auto82B0AB44_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto82B0AB44_var), "AnimPlay Victory Stand,Victory PlayForever");
    }
    auto23398500_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    auto23398500_var = -1;
    while (true) {
        auto23398500_var = PlayerGroupNextPlayer(auto23398500_g, auto23398500_var);
        if (auto23398500_var < 0) { break; }
        CameraLockInput(auto23398500_var, true);
        PlayerOptionOverride(auto23398500_var, "camerafollow", "0");
        libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, auto23398500_var);
    }
    Wait(0.0625, c_timeGame);
    auto742BA61F_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    auto742BA61F_var = -1;
    while (true) {
        auto742BA61F_var = PlayerGroupNextPlayer(auto742BA61F_g, auto742BA61F_var);
        if (auto742BA61F_var < 0) { break; }
        CameraFollowUnitGroup(auto742BA61F_var, UnitGroupFilterPlayer(UnitGroupSelected(auto742BA61F_var), auto742BA61F_var, 0), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(auto742BA61F_var, UnitGetPosition(EventUnit()), lv_cameraPanTime, -1, 10, false);
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, UnitGetPosition(EventUnit()), lv_cameraPanTime, -1, 10, false);
    TriggerExecute(libGame_gt_DetermineWinningTeam, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreDiesGameOver_Init () {
    libGame_gt_CoreDiesGameOver = TriggerCreate("libGame_gt_CoreDiesGameOver_Func");
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[1].lv_core"));
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[2].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MinionDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_minionIndex;
    int lv_regenGlobeOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(EventUnit());
    if ((lv_minionIndex <= 0)) {
        return true;
    }

    libAIAI_gf_MinionAIFreeMinionIndex(lv_minionIndex);
    if ((UnitHasBehavior2(EventUnit(), "SuppressRegenGlobeCreation") == false)) {
        if ((UnitGetType(EventUnit()) == libCore_gv_dataMinionWaveComposition[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_minionUnitType[libCore_ge_MinionType_Wizard])) {
            if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
                lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamChaos;
            }
            else {
                lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamOrder;
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", 0, lv_regenGlobeOwner, UnitGetPosition(EventUnit()));
        }

        libGame_gf_AwardXPForNPCKill(EventUnit(), EventPlayer(), c_unitAttributeBiological, libNtve_gf_KillingPlayer(), EventUnitDamageKillXP());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MinionDies_Init () {
    libGame_gt_MinionDies = TriggerCreate("libGame_gt_MinionDies_Func");
    TriggerEnable(libGame_gt_MinionDies, false);
    TriggerAddEventUnitDied(libGame_gt_MinionDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town Structure Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownStructureDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_townIndex;
    int lv_structureIndex;
    fixed lv_townHallAnimationExlodeTime;
    int lv_townType;
    int lv_killingFaction;
    int lv_victimTeam;
    playergroup lv_killingPlayersGroup;
    playergroup lv_nearbyPlayersGroup;
    int lv_xPValue;
    int lv_itStructure;

    // Automatic Variable Declarations
    unitgroup autoF99772AE_g;
    int autoF99772AE_u;
    playergroup auto642271F4_g;

    // Variable Initialization
    lv_townHallAnimationExlodeTime = 0.75;
    lv_killingFaction = libGame_ge_Faction_Neutral;
    lv_killingPlayersGroup = PlayerGroupEmpty();
    lv_nearbyPlayersGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "TownDeadController@DeadTowerSuicide"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "TownDeadController@DeadBehavior") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_townIndex = libGame_gf_TownGetTownForUnit(EventUnit());
    if ((lv_townIndex <= 0)) {
        return true;
    }

    lv_structureIndex = libGame_gf_TownGetTownStructureIndexForUnit(EventUnit());
    lv_townType = libGame_gf_TownGetTownStructurePresetFromUnit(EventUnit());
    lv_victimTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    if ((lv_townType == libGame_ge_TownStructureTypes_CannonTower)) {
        lv_xPValue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "KillXP", c_playerAny);
    }
    else {
        lv_xPValue = EventUnitDamageKillXP();
    }
    libGame_gf_TownUpdateMoonwellIcon(lv_townIndex);
    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    if ((lv_townType == libGame_ge_TownStructureTypes_TownHall)) {
        if ((libGame_gv_minionPeriodicCatapultsFirstWave == 0)) {
            libGame_gv_minionPeriodicCatapultsFirstWave = (libGame_gv_minionWaveSpawnCounter + 1);
        }

        if ((lv_killingFaction == libGame_ge_Faction_Order)) {
            libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townKills += 1;
            libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townsRemaining -= 1;
        }
        else {
            libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townKills += 1;
            libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townsRemaining -= 1;
        }
        autoF99772AE_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF99772AE_u = UnitGroupCount(autoF99772AE_g, c_unitCountAll);
        for (;; autoF99772AE_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoF99772AE_g, autoF99772AE_u);
            if (lv_itUnit == null) { break; }
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_itUnit), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                PlayerGroupAdd(lv_killingPlayersGroup, UnitGetOwner(lv_itUnit));
            }

            PlayerGroupAdd(lv_nearbyPlayersGroup, UnitGetOwner(lv_itUnit));
        }
        libGame_gf_BuildingDiesCameraShake(0.0, "Heavy", lv_nearbyPlayersGroup);
        libGame_gf_TownAnnounceTownDestroyed(lv_townIndex, libGame_gf_TownGetTownHallPresetOfUnit(EventUnit()));
        libGame_gf_TownUpgradeBruiserMinions(lv_townIndex);
        auto642271F4_g = lv_killingPlayersGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto642271F4_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSond_gf_HeroVOStartCelebrateVOTimerForPlayer(lv_itPlayer, lv_killingPlayersGroup);
        }
        if ((libGame_gf_AllTownDeadInLane(lv_victimTeam, libGame_gv_townTownData[lv_townIndex].lv_lane) == true)) {
            UnitBehaviorRemove(libGame_gv_teams[lv_victimTeam].lv_core, "CoreInvulnerability", 1);
        }

    }
    libGame_gf_AwardXPForNPCKill(EventUnit(), EventPlayer(), c_unitAttributeStructure, EventUnitDamageSourcePlayer(), lv_xPValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownStructureDies_Init () {
    libGame_gt_TownStructureDies = TriggerCreate("libGame_gt_TownStructureDies_Func");
    TriggerAddEventUnitDied(libGame_gt_TownStructureDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town Structure Dies (Special Case)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownStructureDiesSpecialCase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_killingFaction;
    unit lv_towerUnit;
    unit lv_killingUnit;
    int lv_xPValue;
    int lv_townIndex;
    int lv_townType;
    int lv_structureIndex;
    int lv_victimTeam;
    playergroup lv_killingPlayersGroup;
    playergroup lv_nearbyPlayersGroup;

    // Automatic Variable Declarations
    unitgroup autoD814BA93_g;
    int autoD814BA93_u;
    playergroup auto4EA7FB5A_g;

    // Variable Initialization
    lv_killingFaction = libGame_ge_Faction_Neutral;
    lv_killingPlayersGroup = PlayerGroupEmpty();
    lv_nearbyPlayersGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_towerUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_townIndex = libGame_gf_TownGetTownForUnit(lv_towerUnit);
    lv_structureIndex = libGame_gf_TownGetTownStructureIndexForUnit(lv_towerUnit);
    lv_townType = libGame_gf_TownGetTownStructurePresetFromUnit(lv_towerUnit);
    lv_victimTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_towerUnit));
    lv_xPValue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_towerUnit), "KillXP", c_playerAny);
    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    libGame_gf_TownUpdateMoonwellIcon(lv_townIndex);
    if ((lv_townType == libGame_ge_TownStructureTypes_TownHall)) {
        if ((libGame_gv_minionPeriodicCatapultsFirstWave == 0)) {
            libGame_gv_minionPeriodicCatapultsFirstWave = (libGame_gv_minionWaveSpawnCounter + 1);
        }

        if ((lv_killingFaction == libGame_ge_Faction_Order)) {
            libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townKills += 1;
            libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townsRemaining -= 1;
        }
        else {
            libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townKills += 1;
            libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townsRemaining -= 1;
        }
        autoD814BA93_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD814BA93_u = UnitGroupCount(autoD814BA93_g, c_unitCountAll);
        for (;; autoD814BA93_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoD814BA93_g, autoD814BA93_u);
            if (lv_itUnit == null) { break; }
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_itUnit), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                PlayerGroupAdd(lv_killingPlayersGroup, UnitGetOwner(lv_itUnit));
            }

            PlayerGroupAdd(lv_nearbyPlayersGroup, UnitGetOwner(lv_itUnit));
        }
        libGame_gf_BuildingDiesCameraShake(0.0, "Heavy", lv_nearbyPlayersGroup);
        libGame_gf_TownAnnounceTownDestroyed(lv_townIndex, libGame_gf_TownGetTownHallPresetOfUnit(lv_towerUnit));
        libGame_gf_TownUpgradeBruiserMinions(lv_townIndex);
        auto4EA7FB5A_g = lv_killingPlayersGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto4EA7FB5A_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libSond_gf_HeroVOStartCelebrateVOTimerForPlayer(lv_itPlayer, lv_killingPlayersGroup);
        }
        if ((libGame_gf_AllTownDeadInLane(lv_victimTeam, libGame_gv_townTownData[lv_townIndex].lv_lane) == true)) {
            UnitBehaviorRemove(libGame_gv_teams[lv_victimTeam].lv_core, "CoreInvulnerability", 1);
        }

    }

    libGame_gf_AwardXPForNPCKill(lv_towerUnit, UnitGetOwner(lv_towerUnit), c_unitAttributeStructure, UnitGetOwner(lv_killingUnit), lv_xPValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownStructureDiesSpecialCase_Init () {
    libGame_gt_TownStructureDiesSpecialCase = TriggerCreate("libGame_gt_TownStructureDiesSpecialCase_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TownStructureDiesSpecialCase, c_playerAny, "TownDeadController@ApplyDeadBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CreepDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_defenderAIIndex;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeLight) == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libAIAI_gf_DefenderAIIndexOfUnit(EventUnit());
    if ((libAIAI_gf_DefenderAIIndexOfUnit(EventUnit()) <= 0)) {
        return true;
    }

    libAIAI_gf_DefenderAICreepDies(lv_defenderAIIndex, EventUnit(), libNtve_gf_KillingUnit());
    libGame_gf_AwardXPForNPCKill(EventUnit(), EventPlayer(), c_unitAttributeLight, libNtve_gf_KillingPlayer(), EventUnitDamageKillXP());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CreepDies_Init () {
    libGame_gt_CreepDies = TriggerCreate("libGame_gt_CreepDies_Func");
    TriggerAddEventUnitDied(libGame_gt_CreepDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quest Token - Quest Increased
//--------------------------------------------------------------------------------------------------
bool libGame_gt_QuestTokenQuestIncreased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_hero);
    lv_time = GameGetMissionTime();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_hero == libGame_gv_players[lv_player].lv_heroUnit)) {
        libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsQuestsOfPlayer(lv_player);
        libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsQuestsForPlayer(lv_player);
    }

    if ((libGame_gv_questTokenEventTime[lv_player] != lv_time)) {
        libGame_gv_questTokenEventTime[lv_player] = lv_time;
        libUIUI_gf_UICombatFloatingElementsCreateQuestTagatPointForPlayerGroup(UnitGetPosition(lv_hero), libCore_gv_playerGroupFromPlayer[lv_player]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_QuestTokenQuestIncreased_Init () {
    libGame_gt_QuestTokenQuestIncreased = TriggerCreate("libGame_gt_QuestTokenQuestIncreased_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_QuestTokenQuestIncreased, c_playerAny, "TalentQuestProgressDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quest Token - Quest Refresh UI
//--------------------------------------------------------------------------------------------------
bool libGame_gt_QuestTokenQuestRefreshUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitTarget) == libGame_gv_players[lv_player].lv_heroUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsQuestsOfPlayer(lv_player);
    libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsQuestsForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_QuestTokenQuestRefreshUI_Init () {
    libGame_gt_QuestTokenQuestRefreshUI = TriggerCreate("libGame_gt_QuestTokenQuestRefreshUI_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_QuestTokenQuestRefreshUI, c_playerAny, "TalentQuestRefreshUIDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quest Token - Quest Reset
//--------------------------------------------------------------------------------------------------
bool libGame_gt_QuestTokenQuestReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libGame_gv_players[lv_player].lv_heroUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIHeroLeaderboardTalentsUpdateTalentsQuestsOfPlayer(lv_player);
    libUIUI_gf_UITalentsChoicePanelUpdateTierButtonsQuestsForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_QuestTokenQuestReset_Init () {
    libGame_gt_QuestTokenQuestReset = TriggerCreate("libGame_gt_QuestTokenQuestReset_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_QuestTokenQuestReset, c_playerAny, "TalentQuestResetDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quest Token - Quest Completed
//--------------------------------------------------------------------------------------------------
bool libGame_gt_QuestTokenQuestCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_SendEventQuestTokenCompleted(EventPlayerEffectUsedSourceBehavior(), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_QuestTokenQuestCompleted_Init () {
    libGame_gt_QuestTokenQuestCompleted = TriggerCreate("libGame_gt_QuestTokenQuestCompleted_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_QuestTokenQuestCompleted, c_playerAny, "TalentQuestCompleteDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Kill Credit Proximity Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroKillCreditProximityTracking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    fixed lv_missionTime;
    int lv_owner;

    // Automatic Variable Declarations
    playergroup autoC460E2A3_g;
    unitgroup autoA6D66C2D_g;
    int autoA6D66C2D_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameStarted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missionTime = GameGetMissionTime();
    autoC460E2A3_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoC460E2A3_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitIsAlive(libGame_gv_players[lv_itPlayer].lv_heroUnit) == true)) {
            autoA6D66C2D_g = UnitGroupSearch(null, lv_itPlayer, UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit), libCore_gv_bALHeroKillXPRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
            autoA6D66C2D_u = UnitGroupCount(autoA6D66C2D_g, c_unitCountAll);
            for (;; autoA6D66C2D_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(autoA6D66C2D_g, autoA6D66C2D_u);
                if (lv_itUnit == null) { break; }
                lv_owner = UnitGetOwner(lv_itUnit);
                libGame_gv_players[lv_itPlayer].lv_lastTimeHeroWasWithingXPRadius[lv_owner] = lv_missionTime;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroKillCreditProximityTracking_Init () {
    libGame_gt_HeroKillCreditProximityTracking = TriggerCreate("libGame_gt_HeroKillCreditProximityTracking_Func");
    TriggerAddEventTimePeriodic(libGame_gt_HeroKillCreditProximityTracking, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Trickle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_XPTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoDEFDCE9D_g;
    int autoDEFDCE9D_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_xPTrickleEnabled == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDEFDCE9D_g = libGame_gv_heroes;
    autoDEFDCE9D_u = UnitGroupCount(autoDEFDCE9D_g, c_unitCountAll);
    for (;; autoDEFDCE9D_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoDEFDCE9D_g, autoDEFDCE9D_u);
        if (lv_u == null) { break; }
        libGame_gf_GrantXPForPlayer(libCore_gv_data_XP_TrickleAmount_C, UnitGetOwner(lv_u), libGame_ge_XPSource_Trickle);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_XPTrickle_Init () {
    libGame_gt_XPTrickle = TriggerCreate("libGame_gt_XPTrickle_Func");
    TriggerEnable(libGame_gt_XPTrickle, false);
    TriggerAddEventTimePeriodic(libGame_gt_XPTrickle, libCore_gv_data_XP_TricklePeriod_C, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Preload Store
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingPreloadStore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsOnline() == true) || ((GameIsOnline() == false) && (libGame_gv_preloadingPreloadDuringOfflineTest == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PreloadPanelShowHidePanel(true);
    libGame_gf_PreloadingPreloadStoreModels();
    libUIUI_gf_PreloadPanelShowHidePanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingPreloadStore_Init () {
    libGame_gt_PreloadingPreloadStore = TriggerCreate("libGame_gt_PreloadingPreloadStore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preloading - Preload Heroes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PreloadingPreloadHeroes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameIsOnline() == true) || ((GameIsOnline() == false) && (libGame_gv_preloadingPreloadDuringOfflineTest == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PreloadPanelShowHidePanel(true);
    libGame_gf_PreloadingPreloadHeroModels();
    libUIUI_gf_PreloadPanelShowHidePanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PreloadingPreloadHeroes_Init () {
    libGame_gt_PreloadingPreloadHeroes = TriggerCreate("libGame_gt_PreloadingPreloadHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scaling Timer Expiration
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScalingTimerExpiration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_scalingTicks += 1;
    if ((libGame_gv_scalingTicks > libCore_gv_dataScalingMaxScalingTicks)) {
        libGame_gv_scalingTicks = libCore_gv_dataScalingMaxScalingTicks;
    }

    TriggerExecute(libGame_gt_JungleScalingTimerExpires, true, false);
    TriggerExecute(libGame_gt_CoreScalingTimerExpires, true, false);
    TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScalingTimerExpiration_Init () {
    libGame_gt_ScalingTimerExpiration = TriggerCreate("libGame_gt_ScalingTimerExpiration_Func");
    TriggerAddEventTimer(libGame_gt_ScalingTimerExpiration, libGame_gv_scalingTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_JungleScalingTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_JungleUpdateScalingForCamps();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_JungleScalingTimerExpires_Init () {
    libGame_gt_JungleScalingTimerExpires = TriggerCreate("libGame_gt_JungleScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreScalingTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionAI == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CoreUpdateScaling();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreScalingTimerExpires_Init () {
    libGame_gt_CoreScalingTimerExpires = TriggerCreate("libGame_gt_CoreScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Value Tracking - Damage
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreValueTrackingDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libGame_gf_PlayerIsHeroPlayer(EventUnitDamageSourcePlayer()) == true) || (libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_TriggerEventType() == 68)) {
        libGame_gf_ScoreValueTrackingAddDamage(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount(), libCore_gf_CombatDamageTypeFromEffect(EventUnitDamageEffect()));
    }
    else if ((libCore_gf_TriggerEventType() == 97) && (UnitBehaviorHasFlag(EventUnitBehavior(), c_unitBehaviorFlagPhysical) == true)) {
        libGame_gf_ScoreValueTrackingAddAbsorbed(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAbsorbed(), EventUnitBehavior(), UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0), libCore_gf_CombatDamageTypeFromEffect(EventUnitDamageEffect()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreValueTrackingDamage_Init () {
    libGame_gt_ScoreValueTrackingDamage = TriggerCreate("libGame_gt_ScoreValueTrackingDamage_Func");
    TriggerAddEventUnitDamaged(libGame_gt_ScoreValueTrackingDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libGame_gt_ScoreValueTrackingDamage, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Value Tracking - Heal
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreValueTrackingHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitHealEffect(), "Ignored By Score Tracking") == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true))) {
            return false;
        }

        if (!(((libGame_gf_PlayerIsHeroPlayer(EventUnitHealLaunchPlayer()) == true) || (libGame_gf_PlayerIsHeroPlayer(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, EventUnitHealEffect(), "Sustain") == true)) {
        libGame_gf_ScoreValueTrackingAddTankSustain(EventUnitHealLaunchUnit(), EventUnitHealAmount());
    }
    else {
        libGame_gf_ScoreValueTrackingAddSupportHeal(EventUnitHealLaunchUnit(), EventUnitHealAmount());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreValueTrackingHeal_Init () {
    libGame_gt_ScoreValueTrackingHeal = TriggerCreate("libGame_gt_ScoreValueTrackingHeal_Func");
    TriggerAddEventUnitHealed(libGame_gt_ScoreValueTrackingHeal, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Value Tracking - Lifesteal
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreValueTrackingLifesteal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, libGame_gf_HeroLifestealDamagingEffect(), "Ignored By Score Tracking") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_ScoreValueTrackingAddTankSustain(libGame_gf_HeroLifestealHero(), libGame_gf_HeroLifestealAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreValueTrackingLifesteal_Init () {
    libGame_gt_ScoreValueTrackingLifesteal = TriggerCreate("libGame_gt_ScoreValueTrackingLifesteal_Func");
    libGame_gf_HeroLifesteal(libGame_gt_ScoreValueTrackingLifesteal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrub Proximity Revealer
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ShrubProximityRevealer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    point lv_heroPosition;

    // Automatic Variable Declarations
    playergroup auto2985F93E_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2985F93E_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto2985F93E_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        if ((UnitIsValid(libGame_gv_players[lv_playerIndex].lv_heroUnit) == true) && (UnitTypeTestFlag(UnitGetType(libGame_gv_players[lv_playerIndex].lv_heroUnit), c_unitFlagCloaked) == true)) {
            lv_heroPosition = UnitGetPosition(libGame_gv_players[lv_playerIndex].lv_heroUnit);
            if ((InShrub(lv_heroPosition) == true)) {
                libGame_gf_ShrubNearbyEnemyHeroRevealCheck(lv_playerIndex, libGame_gv_players[lv_playerIndex].lv_heroUnit, lv_heroPosition);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ShrubProximityRevealer_Init () {
    libGame_gt_ShrubProximityRevealer = TriggerCreate("libGame_gt_ShrubProximityRevealer_Func");
    TriggerAddEventTimePeriodic(libGame_gt_ShrubProximityRevealer, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Choose A Talent
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerChooseATalent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_talentIndex;
    int lv_talentTier;
    int lv_talentColumn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_PlayerChooseTalentPlayer();
    lv_talentIndex = libGame_gf_PlayerChooseTalentTalentIndex();
    lv_talentTier = libGame_gf_PlayerChooseTalentTalentTier();
    lv_talentColumn = libGame_gf_PlayerChooseTalentTalentColumn();

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_TalentChoicesChooseTalentForPlayer(lv_talentTier, lv_talentColumn, lv_talentIndex, lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerChooseATalent_Init () {
    libGame_gt_PlayerChooseATalent = TriggerCreate("libGame_gt_PlayerChooseATalent_Func");
    libGame_gf_PlayerChooseTalent(libGame_gt_PlayerChooseATalent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teamfight Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamfightTracking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unitgroup lv_allyUnitGroup;
    unitgroup lv_enemyUnitGroup;
    unit lv_playerUnitCurrent;

    // Automatic Variable Declarations
    playergroup autoD8BAAFA9_g;

    // Variable Initialization
    lv_allyUnitGroup = UnitGroupEmpty();
    lv_enemyUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCore_gv_gameOver == false)) {
        autoD8BAAFA9_g = libCore_gv_heroPlayersIncludeAIHeroPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoD8BAAFA9_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_playerUnitCurrent = libCore_gf_CoreCurrentHeroOrVehicleOfPlayer(lv_itPlayer);
            if ((UnitIsValid(lv_playerUnitCurrent) == true)) {
                lv_allyUnitGroup = UnitGroupSearch(null, lv_itPlayer, UnitGetPosition(lv_playerUnitCurrent), libGame_gv_teamfightTrackingRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                libGame_gv_teamfightTrackingNearbyAllyCount[lv_itPlayer] = UnitGroupCount(lv_allyUnitGroup, c_unitCountAlive);
                lv_enemyUnitGroup = UnitGroupSearch(null, lv_itPlayer, UnitGetPosition(lv_playerUnitCurrent), libGame_gv_teamfightTrackingRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                libGame_gv_teamfightTrackingNearbyEnemyCount[lv_itPlayer] = UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamfightTracking_Init () {
    libGame_gt_TeamfightTracking = TriggerCreate("libGame_gt_TeamfightTracking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Is Under Attack
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreIsUnderAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeamNumber;
    int lv_enemyTeamNumber;
    unitgroup lv_enemiesNearCore;

    // Automatic Variable Declarations
    const int autoA4977D21_ae = libCore_gv_bALMaxTeams;
    const int autoA4977D21_ai = 1;

    // Variable Initialization
    lv_enemiesNearCore = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gv_towerMapPlaysCoreWarning == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeamNumber = 1;
    for ( ; ( (autoA4977D21_ai >= 0 && lv_itTeamNumber <= autoA4977D21_ae) || (autoA4977D21_ai < 0 && lv_itTeamNumber >= autoA4977D21_ae) ) ; lv_itTeamNumber += autoA4977D21_ai ) {
        lv_enemyTeamNumber = libGame_gf_EnemyTeamNumberOfTeam(lv_itTeamNumber);
        if ((libGame_gv_teams[lv_itTeamNumber].lv_core != null) && (UnitHasBehavior2(libGame_gv_teams[lv_itTeamNumber].lv_core, "CoreInvulnerability") == false)) {
            lv_enemiesNearCore = UnitGroupSearch(null, UnitGetOwner(libGame_gv_teams[lv_itTeamNumber].lv_core), UnitGetPosition(libGame_gv_teams[lv_itTeamNumber].lv_core), libGame_gv_towerCoreUnderAttackScanRange, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] == true) && (UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersHeroicjustexcludingCloakedandDead, 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersMercLaner, 0), c_unitCountAlive) == 0) && (libCore_gf_DataUnitGroupHasMinionType(libCore_ge_MinionType_Catapult, lv_enemiesNearCore) == false)) {
                PingDestroy(libGame_gv_towerTeamCoreAlertPing[lv_itTeamNumber]);
                libUIUI_gf_UIPartyFrameShowHideCoreUnderAttackWarning(lv_itTeamNumber, false);
                libNtve_gf_StopTimer(libGame_gv_towerTeamCoreAlertTimer[lv_itTeamNumber]);
                libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] = false;
            }
            else {
                if ((libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] == false) && ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersHeroicjustexcludingCloakedandDead, 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersMercLaner, 0), c_unitCountAlive) > 0) || (libCore_gf_DataUnitGroupHasMinionType(libCore_ge_MinionType_Catapult, lv_enemiesNearCore) == true))) {
                    libGame_gf_TowerCreateCoreUnderAttackPing(libGame_gv_teams[lv_itTeamNumber].lv_core, lv_itTeamNumber);
                    libUIUI_gf_UIPartyFrameShowHideCoreUnderAttackWarning(lv_itTeamNumber, true);
                    libGame_gv_towerTeamCoreIsUnderAttack[lv_itTeamNumber] = true;
                    if ((libGame_gv_towerTeamCoreAlertOnCooldown[lv_itTeamNumber] == false)) {
                        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[lv_itTeamNumber].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
                        TimerStart(libGame_gv_towerTeamCoreAlertTimer[lv_itTeamNumber], libGame_gv_towerCoreUnderAttackAlertRepeatTime, false, c_timeGame);
                        TimerStart(libGame_gv_towerTeamCoreAlertCooldownTimer[lv_itTeamNumber], libGame_gv_towerCoreUnderAttackAlertMinTime, false, c_timeGame);
                        libGame_gv_towerTeamCoreAlertOnCooldown[lv_itTeamNumber] = true;
                    }

                }

            }
        }

    }
    TimerStart(libGame_gv_towerMainCoreAlertTimer, libGame_gv_towerCoreUnderAttackScanPeriod, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreIsUnderAttack_Init () {
    libGame_gt_TowerCoreIsUnderAttack = TriggerCreate("libGame_gt_TowerCoreIsUnderAttack_Func");
    TriggerAddEventTimer(libGame_gt_TowerCoreIsUnderAttack, libGame_gv_towerMainCoreAlertTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Under Attack Announcement Order
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreUnderAttackAnnouncementOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    TimerStart(libGame_gv_towerTeamCoreAlertTimer[libCore_gv_cOMPUTER_TeamOrder], libGame_gv_towerCoreUnderAttackAlertRepeatTime, false, c_timeGame);
    TimerStart(libGame_gv_towerTeamCoreAlertCooldownTimer[libCore_gv_cOMPUTER_TeamOrder], libGame_gv_towerCoreUnderAttackAlertMinTime, false, c_timeGame);
    libGame_gv_towerTeamCoreAlertOnCooldown[libGame_gv_teamOrderIndex_C] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreUnderAttackAnnouncementOrder_Init () {
    libGame_gt_TowerCoreUnderAttackAnnouncementOrder = TriggerCreate("libGame_gt_TowerCoreUnderAttackAnnouncementOrder_Func");
    TriggerAddEventTimer(libGame_gt_TowerCoreUnderAttackAnnouncementOrder, libGame_gv_towerTeamCoreAlertTimer[libGame_gv_teamOrderIndex_C]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Under Attack Announcement Chaos
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreUnderAttackAnnouncementChaos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncemetPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "", null, null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    TimerStart(libGame_gv_towerTeamCoreAlertTimer[libGame_gv_teamChaosIndex_C], libGame_gv_towerCoreUnderAttackAlertRepeatTime, false, c_timeGame);
    TimerStart(libGame_gv_towerTeamCoreAlertCooldownTimer[libGame_gv_teamChaosIndex_C], libGame_gv_towerCoreUnderAttackAlertMinTime, false, c_timeGame);
    libGame_gv_towerTeamCoreAlertOnCooldown[libGame_gv_teamChaosIndex_C] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreUnderAttackAnnouncementChaos_Init () {
    libGame_gt_TowerCoreUnderAttackAnnouncementChaos = TriggerCreate("libGame_gt_TowerCoreUnderAttackAnnouncementChaos_Func");
    TriggerAddEventTimer(libGame_gt_TowerCoreUnderAttackAnnouncementChaos, libGame_gv_towerTeamCoreAlertTimer[libGame_gv_teamChaosIndex_C]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Alert Announcement Cooldown Expires Order
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_towerTeamCoreAlertOnCooldown[libGame_gv_teamOrderIndex_C] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresOrder_Init () {
    libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresOrder = TriggerCreate("libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresOrder_Func");
    TriggerAddEventTimer(libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresOrder, libGame_gv_towerTeamCoreAlertCooldownTimer[libGame_gv_teamOrderIndex_C]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Alert Announcement Cooldown Expires Chaos
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresChaos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_towerTeamCoreAlertOnCooldown[libGame_gv_teamChaosIndex_C] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresChaos_Init () {
    libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresChaos = TriggerCreate("libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresChaos_Func");
    TriggerAddEventTimer(libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresChaos, libGame_gv_towerTeamCoreAlertCooldownTimer[libGame_gv_teamChaosIndex_C]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Has Taken Damage
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreHasTakenDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_teamUnderAttack;
    timer lv_teamAlertTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_teamUnderAttack = PlayerGroupEmpty();
    lv_teamAlertTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIPartyFrameShowHideCoreHealth(true);
    UnitBehaviorRemove(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, "PalaceDamageResponseController", 1);
    UnitBehaviorRemove(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "PalaceDamageResponseController", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreHasTakenDamage_Init () {
    libGame_gt_TowerCoreHasTakenDamage = TriggerCreate("libGame_gt_TowerCoreHasTakenDamage_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TowerCoreHasTakenDamage, c_playerAny, "PalaceDamageResponseDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Town System
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeTownSystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTown;
    unit lv_u;
    int lv_townStructureType;
    int lv_townStructureCount;
    int lv_townEnemyTeam;

    // Automatic Variable Declarations
    int autoC0CC02B0_ae;
    const int autoC0CC02B0_ai = 1;
    unitgroup autoE446A6B0_g;
    int autoE446A6B0_u;
    int autoFD196D51_ae;
    const int autoFD196D51_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSTowns == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townsRemaining = 0;
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townsRemaining = 0;
    autoC0CC02B0_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoC0CC02B0_ai >= 0 && lv_itTown <= autoC0CC02B0_ae) || (autoC0CC02B0_ai < 0 && lv_itTown >= autoC0CC02B0_ae) ) ; lv_itTown += autoC0CC02B0_ai ) {
        libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(libGame_gv_townTownData[lv_itTown].lv_owner)].lv_townsRemaining += 1;
        libGame_gv_townTownData[lv_itTown].lv_structureCount = 0;
        libGame_gv_townTownData[lv_itTown].lv_structuresAlive = 0;
        if ((libGame_gv_townTownData[lv_itTown].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
            lv_townEnemyTeam = libCore_gv_cOMPUTER_TeamChaos;
        }
        else {
            lv_townEnemyTeam = libCore_gv_cOMPUTER_TeamOrder;
        }
        autoE446A6B0_g = UnitGroup(null, libGame_gv_townTownData[lv_itTown].lv_owner, libGame_gv_townTownData[lv_itTown].lv_townRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE446A6B0_u = UnitGroupCount(autoE446A6B0_g, c_unitCountAll);
        for (;; autoE446A6B0_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoE446A6B0_g, autoE446A6B0_u);
            if (lv_u == null) { break; }
            lv_townStructureType = libGame_gf_TownGetTownStructurePresetFromUnit(lv_u);
            libGame_gf_TownAddStructureToTownArray(lv_itTown, lv_u, lv_townStructureType, lv_townEnemyTeam);
        }
    }
    autoFD196D51_ae = libGame_gv_townTownCount;
    lv_itTown = 1;
    for ( ; ( (autoFD196D51_ai >= 0 && lv_itTown <= autoFD196D51_ae) || (autoFD196D51_ai < 0 && lv_itTown >= autoFD196D51_ae) ) ; lv_itTown += autoFD196D51_ai ) {
        libGame_gf_TownUpdateMoonwellIcon(lv_itTown);
    }
    libGame_gf_SendEventTownDataInitialized();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeTownSystem_Init () {
    libGame_gt_InitializeTownSystem = TriggerCreate("libGame_gt_InitializeTownSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created (Summoned)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitCreatedSummoned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UnitStatsSummonedUnitUpdateStatsFromSummonerBirth(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitCreatedSummoned_Init () {
    libGame_gt_UnitCreatedSummoned = TriggerCreate("libGame_gt_UnitCreatedSummoned_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_UnitCreatedSummoned, c_playerAny, "Summon@UnitIsCreated");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Watch Towers
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeWatchTowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoA4F9003E_g;
    int autoA4F9003E_u;
    playergroup autoA7C6630D_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleWatchTowers == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA4F9003E_g = UnitGroup("XelNagaWatchTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4F9003E_u = UnitGroupCount(autoA4F9003E_g, c_unitCountAll);
    for (;; autoA4F9003E_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoA4F9003E_g, autoA4F9003E_u);
        if (lv_u == null) { break; }
        libGame_gv_watchTowersCurrentCount += 1;
        libGame_gv_watchTowers[libGame_gv_watchTowersCurrentCount].lv_watchTowerUnit = lv_u;
        UnitSetCustomValue(lv_u, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_WatchTowerIndex), libGame_gv_watchTowersCurrentCount);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WatchTowerCaptureBeacon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_u), UnitGetPosition(lv_u));
        libGame_gf_CapturePointCreate(UnitLastCreated(), libCore_gv_data_WatchTower_CaptureRadius_C, libCore_gv_data_WatchTower_CaptureTime_C, 0.0, true, true);
        libGame_gv_watchTowers[libGame_gv_watchTowersCurrentCount].lv_capturePointIndex = libGame_gf_LastCreatedCapturePoint();
        autoA7C6630D_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoA7C6630D_g, lv_player);
            if (lv_player < 0) { break; }
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lv_u), 0.75), 0.125, false);
        }
    }
    TriggerEnable(libGame_gt_WatchTowersOwnershipChanges, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeWatchTowers_Init () {
    libGame_gt_InitializeWatchTowers = TriggerCreate("libGame_gt_InitializeWatchTowers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watch Towers - Turn On Watch Towers
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WatchTowersTurnOnWatchTowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_watchtower;
    int lv_player;

    // Automatic Variable Declarations
    int auto9E128731_ae;
    const int auto9E128731_ai = 1;
    playergroup autoB058DA0E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleWatchTowers == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9E128731_ae = libGame_gv_watchTowersCurrentCount;
    lv_watchtower = 1;
    for ( ; ( (auto9E128731_ai >= 0 && lv_watchtower <= auto9E128731_ae) || (auto9E128731_ai < 0 && lv_watchtower >= auto9E128731_ae) ) ; lv_watchtower += auto9E128731_ai ) {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_watchtower].lv_captureBeaconUnit, "SetVisibility 1");
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_watchtower].lv_watchTowerUnit, "SetMinimapVisibility 1");
        autoB058DA0E_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoB058DA0E_g, lv_player);
            if (lv_player < 0) { break; }
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(libGame_gv_watchTowers[lv_watchtower].lv_watchTowerUnit), 0.75), 0.125, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WatchTowersTurnOnWatchTowers_Init () {
    libGame_gt_WatchTowersTurnOnWatchTowers = TriggerCreate("libGame_gt_WatchTowersTurnOnWatchTowers_Func");
    TriggerAddEventTimer(libGame_gt_WatchTowersTurnOnWatchTowers, libGame_gv_jungleWatchTowerStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watch Towers - Ownership Changes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WatchTowersOwnershipChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itWatchTower;
    int lv_itPlayer;
    int lv_capturePointIndex;
    int lv_capturePointOwner;
    int lv_capturePointAIOwner;

    // Automatic Variable Declarations
    const int auto49092148_ae = libGame_gv_watchTowersMaxCount;
    const int auto49092148_ai = 1;
    int auto4369F3E3_val;

    // Variable Initialization
    lv_capturePointIndex = libGame_gf_CapturePointChangesOwnerCapturePointIndex();
    lv_capturePointOwner = libGame_gf_CapturePointChangesOwnerNewOwnerPlayer();
    lv_capturePointAIOwner = libGame_gf_CapturePointChangesOwnerAIOwner();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itWatchTower = 1;
    for ( ; ( (auto49092148_ai >= 0 && lv_itWatchTower <= auto49092148_ae) || (auto49092148_ai < 0 && lv_itWatchTower >= auto49092148_ae) ) ; lv_itWatchTower += auto49092148_ai ) {
        if ((libGame_gv_watchTowers[lv_itWatchTower].lv_capturePointIndex == lv_capturePointIndex)) {
            libGame_gf_WatchTowersChangeWatchTowerOwnership(lv_itWatchTower, lv_capturePointAIOwner);
            auto4369F3E3_val = lv_capturePointAIOwner;
            if (auto4369F3E3_val == libCore_gv_cOMPUTER_Neutral) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerNeutral");
            }
            else if (auto4369F3E3_val == libCore_gv_cOMPUTER_TeamChaos) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerChaos");
            }
            else if (auto4369F3E3_val == libCore_gv_cOMPUTER_TeamOrder) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerOrder");
            }
            else {
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WatchTowersOwnershipChanges_Init () {
    libGame_gt_WatchTowersOwnershipChanges = TriggerCreate("libGame_gt_WatchTowersOwnershipChanges_Func");
    TriggerEnable(libGame_gt_WatchTowersOwnershipChanges, false);
    libGame_gf_CapturePointChangesOwner(libGame_gt_WatchTowersOwnershipChanges);
}

void libGame_InitTriggers () {
    libGame_gt_IncludeGame_Init();
    libGame_gt_InitializePlayers_Init();
    libGame_gt_InitializeGameSystems_Init();
    libGame_gt_InitializeGameData_Init();
    libGame_gt_UnitStatsHealingReceivedInitialization_Init();
    libGame_gt_UnitStatsLifestealGeneralController_Init();
    libGame_gt_UnitStatsBehaviorChangeCategory_Init();
    libGame_gt_UnitStatsDamageTimer_Init();
    libGame_gt_AnnouncementMessageTimerExpires_Init();
    libGame_gt_InitializeBanks_Init();
    libGame_gt_InitializeBehaviorCategories_Init();
    libGame_gt_BehaviorCategoriesAddRemoveController_Init();
    libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak_Init();
    libGame_gt_BehaviorCategoriesDecloakTemporaryCloak_Init();
    libGame_gt_BehaviorCategoriesCleanseRemoveCCBehaviorCategoriesExpanded_Init();
    libGame_gt_BehaviorCategoriesMovementController_Init();
    libGame_gt_CapturePointLogic_Init();
    libGame_gt_DimCapturePoint_Init();
    libGame_gt_UnDimCapturePoint_Init();
    libGame_gt_CCRecognitionRoot_Init();
    libGame_gt_CCRecognitionStun_Init();
    libGame_gt_CCRecognitionSilenced_Init();
    libGame_gt_CCRecognitionStasis_Init();
    libGame_gt_ColorBlindUpdate_Init();
    libGame_gt_InitializeExistedEffects_Init();
    libGame_gt_EffectHistoryDamageTaken_Init();
    libGame_gt_EffectHistoryHealed_Init();
    libGame_gt_EffectHistoryLifesteal_Init();
    libGame_gt_EncouragementDataTrackingInCombatStart_Init();
    libGame_gt_EncouragementDataTrackingInCombatTimeout_Init();
    libGame_gt_RunAnimations_Init();
    libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Init();
    libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Init();
    libGame_gt_SpawnMinions_Init();
    libGame_gt_StartGame_Init();
    libGame_gt_AnnounceCountdown_Init();
    libGame_gt_DetermineWinningTeam_Init();
    libGame_gt_HallOfStormsKnockbackLaunchMissile_Init();
    libGame_gt_HallOfStormsKnockbackUnitEntersRegion_Init();
    libGame_gt_HallOfStormsUnitEntersRegion_Init();
    libGame_gt_HallOfStormsUnitExitsRegion_Init();
    libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Init();
    libGame_gt_HeroDeathHeroDies_Init();
    libGame_gt_HeroDeathHeroRespawnTimerExpires_Init();
    libGame_gt_HeroDeathTeamMultikillTimerExpires_Init();
    libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init();
    libGame_gt_HeroDeathUpdateMultikillTimerUI_Init();
    libGame_gt_HeroDeathKillStingerTimerExpires_Init();
    libGame_gt_HeroDeathHeroDeathToastTimerExpires_Init();
    libGame_gt_InitializeCodeLaneSystem_Init();
    libGame_gt_PlayerLeavesGame_Init();
    libGame_gt_PlayerRejoinsGame_Init();
    libGame_gt_TeamAbandonedTheGameTimerExpires_Init();
    libGame_gt_PlayerLeftAnnouncementTimerExpires_Init();
    libGame_gt_LevelUpHeroGainsLevel_Init();
    libGame_gt_MinionSpawnCycle_Init();
    libGame_gt_HeroMoonwellCooldownOnOff_Init();
    libGame_gt_HeroMoonwellDurationTextTagUpdates_Init();
    libGame_gt_HeroMount_Init();
    libGame_gt_HeroDismount_Init();
    libGame_gt_CoreDiesGameOver_Init();
    libGame_gt_MinionDies_Init();
    libGame_gt_TownStructureDies_Init();
    libGame_gt_TownStructureDiesSpecialCase_Init();
    libGame_gt_CreepDies_Init();
    libGame_gt_QuestTokenQuestIncreased_Init();
    libGame_gt_QuestTokenQuestRefreshUI_Init();
    libGame_gt_QuestTokenQuestReset_Init();
    libGame_gt_QuestTokenQuestCompleted_Init();
    libGame_gt_HeroKillCreditProximityTracking_Init();
    libGame_gt_XPTrickle_Init();
    libGame_gt_PreloadingPreloadStore_Init();
    libGame_gt_PreloadingPreloadHeroes_Init();
    libGame_gt_ScalingTimerExpiration_Init();
    libGame_gt_JungleScalingTimerExpires_Init();
    libGame_gt_CoreScalingTimerExpires_Init();
    libGame_gt_ScoreValueTrackingDamage_Init();
    libGame_gt_ScoreValueTrackingHeal_Init();
    libGame_gt_ScoreValueTrackingLifesteal_Init();
    libGame_gt_ShrubProximityRevealer_Init();
    libGame_gt_PlayerChooseATalent_Init();
    libGame_gt_TeamfightTracking_Init();
    libGame_gt_TowerCoreIsUnderAttack_Init();
    libGame_gt_TowerCoreUnderAttackAnnouncementOrder_Init();
    libGame_gt_TowerCoreUnderAttackAnnouncementChaos_Init();
    libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresOrder_Init();
    libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresChaos_Init();
    libGame_gt_TowerCoreHasTakenDamage_Init();
    libGame_gt_InitializeTownSystem_Init();
    libGame_gt_UnitCreatedSummoned_Init();
    libGame_gt_InitializeWatchTowers_Init();
    libGame_gt_WatchTowersTurnOnWatchTowers_Init();
    libGame_gt_WatchTowersOwnershipChanges_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_InitLib_completed = false;

void libGame_InitLib () {
    if (libGame_InitLib_completed) {
        return;
    }

    libGame_InitLib_completed = true;

    libGame_InitLibraries();
    libGame_InitVariables();
    libGame_InitTriggers();
}

include "LibAIAI"
include "LibCore"
include "LibMeta"
include "LibSprt"
include "LibMapM"
include "LibSond"
include "LibUIUI"

