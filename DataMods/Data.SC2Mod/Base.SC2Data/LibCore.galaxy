include "TriggerLibs/NativeLib"
include "LibGame_h"
include "LibMeta_h"
include "LibSprt_h"
include "LibMapM_h"
include "LibSond_h"
include "LibUIUI_h"

include "LibCore_h"

//--------------------------------------------------------------------------------------------------
// Library: Core
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCore_InitLibraries () {
    libNtve_InitVariables();
    libGame_InitVariables();
    libMeta_InitVariables();
    libSprt_InitVariables();
    libMapM_InitVariables();
    libSond_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libCore_InitVariables_completed = false;

void libCore_InitVariables () {
    int init_i;
    int init_i1;

    if (libCore_InitVariables_completed) {
        return;
    }

    libCore_InitVariables_completed = true;

    libCore_gv_dEBUGDebuggingEnabled = true;
    libCore_gv_dEBUGPingLimitEnabled = true;
    libCore_gv_sYSTowerAI = true;
    libCore_gv_sYSMinionAI = true;
    libCore_gv_sYSJungleWatchTowers = true;
    libCore_gv_sYSTowns = true;
    libCore_gv_sYSEventsEnabled = true;
    libCore_gv_sYSStartGame = true;
    libCore_gv_sYSJungleCreepCamps = true;
    libCore_gv_sYSHeroStartLevel = 1;
    libCore_gv_sYSXPOn = true;
    libCore_gv_mAPCurrentMap = libCore_ge_MAPName_None;
    libCore_gv_allHeroPlayersPlusObserver = PlayerGroupEmpty();
    libCore_gv_teamOrder = PlayerGroupEmpty();
    libCore_gv_teamChaos = PlayerGroupEmpty();
    libCore_gv_activeHumanPlayers = PlayerGroupEmpty();
    libCore_gv_heroPlayersIncludeAIHeroPlayers = PlayerGroupEmpty();
    libCore_gv_nPCPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libCore_gv_playerGroupFromPlayer[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_dataAnnouncerVOMaxNumberOfAnnouncerEvents; init_i += 1) {
        libCore_gv_dataAnnouncerVODataFieldMap[init_i] = "";
    }
    for (init_i = 0; init_i <= libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_dataAnnouncerVOMaxNumberOfAnnouncerEvents; init_i1 += 1) {
            libCore_gv_dataAnnouncerVOPacks[init_i].lv_sounds[init_i1] = SoundLink("EditorDefaultSound", -1);
        }
        libCore_gv_dataAnnouncerVOPacks[init_i].lv_stringName = "";
    }
    libCore_gv_cOLORPlayerColor = Color(0,0,0);
    libCore_gv_cOLORAllyColor = Color(0,0,0);
    libCore_gv_cOLOREnemyColor = Color(0,0,0);
    libCore_gv_cOLORNeutralColor = Color(0,0,0);
    libCore_gv_cOLORJungleCreepColor = Color(23.53, 0.00, 35.69);
    libCore_gv_filtersAlly = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersEnemy = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersVisible = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersNoMinionAggro = UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersIgnoredByTargetingAI = UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroic = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicjustexcludingCloakedandDead = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)));
    libCore_gv_filtersHeroicjustexcludingMissile = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), 0);
    libCore_gv_filtersHeroicjustexcludingHallucination = UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHallucination - 32)));
    libCore_gv_filtersHeroicAlly = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicAllyandnotHallucination = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)));
    libCore_gv_filtersHeroicAllyandnotHallucinationHoverorBenign = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroicAllyandnotImmuneToFriendlyAbilitiesorBenign = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroicAllyorPlayer = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicAllyorPlayerandnotHallucinationorBenign = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroicAllyorPlayerandnotHover = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicAllyorPlayerandnotHoverorStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicAllyorPlayerandnotStasis = UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicEnemy = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicEnemyorNeutral = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicEnemyandnotHallucination = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)));
    libCore_gv_filtersHeroicandnotBenign = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroicandnotBenignInvulnerableorStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)));
    libCore_gv_filtersHeroicandnotCloaked = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicandnotHallucination = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)));
    libCore_gv_filtersHeroicandnotInvulnerable = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libCore_gv_filtersHeroicandnotInvulnerableorStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libCore_gv_filtersHeroicandnotPlayer = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersHeroicandnotStasis = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMinionsAllLaners = UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMinionsTownMinions = UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)));
    libCore_gv_filtersMercLaner = UnitFilter((1 << c_targetFilterRobotic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMercDefender = UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMapBosses = UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersMapCreatures = UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersStructure = UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCore_gv_filtersSummoned = UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxHeroCount; init_i += 1) {
        libCore_gv_dataHeroesHeroData[init_i].lv_heroID = "";
        libCore_gv_dataHeroesHeroData[init_i].lv_heroAttributeID = "";
        libCore_gv_dataHeroesHeroData[init_i].lv_heroHyperlinkID = "";
        libCore_gv_dataHeroesHeroData[init_i].lv_releaseDate = "";
        libCore_gv_dataHeroesHeroData[init_i].lv_mountScaling = -1.0;
    }
    for (init_i = 0; init_i <= libCore_gv_dataHeroVOMaxNumberOfHeroVOEvents; init_i += 1) {
        libCore_gv_dataHeroVODataFieldMap[init_i] = "";
    }
    libCore_gv_bALMinionWaveInterval = 30.0;
    for (init_i = 0; init_i <= libCore_gv_dataMountsMaxMountCount; init_i += 1) {
        libCore_gv_dataMountsMountData[init_i].lv_releaseDate = "";
        libCore_gv_dataMountsMountData[init_i].lv_mountID = "";
        libCore_gv_dataMountsMountData[init_i].lv_mountIDPersonal = "";
        libCore_gv_dataMountsMountData[init_i].lv_mountModel = "HorseMount";
        libCore_gv_dataMountsMountData[init_i].lv_mountModelScale = 1.0;
        libCore_gv_dataMountsMountData[init_i].lv_mountModelWalkAnimMoveSpeed = 4.5;
        libCore_gv_dataMountsMountData[init_i].lv_mountPoseAnimGroup = "Ride";
        libCore_gv_dataMountsMountData[init_i].lv_mountPoseAnimGroupStatus = "Ride";
    }
    libCore_gv_bALCancelDelay = 1.5;
    libCore_gv_bALHeroKillCreditTimeWindow = 5.0;
    libCore_gv_bALDeathTimeScaler = 1.0;
    for (init_i = 0; init_i <= libCore_gv_dataSkinsMaxSkinCount; init_i += 1) {
        libCore_gv_dataSkinsSkinData[init_i].lv_skinID = "";
        libCore_gv_dataSkinsSkinData[init_i].lv_skinIDPersonal = "";
        libCore_gv_dataSkinsSkinData[init_i].lv_releaseDate = "";
        libCore_gv_dataSkinsSkinData[init_i].lv_vODefinition = "";
    }
    libCore_gv_talents_HardenedFocus_Value_C = (0.0625 * libCore_gv_talents_HardenedFocus_Percent_C);
    libCore_gv_talents_RelentlessCCReduction20_C = 0.2;
    libCore_gv_talents_RelentlessCCReduction40_C = 0.4;
    libCore_gv_talents_RelentlessCCReduction60_C = 0.6;
    libCore_gv_talents_RelentlessCCReduction75_C = 0.75;
    libCore_gv_talents_FuryOfTheStormBounceDamagePercent_C = 0.5;
}

// Presets
string libCore_ge_MAPName_Ident (int lp_val) {
         if (lp_val == libCore_ge_MAPName_None) { return "None"; }
    else if (lp_val == libCore_ge_MAPName_BattleForSlayn) { return "BattleForSlayn"; }
    return null;
}

string libCore_ge_AnnouncerVOEvents_Ident (int lp_val) {
         if (lp_val == libCore_ge_AnnouncerVOEvents_Null) { return "Null"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_ChooseYourHero) { return "ChooseYourHero"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_CountdownRemain) { return "CountdownRemain"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown30) { return "Countdown30"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown10) { return "Countdown10"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown5) { return "Countdown5"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown4) { return "Countdown4"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown3) { return "Countdown3"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown2) { return "Countdown2"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown1) { return "Countdown1"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GameStart) { return "GameStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_HeroSlain) { return "HeroSlain"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_HeroSlainObserver) { return "HeroSlainObserver"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AllyKilled) { return "AllyKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKilledNonparticipants) { return "EnemyKilledNonparticipants"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants) { return "EnemyKilledParticipants"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_DoubleKill) { return "DoubleKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TripleKill) { return "TripleKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_QuadraKill) { return "QuadraKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_PentaKill) { return "PentaKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TeamKill) { return "TeamKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamKilled) { return "BlueTeamKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamKilled) { return "RedTeamKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AllyFirstBlood) { return "AllyFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood) { return "BlueTeamFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood) { return "RedTeamFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeStart) { return "KillingSpreeStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou) { return "KillingSpreeEndYou"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeEndAlly) { return "KillingSpreeEndAlly"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem) { return "KillingSpreeUpgrade1Mayhem"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Rampage) { return "KillingSpreeUpgrade2Rampage"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3Untouchable) { return "KillingSpreeUpgrade3Untouchable"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStar) { return "KillingSpreeUpgrade4AllStar"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame) { return "APlayerHasLeftTheGame"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame) { return "APlayerHasRejoinedTheGame"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GravestoneRevive) { return "GravestoneRevive"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Gravestomp) { return "Gravestomp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GravestompObserver) { return "GravestompObserver"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed) { return "AlliedFortDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed) { return "EnemyFortDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed) { return "AlliedKeepDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed) { return "EnemyKeepDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysFort) { return "BlueTeamDestroysFort"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysFort) { return "RedTeamDestroysFort"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysKeep) { return "BlueTeamDestroysKeep"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysKeep) { return "RedTeamDestroysKeep"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack) { return "AlliedCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack) { return "BlueTeamCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack) { return "RedTeamCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Victory) { return "Victory"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Defeat) { return "Defeat"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamWins) { return "BlueTeamWins"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamWins) { return "RedTeamWins"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LegendaryEventStart) { return "LegendaryEventStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LegendaryEventEnd) { return "LegendaryEventEnd"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliesCaptureMercCamp) { return "AlliesCaptureMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemiesCaptureMercCamp) { return "EnemiesCaptureMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamCapturesMercCamp) { return "BlueTeamCapturesMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamCapturesMercCamp) { return "RedTeamCapturesMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TalentUnlocked) { return "TalentUnlocked"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventCount) { return "EventCount"; }
    else if (lp_val == -1) { return "GamePaused"; }
    else if (lp_val == -1) { return "GameResumed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventStarts) { return "EventStarts"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventContinues) { return "EventContinues"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventEnds) { return "EventEnds"; }
    return null;
}

// Functions
text libCore_gf_AbilityTalentHotkeyText (text lp_hotkeyText, int lp_type) {
    // Variable Declarations
    text lv_itText;

    // Automatic Variable Declarations
    int auto1567A99C_val;

    // Variable Initialization
    lv_itText = lp_hotkeyText;

    // Implementation
    auto1567A99C_val = lp_type;
    if (auto1567A99C_val == libCore_ge_HeroTalentType_Heroic) {
        if ((lv_itText == null)) {
            return StringExternal("Param/Value/lib_Core_83704217");
        }
        else {
            return (StringExternal("Param/Value/lib_Core_45AED828") + lp_hotkeyText + StringExternal("Param/Value/lib_Core_0425D4E1"));
        }
    }
    else if (auto1567A99C_val == libCore_ge_HeroTalentType_Trait) {
        if ((lv_itText == null)) {
            return StringExternal("Param/Value/lib_Core_619D541B");
        }
        else {
            return (StringExternal("Param/Value/lib_Core_8D294F6F") + lp_hotkeyText + StringExternal("Param/Value/lib_Core_01E6CC7C"));
        }
    }
    else if (auto1567A99C_val == libCore_ge_HeroTalentType_Active) {
        return StringExternal("Param/Value/lib_Core_522D89DA");
    }
    else if (auto1567A99C_val == libCore_ge_HeroTalentType_Passive) {
        return StringExternal("Param/Value/lib_Core_C80B0B57");
    }
    else {
        return lp_hotkeyText;
    }
}

text libCore_gf_AbilityTalentHotkeyTextExpanded (string lp_slot) {
    // Variable Declarations
    text lv_hotkeyText;

    // Automatic Variable Declarations
    string autoF6DF7057_val;

    // Variable Initialization

    // Implementation
    autoF6DF7057_val = lp_slot;
    if (autoF6DF7057_val == "Basic Ability (Q)") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Basic Ability (W)") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Basic Ability (E)") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Heroic Ability (R)") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
        TextExpressionSetToken("Param/Expression/lib_Core_7EFAD522", "Hotkey", lv_hotkeyText);
        lv_hotkeyText = TextExpressionAssemble("Param/Expression/lib_Core_7EFAD522");
    }
    else if (autoF6DF7057_val == "Trait (D)") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
        TextExpressionSetToken("Param/Expression/lib_Core_BB91A195", "Hotkey", lv_hotkeyText);
        lv_hotkeyText = TextExpressionAssemble("Param/Expression/lib_Core_BB91A195");
    }
    else if (autoF6DF7057_val == "Mount (Z)") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Hearthstone (B)") {
        lv_hotkeyText = StringExternalHotkey(UserDataGetString("AbilitySlot", lp_slot, "HotkeyString", 1));
    }
    else if (autoF6DF7057_val == "Inventory (Active)") {
        lv_hotkeyText = StringExternal("Param/Value/lib_Core_986463C2");
    }
    else if (autoF6DF7057_val == "Passive") {
        lv_hotkeyText = StringExternal("Param/Value/lib_Core_07F7F697");
    }
    else {
        lv_hotkeyText = StringExternal("Param/Value/lib_Core_6333985E");
    }
    return lv_hotkeyText;
}

void libCore_gf_DataInitializeHero (string lp_instance) {
    // Variable Declarations
    string lv_heroInstance;
    string lv_talentResetGameVersionInstance;
    string lv_string;
    string lv_stringPlayer;
    int lv_heroIndex;
    int lv_itAlertnateHero;
    int lv_itTalentBehaviorIndex;
    int lv_itTalentTier;
    int lv_itTalentNumber;
    int lv_itTalentColumn;
    int lv_itAbil;
    int lv_itHeroAbility;
    int lv_itPlayer;
    int lv_itPlayerResponse;
    int lv_itLevel;
    string lv_skinID;
    int lv_itUserDataSkin;
    int lv_itSkinVar;
    int lv_skinsCount;
    int lv_skinNumber;
    string lv_itTalentParentButtonLink;
    string lv_heroUnitType;
    string lv_heroLink;
    string lv_heroLinkPaired;
    string lv_itAbilButtonLink;
    string lv_itTalentLink;
    string lv_itTalentButtonLink;
    text lv_itHotkeyText;
    int lv_mountInstanceIndex;
    int lv_itMount;
    int lv_itMountCategory;
    int lv_allowedMount;

    // Automatic Variable Declarations
    int autoDA72E260_ae;
    const int autoDA72E260_ai = 1;
    const int auto11FBA96B_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
    const int auto11FBA96B_ai = 1;
    const int auto57AE38CE_ae = libCore_gv_dataHeroesMaxPlayerResponsesPerHero;
    const int auto57AE38CE_ai = 1;
    const int auto071F81AB_ae = libCore_gv_bALMaxLevel;
    const int auto071F81AB_ai = 1;
    const int autoB43D9724_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoB43D9724_ai = 1;
    int autoDDD273CC_ae;
    const int autoDDD273CC_ai = 1;
    int auto9B9BF26F_ae;
    const int auto9B9BF26F_ai = 1;
    int auto3BA2C658_ae;
    const int auto3BA2C658_ai = 1;
    const int auto2E412424_ae = libCore_gv_data_MaxHeroAllowedUserDataSkinCount_C;
    const int auto2E412424_ai = 1;
    const int autoDF4DA52C_ae = libCore_gv_dataSkinsMaxSkinVariationCount;
    const int autoDF4DA52C_ai = 1;
    const int auto41C8C2E7_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int auto41C8C2E7_ai = 1;
    const int autoE94EE934_ae = libCore_gv_dataHeroesMaxTalentTiers;
    const int autoE94EE934_ai = 1;
    const int auto155A7C0B_ae = libCore_gv_dataHeroesMaxTalentsPerTier;
    const int auto155A7C0B_ai = 1;
    const int autoD0B41E2F_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int autoD0B41E2F_ai = 1;

    // Variable Initialization
    lv_string = "";
    lv_stringPlayer = "";
    lv_skinID = "";

    // Implementation
    lv_heroInstance = lp_instance;
    libCore_gv_dataHeroesNumberOfHeroes += 1;
    if ((libCore_gv_dataHeroesNumberOfHeroes > libCore_gv_dataHeroesMaxHeroCount)) {
        libCore_gv_dataHeroesNumberOfHeroes -= 1;
        TextExpressionSetToken("Param/Expression/lib_Core_848619D4", "A", IntToText(libCore_gv_dataHeroesNumberOfHeroes));
        TextExpressionSetToken("Param/Expression/lib_Core_848619D4", "B", IntToText(libCore_gv_dataHeroesMaxHeroCount));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_848619D4"), true);
        return ;
    }

    lv_heroIndex = libCore_gv_dataHeroesNumberOfHeroes;
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroID = (lv_heroInstance);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLink = UserDataGetGameLink("Hero", lv_heroInstance, "Hero Link", 1);
    lv_heroLink = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLink;
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroAttributeID = CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "AttributeId", c_playerAny);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroHyperlinkID = CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "HyperlinkId", c_playerAny);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect = UserDataGetGameLink("Hero", lv_heroInstance, "Hero Level Scaling Effect", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Unit", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_numberOfAlternateHeroUnitTypes = CatalogFieldValueCount(c_gameCatalogHero, lv_heroLink, "AlternateUnitArray", c_playerAny);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_releaseDate = libNtve_gf_FormatDateTimeasString(StringToDateTime(UserDataGetString("Hero", lv_heroInstance, "Release Date", 1)));
    autoDA72E260_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_numberOfAlternateHeroUnitTypes;
    lv_itAlertnateHero = 1;
    for ( ; ( (autoDA72E260_ai >= 0 && lv_itAlertnateHero <= autoDA72E260_ae) || (autoDA72E260_ai < 0 && lv_itAlertnateHero >= autoDA72E260_ae) ) ; lv_itAlertnateHero += autoDA72E260_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitTypeAlternate[lv_itAlertnateHero] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "AlternateUnitArray[" + IntToString((lv_itAlertnateHero-1)) + "]", c_playerAny));
    }
    lv_itAbil = 1;
    for ( ; ( (auto11FBA96B_ai >= 0 && lv_itAbil <= auto11FBA96B_ae) || (auto11FBA96B_ai < 0 && lv_itAbil >= auto11FBA96B_ae) ) ; lv_itAbil += auto11FBA96B_ai ) {
        if ((libNtve_gf_UserDataInstanceGetIndex("Ability", UserDataGetUserInstance("Hero", lp_instance, "Abilities", lv_itAbil)) <= 0)) {
            break;
        }

        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilityIndex[lv_itAbil] = libNtve_gf_UserDataInstanceGetIndex("Ability", UserDataGetUserInstance("Hero", lp_instance, "Abilities", lv_itAbil));
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilitiesCount += 1;
    }
    lv_itPlayerResponse = 1;
    for ( ; ( (auto57AE38CE_ai >= 0 && lv_itPlayerResponse <= auto57AE38CE_ae) || (auto57AE38CE_ai < 0 && lv_itPlayerResponse >= auto57AE38CE_ae) ) ; lv_itPlayerResponse += auto57AE38CE_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_playerResponse[lv_itPlayerResponse] = UserDataGetGameLink("Hero", lv_heroInstance, "Player Response", lv_itPlayerResponse);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_playerResponse[lv_itPlayerResponse] == "")) {
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_playerResponse[lv_itPlayerResponse] = null;
        }
        else {
            if ((CatalogEntryIsValid(c_gameCatalogPlayerResponse, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_playerResponse[lv_itPlayerResponse]) == false)) {
                TextExpressionSetToken("Param/Expression/lib_Core_7CC264C7", "A", IntToText(lv_heroIndex));
                TextExpressionSetToken("Param/Expression/lib_Core_7CC264C7", "B", StringToText((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_playerResponse[lv_itPlayerResponse])));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7CC264C7"), true);
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_playerResponse[lv_itPlayerResponse] = null;
            }
            else {
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_playerResponseCount += 1;
            }
        }
    }
    lv_heroUnitType = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType;
    if ((lv_heroLink == null)) {
        TextExpressionSetToken("Param/Expression/lib_Core_13163AF1", "A", IntToText(lv_heroIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_13163AF1"), true);
        libCore_gv_dataHeroesNumberOfHeroes -= 1;

    }

    if ((CatalogEntryIsValid(c_gameCatalogHero, lv_heroLink) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Core_8D241710", "A", StringToText((lv_heroLink)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_8D241710"), true);
        libCore_gv_dataHeroesNumberOfHeroes -= 1;

    }

    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect == null)) {
        TextExpressionSetToken("Param/Expression/lib_Core_B4721D60", "A", IntToText(lv_heroIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_B4721D60"), true);
        libCore_gv_dataHeroesNumberOfHeroes -= 1;

    }

    if ((CatalogEntryIsValid(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Core_315718D3", "A", StringToText((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroLevelScalingEffect)));
        TextExpressionSetToken("Param/Expression/lib_Core_315718D3", "B", IntToText(lv_heroIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_315718D3"), true);
        libCore_gv_dataHeroesNumberOfHeroes -= 1;

    }

    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType == null)) {
        TextExpressionSetToken("Param/Expression/lib_Core_D5ED4E40", "A", IntToText(lv_heroIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_D5ED4E40"), true);
        libCore_gv_dataHeroesNumberOfHeroes -= 1;

    }

    if ((CatalogEntryIsValid(c_gameCatalogUnit, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Core_4E47FF53", "A", StringToText((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType)));
        TextExpressionSetToken("Param/Expression/lib_Core_4E47FF53", "B", IntToText(lv_heroIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_4E47FF53"), true);
        libCore_gv_dataHeroesNumberOfHeroes -= 1;

    }

    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroAttributeID == "")) {
        TextExpressionSetToken("Param/Expression/lib_Core_A3E75A51", "A", IntToText(lv_heroIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_A3E75A51"), true);
        libCore_gv_dataHeroesNumberOfHeroes -= 1;

    }

    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name = StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Name", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_class = libCore_gf_RoleGetHeroRoleofHeroPreset(lv_heroLink);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroSelectScreenButtonPortrait = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "SelectScreenButtonImage", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroSelectScreenDraftPortrait = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "DraftScreenPortrait", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_leaderboardImage = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "LeaderboardImage", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_partyFrameImage = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "PartyPanelButtonImage", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portrait = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Portrait", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_description = StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Description", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universe = libCore_gf_UniverseGetHeroUniverse(lv_heroLink);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universeIcon = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "UniverseIcon", c_playerAny));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isFlyer = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "Flags[Flyer]", c_playerAny) == 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isPaired = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "IsPaired", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_hero0EnergyOnRespawn = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "Hero 0 Energy On Respawn", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroRequiresCustomRespawn = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "Hero Requires Custom Respawn", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroAbnormalDeath = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "Hero Abnormal Death", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroAbnormalExperienceGain = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "Hero Abnormal Experience Gain", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroAbnormalRespawn = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", lp_instance, "Hero Abnormal Respawn", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_usesMount = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "Flags[UsesMount]", c_playerAny) == 1);
    lv_itLevel = 1;
    for ( ; ( (auto071F81AB_ai >= 0 && lv_itLevel <= auto071F81AB_ae) || (auto071F81AB_ai < 0 && lv_itLevel >= auto071F81AB_ae) ) ; lv_itLevel += auto071F81AB_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel] = UserDataGetGameLink("Hero", lv_heroInstance, "Level Effect", lv_itLevel);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel] == "")) {
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel] = null;
            continue;
        }
        else if ((CatalogEntryIsValid(c_gameCatalogEffect, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel]) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Core_A9891A6F", "A", IntToText(lv_itLevel));
            TextExpressionSetToken("Param/Expression/lib_Core_A9891A6F", "B", IntToText(lv_heroIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_A9891A6F"), true);
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelEffect[lv_itLevel] = null;
            continue;
        }
    }
    lv_itTalentTier = 1;
    for ( ; ( (autoB43D9724_ai >= 0 && lv_itTalentTier <= autoB43D9724_ae) || (autoB43D9724_ai < 0 && lv_itTalentTier >= autoB43D9724_ae) ) ; lv_itTalentTier += autoB43D9724_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_resetFavoriteTalentTierAtPatch[lv_itTalentTier] = libNtve_gf_UserDataInstanceGetIndex("GameVersion", UserDataGetUserInstance("Hero", lv_heroInstance, "Talents - Reset Favorite Talents At Patch", lv_itTalentTier));
    }
    lv_mountInstanceIndex = libNtve_gf_UserDataInstanceGetIndex("Mount", UserDataGetUserInstance("Hero", lv_heroInstance, "Default Mount", 1));
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_defaultMount = libCore_gf_DataMountsFindMountWithMountID((UserDataInstance("Mount", lv_mountInstanceIndex)), 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountScaling = UserDataGetFixed("Hero", lv_heroInstance, "Mount Scaling Override", 1);
    autoDDD273CC_ae = UserDataFieldValueCount("Hero", "Mount Category Array");
    lv_itMountCategory = 1;
    for ( ; ( (autoDDD273CC_ai >= 0 && lv_itMountCategory <= autoDDD273CC_ae) || (autoDDD273CC_ai < 0 && lv_itMountCategory >= autoDDD273CC_ae) ) ; lv_itMountCategory += autoDDD273CC_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategories[lv_itMountCategory] = UserDataGetUserInstance("Hero", lv_heroInstance, "Mount Category Array", lv_itMountCategory);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategories[lv_itMountCategory] != null) && (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategories[lv_itMountCategory] != "[Default]")) {
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategoryCount += 1;
        }
        else {
            break;
        }
    }
    auto9B9BF26F_ae = libCore_gv_dataMountsMountCount;
    lv_itMount = 1;
    for ( ; ( (auto9B9BF26F_ai >= 0 && lv_itMount <= auto9B9BF26F_ae) || (auto9B9BF26F_ai < 0 && lv_itMount >= auto9B9BF26F_ae) ) ; lv_itMount += auto9B9BF26F_ai ) {
        auto3BA2C658_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategoryCount;
        lv_itMountCategory = 1;
        for ( ; ( (auto3BA2C658_ai >= 0 && lv_itMountCategory <= auto3BA2C658_ae) || (auto3BA2C658_ai < 0 && lv_itMountCategory >= auto3BA2C658_ae) ) ; lv_itMountCategory += auto3BA2C658_ai ) {
            if ((libCore_gv_dataMountsMountData[lv_itMount].lv_mountCategory == libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_allowedMountCategories[lv_itMountCategory]) && (libCore_gv_dataMountsMountData[lv_itMount].lv_mountCategory != null) && (libCore_gv_dataMountsMountData[lv_itMount].lv_mountCategory != "[Default]")) {
                lv_allowedMount += 1;
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountCount += 1;
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_mountArray[lv_allowedMount] = lv_itMount;
            }

        }
    }
    lv_itUserDataSkin = 1;
    for ( ; ( (auto2E412424_ai >= 0 && lv_itUserDataSkin <= auto2E412424_ae) || (auto2E412424_ai < 0 && lv_itUserDataSkin >= auto2E412424_ae) ) ; lv_itUserDataSkin += auto2E412424_ai ) {
        lv_skinID = (UserDataGetUserInstance("Hero", lv_heroInstance, "Skins", lv_itUserDataSkin));
        if ((lv_skinID != null)) {
            lv_itSkinVar = 1;
            for ( ; ( (autoDF4DA52C_ai >= 0 && lv_itSkinVar <= autoDF4DA52C_ae) || (autoDF4DA52C_ai < 0 && lv_itSkinVar >= autoDF4DA52C_ae) ) ; lv_itSkinVar += autoDF4DA52C_ai ) {
                lv_skinNumber = libCore_gf_DataSkinsFindSkinWithSkinID(lv_skinID, lv_itSkinVar);
                if ((lv_skinNumber > 0)) {
                    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount += 1;
                    lv_skinsCount = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinCount;
                    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_skinArray[lv_skinsCount] = lv_skinNumber;
                }

            }
        }

    }
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[1] = UserDataGetImagePath("Hero", lv_heroInstance, "PairedPortrait", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_portraitPaired[2] = UserDataGetImagePath("Hero", lv_heroInstance, "PairedPortrait", 2);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_namePaired[1] = UserDataGetText("Hero", lv_heroInstance, "PairedName", 1);
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_namePaired[2] = UserDataGetText("Hero", lv_heroInstance, "PairedName", 2);
    lv_itTalentTier = 1;
    for ( ; ( (auto41C8C2E7_ai >= 0 && lv_itTalentTier <= auto41C8C2E7_ae) || (auto41C8C2E7_ai < 0 && lv_itTalentTier >= auto41C8C2E7_ae) ) ; lv_itTalentTier += auto41C8C2E7_ai ) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentTierLevel[lv_itTalentTier] = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "TalentTierArray[" + IntToString((lv_itTalentTier-1)) + "].Level", c_playerAny);
    }
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentHeroicTier = UserDataGetInt("Hero", lv_heroInstance, "TalentsHeroicTier", 1);
    lv_itTalentTier = 1;
    for ( ; ( (autoE94EE934_ai >= 0 && lv_itTalentTier <= autoE94EE934_ae) || (autoE94EE934_ai < 0 && lv_itTalentTier >= autoE94EE934_ae) ) ; lv_itTalentTier += autoE94EE934_ai ) {
        lv_itTalentColumn = 1;
        for ( ; ( (auto155A7C0B_ai >= 0 && lv_itTalentColumn <= auto155A7C0B_ae) || (auto155A7C0B_ai < 0 && lv_itTalentColumn >= auto155A7C0B_ae) ) ; lv_itTalentColumn += auto155A7C0B_ai ) {
            if ((libNtve_gf_UserDataInstanceGetIndex("Talent", UserDataGetUserInstance("Hero", lp_instance, "TalentTier" + IntToString(lv_itTalentTier), lv_itTalentColumn)) <= 0)) {
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lv_itTalentTier][lv_itTalentColumn] = 0;
            }
            else {
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentIndex[lv_itTalentTier][lv_itTalentColumn] = libNtve_gf_UserDataInstanceGetIndex("Talent", UserDataGetUserInstance("Hero", lp_instance, "TalentTier" + IntToString(lv_itTalentTier), lv_itTalentColumn));
                libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_talentsCountPerTier[lv_itTalentTier] += 1;
            }
        }
    }
    libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataIsQuest = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Hero", lv_heroInstance, "QuestDataIsQuest", 1), "True/Flase", 1) == 1);
    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataIsQuest == true)) {
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior = UserDataGetGameLink("Hero", lv_heroInstance, "QuestDataTokenCounterBehavior", 1);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior == "")) {
            TextExpressionSetToken("Param/Expression/lib_Core_5BD64644", "B", IntToText(lv_heroIndex));
            TextExpressionSetToken("Param/Expression/lib_Core_5BD64644", "A", StringToText((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_5BD64644"), true);
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior = null;

        }
        else if ((CatalogEntryIsValid(c_gameCatalogBehavior, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Core_62E511DF", "A", StringToText((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior)));
            TextExpressionSetToken("Param/Expression/lib_Core_62E511DF", "B", IntToText(lv_heroIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_62E511DF"), true);
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior = null;

        }
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataButton = UserDataGetGameLink("Hero", lv_heroInstance, "QuestDataButton", 1);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataButton == "")) {
            TextExpressionSetToken("Param/Expression/lib_Core_7D3516DA", "B", IntToText(lv_heroIndex));
            TextExpressionSetToken("Param/Expression/lib_Core_7D3516DA", "A", StringToText((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTokenCounterBehavior)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7D3516DA"), true);
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataButton = null;

        }
        else if ((CatalogEntryIsValid(c_gameCatalogButton, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataButton) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Core_3103D49F", "A", StringToText((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataButton)));
            TextExpressionSetToken("Param/Expression/lib_Core_3103D49F", "B", IntToText(lv_heroIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_3103D49F"), true);
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataButton = null;

        }
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataIcon = (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("Hero", lv_heroInstance, "QuestDataButton", 1), "Icon", c_playerAny));
        libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("Hero", lv_heroInstance, "QuestDataButton", 1), "Name", c_playerAny));
        lv_itPlayer = 0;
        for ( ; ( (autoD0B41E2F_ai >= 0 && lv_itPlayer <= autoD0B41E2F_ae) || (autoD0B41E2F_ai < 0 && lv_itPlayer >= autoD0B41E2F_ae) ) ; lv_itPlayer += autoD0B41E2F_ai ) {
            lv_string = libCore_gf_ConvertTextToString(StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("Hero", lv_heroInstance, "QuestDataButton", 1), "Tooltip", c_playerAny)));
            lv_stringPlayer = IntToString(lv_itPlayer);
            lv_stringPlayer = ("player=\"" + lv_stringPlayer + "\"");
            lv_string = StringReplaceWord(lv_string, "option=\"player\"", lv_stringPlayer, c_stringReplaceAll, c_stringNoCase);
            libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_questDataTooltipText[lv_itPlayer] = StringToText(lv_string);
        }
    }

}

bool libCore_gf_HeroHasQuestAtStart (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_questDataIsQuest;
}

int libCore_gf_RoleGetHeroRoleofHeroPreset (string lp_hero) {
    // Variable Declarations
    string lv_roleString;

    // Automatic Variable Declarations
    string auto7A20E10F_val;

    // Variable Initialization
    lv_roleString = CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Role", c_playerAny);

    // Implementation
    auto7A20E10F_val = lv_roleString;
    if (auto7A20E10F_val == "Damage") {
        return libCore_ge_HeroDataHeroRole_Assasin1;
    }
    else if (auto7A20E10F_val == "Warrior") {
        return libCore_ge_HeroDataHeroRole_Warrior;
    }
    else if (auto7A20E10F_val == "Support") {
        return libCore_ge_HeroDataHeroRole_Support;
    }
    else if (auto7A20E10F_val == "Specialist") {
        return libCore_ge_HeroDataHeroRole_Specialist;
    }
    else {
        return libCore_ge_HeroDataHeroRole_None;
    }
}

text libCore_gf_RoleGetHeroRoleofHeroText (string lp_hero) {
    // Automatic Variable Declarations
    int autoE5DC1621_val;

    // Implementation
    autoE5DC1621_val = libCore_gf_RoleGetHeroRoleofHeroPreset(lp_hero);
    if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Warrior) {
        return StringExternal("HeroSelection/Role/Warrior");
    }
    else if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Support) {
        return StringExternal("HeroSelection/Role/Support");
    }
    else if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Specialist) {
        return StringExternal("HeroSelection/Role/Specialist");
    }
    else if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Assasin1) {
        return StringExternal("HeroSelection/Role/Assassin");
    }
    else if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Assasin2) {
        return StringExternal("HeroSelection/Role/Assassin");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_Core_C2FC6662", "A", StringToText((lp_hero)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_C2FC6662"), true);
    return null;
}

int libCore_gf_UniverseGetHeroUniverse (string lp_hero) {
    // Variable Declarations
    string lv_roleString;

    // Automatic Variable Declarations
    string auto5FE96B47_val;

    // Variable Initialization
    lv_roleString = CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Universe", c_playerAny);

    // Implementation
    auto5FE96B47_val = lv_roleString;
    if (auto5FE96B47_val == "StarCraft") {
        return libCore_ge_HeroDataUniverse_StarCraft;
    }
    else if (auto5FE96B47_val == "WarCraft") {
        return libCore_ge_HeroDataUniverse_WarCraft;
    }
    else if (auto5FE96B47_val == "Diablo") {
        return libCore_ge_HeroDataUniverse_Diablo;
    }
    else {
        return libCore_ge_HeroDataUniverse_None;
    }
}

int libCore_gf_HeroicAbilityIndexOfHero (int lp_heroIndex) {
    // Variable Declarations
    int lv_itAbilityIndex;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int autoEB0A36EB_ae;
    const int autoEB0A36EB_ai = 1;

    // Variable Initialization

    // Implementation
    autoEB0A36EB_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilitiesCount;
    lv_itAbilityIndex = 1;
    for ( ; ( (autoEB0A36EB_ai >= 0 && lv_itAbilityIndex <= autoEB0A36EB_ae) || (autoEB0A36EB_ai < 0 && lv_itAbilityIndex >= autoEB0A36EB_ae) ) ; lv_itAbilityIndex += autoEB0A36EB_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbilityIndex];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_type == "Heroic")) {
            return lv_itAbilityIndex;
        }
    }
    TextExpressionSetToken("Param/Expression/lib_Core_1D9BD3DB", "A", StringToText((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroLink)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_1D9BD3DB"), true);
    return -1;
}

int libCore_gf_HeroDataAbilityVariationsCountPerSlotForHero (int lp_heroIndex, string lp_abilitySlot, bool lp_paired) {
    // Variable Declarations
    int lv_abilityVariationsCount;
    int lv_itAbility;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int auto773AC389_ae;
    const int auto773AC389_ai = 1;

    // Variable Initialization

    // Implementation
    auto773AC389_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto773AC389_ai >= 0 && lv_itAbility <= auto773AC389_ae) || (auto773AC389_ai < 0 && lv_itAbility >= auto773AC389_ae) ) ; lv_itAbility += auto773AC389_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_slot == lp_abilitySlot)) {
            if ((libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber != 0)) {
                if ((lp_paired == false) && (libCore_gv_abilityData[lv_abilityIndex].lv_paired != "Paired2")) {
                    lv_abilityVariationsCount += 1;
                }
                else if ((lp_paired == true) && (libCore_gv_abilityData[lv_abilityIndex].lv_paired == "Paired2")) {
                    lv_abilityVariationsCount += 1;
                }
            }
            else {
                return 1;
            }
        }

    }
    return lv_abilityVariationsCount;
}

int libCore_gf_HeroDataAbilityIndexFromVariationNumberOfHero (int lp_heroIndex, string lp_abilitySlot, int lp_variation, bool lp_paired) {
    // Variable Declarations
    int lv_abilityVariationsCount;
    int lv_itAbility;
    int lv_abilityIndex;

    // Automatic Variable Declarations
    int auto109C47D3_ae;
    const int auto109C47D3_ai = 1;

    // Variable Initialization

    // Implementation
    auto109C47D3_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilitiesCount;
    lv_itAbility = 1;
    for ( ; ( (auto109C47D3_ai >= 0 && lv_itAbility <= auto109C47D3_ae) || (auto109C47D3_ai < 0 && lv_itAbility >= auto109C47D3_ae) ) ; lv_itAbility += auto109C47D3_ai ) {
        lv_abilityIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
        if ((libCore_gv_abilityData[lv_abilityIndex].lv_slot == lp_abilitySlot) && (libCore_gv_abilityData[lv_abilityIndex].lv_variationNumber == lp_variation)) {
            if ((lp_paired == false) && (libCore_gv_abilityData[lv_abilityIndex].lv_paired != "Paired2")) {
                return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
            }
            else if ((lp_paired == true) && (libCore_gv_abilityData[lv_abilityIndex].lv_paired == "Paired2")) {
                return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilityIndex[lv_itAbility];
            }
        }

    }
    return -1;
}

fixed libCore_gf_HeroDeathTime (int lp_player, int lp_level) {
    // Variable Declarations
    fixed lv_deathTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gf_PlayerIsHeroPlayer(lp_player) == false) && (lp_level < 1) && (lp_level > libCore_gv_bALMaxLevel)) {
        TextExpressionSetToken("Param/Expression/lib_Core_22B78357", "A", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_Core_22B78357", "B", IntToText(lp_level));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_22B78357"), true);
        return 0.0;
    }

    if ((libCore_gv_bALDeathTimeOverride != 0.0)) {
        return libCore_gv_bALDeathTimeOverride;
    }

    lv_deathTime = (libCore_gv_bALDeathTimes[lp_level] * libCore_gv_bALDeathTimeScaler);
    return lv_deathTime;
}

int libCore_gf_HeroIndexOfUnitType (string lp_heroUnitType) {
    // Variable Declarations
    int lv_itHeroIndex;
    int lv_itAlternateHeroIndex;

    // Automatic Variable Declarations
    int auto8F248380_ae;
    const int auto8F248380_ai = 1;
    int auto48E4178E_ae;
    const int auto48E4178E_ai = 1;

    // Variable Initialization

    // Implementation
    auto8F248380_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_itHeroIndex = 1;
    for ( ; ( (auto8F248380_ai >= 0 && lv_itHeroIndex <= auto8F248380_ae) || (auto8F248380_ai < 0 && lv_itHeroIndex >= auto8F248380_ae) ) ; lv_itHeroIndex += auto8F248380_ai ) {
        if ((lp_heroUnitType == libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_heroUnitType)) {
            return lv_itHeroIndex;
        }

        if ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAlternateHeroUnitTypes > 0)) {
            auto48E4178E_ae = libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAlternateHeroUnitTypes;
            lv_itAlternateHeroIndex = 1;
            for ( ; ( (auto48E4178E_ai >= 0 && lv_itAlternateHeroIndex <= auto48E4178E_ae) || (auto48E4178E_ai < 0 && lv_itAlternateHeroIndex >= auto48E4178E_ae) ) ; lv_itAlternateHeroIndex += auto48E4178E_ai ) {
                if ((lp_heroUnitType == libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_heroUnitTypeAlternate[lv_itAlternateHeroIndex])) {
                    return lv_itHeroIndex;
                }

            }
        }

    }
    TextExpressionSetToken("Param/Expression/lib_Core_02B55FD1", "A", StringToText((lp_heroUnitType)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_02B55FD1"), true);
    return -1;
}

int libCore_gf_HeroIndexOfHeroLink (string lp_heroLink) {
    // Variable Declarations
    int lv_itHeroIndex;

    // Automatic Variable Declarations
    int auto18637FF8_ae;

    // Variable Initialization

    // Implementation
    auto18637FF8_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_itHeroIndex = 1;
    for ( ; lv_itHeroIndex <= auto18637FF8_ae ; lv_itHeroIndex += 1 ) {
        if ((lp_heroLink == libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_heroLink)) {
            return lv_itHeroIndex;
        }

    }
    return -1;
}

int libCore_gf_HeroIndexOfUnit (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_HeroIndexOfUnitType(UnitGetType(lp_hero));
}

int libCore_gf_HeroIndexOfPlayerHero (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_players[lp_player].lv_heroIndex;
}

int libCore_gf_DataHeroesDefaultSkinIndexOfHero (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinArray[1];
}

int libCore_gf_DataHeroesDefaultMountIndexOfHero (int lp_heroIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_defaultMount;
}

void libCore_gf_DataHeroVOMapDataField (int lp_event, string lp_arrayIndexName) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gv_dataHeroVODataFieldMap[(lp_event)] = ("VOArray[" + lp_arrayIndexName + "]");
}

void libCore_gf_DataHeroVOReloadHeroVODataForHero (int lp_heroIndex, int lp_player) {
    // Variable Declarations
    int lv_eventindex;
    int lv_lineindex;
    string lv_heroCatalogLink;
    string lv_dataField;

    // Automatic Variable Declarations
    const int auto54B9F6F7_ae = libCore_gv_dataHeroVOMaxNumberOfHeroVOEvents;
    const int auto54B9F6F7_ai = 1;
    int auto1045E3B5_ae;
    const int auto1045E3B5_ai = 1;
    int autoE6FB506D_ae;
    const int autoE6FB506D_ai = 1;

    // Variable Initialization
    lv_dataField = "";

    // Implementation
    lv_heroCatalogLink = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroLink;
    if ((lv_heroCatalogLink != null)) {
        lv_eventindex = 1;
        for ( ; ( (auto54B9F6F7_ai >= 0 && lv_eventindex <= auto54B9F6F7_ae) || (auto54B9F6F7_ai < 0 && lv_eventindex >= auto54B9F6F7_ae) ) ; lv_eventindex += auto54B9F6F7_ai ) {
            lv_dataField = libCore_gv_dataHeroVODataFieldMap[lv_eventindex];
            if ((lv_dataField != "")) {
                libCore_gv_dataHeroVO[lp_heroIndex][lp_player].lv_vOEventLines[lv_eventindex] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, lv_dataField, lp_player));
            }

        }
        auto1045E3B5_ae = CatalogFieldValueCount(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray", c_playerAny);
        lv_lineindex = 1;
        for ( ; ( (auto1045E3B5_ai >= 0 && lv_lineindex <= auto1045E3B5_ae) || (auto1045E3B5_ai < 0 && lv_lineindex >= auto1045E3B5_ae) ) ; lv_lineindex += auto1045E3B5_ai ) {
            libCore_gv_dataHeroVO[lp_heroIndex][lp_player].lv_specificHeroTakedownLines[libCore_gf_HeroIndexOfUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray[" + IntToString((lv_lineindex-1)) + "].Target", c_playerAny)))] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray[" + IntToString((lv_lineindex - 1)) + "].Sound", lp_player));
        }
        autoE6FB506D_ae = CatalogFieldValueCount(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray", c_playerAny);
        lv_lineindex = 1;
        for ( ; ( (autoE6FB506D_ai >= 0 && lv_lineindex <= autoE6FB506D_ae) || (autoE6FB506D_ai < 0 && lv_lineindex >= autoE6FB506D_ae) ) ; lv_lineindex += autoE6FB506D_ai ) {
            libCore_gv_dataHeroVO[lp_heroIndex][lp_player].lv_specificHeroIntroQuestionLines[libCore_gf_HeroIndexOfUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex-1)) + "].Target", c_playerAny)))] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex - 1)) + "].Question", lp_player));
            libCore_gv_dataHeroVO[lp_heroIndex][lp_player].lv_specificHeroIntroResponseLines[libCore_gf_HeroIndexOfUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex-1)) + "].Target", c_playerAny)))] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex - 1)) + "].Response", lp_player));
        }
    }

}

string libCore_gf_DataMinionUnitTypeFromPreset (int lp_type, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataMinionWaveComposition[lp_team].lv_minionUnitType[(lp_type)];
}

int libCore_gf_DataMinionTypeOfUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_unit, "MeleeMinionScaling") == true)) {
        return libCore_ge_MinionType_Footmen;
    }
    else if ((UnitHasBehavior2(lp_unit, "WizardMinionScaling") == true)) {
        return libCore_ge_MinionType_Wizard;
    }
    else if ((UnitHasBehavior2(lp_unit, "RangedMinionScaling") == true)) {
        return libCore_ge_MinionType_Ranged;
    }
    else if ((UnitHasBehavior2(lp_unit, "CatapultMinionScaling") == true)) {
        return libCore_ge_MinionType_Catapult;
    }
    return libCore_ge_MinionType_Null;
}

bool libCore_gf_DataUnitGroupHasMinionType (int lp_minionType, unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto6B7020CF_g;
    int auto6B7020CF_u;

    // Variable Initialization

    // Implementation
    auto6B7020CF_g = lp_unitGroup;
    auto6B7020CF_u = UnitGroupCount(auto6B7020CF_g, c_unitCountAll);
    for (;; auto6B7020CF_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto6B7020CF_g, auto6B7020CF_u);
        if (lv_itUnit == null) { break; }
        if ((libCore_gf_DataMinionTypeOfUnit(lv_itUnit) == lp_minionType)) {
            return true;
        }

    }
    return false;
}

void libCore_gf_DataInitializeMinion (string lp_unitType, int lp_minionType, int lp_minionCount, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_minionType == libCore_ge_MinionType_Null)) {
        return ;
    }

    libCore_gv_dataMinionWaveComposition[lp_team].lv_groupMinionCount[(lp_minionType)] = lp_minionCount;
    libCore_gv_dataMinionWaveComposition[lp_team].lv_groupMinionType[(lp_minionType)] = lp_minionType;
    libCore_gv_dataMinionWaveComposition[lp_team].lv_minionUnitType[(lp_minionType)] = lp_unitType;
}

string libCore_gf_DataMountsMountCollectionCategory (int lp_mountIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_dataMountsMountData[lp_mountIndex].lv_collectionCategory;
}

int libCore_gf_DataMountsFindMountWithMountID (string lp_moundID, int lp_variation) {
    // Variable Declarations
    int lv_itMount;

    // Automatic Variable Declarations
    int autoBA5916EC_ae;
    const int autoBA5916EC_ai = 1;

    // Variable Initialization

    // Implementation
    autoBA5916EC_ae = libCore_gv_dataMountsMountCount;
    lv_itMount = 1;
    for ( ; ( (autoBA5916EC_ai >= 0 && lv_itMount <= autoBA5916EC_ae) || (autoBA5916EC_ai < 0 && lv_itMount >= autoBA5916EC_ae) ) ; lv_itMount += autoBA5916EC_ai ) {
        if ((libCore_gv_dataMountsMountData[lv_itMount].lv_mountID == lp_moundID) && (libCore_gv_dataMountsMountData[lv_itMount].lv_mountIDVariationNumber == lp_variation)) {
            return lv_itMount;
        }

    }
    return -1;
}

int libCore_gf_DataMountsFindMountWithMountIDPersonal (string lp_mountIDPersonal) {
    // Variable Declarations
    int lv_itMount;

    // Automatic Variable Declarations
    int autoACD4F94A_ae;
    const int autoACD4F94A_ai = 1;

    // Variable Initialization

    // Implementation
    autoACD4F94A_ae = libCore_gv_dataMountsMountCount;
    lv_itMount = 1;
    for ( ; ( (autoACD4F94A_ai >= 0 && lv_itMount <= autoACD4F94A_ae) || (autoACD4F94A_ai < 0 && lv_itMount >= autoACD4F94A_ae) ) ; lv_itMount += autoACD4F94A_ai ) {
        if ((libCore_gv_dataMountsMountData[lv_itMount].lv_mountIDPersonal == lp_mountIDPersonal)) {
            return lv_itMount;
        }

    }
    return -1;
}

void libCore_gf_DataMountsAddMountPlusVariationsToMountList (string lp_mountInstance) {
    // Variable Declarations
    bool lv_mountIsEnabled;
    bool lv_variationIsUsed;
    int lv_itMountVarIndex;
    int lv_itSearchWord;
    string lv_mountID;
    string lv_cutscenePath;

    // Automatic Variable Declarations
    const int auto4ECC8E8B_ae = libCore_gv_dataMountsMaxMountVariationCount;
    const int auto4ECC8E8B_ai = 1;

    // Variable Initialization
    lv_mountID = "";
    lv_cutscenePath = "";

    // Implementation
    lv_mountID = (lp_mountInstance);
    lv_mountIsEnabled = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Mount", lp_mountInstance, "IsEnabled", 1));
    lv_itMountVarIndex = 1;
    for ( ; ( (auto4ECC8E8B_ai >= 0 && lv_itMountVarIndex <= auto4ECC8E8B_ae) || (auto4ECC8E8B_ai < 0 && lv_itMountVarIndex >= auto4ECC8E8B_ae) ) ; lv_itMountVarIndex += auto4ECC8E8B_ai ) {
        lv_variationIsUsed = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Mount", lp_mountInstance, "VariationIsUsed", lv_itMountVarIndex));
        if ((lv_variationIsUsed == false)) {
            continue;
        }

        libCore_gv_dataMountsMountCount += 1;
        if ((libCore_gv_dataMountsMountCount > libCore_gv_dataMountsMaxMountCount)) {
            libCore_gv_dataMountsMountCount -= 1;
            TextExpressionSetToken("Param/Expression/lib_Core_7A58DDAE", "A", IntToText(libCore_gv_dataMountsMaxMountCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7A58DDAE"), true);
            return ;
        }

        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_isEnabled = lv_mountIsEnabled;
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountCategory = UserDataGetUserInstance("Mount", lp_mountInstance, "MountCategory", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_collectionCategory = UserDataGetUserInstance("Mount", lp_mountInstance, "CollectionCategory", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountID = lv_mountID;
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModelScale = UserDataGetFixed("Mount", lp_mountInstance, "Model Scale", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModelWalkAnimMoveSpeed = UserDataGetFixed("Mount", lp_mountInstance, "WalkAnimMoveSpeed", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountPoseAnimGroup = (libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountCategory);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountPoseAnimGroupStatus = (libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountCategory);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModel = UserDataGetGameLink("Mount", lp_mountInstance, "Model", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_attachedMountModel = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Mount", lp_mountInstance, "IsAttached", 1), "True/Flase", 1) == 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_event = UserDataGetUserInstance("Mount", lp_mountInstance, "Event", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_releaseDate = UserDataGetString("Mount", lp_mountInstance, "ReleaseDate", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountIDPersonal = (lv_mountID + "Var" + IntToString(lv_itMountVarIndex));
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountIDVariationNumber = lv_itMountVarIndex;
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_creationActorMessageMacro = UserDataGetGameLink("Mount", lp_mountInstance, "VariationCreationActorMessage", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountUpFXActor = UserDataGetGameLink("Mount", lp_mountInstance, "FX Actor Mount Up", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_dismountFXActor = UserDataGetGameLink("Mount", lp_mountInstance, "FX Actor Dismount ", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountName = UserDataGetText("Mount", lp_mountInstance, "VariationName", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountInfo = UserDataGetText("Mount", lp_mountInstance, "VariationInfo", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_supporterTypeRequired = UserDataGetUserInstance("Mount", lp_mountInstance, "VariationSupporterTypeRequired", lv_itMountVarIndex);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_accessDeniedInfo = UserDataGetText("PlayerSupporterType", libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_supporterTypeRequired, "AccessDeniedErrorText", 1);
        if ((libCore_gv_dataMountsMountData[lv_itMountVarIndex].lv_mountInfo == null) && (lv_itMountVarIndex > 1)) {
            libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountInfo = UserDataGetText("Mount", lp_mountInstance, "VariationInfo", 1);
        }

        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountAdditionalSearchTextWord = UserDataGetText("Mount", lp_mountInstance, "VariationAdditionalSearchText", lv_itMountVarIndex);
        lv_cutscenePath = ("Cutscenes\\Mount_" + lv_mountID + "\\" + "StoreMount" + ".SC2Cutscene");
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_previewCutsceneFile = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Mount_" + lv_mountID + "\\" + "FrameMount" + ".SC2Cutscene");
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_tileCutsceneFile = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Mount_" + lv_mountID + "\\" + "MiniPortrait" + ".SC2Cutscene");
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_miniPortraitCutsceneFile = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Mount_" + lv_mountID + "\\" + "HeroSelect" + ".SC2Cutscene");
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_heroSelectCutsceneFile = lv_cutscenePath;
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_isMorphMount = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Mount", lp_mountInstance, "IsMorphUnit", lv_itMountVarIndex), "True/Flase", 1) == 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_showInStore = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Mount", lp_mountInstance, "Show In Store", lv_itMountVarIndex), "True/Flase", 1) == 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOMountSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Mounted", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vODismountSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Dismounted", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOLoopingSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Looping", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOMovingSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Moving", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOStationarySound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Stationary", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOMoveStartSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Start Moving", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOMoveStopSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Stop Moving", 1);
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_vOTurboSound = UserDataGetGameLink("Mount", lp_mountInstance, "VO Turbo", 1);
    }
}

int libCore_gf_DataSkinsFindSkinWithSkinID (string lp_skinID, int lp_variation) {
    // Variable Declarations
    int lv_itSkin;

    // Automatic Variable Declarations
    int auto71C6BD9A_ae;
    const int auto71C6BD9A_ai = 1;

    // Variable Initialization

    // Implementation
    auto71C6BD9A_ae = libCore_gv_dataSkinsSkinCount;
    lv_itSkin = 1;
    for ( ; ( (auto71C6BD9A_ai >= 0 && lv_itSkin <= auto71C6BD9A_ae) || (auto71C6BD9A_ai < 0 && lv_itSkin >= auto71C6BD9A_ae) ) ; lv_itSkin += auto71C6BD9A_ai ) {
        if ((libCore_gv_dataSkinsSkinData[lv_itSkin].lv_skinID == lp_skinID) && (libCore_gv_dataSkinsSkinData[lv_itSkin].lv_skinIDVariationNumber == lp_variation)) {
            return lv_itSkin;
        }

    }
    return -1;
}

int libCore_gf_DataSkinsFindSkinWithSkinIDPersonal (string lp_skinIDPersonal) {
    // Variable Declarations
    int lv_itSkin;

    // Automatic Variable Declarations
    int auto77A0EBDC_ae;
    const int auto77A0EBDC_ai = 1;

    // Variable Initialization

    // Implementation
    auto77A0EBDC_ae = libCore_gv_dataSkinsSkinCount;
    lv_itSkin = 1;
    for ( ; ( (auto77A0EBDC_ai >= 0 && lv_itSkin <= auto77A0EBDC_ae) || (auto77A0EBDC_ai < 0 && lv_itSkin >= auto77A0EBDC_ae) ) ; lv_itSkin += auto77A0EBDC_ai ) {
        if ((libCore_gv_dataSkinsSkinData[lv_itSkin].lv_skinIDPersonal == lp_skinIDPersonal)) {
            return lv_itSkin;
        }

    }
    return -1;
}

void libCore_gf_DataSkinsAddSkinPlusVariationsToSkinList (string lp_skinInstance) {
    // Variable Declarations
    bool lv_skinIsEnabled;
    string lv_event;
    string lv_releaseDate;
    string lv_additionalMountCategory;
    string lv_mountID;
    int lv_defaultMountIndex;
    string[libCore_gv_dataSkinsMaxFeatureCount + 1] lv_featureArray;
    int lv_featureArrayCount;
    int lv_itFeature;
    string lv_vODefinition;
    bool lv_variationIsUsed;
    int lv_itSkinVarIndex;
    int lv_itSearchWord;
    string lv_skinID;
    string lv_cutscenePath;

    // Automatic Variable Declarations
    const int auto1FC50C9D_ae = libCore_gv_dataSkinsMaxFeatureCount;
    const int auto1FC50C9D_ai = 1;
    const int auto7D73E50D_ae = libCore_gv_dataSkinsMaxSkinVariationCount;
    const int auto7D73E50D_ai = 1;
    int auto59AC582F_ae;
    const int auto59AC582F_ai = 1;

    // Variable Initialization
    lv_releaseDate = "";
    lv_mountID = "";
    lv_vODefinition = "";
    lv_skinID = "";
    lv_cutscenePath = "";

    // Implementation
    lv_skinID = (lp_skinInstance);
    lv_skinIsEnabled = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Skin", lp_skinInstance, "IsEnabled", 1), "True/Flase", 1) == 1);
    lv_event = UserDataGetUserInstance("Skin", lp_skinInstance, "Event", 1);
    lv_releaseDate = UserDataGetString("Skin", lp_skinInstance, "ReleaseDate", 1);
    lv_additionalMountCategory = UserDataGetUserInstance("Skin", lp_skinInstance, "AdditionalMountCategoryArray", 1);
    lv_mountID = (UserDataInstance("Mount", UserDataGetInt("Skin", lp_skinInstance, "DefaultMount", 1)));
    lv_defaultMountIndex = libCore_gf_DataMountsFindMountWithMountID(lv_mountID, 1);
    lv_vODefinition = UserDataGetString("Skin", lp_skinInstance, "VODefinition", 1);
    lv_itFeature = 1;
    for ( ; ( (auto1FC50C9D_ai >= 0 && lv_itFeature <= auto1FC50C9D_ae) || (auto1FC50C9D_ai < 0 && lv_itFeature >= auto1FC50C9D_ae) ) ; lv_itFeature += auto1FC50C9D_ai ) {
        lv_featureArray[lv_itFeature] = UserDataGetUserInstance("Skin", lp_skinInstance, "FeatureArray", lv_itFeature);
        if ((lv_featureArray[lv_itFeature] != null) && (lv_featureArray[lv_itFeature] != "[Default]")) {
            lv_featureArrayCount += 1;
        }

    }
    lv_itSkinVarIndex = 1;
    for ( ; ( (auto7D73E50D_ai >= 0 && lv_itSkinVarIndex <= auto7D73E50D_ae) || (auto7D73E50D_ai < 0 && lv_itSkinVarIndex >= auto7D73E50D_ae) ) ; lv_itSkinVarIndex += auto7D73E50D_ai ) {
        lv_variationIsUsed = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Skin", lp_skinInstance, "VariationIsUsed", lv_itSkinVarIndex), "True/Flase", 1) == 1);
        if ((lv_variationIsUsed == false)) {
            continue;
        }

        libCore_gv_dataSkinsSkinCount += 1;
        if ((libCore_gv_dataSkinsSkinCount > libCore_gv_dataSkinsMaxSkinCount)) {
            libCore_gv_dataSkinsSkinCount -= 1;
            TextExpressionSetToken("Param/Expression/lib_Core_7D826725", "A", IntToText(libCore_gv_dataSkinsMaxSkinCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7D826725"), true);
            return ;
        }

        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_isEnabled = lv_skinIsEnabled;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_event = lv_event;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_releaseDate = lv_releaseDate;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_mountCategory = lv_additionalMountCategory;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_defaultMount = lv_defaultMountIndex;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinID = lv_skinID;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_vODefinition = lv_vODefinition;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinLink = UserDataGetGameLink("Skin", lp_skinInstance, "VariationSkinLink", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_name = UserDataGetText("Skin", lp_skinInstance, "VariationName", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_info = UserDataGetText("Skin", lp_skinInstance, "VariationInfo", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinIDVariationNumber = lv_itSkinVarIndex;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinIDPersonal = (lv_skinID + "Var" + IntToString(lv_itSkinVarIndex));
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_upgradeLink = UserDataGetGameLink("Skin", lp_skinInstance, "VariationUpgradeLink", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_supporterTypeRequired = UserDataGetUserInstance("Skin", lp_skinInstance, "VariationSupporterTypeRequired", lv_itSkinVarIndex);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_accessDeniedInfo = UserDataGetText("PlayerSupporterType", libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_supporterTypeRequired, "AccessDeniedErrorText", 1);
        if ((libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_info == null) && (lv_itSkinVarIndex > 1)) {
            libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_info = UserDataGetText("Skin", lp_skinInstance, "VariationInfo", 1);
        }

        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_additionalSearchText = UserDataGetText("Skin", lp_skinInstance, "VariationAdditionalSearchText", lv_itSkinVarIndex);
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "HeroSelect" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_heroSelectCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "ScoreScreen" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_scoreScreenCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "MiniPortrait" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_miniPortraitCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "Store" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_previewCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "Draft" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_draftCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "DraftPick" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_draftPickCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "EndOfMatch_LineUp" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_endOfMatchCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "Frame" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_tileCutscene = lv_cutscenePath;
        lv_cutscenePath = ("Cutscenes\\Hero_" + lv_skinID + "\\" + "MiniPortrait" + ".SC2Cutscene");
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_lootChestRewardCutscene = lv_cutscenePath;
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_featureArrayCount = lv_featureArrayCount;
        auto59AC582F_ae = lv_featureArrayCount;
        lv_itFeature = 1;
        for ( ; ( (auto59AC582F_ai >= 0 && lv_itFeature <= auto59AC582F_ae) || (auto59AC582F_ai < 0 && lv_itFeature >= auto59AC582F_ae) ) ; lv_itFeature += auto59AC582F_ai ) {
            libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_featureArray[lv_itFeature] = lv_featureArray[lv_itFeature];
        }
    }
}

void libCore_gf_UnitStatsBehaviorDataInitializeBehavior (string lp_behavior) {
    // Variable Declarations
    int lv_itAttribute;
    string lv_statsAttribute;
    int lv_statsAttributeValue;
    string lv_name;

    // Automatic Variable Declarations
    int autoDA872E44_ae;
    const int autoDA872E44_ai = 1;
    string autoC3B4D275_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    autoDA872E44_ae = (CatalogFieldValueCount(c_gameCatalogBehavior, lp_behavior, "Modification.AttributeChangeArray", c_playerAny)-1);
    lv_itAttribute = 0;
    for ( ; ( (autoDA872E44_ai >= 0 && lv_itAttribute <= autoDA872E44_ae) || (autoDA872E44_ai < 0 && lv_itAttribute >= autoDA872E44_ae) ) ; lv_itAttribute += autoDA872E44_ai ) {
        lv_statsAttributeValue = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_behavior, "Modification.AttributeChangeArray[" + IntToString(lv_itAttribute) + "].Points", c_playerAny);
        if ((lv_statsAttributeValue == 0)) {
            continue;
        }

        lv_statsAttribute = (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Modification.AttributeChangeArray[" + IntToString(lv_itAttribute) + "].Attribute", c_playerAny));
        autoC3B4D275_val = lv_statsAttribute;
        if (autoC3B4D275_val == "UnitStatsArmorAll") {
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalHero"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalMerc"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalMinion"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalMonster"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalStructure"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalSummon"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellHero"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellMerc"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellMinion"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellMonster"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellStructure"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellSummon"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
        }
        else if (autoC3B4D275_val == "UnitStatsArmorPhysicalAll") {
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalHero"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalMerc"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalMinion"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalMonster"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalStructure"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorPhysicalSummon"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
        }
        else if (autoC3B4D275_val == "UnitStatsArmorSpellAll") {
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellHero"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellMerc"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellMinion"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellMonster"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellStructure"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
            lv_name = ((lp_behavior) + "#" + ("UnitStatsArmorSpellSummon"));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
        }
        else {
            lv_name = ((lp_behavior) + "#" + (lv_statsAttribute));
            DataTableSetInt(true, lv_name, (DataTableGetInt(true, lv_name)+lv_statsAttributeValue));
        }
    }
}

int libCore_gf_DataXPLevelGapBetweenHeroes (int lp_awardPlayer, unit lp_deadUnit) {
    // Variable Declarations
    int lv_levelOfAwardPlayer;
    int lv_deadUnitOwner;
    int lv_levelOfDeadPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_levelOfAwardPlayer = UnitLevel(libGame_gv_players[lp_awardPlayer].lv_heroUnit);
    lv_deadUnitOwner = UnitGetOwner(lp_deadUnit);
    if ((libGame_gf_PlayerIsHeroPlayer(lv_deadUnitOwner) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Core_214C6069", "A", IntToText(lp_awardPlayer));
        TextExpressionSetToken("Param/Expression/lib_Core_214C6069", "B", UnitTypeGetName(UnitGetType(EventUnit())));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_214C6069"), true);
        return 0;
    }

    lv_levelOfDeadPlayer = UnitLevel(libGame_gv_players[lv_deadUnitOwner].lv_heroUnit);
    return (lv_levelOfDeadPlayer - lv_levelOfAwardPlayer);
}

fixed libCore_gf_DataXPGetValueCoefficientForUnit (unit lp_deadUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_deadUnit, "OneQuarterValueHero") == true)) {
        return libCore_gv_data_XP_HeroOneQuarterValueCoefficient_C;
    }

    if ((UnitHasBehavior2(lp_deadUnit, "HalfValueHero") == true)) {
        return libCore_gv_data_XP_HeroHalfValueCoefficient_C;
    }

    if ((UnitHasBehavior2(lp_deadUnit, "ThreeQuarterValueHero") == true)) {
        return libCore_gv_data_XP_HeroThreeQuarterValueCoefficient_C;
    }

    return 1.0;
}

fixed libCore_gf_DataXPXPForHero2 (int lp_awardPlayer, unit lp_deadUnit) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_levelOfDeadPlayer;
    fixed lv_baseXP;
    fixed lv_valueCoefficient;
    fixed lv_modifierValue;
    fixed lv_finalXP;
    int lv_levelOfAwardPlayer;
    int lv_levelGap;
    fixed lv_levelGapMultiplier;

    // Automatic Variable Declarations
    int auto7FB162CC_val;

    // Variable Initialization
    lv_levelGapMultiplier = 1.0;

    // Implementation
    lv_heroUnit = libGame_gv_players[UnitGetOwner(lp_deadUnit)].lv_heroUnit;
    lv_levelOfDeadPlayer = UnitLevel(lv_heroUnit);
    lv_baseXP = (libCore_gv_data_XP_HeroValuePerLevel_C * IntToFixed((lv_levelOfDeadPlayer + libCore_gv_data_XP_HeroLevelModifier_C)));
    lv_valueCoefficient = libCore_gf_DataXPGetValueCoefficientForUnit(lp_deadUnit);
    lv_baseXP *= lv_valueCoefficient;
    auto7FB162CC_val = libCore_gf_DataXPLevelGapBetweenHeroes(lp_awardPlayer, lp_deadUnit);
    if (auto7FB162CC_val == 1) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero1LevelGapMultiplier_C);
    }
    else if (auto7FB162CC_val == 2) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero2LevelGapMultiplier_C);
    }
    else if (auto7FB162CC_val == 3) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero3LevelGapMultiplier_C);
    }
    else if (auto7FB162CC_val == 4) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero4LevelGapMultiplier_C);
    }
    else if (auto7FB162CC_val == -1) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero1LevelGapMultiplier_C), 0.0);
    }
    else if (auto7FB162CC_val == -2) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero2LevelGapMultiplier_C), 0.0);
    }
    else if (auto7FB162CC_val == -3) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero3LevelGapMultiplier_C), 0.0);
    }
    else if (auto7FB162CC_val == -4) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero4LevelGapMultiplier_C), 0.0);
    }
    else {
        if ((lv_levelGap >= 5)) {
            lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero5LevelGapMultiplier_C);
        }
        else {
            if ((lv_levelGap <= -5)) {
                lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero5LevelGapMultiplier_C), 0.1);
            }

        }
    }
    lv_finalXP = (lv_baseXP * lv_levelGapMultiplier);
    return lv_finalXP;
}

color libCore_gf_GetAllianceColorFromGameUIData (int lp_index) {
    // Variable Declarations
    color lv_neutralColor;
    string lv_fullColorString;
    int lv_commaPosition;
    string lv_rString;
    string lv_gString;
    string lv_bString;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_neutralColor = Color(0,0,0);
    lv_fullColorString = "";
    lv_rString = "";
    lv_gString = "";
    lv_bString = "";

    // Implementation
    lv_fullColorString = CatalogFieldValueGet(c_gameCatalogGameUI, "Dflt", ("OverrideColors[" + IntToString(lp_index) + "].Value[0]"), c_playerAny);
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_rString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_fullColorString = StringSub(lv_fullColorString, (lv_commaPosition + 1), StringLength(lv_fullColorString));
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_gString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_fullColorString = StringSub(lv_fullColorString, (lv_commaPosition + 1), StringLength(lv_fullColorString));
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_bString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_r = (StringToFixed(lv_rString) * 100.0);
    lv_g = (StringToFixed(lv_gString) * 100.0);
    lv_b = (StringToFixed(lv_bString) * 100.0);
    return Color(lv_r, lv_g, lv_b);
}

fixed libCore_gf_GetWeaponDamageForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_itWeapon;

    // Automatic Variable Declarations
    int autoCEE614CE_ae;
    const int autoCEE614CE_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCore_gf_ExecuteValidatorOnUnit("TargetIsBlinded", lp_unit, lp_unit) == true)) {
        return 0.0;
    }
    autoCEE614CE_ae = UnitWeaponCount(lp_unit);
    lv_itWeapon = 1;
    for ( ; ( (autoCEE614CE_ai >= 0 && lv_itWeapon <= autoCEE614CE_ae) || (autoCEE614CE_ai < 0 && lv_itWeapon >= autoCEE614CE_ae) ) ; lv_itWeapon += autoCEE614CE_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return UnitWeaponDamage(lp_unit, lv_itWeapon, c_unitAttributeNone, false);
        }

    }
    return 0.0;
}

fixed libCore_gf_GetWeaponAttackSpeedForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_itWeapon;

    // Automatic Variable Declarations
    int auto853CC4D9_ae;
    const int auto853CC4D9_ai = 1;

    // Variable Initialization

    // Implementation
    auto853CC4D9_ae = UnitWeaponCount(lp_unit);
    lv_itWeapon = 1;
    for ( ; ( (auto853CC4D9_ai >= 0 && lv_itWeapon <= auto853CC4D9_ae) || (auto853CC4D9_ai < 0 && lv_itWeapon >= auto853CC4D9_ae) ) ; lv_itWeapon += auto853CC4D9_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return (UnitWeaponSpeedMultiplier(lp_unit, lv_itWeapon)*UnitWeaponPeriod(lp_unit, lv_itWeapon)/16);
        }

    }
    return 0.0;
}

int libCore_gf_GetValidWeaponIndexForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_itWeapon;

    // Automatic Variable Declarations
    int autoE98CFDAA_ae;
    const int autoE98CFDAA_ai = 1;

    // Variable Initialization

    // Implementation
    autoE98CFDAA_ae = UnitWeaponCount(lp_unit);
    lv_itWeapon = 1;
    for ( ; ( (autoE98CFDAA_ai >= 0 && lv_itWeapon <= autoE98CFDAA_ae) || (autoE98CFDAA_ai < 0 && lv_itWeapon >= autoE98CFDAA_ae) ) ; lv_itWeapon += autoE98CFDAA_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return lv_itWeapon;
        }

    }
    return -1;
}

string libCore_gf_GetTimeStamp (fixed lp_time) {
    // Variable Declarations
    fixed lv_elapsedTime;
    fixed lv_minutesElapsed;
    fixed lv_secondsElapsed;
    fixed lv_loopsElapsed;
    string lv_tempString;
    string lv_timeElapsedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempString = "";
    lv_timeElapsedString = "";

    // Implementation
    lv_elapsedTime = lp_time;
    lv_loopsElapsed = (ModF(lv_elapsedTime, 1.0) * 16.0);
    lv_elapsedTime -= (lv_loopsElapsed / 16.0);
    if ((lv_loopsElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_loopsElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_loopsElapsed, 0);
    }
    lv_timeElapsedString = lv_tempString;
    lv_secondsElapsed = ModF(lv_elapsedTime, 60.0);
    lv_elapsedTime -= lv_secondsElapsed;
    if ((lv_secondsElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_secondsElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_secondsElapsed, 0);
    }
    lv_timeElapsedString = (lv_tempString + ":" + lv_timeElapsedString);
    lv_minutesElapsed = (lv_elapsedTime / 60.0);
    if ((lv_minutesElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_minutesElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_minutesElapsed, 0);
    }
    lv_timeElapsedString = (lv_tempString + ":" + lv_timeElapsedString);
    return lv_timeElapsedString;
}

bool libCore_gf_ToggleBoolean (bool lp_boolean) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boolean == true)) {
        return false;
    }
    else {
        return true;
    }
}

point libCore_gf_AdvancePointinDirection (point lp_point, point lp_dir, fixed lp_distance) {
    // Variable Declarations
    fixed lv_xVal;
    fixed lv_yVal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_xVal = (PointGetX(lp_point) + (PointGetX(lp_dir) * lp_distance));
    lv_yVal = (PointGetY(lp_point) + (PointGetY(lp_dir) * lp_distance));
    return Point(lv_xVal, lv_yVal);
}

unit libCore_gf_CoreCurrentHeroOrVehicleOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_player].lv_activeVehicle == null)) {
        return libGame_gv_players[lp_player].lv_heroUnit;
    }
    else {
        return libGame_gv_players[lp_player].lv_activeVehicle;
    }
}

point libCore_gf_ProjectPointOntoLine (point lp_p1, point lp_p2, point lp_t) {
    // Variable Declarations
    fixed lv_diffX;
    fixed lv_diffY;
    fixed lv_length;
    point lv_axis;
    point lv_line;
    fixed lv_projMag;
    point lv_final;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_diffX = (PointGetX(lp_p2) - PointGetX(lp_p1));
    lv_diffY = (PointGetY(lp_p2) - PointGetY(lp_p1));
    lv_length = SquareRoot(((lv_diffX*lv_diffX) + (lv_diffY*lv_diffY)));
    if ((lv_length == 0.0)) {
        return lp_p1;
    }

    lv_axis = Point((lv_diffX / lv_length), (lv_diffY / lv_length));
    lv_line = Point((PointGetX(lp_t) - PointGetX(lp_p1)), (PointGetY(lp_t) - PointGetY(lp_p1)));
    lv_projMag = ((PointGetX(lv_axis)*PointGetX(lv_line)) + (PointGetY(lv_axis)*PointGetY(lv_line)));
    lv_final = Point((PointGetX(lp_p1) + PointGetX(lv_axis) * lv_projMag), (PointGetY(lp_p1) + PointGetY(lv_axis) * lv_projMag));
    return lv_final;
}

fixed libCore_gf_GetTotalXPForLevel (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level < 1) && (lp_level >= libCore_gv_bALMaxLevel)) {
        return 0.0;
    }
    else {
        return libCore_gv_dataXPLevelXPValues[lp_level];
    }
}

string libCore_gf_ConvertStringToAnyGameLink (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_string);
}

bool libCore_gf_UnitHasBehaviorWithFlag (unit lp_unit, int lp_flag) {
    // Variable Declarations
    string lv_itBehavior;

    // Automatic Variable Declarations
    unit autoC6AFA5A8_u;
    int autoC6AFA5A8_i;

    // Variable Initialization

    // Implementation
    autoC6AFA5A8_u = lp_unit;
    autoC6AFA5A8_i = 1;
    for ( ; autoC6AFA5A8_i <= UnitBehaviorCountAll(autoC6AFA5A8_u) ; autoC6AFA5A8_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(autoC6AFA5A8_u, autoC6AFA5A8_i)) ) {
        lv_itBehavior = UnitBehaviorGet(autoC6AFA5A8_u, autoC6AFA5A8_i);
        if ((UnitBehaviorHasFlag(lv_itBehavior, lp_flag) == true)) {
            return true;
        }

    }
    return false;
}

string libCore_gf_ConvertTextToString (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    return TextToString(lp_text);
}

bool libCore_gf_CheckForCriticalDamage (unit lp_triggeringUnit, unit lp_damagingUnit, string lp_damagingEffect, int lp_damageType) {
    // Variable Declarations
    int lv__DamageType;
    bool lv_isCritical;
    unit lv_summoner;

    // Automatic Variable Declarations
    int auto27BC4D46_val;

    // Variable Initialization
    lv__DamageType = lp_damageType;

    // Implementation
    if ((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, lp_damagingEffect, "Critical") == true)) {
        return true;
    }

    if ((lp_damageType == c_unitDamageTypeAny)) {
        lv__DamageType = libCore_gf_CombatDamageTypeFromEffect(lp_damagingEffect);
    }

    lv_summoner = libGame_gf_GetSummonerofSummonedUnit(lp_damagingUnit);
    auto27BC4D46_val = lv__DamageType;
    if (auto27BC4D46_val == c_unitDamageTypeRanged) {
        lv_isCritical = (libCore_gf_ExecuteValidatorOnUnit("CritAliasPhysicalPower", lp_damagingUnit, lp_damagingUnit) || libCore_gf_ExecuteValidatorOnUnit("CritAliasPhysicalPowerTarget", lp_damagingUnit, lp_triggeringUnit));
        if ((lv_isCritical == false) && (lv_summoner != null)) {
            lv_isCritical = (libCore_gf_ExecuteValidatorOnUnit("CritAliasPhysicalPower", lv_summoner, lv_summoner));
        }

    }
    else if (auto27BC4D46_val == c_unitDamageTypeSpell) {
        lv_isCritical = (libCore_gf_ExecuteValidatorOnUnit("CritAliasSpellPower", lp_damagingUnit, lp_damagingUnit));
        if ((lv_isCritical == false) && (lv_summoner != null)) {
            lv_isCritical = (libCore_gf_ExecuteValidatorOnUnit("CritAliasSpellPower", lv_summoner, lv_summoner));
        }

    }
    else if (auto27BC4D46_val == c_unitDamageTypeMelee) {
    }
    else {
    }
    return lv_isCritical;
}

bool libCore_gf_CombatCheckDamageCriticalState (unit lp_triggeringUnit, unit lp_damagingUnit, string lp_damagingEffect, int lp_damageType) {
    // Variable Declarations
    int lv__DamageType;
    bool lv_isCritical;
    unit lv_summoner;

    // Automatic Variable Declarations
    int autoB604849D_val;

    // Variable Initialization
    lv__DamageType = lp_damageType;

    // Implementation
    if ((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, lp_damagingEffect, "Critical") == true)) {
        return true;
    }

    if ((lp_damageType == c_unitDamageTypeAny)) {
        lv__DamageType = libCore_gf_CombatDamageTypeFromEffect(lp_damagingEffect);
    }

    lv_summoner = libGame_gf_GetSummonerofSummonedUnit(lp_damagingUnit);
    autoB604849D_val = lv__DamageType;
    if (autoB604849D_val == c_unitDamageTypeRanged) {
        lv_isCritical = (libCore_gf_ExecuteValidatorOnUnit("CritAliasPhysicalPower", lp_damagingUnit, lp_damagingUnit) || libCore_gf_ExecuteValidatorOnUnit("CritAliasPhysicalPowerTarget", lp_damagingUnit, lp_triggeringUnit));
        if ((lv_isCritical == false) && (lv_summoner != null)) {
            lv_isCritical = (libCore_gf_ExecuteValidatorOnUnit("CritAliasPhysicalPower", lv_summoner, lv_summoner));
        }

    }
    else if (autoB604849D_val == c_unitDamageTypeSpell) {
        lv_isCritical = (libCore_gf_ExecuteValidatorOnUnit("CritAliasSpellPower", lp_damagingUnit, lp_damagingUnit));
        if ((lv_isCritical == false) && (lv_summoner != null)) {
            lv_isCritical = (libCore_gf_ExecuteValidatorOnUnit("CritAliasSpellPower", lv_summoner, lv_summoner));
        }

    }
    else if (autoB604849D_val == c_unitDamageTypeMelee) {
    }
    else {
    }
    return lv_isCritical;
}

int libCore_gf_CombatDamageTypeFromEffect (string lp_effect) {
    // Variable Declarations
    string lv_type;
    int lv_return;

    // Automatic Variable Declarations
    string auto32BC5D69_val;

    // Variable Initialization
    lv_type = "";
    lv_return = c_unitDamageTypeAny;

    // Implementation
    if ((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, lp_effect, "Physical Damage") == true)) {
        return c_unitDamageTypeRanged;
    }
    else if ((libCore_gf_TechAliasExistPreset(c_gameCatalogEffect, lp_effect, "Spell Damage") == true)) {
        return c_unitDamageTypeSpell;
    }
    lv_type = CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Kind", c_playerAny);
    auto32BC5D69_val = lv_type;
    if (auto32BC5D69_val == "Ranged") {
        lv_return = c_unitDamageTypeRanged;
    }
    else if (auto32BC5D69_val == "Melee") {
        lv_return = c_unitDamageTypeMelee;
    }
    else if (auto32BC5D69_val == "Spell") {
        lv_return = c_unitDamageTypeSpell;
    }
    else if (auto32BC5D69_val == "Splash") {
        lv_return = c_unitDamageTypeSplash;
    }
    else {
    }
    return lv_return;
}

fixed libCore_gf_CombatCalculateDamageAmount () {
    // Variable Declarations
    fixed lv_triggeringDamageTaken;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCore_gf_TriggerEventType() == 68)) {
        lv_triggeringDamageTaken = (EventUnitDamageAmount() + EventUnitDamageBehaviorShield());
    }
    else if ((libCore_gf_TriggerEventType() == 97) && (UnitBehaviorHasFlag(EventUnitBehavior(), c_unitBehaviorFlagPhysical) == true)) {
        lv_triggeringDamageTaken = EventUnitDamageAbsorbed();
    }
    return lv_triggeringDamageTaken;
}

void RemoveDataTableValueInstance (int lp_instance, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    DataTableInstanceValueRemove(lp_instance, lp_name);
}

void libCore_gf_DialogSetPositionRelativeToUnitWithAnchor (int lp_Dialog, unit lp_Unit, string lp_Attachment, int lp_Anchor, int lp_OffsetX, int lp_OffsetY) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetPositionRelativeToUnitWithAnchor(lp_Dialog, lp_Unit, lp_Attachment, lp_Anchor, lp_OffsetX, lp_OffsetY);
}

string libCore_gf_ConvertIntegerToStringDoubleDigit (int lp_integer) {
    // Variable Declarations
    string lv_integerString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_integerString = "";

    // Implementation
    lv_integerString = IntToString(lp_integer);
    if ((StringLength(lv_integerString) == 1)) {
        lv_integerString = ("0" + lv_integerString);
    }

    return lv_integerString;
}

string libCore_gf_ConvertIntegerToStringTripleDigit (int lp_integer) {
    // Variable Declarations
    string lv_integerString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_integerString = "";

    // Implementation
    lv_integerString = IntToString(lp_integer);
    if ((StringLength(lv_integerString) == 1)) {
        lv_integerString = ("00" + lv_integerString);
    }
    else if ((StringLength(lv_integerString) == 2)) {
        lv_integerString = ("0" + lv_integerString);
    }
    return lv_integerString;
}

void libCore_gf_CreateArray (string lp_arrayName) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, lp_arrayName, 0);
}

int LengthofArray (string lp_arrayName) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_length = DataTableGetInt(true, lp_arrayName);
    return lv_length;
}

void libCore_gf_LengthAdd (string lp_arrayName) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, lp_arrayName, (DataTableGetInt(true, lp_arrayName)+1));
}

bool libCore_gf_ArrayKeyExists (string lp_arrayName, int lp_arrayKey) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_arrayKey < 0) && (lp_arrayKey > LengthofArray(lp_arrayName))) {
        return false;
    }
    return true;
}

int libCore_gf_TypeofArrayValue (string lp_arrayName, int lp_arrayKey) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableValueType(true, (lp_arrayName + "[" + IntToString(lp_arrayKey) + "]"));
}

void libCore_gf_CommonSet (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_arrayIndex > (LengthofArray(lp_arrayName) - 1))) {
        DataTableSetInt(true, lp_arrayName, (lp_arrayIndex + 1));
    }

}

void libCore_gf_SetArrayValueInteger (string lp_arrayName, int lp_arrayIndex, int lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetInt(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueReal (string lp_arrayName, int lp_arrayIndex, fixed lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetFixed(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueAbilityCommand (string lp_arrayName, int lp_arrayIndex, abilcmd lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetAbilCmd(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueBoolean (string lp_arrayName, int lp_arrayIndex, bool lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetBool(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueDialog (string lp_arrayName, int lp_arrayIndex, int lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetDialog(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueDialogItem (string lp_arrayName, int lp_arrayIndex, int lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValuePoint (string lp_arrayName, int lp_arrayIndex, point lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetPoint(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueRegion (string lp_arrayName, int lp_arrayIndex, region lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetRegion(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueString (string lp_arrayName, int lp_arrayIndex, string lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetString(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueTrigger (string lp_arrayName, int lp_arrayIndex, trigger lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetTrigger(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueUnit (string lp_arrayName, int lp_arrayIndex, unit lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetUnit(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_SetArrayValueUnitGroup (string lp_arrayName, int lp_arrayIndex, unitgroup lp_arrayValue) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_CommonSet(lp_arrayName, lp_arrayIndex);
    DataTableSetUnitGroup(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"), lp_arrayValue);
}

void libCore_gf_PushArrayValueInteger (string lp_arrayName, int lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetInt(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueReal (string lp_arrayName, fixed lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetFixed(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueAbilityCommand (string lp_arrayName, abilcmd lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetAbilCmd(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueBoolean (string lp_arrayName, bool lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetBool(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueDialog (string lp_arrayName, int lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetDialog(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueDialogItem (string lp_arrayName, int lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValuePoint (string lp_arrayName, point lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetPoint(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueRegion (string lp_arrayName, region lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetRegion(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueString (string lp_arrayName, string lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetString(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueTrigger (string lp_arrayName, trigger lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetTrigger(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueUnit (string lp_arrayName, unit lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetUnit(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

void libCore_gf_PushArrayValueUnitGroup (string lp_arrayName, unitgroup lp_arrayValue) {
    // Variable Declarations
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = LengthofArray(lp_arrayName);

    // Implementation
    DataTableSetUnitGroup(true, (lp_arrayName + "[" + IntToString(lv_length) + "]"), lp_arrayValue);
    libCore_gf_LengthAdd(lp_arrayName);
}

int libCore_gf_GetArrayValueInteger (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

fixed libCore_gf_GetArrayValueReal (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gf_TypeofArrayValue(lp_arrayName, lp_arrayIndex) == c_dataTypeInt)) {
        return IntToFixed(DataTableGetInt(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]")));
    }
    else {
        return DataTableGetFixed(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
    }
}

abilcmd libCore_gf_GetArrayValueAbilityCommand (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetAbilCmd(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

bool libCore_gf_GetArrayValueBoolean (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

int libCore_gf_GetArrayValueDialog (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetDialog(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

int libCore_gf_GetArrayValueDialogItem (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableDialogItem(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

point libCore_gf_GetArrayValuePoint (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

region libCore_gf_GetArrayValueRegion (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRegion(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

string libCore_gf_GetArrayValueString (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

trigger libCore_gf_GetArrayValueTrigger (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTrigger(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

unit libCore_gf_GetArrayValueUnit (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

unitgroup libCore_gf_GetArrayValueUnitGroup (string lp_arrayName, int lp_arrayIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, (lp_arrayName + "[" + IntToString(lp_arrayIndex) + "]"));
}

int libCore_gf_SearchArrayValueInteger (string lp_arrayName, int lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoDD948735_ae;
    const int autoDD948735_ai = 1;

    // Variable Initialization

    // Implementation
    autoDD948735_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoDD948735_ai >= 0 && lv_itIndex <= autoDD948735_ae) || (autoDD948735_ai < 0 && lv_itIndex >= autoDD948735_ae) ) ; lv_itIndex += autoDD948735_ai ) {
        if ((libCore_gf_GetArrayValueInteger(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueReal (string lp_arrayName, fixed lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoCEB1D4E6_ae;
    const int autoCEB1D4E6_ai = 1;

    // Variable Initialization

    // Implementation
    autoCEB1D4E6_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoCEB1D4E6_ai >= 0 && lv_itIndex <= autoCEB1D4E6_ae) || (autoCEB1D4E6_ai < 0 && lv_itIndex >= autoCEB1D4E6_ae) ) ; lv_itIndex += autoCEB1D4E6_ai ) {
        if ((libCore_gf_GetArrayValueReal(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueAbilityCommand (string lp_arrayName, abilcmd lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto09FE276C_ae;
    const int auto09FE276C_ai = 1;

    // Variable Initialization

    // Implementation
    auto09FE276C_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto09FE276C_ai >= 0 && lv_itIndex <= auto09FE276C_ae) || (auto09FE276C_ai < 0 && lv_itIndex >= auto09FE276C_ae) ) ; lv_itIndex += auto09FE276C_ai ) {
        if ((libCore_gf_GetArrayValueAbilityCommand(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueBoolean (string lp_arrayName, bool lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoC6F31681_ae;
    const int autoC6F31681_ai = 1;

    // Variable Initialization

    // Implementation
    autoC6F31681_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoC6F31681_ai >= 0 && lv_itIndex <= autoC6F31681_ae) || (autoC6F31681_ai < 0 && lv_itIndex >= autoC6F31681_ae) ) ; lv_itIndex += autoC6F31681_ai ) {
        if ((libCore_gf_GetArrayValueBoolean(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueDialog (string lp_arrayName, int lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto437B116C_ae;
    const int auto437B116C_ai = 1;

    // Variable Initialization

    // Implementation
    auto437B116C_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto437B116C_ai >= 0 && lv_itIndex <= auto437B116C_ae) || (auto437B116C_ai < 0 && lv_itIndex >= auto437B116C_ae) ) ; lv_itIndex += auto437B116C_ai ) {
        if ((libCore_gf_GetArrayValueDialog(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueDialogItem (string lp_arrayName, int lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoDAC39F23_ae;
    const int autoDAC39F23_ai = 1;

    // Variable Initialization

    // Implementation
    autoDAC39F23_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoDAC39F23_ai >= 0 && lv_itIndex <= autoDAC39F23_ae) || (autoDAC39F23_ai < 0 && lv_itIndex >= autoDAC39F23_ae) ) ; lv_itIndex += autoDAC39F23_ai ) {
        if ((libCore_gf_GetArrayValueDialogItem(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValuePoint (string lp_arrayName, point lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoB91B52AB_ae;
    const int autoB91B52AB_ai = 1;

    // Variable Initialization

    // Implementation
    autoB91B52AB_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoB91B52AB_ai >= 0 && lv_itIndex <= autoB91B52AB_ae) || (autoB91B52AB_ai < 0 && lv_itIndex >= autoB91B52AB_ae) ) ; lv_itIndex += autoB91B52AB_ai ) {
        if ((libCore_gf_GetArrayValuePoint(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueRegion (string lp_arrayName, region lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto51E0995D_ae;
    const int auto51E0995D_ai = 1;

    // Variable Initialization

    // Implementation
    auto51E0995D_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto51E0995D_ai >= 0 && lv_itIndex <= auto51E0995D_ae) || (auto51E0995D_ai < 0 && lv_itIndex >= auto51E0995D_ae) ) ; lv_itIndex += auto51E0995D_ai ) {
        if ((libCore_gf_GetArrayValueRegion(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueString (string lp_arrayName, string lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoA4D09FC6_ae;
    const int autoA4D09FC6_ai = 1;

    // Variable Initialization

    // Implementation
    autoA4D09FC6_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (autoA4D09FC6_ai >= 0 && lv_itIndex <= autoA4D09FC6_ae) || (autoA4D09FC6_ai < 0 && lv_itIndex >= autoA4D09FC6_ae) ) ; lv_itIndex += autoA4D09FC6_ai ) {
        if ((libCore_gf_GetArrayValueString(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueTrigger (string lp_arrayName, trigger lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto33DF484F_ae;
    const int auto33DF484F_ai = 1;

    // Variable Initialization

    // Implementation
    auto33DF484F_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto33DF484F_ai >= 0 && lv_itIndex <= auto33DF484F_ae) || (auto33DF484F_ai < 0 && lv_itIndex >= auto33DF484F_ae) ) ; lv_itIndex += auto33DF484F_ai ) {
        if ((libCore_gf_GetArrayValueTrigger(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueUnit (string lp_arrayName, unit lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto98679AF9_ae;
    const int auto98679AF9_ai = 1;

    // Variable Initialization

    // Implementation
    auto98679AF9_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto98679AF9_ai >= 0 && lv_itIndex <= auto98679AF9_ae) || (auto98679AF9_ai < 0 && lv_itIndex >= auto98679AF9_ae) ) ; lv_itIndex += auto98679AF9_ai ) {
        if ((libCore_gf_GetArrayValueUnit(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

int libCore_gf_SearchArrayValueUnitGroup (string lp_arrayName, unitgroup lp_value) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto73B206B4_ae;
    const int auto73B206B4_ai = 1;

    // Variable Initialization

    // Implementation
    auto73B206B4_ae = LengthofArray(lp_arrayName);
    lv_itIndex = 0;
    for ( ; ( (auto73B206B4_ai >= 0 && lv_itIndex <= auto73B206B4_ae) || (auto73B206B4_ai < 0 && lv_itIndex >= auto73B206B4_ae) ) ; lv_itIndex += auto73B206B4_ai ) {
        if ((libCore_gf_GetArrayValueUnitGroup(lp_arrayName, lv_itIndex) == lp_value)) {
            return lv_itIndex;
        }
    }
    return -1;
}

void libCore_gf_SetArrayValuetoArrayValue (string lp_arrayName1, int lp_arrayIndex1, string lp_arrayName2, int lp_arrayIndex2) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeInt)) {
        libCore_gf_SetArrayValueInteger(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueInteger(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeFixed)) {
        libCore_gf_SetArrayValueReal(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueReal(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeAbilCmd)) {
        libCore_gf_SetArrayValueAbilityCommand(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueAbilityCommand(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeBool)) {
        libCore_gf_SetArrayValueBoolean(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueBoolean(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypePoint)) {
        libCore_gf_SetArrayValuePoint(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValuePoint(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeRegion)) {
        libCore_gf_SetArrayValueRegion(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueRegion(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeString)) {
        libCore_gf_SetArrayValueString(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueString(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeUnit)) {
        libCore_gf_SetArrayValueUnit(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueUnit(lp_arrayName2, lp_arrayIndex2));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName2, lp_arrayIndex2) == c_dataTypeUnitGroup)) {
        libCore_gf_SetArrayValueUnitGroup(lp_arrayName1, lp_arrayIndex1, libCore_gf_GetArrayValueUnitGroup(lp_arrayName2, lp_arrayIndex2));
    }
}

void libCore_gf_SplitStringintoArray (string lp_arrayName, string lp_string, string lp_delimiter) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    string lv_x;
    string lv_y;

    // Automatic Variable Declarations
    int auto7DF9A4A8_ae;
    const int auto7DF9A4A8_ai = 1;

    // Variable Initialization
    lv_b = StringLength(lp_string);
    lv_x = "";
    lv_y = "";

    // Implementation
    libCore_gf_CreateArray(lp_arrayName);
    auto7DF9A4A8_ae = lv_b;
    lv_a = 1;
    for ( ; ( (auto7DF9A4A8_ai >= 0 && lv_a <= auto7DF9A4A8_ae) || (auto7DF9A4A8_ai < 0 && lv_a >= auto7DF9A4A8_ae) ) ; lv_a += auto7DF9A4A8_ai ) {
        lv_x = StringSub(lp_string, lv_a, lv_b);
        if ((StringCompare(lv_x, lp_delimiter, c_stringCase) == 0)) {
            libCore_gf_PushArrayValueString(lp_arrayName, lv_y);
            lv_y = "";
        }
        else {
            lv_y = (lv_y + lv_x);
        }
    }
    libCore_gf_PushArrayValueString(lp_arrayName, lv_y);
}

string libCore_gf_JoinArrayintoString (string lp_arrayName, string lp_glue) {
    // Variable Declarations
    int lv_index;
    int lv_length;
    string lv_string;

    // Automatic Variable Declarations
    int autoAF4F31B4_ae;
    const int autoAF4F31B4_ai = 1;

    // Variable Initialization
    lv_length = (LengthofArray(lp_arrayName)-1);
    lv_string = "";

    // Implementation
    autoAF4F31B4_ae = lv_length;
    lv_index = 1;
    for ( ; ( (autoAF4F31B4_ai >= 0 && lv_index <= autoAF4F31B4_ae) || (autoAF4F31B4_ai < 0 && lv_index >= autoAF4F31B4_ae) ) ; lv_index += autoAF4F31B4_ai ) {
        lv_string = (lv_string + "+" + libCore_gf_GetArrayValueString(lp_arrayName, lv_index) + "+" + lp_glue);
    }
    lv_string = (lv_string + libCore_gf_GetArrayValueString(lp_arrayName, lv_length));
    return lv_string;
}

int libCore_gf_IndexofGreatestLowestValue (string lp_arrayName, bool lp_greatestLowest) {
    // Variable Declarations
    int lv_itIndex;
    int lv_maxIndex;
    fixed lv_currenValue;
    fixed lv_greatestValue;
    int lv_return_Index;

    // Automatic Variable Declarations
    int auto54E26ECD_ae;
    const int auto54E26ECD_ai = 1;

    // Variable Initialization
    lv_maxIndex = LengthofArray(lp_arrayName);

    // Implementation
    if ((libCore_gf_TypeofArrayValue(lp_arrayName, 0) == c_dataTypeInt)) {
        lv_greatestValue = IntToFixed(libCore_gf_GetArrayValueInteger(lp_arrayName, 0));
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName, 0) == c_dataTypeFixed)) {
        lv_greatestValue = libCore_gf_GetArrayValueReal(lp_arrayName, 0);
    }
    else if ((libCore_gf_TypeofArrayValue(lp_arrayName, 0) != c_dataTypeInt) && (libCore_gf_TypeofArrayValue(lp_arrayName, 0) != c_dataTypeFixed)) {
        return 0;
    }
    auto54E26ECD_ae = lv_maxIndex;
    lv_itIndex = 1;
    for ( ; ( (auto54E26ECD_ai >= 0 && lv_itIndex <= auto54E26ECD_ae) || (auto54E26ECD_ai < 0 && lv_itIndex >= auto54E26ECD_ae) ) ; lv_itIndex += auto54E26ECD_ai ) {
        if ((libCore_gf_TypeofArrayValue(lp_arrayName, lv_itIndex) == c_dataTypeInt)) {
            lv_currenValue = IntToFixed(libCore_gf_GetArrayValueInteger(lp_arrayName, lv_itIndex));
        }
        else {
            lv_currenValue = libCore_gf_GetArrayValueReal(lp_arrayName, lv_itIndex);
        }
        if ((lp_greatestLowest == true)) {
            if ((lv_currenValue > lv_greatestValue)) {
                lv_return_Index = lv_itIndex;
                lv_greatestValue = lv_currenValue;
            }
        }
        else {
            if ((lv_currenValue < lv_greatestValue)) {
                lv_return_Index = lv_itIndex;
                lv_greatestValue = lv_currenValue;
            }
        }
    }
    return lv_return_Index;
}

void libCore_gf_sortArray (string lp_arrayName, bool lp_ascendingDescendingOrder) {
    int init_i;

    // Variable Declarations
    int lv_indexOuter;
    int lv_indexInner;
    int lv_indexMin;
    fixed lv_scoreSwap;
    int[3] lv_valueTypes;

    // Automatic Variable Declarations
    int autoCB725928_ae;
    const int autoCB725928_ai = 1;
    int auto65EDE988_ae;
    const int auto65EDE988_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_valueTypes[init_i] = c_dataTypeInt;
    }

    // Implementation
    autoCB725928_ae = (LengthofArray(lp_arrayName) - 2);
    lv_indexOuter = 0;
    for ( ; ( (autoCB725928_ai >= 0 && lv_indexOuter <= autoCB725928_ae) || (autoCB725928_ai < 0 && lv_indexOuter >= autoCB725928_ae) ) ; lv_indexOuter += autoCB725928_ai ) {
        lv_indexMin = lv_indexOuter;
        auto65EDE988_ae = (LengthofArray(lp_arrayName) - 1);
        lv_indexInner = (lv_indexOuter + 1);
        for ( ; ( (auto65EDE988_ai >= 0 && lv_indexInner <= auto65EDE988_ae) || (auto65EDE988_ai < 0 && lv_indexInner >= auto65EDE988_ae) ) ; lv_indexInner += auto65EDE988_ai ) {
            if ((libCore_gf_GetArrayValueReal(lp_arrayName, lv_indexInner) < libCore_gf_GetArrayValueReal(lp_arrayName, lv_indexMin))) {
                lv_indexMin = lv_indexInner;
            }

        }
        if ((lv_indexMin != lv_indexOuter)) {
            lv_scoreSwap = libCore_gf_GetArrayValueReal(lp_arrayName, lv_indexOuter);
            lv_valueTypes[0] = libCore_gf_TypeofArrayValue(lp_arrayName, lv_indexMin);
            lv_valueTypes[1] = libCore_gf_TypeofArrayValue(lp_arrayName, lv_indexOuter);
            if ((lv_valueTypes[0] == c_dataTypeFixed)) {
                libCore_gf_SetArrayValueReal(lp_arrayName, lv_indexOuter, libCore_gf_GetArrayValueReal(lp_arrayName, lv_indexMin));
            }
            else {
                libCore_gf_SetArrayValueInteger(lp_arrayName, lv_indexOuter, libCore_gf_GetArrayValueInteger(lp_arrayName, lv_indexMin));
            }
            if ((lv_valueTypes[1] == c_dataTypeFixed)) {
                libCore_gf_SetArrayValueReal(lp_arrayName, lv_indexMin, lv_scoreSwap);
            }
            else {
                libCore_gf_SetArrayValueInteger(lp_arrayName, lv_indexMin, FixedToInt(lv_scoreSwap));
            }
        }

    }
    if ((lp_ascendingDescendingOrder == false)) {
        libCore_gf_ReverseArray(lp_arrayName);
    }

}

void libCore_gf_CopyArray (string lp_arrayName, string lp_newArrayName) {
    // Variable Declarations
    int lv_itIndex;
    int lv_maxIndex;

    // Automatic Variable Declarations
    int auto2BE2821D_ae;
    const int auto2BE2821D_ai = 1;

    // Variable Initialization
    lv_maxIndex = LengthofArray(lp_arrayName);

    // Implementation
    libCore_gf_CreateArray(lp_newArrayName);
    auto2BE2821D_ae = lv_maxIndex;
    lv_itIndex = 0;
    for ( ; ( (auto2BE2821D_ai >= 0 && lv_itIndex <= auto2BE2821D_ae) || (auto2BE2821D_ai < 0 && lv_itIndex >= auto2BE2821D_ae) ) ; lv_itIndex += auto2BE2821D_ai ) {
        libCore_gf_SetArrayValuetoArrayValue(lp_newArrayName, lv_itIndex, lp_arrayName, lv_itIndex);
    }
}

void libCore_gf_DeleteArrayKey (string lp_arrayName, int lp_arrayKey) {
    // Variable Declarations
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    int auto54C5FF56_ae;
    const int auto54C5FF56_ai = 1;

    // Variable Initialization
    lv_a = lp_arrayKey;
    lv_b = LengthofArray(lp_arrayName);

    // Implementation
    auto54C5FF56_ae = lv_b;
    lv_a = lp_arrayKey;
    for ( ; ( (auto54C5FF56_ai >= 0 && lv_a <= auto54C5FF56_ae) || (auto54C5FF56_ai < 0 && lv_a >= auto54C5FF56_ae) ) ; lv_a += auto54C5FF56_ai ) {
        libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, (lv_a-1), lp_arrayName, lv_a);
    }
    DataTableSetInt(true, lp_arrayName, (DataTableGetInt(true, lp_arrayName)-1));
    DataTableValueRemove(true, (lp_arrayName + "[" + IntToString(lp_arrayKey) + "]"));
}

void libCore_gf_Move (string lp_arrayName, int lp_indexFrom, int lp_indexTo) {
    // Variable Declarations
    string lv_temp;
    int lv_increment;
    int lv_k;

    // Automatic Variable Declarations
    int autoA71CF8D3_ae;
    int autoA71CF8D3_ai;

    // Variable Initialization
    lv_temp = "";

    // Implementation
    if ((lp_indexFrom == lp_indexTo)) {
        return ;
    }

    if ((lp_indexTo < lp_indexFrom)) {
        lv_increment = -1;
    }
    else {
        lv_increment = 1;
    }
    lv_temp = (lp_arrayName + "__func_move__TEMP_");
    libCore_gf_CreateArray(lv_temp);
    libCore_gf_SetArrayValuetoArrayValue(lv_temp, 0, lp_arrayName, lp_indexFrom);
    autoA71CF8D3_ae = lp_indexTo;
    autoA71CF8D3_ai = lv_increment;
    lv_k = lp_indexFrom;
    for ( ; ( (autoA71CF8D3_ai >= 0 && lv_k <= autoA71CF8D3_ae) || (autoA71CF8D3_ai < 0 && lv_k >= autoA71CF8D3_ae) ) ; lv_k += autoA71CF8D3_ai ) {
        if ((lv_k != lp_indexTo)) {
            libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lv_k, lp_arrayName, (lv_k + lv_increment));
        }

    }
    libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lp_indexTo, lv_temp, 0);
    DataTableValueRemove(true, lv_temp);
    DataTableValueRemove(true, (lv_temp + "[0]"));
}

void libCore_gf_SwapArrayValues (string lp_arrayName, int lp_arrayIndex1, int lp_arrayIndex2) {
    // Variable Declarations
    string lv_temp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_temp = "";

    // Implementation
    lv_temp = (lp_arrayName + "__func_swap__TEMP_");
    libCore_gf_CreateArray(lv_temp);
    libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lp_arrayIndex1, lp_arrayName, lp_arrayIndex2);
    libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lp_arrayIndex2, lv_temp, 0);
    DataTableValueRemove(true, lv_temp);
    DataTableValueRemove(true, ("temp" + "[0]"));
}

void libCore_gf_ReverseArray (string lp_arrayName) {
    // Variable Declarations
    int lv_itIndex;
    int lv_reversedIndex;
    int lv_tempIndex;
    string lv_array_temp;

    // Automatic Variable Declarations
    const int autoDD7A84E7_ae = 0;
    const int autoDD7A84E7_ai = -1;
    int auto07B9DADE_ae;
    const int auto07B9DADE_ai = 1;

    // Variable Initialization
    lv_array_temp = (lp_arrayName + "__func_reverse__TEMP_");

    // Implementation
    libCore_gf_CopyArray(lp_arrayName, lv_array_temp);
    lv_itIndex = (LengthofArray(lp_arrayName)-1);
    for ( ; ( (autoDD7A84E7_ai >= 0 && lv_itIndex <= autoDD7A84E7_ae) || (autoDD7A84E7_ai < 0 && lv_itIndex >= autoDD7A84E7_ae) ) ; lv_itIndex += autoDD7A84E7_ai ) {
        libCore_gf_SetArrayValuetoArrayValue(lp_arrayName, lv_reversedIndex, lv_array_temp, lv_itIndex);
        lv_reversedIndex += 1;
    }
    DataTableValueRemove(true, lv_array_temp);
    auto07B9DADE_ae = LengthofArray(lp_arrayName);
    lv_tempIndex = 0;
    for ( ; ( (auto07B9DADE_ai >= 0 && lv_tempIndex <= auto07B9DADE_ae) || (auto07B9DADE_ai < 0 && lv_tempIndex >= auto07B9DADE_ae) ) ; lv_tempIndex += auto07B9DADE_ai ) {
        DataTableValueRemove(true, (lv_array_temp + "[" + IntToString(lv_tempIndex) + "]"));
    }
}

void libCore_gf_Shuffle (string lp_arrayName) {
    // Variable Declarations
    int lv_index;
    int lv_indexRandom;
    int lv_scoreSwap;

    // Automatic Variable Declarations
    int autoDB31B383_ae;
    const int autoDB31B383_ai = 1;

    // Variable Initialization

    // Implementation
    autoDB31B383_ae = (LengthofArray(lp_arrayName) - 1);
    lv_index = 0;
    for ( ; ( (autoDB31B383_ai >= 0 && lv_index <= autoDB31B383_ae) || (autoDB31B383_ai < 0 && lv_index >= autoDB31B383_ae) ) ; lv_index += autoDB31B383_ai ) {
        lv_indexRandom = RandomInt(lv_index, (LengthofArray(lp_arrayName) - 1));
        if ((lv_indexRandom != lv_index)) {
            libCore_gf_SwapArrayValues(lp_arrayName, lv_index, lv_indexRandom);
        }

    }
}

void libCore_gf_MergeArrays (string lp_arrayName1, string lp_arrayName2) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;

    // Automatic Variable Declarations
    int autoBA13B59F_ae;
    const int autoBA13B59F_ai = 1;

    // Variable Initialization
    lv_b = LengthofArray(lp_arrayName2);
    lv_c = LengthofArray(lp_arrayName1);

    // Implementation
    autoBA13B59F_ae = lv_b;
    lv_a = 1;
    for ( ; ( (autoBA13B59F_ai >= 0 && lv_a <= autoBA13B59F_ae) || (autoBA13B59F_ai < 0 && lv_a >= autoBA13B59F_ae) ) ; lv_a += autoBA13B59F_ai ) {
        libCore_gf_SetArrayValuetoArrayValue(lp_arrayName1, (lv_a+lv_c), lp_arrayName2, lv_a);
    }
}

int libCore_gf_UnitInventoryItemPositionInInventoryOfUnit (string lp_inventoryItem, unit lp_unit) {
    // Variable Declarations
    int lv_itSlot;
    int lv_itItem;
    int lv_position;
    unit lv_item;
    int[libCore_gv_bALPlayerTotalInventorySlots + 1] lv_itemPosition;
    int lv_itemsCount;

    // Automatic Variable Declarations
    unitgroup autoB164B651_g;
    int autoB164B651_u;

    // Variable Initialization

    // Implementation
    lv_itemsCount = UnitInventoryCount(lp_unit, c_unitInventoryCountCarried);
    if ((lv_itemsCount >= 1)) {
        autoB164B651_g = UnitInventoryGroup(lp_unit);
        autoB164B651_u = UnitGroupCount(autoB164B651_g, c_unitCountAll);
        for (;; autoB164B651_u -= 1) {
            lv_item = UnitGroupUnitFromEnd(autoB164B651_g, autoB164B651_u);
            if (lv_item == null) { break; }
            if ((UnitGetType(lv_item) == lp_inventoryItem)) {
                return UnitInventoryContainer(lv_item);
            }

        }
    }

    TextExpressionSetToken("Param/Expression/lib_Core_28542C72", "A", UnitGetName(lp_unit));
    TextExpressionSetToken("Param/Expression/lib_Core_28542C72", "B", UnitTypeGetName(lp_inventoryItem));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_28542C72"), true);
    return -1;
}

unit libCore_gf_InvetoryItemInInventoryPositionOfUnit (unit lp_unit, int lp_inventoryPosition) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_InvetoryItemInInventoryPositionOfUnit(lp_unit, lp_inventoryPosition);
}

void libCore_gf_CreateMinimapPingCore (playergroup lp_players, string lp_pingData, point lp_position, color lp_color, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    PingCreateFromData(lp_players, lp_pingData, lp_position);
    if ((lp_color != ColorWithAlpha(0,0,0,0))) {
        PingSetColor(PingLastCreated(), lp_color);
    }

    if ((lp_duration != -1)) {
        PingSetDuration(PingLastCreated(), lp_duration);
    }

}

void libCore_gf_CreatePingFacingAngleWithType (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, fixed lp_angle, int lp_pingingPlayerID) {
    // Variable Declarations
    point lv_pointWithAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pointWithAngle = libNtve_gf_PointFacingAngle(lp_position, lp_angle);
    PingCreateWithPlayerId(lp_players, lp_model, lv_pointWithAngle, lp_color, lp_duration, lp_pingingPlayerID);
}

void libCore_gf_ChangeCollisionToTeamForPlayerHero (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libCore_gf_HeroIndexOfPlayerHero(lp_player);

    // Implementation
    if ((libGame_gf_PlayerGetPlayerTeam(lp_player) == libGame_gv_teamOrderIndex_C)) {
        libCore_gf_ChangeCollisionForPlayerForUnitType(lp_player, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitType, libCore_ge_CollisionTypes_Land03, libCore_ge_CollisionOperationType_TurnOn);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitTypeAlternate[0] != null)) {
            libCore_gf_ChangeCollisionForPlayerForUnitType(lp_player, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitTypeAlternate[0], libCore_ge_CollisionTypes_Land03, libCore_ge_CollisionOperationType_TurnOn);
        }
    }
    else {
        libCore_gf_ChangeCollisionForPlayerForUnitType(lp_player, UnitGetType(libGame_gv_players[lp_player].lv_heroUnit), libCore_ge_CollisionTypes_Land04, libCore_ge_CollisionOperationType_TurnOn);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitTypeAlternate[0] != null)) {
            libCore_gf_ChangeCollisionForPlayerForUnitType(lp_player, libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_heroUnitTypeAlternate[0], libCore_ge_CollisionTypes_Land04, libCore_ge_CollisionOperationType_TurnOn);
        }
    }
}

void libCore_gf_ChangeCollisionForPlayerForUnitType (int lp_player, string lp_unitType, int lp_collisionType, int lp_operation) {
    // Automatic Variable Declarations
    int auto16B194CE_val;

    // Implementation
    auto16B194CE_val = lp_operation;
    if (auto16B194CE_val == libCore_ge_CollisionOperationType_TurnOn) {
        CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player, "1");
    }
    else if (auto16B194CE_val == libCore_ge_CollisionOperationType_TurnOff) {
        CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player, "0");
    }
    else {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player) == "0")) {
            CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player, "1");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player, "0");
        }
    }
}

playergroup libCore_gf_PlayerGroupExceptOfPlayer (playergroup lp_sourceGroup, int lp_exceptedPlayer) {
    // Variable Declarations
    playergroup lv_targetGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetGroup = PlayerGroupEmpty();

    // Implementation
    lv_targetGroup = PlayerGroupCopy(lp_sourceGroup);
    PlayerGroupRemove(lv_targetGroup, lp_exceptedPlayer);
    return lv_targetGroup;
}

playergroup libCore_gf_PlayerGroupMuting (int lp_muteType, int lp_player, bool lp_muted) {
    // Variable Declarations
    playergroup lv_mutedGroup;
    playergroup lv_unmutedGroup;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto511DF6E6_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto511DF6E6_ai = 1;
    int autoEC8DB49D_val;

    // Variable Initialization
    lv_mutedGroup = PlayerGroupEmpty();
    lv_unmutedGroup = PlayerGroupEmpty();

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto511DF6E6_ai >= 0 && lv_itPlayer <= auto511DF6E6_ae) || (auto511DF6E6_ai < 0 && lv_itPlayer >= auto511DF6E6_ae) ) ; lv_itPlayer += auto511DF6E6_ai ) {
        if ((lv_itPlayer != lp_player)) {
            autoEC8DB49D_val = lp_muteType;
            if (autoEC8DB49D_val == libCore_ge_MuteType_Announcements) {
                if ((PlayerGroupHasPlayer(libGame_gv_players[lv_itPlayer].lv_mutedPlayerGroupAnnouncements, lp_player) == true)) {
                    PlayerGroupAdd(lv_mutedGroup, lv_itPlayer);
                }
                else {
                    PlayerGroupAdd(lv_unmutedGroup, lv_itPlayer);
                }
            }
            else if (autoEC8DB49D_val == libCore_ge_MuteType_ChatMessages) {
                if ((PlayerGroupHasPlayer(libGame_gv_players[lv_itPlayer].lv_mutedPlayerGroupChat, lp_player) == true)) {
                    PlayerGroupAdd(lv_mutedGroup, lv_itPlayer);
                }
                else {
                    PlayerGroupAdd(lv_unmutedGroup, lv_itPlayer);
                }
            }
            else if (autoEC8DB49D_val == libCore_ge_MuteType_Pings) {
                if ((PlayerGroupHasPlayer(libGame_gv_players[lv_itPlayer].lv_mutedPlayerGroupPing, lp_player) == true)) {
                    PlayerGroupAdd(lv_mutedGroup, lv_itPlayer);
                }
                else {
                    PlayerGroupAdd(lv_unmutedGroup, lv_itPlayer);
                }
            }
            else {
            }
        }

    }
    if ((lp_muted == true)) {
        return lv_mutedGroup;
    }
    else {
        return lv_unmutedGroup;
    }
}

playergroup PlayerGroupExceptOfPlayerGroup (playergroup lp_playerGroupA, playergroup lp_playerGroupB) {
    // Variable Declarations
    playergroup lv_returnGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnGroup = PlayerGroupEmpty();

    // Implementation
    lv_returnGroup = PlayerGroupCopy(lp_playerGroupA);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_playerGroupB, lv_returnGroup);
    return lv_returnGroup;
}

bool libCore_gf_TechAliasExist (int lp_catalog, string lp_catalogEntry, string lp_techAlias) {
    // Variable Declarations
    int lv_itTechAlias;
    int lv_techAliasMax;

    // Automatic Variable Declarations
    int autoADA11385_ae;
    const int autoADA11385_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_techAlias != "") && (lp_techAlias != null)) {
        lv_techAliasMax = CatalogFieldValueCount(lp_catalog, lp_catalogEntry, "TechAliasArray", c_playerAny);
        if ((lv_techAliasMax > 0)) {
            autoADA11385_ae = (lv_techAliasMax-1);
            lv_itTechAlias = 0;
            for ( ; ( (autoADA11385_ai >= 0 && lv_itTechAlias <= autoADA11385_ae) || (autoADA11385_ai < 0 && lv_itTechAlias >= autoADA11385_ae) ) ; lv_itTechAlias += autoADA11385_ai ) {
                if ((lp_techAlias == CatalogFieldValueGet(lp_catalog, lp_catalogEntry, "TechAliasArray[" + IntToString(lv_itTechAlias) + "]", c_playerAny))) {
                    return true;
                }

            }
        }

    }

    return false;
}

bool libCore_gf_TechAliasExistPreset (int lp_catalog, string lp_catalogEntry, string lp_techAlias) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_TechAliasExist(lp_catalog, lp_catalogEntry, lp_techAlias);
}

int libCore_gf_TriggerEventType () {
    // Automatic Variable Declarations
    // Implementation
    return EventType();
}

int libCore_gf_TriggerEventIndex () {
    // Automatic Variable Declarations
    // Implementation
    return EventType();
}

string libCore_gf_HeroAbilityButtonHotkeyPath (string lp_heroUnitType, string lp_abilityButton) {
    // Variable Declarations
    int lv_row;
    int lv_column;
    int lv_buttonIndex;
    int lv_correctRow;
    int lv_correctColumn;
    string lv_hotkeyPath;

    // Automatic Variable Declarations
    int autoF6A9690C_ae;
    const int autoF6A9690C_ai = 1;

    // Variable Initialization
    lv_hotkeyPath = "";

    // Implementation
    autoF6A9690C_ae = CatalogFieldValueCount(c_gameCatalogUnit, lp_heroUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons", c_playerAny);
    lv_buttonIndex = 0;
    for ( ; ( (autoF6A9690C_ai >= 0 && lv_buttonIndex <= autoF6A9690C_ae) || (autoF6A9690C_ai < 0 && lv_buttonIndex >= autoF6A9690C_ae) ) ; lv_buttonIndex += autoF6A9690C_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_heroUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Face", c_playerAny) == (lp_abilityButton))) {
            lv_row = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_heroUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Row", c_playerAny));
            lv_column = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_heroUnitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Column", c_playerAny));
            if ((lv_row == 0)) {
                lv_hotkeyPath = ("0" + IntToString(lv_column));
            }
            else if ((lv_row == 1)) {
                lv_row = ((lv_row*5));
                lv_hotkeyPath = ("0" + IntToString((lv_row+lv_column)));
            }
            else if ((lv_row == 2)) {
                lv_row = ((lv_row*5));
                lv_hotkeyPath = (IntToString((lv_row+lv_column)));
            }
            lv_hotkeyPath = ("UI/Hotkey/CommandButton" + lv_hotkeyPath);
            return lv_hotkeyPath;
        }

    }
    return "";
}

void libCore_gf_UnitBehaviorRemoveChargeRegen (unit lp_inUnit, string lp_inBehavior, string lp_inCharge) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddChargeRegen(lp_inUnit, lp_inBehavior, lp_inCharge, (-1.0 * UnitBehaviorGetChargeRegen(lp_inUnit, lp_inBehavior, lp_inCharge)));
}

void libCore_gf_UnitAbilityRemoveChargeRegen (unit lp_inUnit, string lp_inAbil, string lp_inCharge) {
    // Automatic Variable Declarations
    // Implementation
    UnitAbilityAddChargeRegen(lp_inUnit, lp_inAbil, lp_inCharge, (-1.0 * UnitAbilityGetChargeRegen(lp_inUnit, lp_inAbil, lp_inCharge)));
}

void libCore_gf_UnitRemoveChargeRegen (unit lp_inUnit, string lp_inCharge) {
    // Automatic Variable Declarations
    // Implementation
    UnitAddChargeRegen(lp_inUnit, lp_inCharge, (-1.0 * UnitGetChargeRegen(lp_inUnit, lp_inCharge)));
}

bool libCore_gf_AbsorbedDamageLifestealValid (string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitBehaviorHasFlag(lp_behavior, c_unitBehaviorFlagPhysical) == true))) {
        return true;
    }

    return false;
}

bool libCore_gf_AbsorbedDamageTextTagValid (string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitBehaviorHasFlag(lp_behavior, c_unitBehaviorFlagPhysical) == true))) {
        return true;
    }

    return false;
}

bool libCore_gf_AbsorbedDamageScoreValid (string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitBehaviorHasFlag(lp_behavior, c_unitBehaviorFlagPhysical) == true) || (UnitBehaviorHasFlag(lp_behavior, c_unitBehaviorFlagUser2) == true) || (libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, lp_behavior, "Absorb Fatal Damage") == true))) {
        return true;
    }

    return false;
}

fixed libCore_gf_AbsorbedFatalDamageCalculateDamage (unit lp_triggeringUnit) {
    // Variable Declarations
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_amount = (UnitGetPropertyFixed(lp_triggeringUnit, c_unitPropLife, c_unitPropCurrent) + UnitBehaviorDamageModifyRemaining(lp_triggeringUnit, null));
    return lv_amount;
}

fixed libCore_gf_AbsorbedFatalDamageValidDamage (unit lp_triggeringUnit, string lp_absorbingBehavior, fixed lp_absorbedDamage) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCore_gf_TechAliasExistPreset(c_gameCatalogBehavior, lp_absorbingBehavior, "Absorb Fatal Damage") == true)) {
        return libCore_gf_AbsorbedFatalDamageCalculateDamage(lp_triggeringUnit);
    }
    else {
        return lp_absorbedDamage;
    }
}

string libCore_gf_GetWeaponDamageForUnit2 (unit lp_unit) {
    // Variable Declarations
    int lv_itWeapon;

    // Automatic Variable Declarations
    int auto73743F23_ae;
    const int auto73743F23_ai = 1;

    // Variable Initialization

    // Implementation
    auto73743F23_ae = UnitWeaponCount(lp_unit);
    lv_itWeapon = 1;
    for ( ; ( (auto73743F23_ai >= 0 && lv_itWeapon <= auto73743F23_ae) || (auto73743F23_ai < 0 && lv_itWeapon >= auto73743F23_ae) ) ; lv_itWeapon += auto73743F23_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return UnitWeaponGet(lp_unit, lv_itWeapon);
        }

    }
    return null;
}

string libCore_gf_GetWeaponDamageForUnit3 (unit lp_unit) {
    // Variable Declarations
    string lv_effect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_effect = (CatalogFieldValueGet(c_gameCatalogWeapon, libCore_gf_GetWeaponDamageForUnit2(lp_unit), "DisplayEffect", UnitGetOwner(lp_unit)));
    return lv_effect;
}

bool libCore_gf_UserDataBoolean (string lp_userDataInstance) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("GenericTrueFalse", lp_userDataInstance, "True/Flase", 1) == 1);
}

bool libCore_gf_UserDataDefault (string lp_userDataInstance) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_userDataInstance == "[Default]") || (lp_userDataInstance == null))) {
        return true;
    }

    return false;
}

bool libCore_gf_ExecuteValidatorOnUnit (string lp_validator, unit lp_sourceUnit, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((ValidatorExecute(lp_validator, lp_sourceUnit, lp_targetUnit) == 0)) {
        return true;
    }
    return false;
}

string libCore_gf__UnitDataName (int lp_type, unit lp_unit, int lp_index) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto1FBE3EB6_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    auto1FBE3EB6_val = lp_type;
    if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Integer) {
        lv_name = "UDINTEGER_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Region) {
        lv_name = "UDREGION_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Unit) {
        lv_name = "UDUNIT_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_UnitGroup) {
        lv_name = "UDUNITGROUP_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void libCore_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Actor, lp_unit, lp_index), lp_actor);
}

actor libCore_gf_ActorStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Actor, lp_unit, lp_index));
}

void libCore_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SaveDataTableValueTextTag(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_TextTag, lp_unit, lp_index), lp_textTag);
}

int libCore_gf_TextTagStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableTextTag(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_TextTag, lp_unit, lp_index));
}

void libCore_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index), lp_point);
}

point libCore_gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCore_gf_StoreRegionForUnit (unit lp_unit, int lp_index, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRegion(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index), lp_region);
}

region libCore_gf_RegionStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRegion(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCore_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int libCore_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Ping, lp_unit, lp_index));
}

void libCore_gf_StoreIntegerForUnit (unit lp_unit, int lp_index, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Integer, lp_unit, lp_index), lp_value);
}

int libCore_gf_IntegerStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Integer, lp_unit, lp_index));
}

void libCore_gf_StoreUnitForUnit (unit lp_unit, int lp_index, unit lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Unit, lp_unit, lp_index), lp_value);
}

unit libCore_gf_UnitStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Unit, lp_unit, lp_index));
}

void libCore_gf_StoreUnitGroupForUnit (unit lp_unit, int lp_index, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnitGroup(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_UnitGroup, lp_unit, lp_index), lp_value);
}

unitgroup libCore_gf_UnitGroupStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_UnitGroup, lp_unit, lp_index));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Commanders Mod
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeCommandersMod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto168FC981_g;
    int auto168FC981_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitEventSetNullVariableInvalid(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    auto168FC981_g = PlayerGroupAll();
    auto168FC981_var = -1;
    while (true) {
        auto168FC981_var = PlayerGroupNextPlayer(auto168FC981_g, auto168FC981_var);
        if (auto168FC981_var < 0) { break; }
        CameraPan(auto168FC981_var, RegionGetBoundsMax(RegionEntireMap()), 0.0, -1, 0.0, false);
    }
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Warrior][1] = "HeroDiablo";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Support][1] = "HeroMalfurion";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Specialist][1] = "HeroAbathur";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin1][1] = "HeroSelendis";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin1][2] = "HeroKatarina";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin2][1] = "HeroTalandar";
    if ((GameIsOnline() == true)) {
        GameSetSpeedValue(c_gameSpeedNormal);
        GameSetSpeedLocked(true);
        GameSetPauseable(false);
    }

    TriggerExecute(libCore_gt_InitializeDataMiningAndDebugOutput, true, true);
    TriggerExecute(libGame_gt_InitializeGameData, true, true);
    TriggerExecute(libCore_gt_InitializeData, true, true);
    TriggerExecute(libGame_gt_InitializePlayers, true, true);
    TriggerExecute(libGame_gt_InitializeGameSystems, true, true);
    TriggerExecute(libUIUI_gt_InitializeUI, true, true);
    TriggerExecute(libMapM_gt_InitializeMapMechanics, true, true);
    TriggerExecute(libMeta_gt_InitializeMetaData, true, true);
    TriggerExecute(libGame_gt_InitializeBanks, true, true);
    if ((libCore_gv_dEBUGErrorDuringInitialization == true)) {
        return true;
    }

    TriggerExecute(libCore_gt_InitializeMiscStuff, true, false);
    Wait(1.0, c_timeGame);
    if ((libCore_gv_sYSStartGame == true)) {
        TriggerExecute(libGame_gt_PreloadingPreloadStore, true, true);
        libUIUI_gf_HSUIShowHeroSelectionUI();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeCommandersMod_Init () {
    libCore_gt_InitializeCommandersMod = TriggerCreate("libCore_gt_InitializeCommandersMod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Game Mod
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeGameMod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto115F7BFF_g;
    int auto115F7BFF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitEventSetNullVariableInvalid(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    auto115F7BFF_g = PlayerGroupAll();
    auto115F7BFF_var = -1;
    while (true) {
        auto115F7BFF_var = PlayerGroupNextPlayer(auto115F7BFF_g, auto115F7BFF_var);
        if (auto115F7BFF_var < 0) { break; }
        CameraPan(auto115F7BFF_var, RegionGetBoundsMax(RegionEntireMap()), 0.0, -1, 0.0, false);
    }
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Warrior][1] = "HeroDiablo";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Support][1] = "HeroMalfurion";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Specialist][1] = "HeroAbathur";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin1][1] = "HeroSelendis";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin1][2] = "HeroKatarina";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin2][1] = "HeroTalandar";
    if ((GameIsOnline() == true)) {
        GameSetSpeedValue(c_gameSpeedNormal);
        GameSetSpeedLocked(true);
        GameSetPauseable(false);
    }

    TriggerExecute(libCore_gt_InitializeDataMiningAndDebugOutput, true, true);
    TriggerExecute(libGame_gt_InitializeGameData, true, true);
    TriggerExecute(libCore_gt_InitializeData, true, true);
    TriggerExecute(libGame_gt_InitializePlayers, true, true);
    TriggerExecute(libGame_gt_InitializeGameSystems, true, true);
    TriggerExecute(libUIUI_gt_InitializeUI, true, true);
    TriggerExecute(libMapM_gt_InitializeMapMechanics, true, true);
    TriggerExecute(libMeta_gt_InitializeMetaData, true, true);
    TriggerExecute(libGame_gt_InitializeBanks, true, true);
    if ((libCore_gv_dEBUGErrorDuringInitialization == true)) {
        return true;
    }

    TriggerExecute(libCore_gt_InitializeMiscStuff, true, false);
    Wait(1.0, c_timeGame);
    if ((libCore_gv_sYSStartGame == true)) {
        TriggerExecute(libGame_gt_PreloadingPreloadStore, true, true);
        libUIUI_gf_HSUIShowHeroSelectionUI();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeGameMod_Init () {
    libCore_gt_InitializeGameMod = TriggerCreate("libCore_gt_InitializeGameMod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Core Mod
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeCoreMod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto96DFAD4C_g;
    int auto96DFAD4C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitEventSetNullVariableInvalid(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    auto96DFAD4C_g = PlayerGroupAll();
    auto96DFAD4C_var = -1;
    while (true) {
        auto96DFAD4C_var = PlayerGroupNextPlayer(auto96DFAD4C_g, auto96DFAD4C_var);
        if (auto96DFAD4C_var < 0) { break; }
        CameraPan(auto96DFAD4C_var, RegionGetBoundsMax(RegionEntireMap()), 0.0, -1, 0.0, false);
    }
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Warrior][1] = "HeroDiablo";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Support][1] = "HeroMalfurion";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Specialist][1] = "HeroAbathur";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin1][1] = "HeroSelendis";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin1][2] = "HeroKatarina";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin2][1] = "HeroTalandar";
    if ((GameIsOnline() == true)) {
        GameSetSpeedValue(c_gameSpeedNormal);
        GameSetSpeedLocked(true);
        GameSetPauseable(false);
    }

    TriggerExecute(libCore_gt_InitializeDataMiningAndDebugOutput, true, true);
    TriggerExecute(libGame_gt_InitializeGameData, true, true);
    TriggerExecute(libCore_gt_InitializeData, true, true);
    TriggerExecute(libGame_gt_InitializePlayers, true, true);
    TriggerExecute(libGame_gt_InitializeGameSystems, true, true);
    TriggerExecute(libUIUI_gt_InitializeUI, true, true);
    TriggerExecute(libMapM_gt_InitializeMapMechanics, true, true);
    TriggerExecute(libMeta_gt_InitializeMetaData, true, true);
    TriggerExecute(libGame_gt_InitializeBanks, true, true);
    if ((libCore_gv_dEBUGErrorDuringInitialization == true)) {
        return true;
    }

    TriggerExecute(libCore_gt_InitializeMiscStuff, true, false);
    Wait(1.0, c_timeGame);
    if ((libCore_gv_sYSStartGame == true)) {
        TriggerExecute(libGame_gt_PreloadingPreloadStore, true, true);
        libUIUI_gf_HSUIShowHeroSelectionUI();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeCoreMod_Init () {
    libCore_gt_InitializeCoreMod = TriggerCreate("libCore_gt_InitializeCoreMod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_colorString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_colorString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_mAPMapLight = (CatalogFieldValueGet(c_gameCatalogTerrain, GameTerrainSet(), "Lighting", c_playerAny));
    libCore_gv_cOLORPlayerColor = libCore_gf_GetAllianceColorFromGameUIData(0);
    libCore_gv_cOLORAllyColor = libCore_gf_GetAllianceColorFromGameUIData(1);
    libCore_gv_cOLOREnemyColor = libCore_gf_GetAllianceColorFromGameUIData(2);
    libCore_gv_cOLORNeutralColor = libCore_gf_GetAllianceColorFromGameUIData(3);
    lv_colorString = (FixedToString((ColorGetComponent(libCore_gv_cOLORJungleCreepColor, c_colorComponentRed) / 100.0), 4) + "," + FixedToString((ColorGetComponent(libCore_gv_cOLORJungleCreepColor, c_colorComponentGreen) / 100.0), 4) + "," + FixedToString((ColorGetComponent(libCore_gv_cOLORJungleCreepColor, c_colorComponentBlue) / 100.0), 4) + ",1.0");
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(2) + "].Value[" + IntToString(0) + "]", libCore_gv_cOMPUTER_Hostile, lv_colorString);
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(2) + "].Value[" + IntToString(1) + "]", libCore_gv_cOMPUTER_Hostile, lv_colorString);
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(2) + "].Value[" + IntToString(2) + "]", libCore_gv_cOMPUTER_Hostile, lv_colorString);
    TriggerExecute(libCore_gt_DataXPInitializeLevelXPValues, true, true);
    TriggerExecute(libCore_gt_DataInitializeMountData, true, true);
    TriggerExecute(libCore_gt_DataInitializeSkinData, true, true);
    TriggerExecute(libCore_gt_DataInitializeAbilities, true, true);
    TriggerExecute(libCore_gt_DataInitializeTalents, true, true);
    TriggerExecute(libCore_gt_DataInitializeHeroes, true, true);
    TriggerExecute(libCore_gt_UnitStatsBehaviorDataInitialize, true, false);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderData, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampMercData, true, true);
    TriggerExecute(libCore_gt_DataInitializeAnnouncerVOData2, true, true);
    TriggerExecute(libGame_gt_UnitStatsHealingReceivedInitialization, true, true);
    TriggerExecute(libCore_gt_DataHeroesDeathTimes, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeData_Init () {
    libCore_gt_InitializeData = TriggerCreate("libCore_gt_InitializeData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Misc Stuff
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeMiscStuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFrom("::Scene"), "SceneHaloSetColor 255,0,0");
    libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeMiscStuff_Init () {
    libCore_gt_InitializeMiscStuff = TriggerCreate("libCore_gt_InitializeMiscStuff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Data Mining And Debug Output
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeDataMiningAndDebugOutput_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(1, (libCore_gv_debugPathDebugOutput + ".txt"));
    TriggerDebugSetTypeFile(2, (libCore_gv_debugPathScoreValueLog + ".txt"));
    TriggerDebugSetTypeFile(3, (libCore_gv_debugPathEncouragementDataTrackingLog + ".txt"));
    TriggerDebugSetTypeFile(5, (libSprt_gv_performanceTestFPSLogFile + ".txt"));
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        TriggerDebugOutputEnable(false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeDataMiningAndDebugOutput_Init () {
    libCore_gt_InitializeDataMiningAndDebugOutput = TriggerCreate("libCore_gt_InitializeDataMiningAndDebugOutput_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Abilities
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeAbilities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    bool lv_heroIsPaired;
    int lv_itAbilityIndex;
    int lv_itPlayerResponse;
    string lv_itAbilButtonLink;
    string lv_itInstance;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsQ;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsW;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsE;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsActive;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPassive;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedQ;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedW;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedE;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedActive;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_abilityVariationsPairedPassive;

    // Automatic Variable Declarations
    string auto85D39618_userType;
    int auto85D39618_i;
    const int auto1AA594E1_ae = libCore_gv_abilityDataPlayerResponseMaxCount;
    const int auto1AA594E1_ai = 1;
    string autoF01004B0_val;
    string autoDB91DDA6_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto85D39618_userType = "Ability";
    auto85D39618_i = 1;
    for ( ; auto85D39618_i <= UserDataInstanceCount(auto85D39618_userType) ; auto85D39618_i += 1 ) {
        lv_itInstance = UserDataInstance(auto85D39618_userType, auto85D39618_i);
        lv_itAbilityIndex += 1;
        libCore_gv_abilityDataNumberOfAbilities += 1;
        if ((libCore_gv_abilityDataNumberOfAbilities > libCore_gv_abilityDataMaxAbilityCount)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_499D4730"), true);
            libCore_gv_abilityDataNumberOfAbilities -= 1;
            return true;
        }

        lv_heroIndex = libNtve_gf_UserDataInstanceGetIndex("Hero", UserDataGetUserInstance("Ability", lv_itInstance, "Hero", 1));
        lv_heroIsPaired = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Hero", UserDataInstance("Hero", lv_heroIndex), "IsPaired", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityLink = UserDataGetGameLink("Ability", lv_itInstance, "AbilityEntry", 1);
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityButtonLink = UserDataGetGameLink("Ability", lv_itInstance, "ButtonEntry", 1);
        lv_itAbilButtonLink = libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityButtonLink;
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Name", c_playerAny));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Icon", c_playerAny));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilitySimpleText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "SimpleDisplayText", c_playerAny));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityTooltipText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Tooltip", c_playerAny));
        if ((CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "TooltipCooldownOverrideText", c_playerAny) != "")) {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityInfoText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "TooltipCooldownOverrideText", c_playerAny));
        }
        else {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityInfoText = null;
        }
        libCore_gv_abilityData[lv_itAbilityIndex].lv_isAffectedByCooldownReduction = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_AffectedByCooldownReduction", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_isReplacementMount = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_IsMountReplacement", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_isHeroSelectionVisibility = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_ShowInHeroSelection", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_isUsesCharges = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_IsUsesCharges", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_isInventory = libCore_gf_UserDataBoolean(UserDataGetUserInstance("Ability", lv_itInstance, "Flag_IsInventory", 1));
        libCore_gv_abilityData[lv_itAbilityIndex].lv_paired = UserDataGetUserInstance("Ability", lv_itInstance, "Paired", 1);
        libCore_gv_abilityData[lv_itAbilityIndex].lv_slot = UserDataGetUserInstance("Ability", lv_itInstance, "Slot", 1);
        if ((libCore_gf_UserDataDefault(libCore_gv_abilityData[lv_itAbilityIndex].lv_slot) == true)) {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_slot = "Passive";
        }

        libCore_gv_abilityData[lv_itAbilityIndex].lv_type = UserDataGetUserInstance("Ability", lv_itInstance, "Type", 1);
        if ((libCore_gf_UserDataDefault(libCore_gv_abilityData[lv_itAbilityIndex].lv_type) == true)) {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_type = "Passive";
        }

        libCore_gv_abilityData[lv_itAbilityIndex].lv_inventoryUnit = UserDataGetGameLink("Ability", lv_itInstance, "InventoryUnitEntry", 1);
        libCore_gv_abilityData[lv_itAbilityIndex].lv_cDRSkipValidator = UserDataGetGameLink("Ability", lv_itInstance, "CDRSkipValidator", 1);
        libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityHotkey = libCore_gf_AbilityTalentHotkeyTextExpanded(libCore_gv_abilityData[lv_itAbilityIndex].lv_slot);
        lv_itPlayerResponse = 1;
        for ( ; ( (auto1AA594E1_ai >= 0 && lv_itPlayerResponse <= auto1AA594E1_ae) || (auto1AA594E1_ai < 0 && lv_itPlayerResponse >= auto1AA594E1_ae) ) ; lv_itPlayerResponse += auto1AA594E1_ai ) {
            libCore_gv_abilityData[lv_itAbilityIndex].lv_playerResponse[lv_itPlayerResponse] = UserDataGetGameLink("Ability", lv_itInstance, "PlayerResponseEntry", lv_itPlayerResponse);
            if ((libCore_gv_abilityData[lv_itAbilityIndex].lv_playerResponse[lv_itPlayerResponse] == "")) {
                libCore_gv_abilityData[lv_itAbilityIndex].lv_playerResponse[lv_itPlayerResponse] = null;
            }
            else {
                if ((CatalogEntryIsValid(c_gameCatalogPlayerResponse, libCore_gv_abilityData[lv_itAbilityIndex].lv_playerResponse[lv_itPlayerResponse]) == false)) {
                    TextExpressionSetToken("Param/Expression/lib_Core_E97B95A0", "A", StringToText(CatalogFieldValueGet(c_gameCatalogAbil, libCore_gv_abilityData[lv_itAbilityIndex].lv_abilityLink, "Name", c_playerAny)));
                    TextExpressionSetToken("Param/Expression/lib_Core_E97B95A0", "B", IntToText(lv_itPlayerResponse));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_E97B95A0"), true);
                }
                else {
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_playerResponseCount += 1;
                }
            }
        }
        if ((libCore_gv_abilityData[lv_itAbilityIndex].lv_isHeroSelectionVisibility == true)) {
            if (((lv_heroIsPaired == false) || ((lv_heroIsPaired == true) && (libCore_gv_abilityData[lv_itAbilityIndex].lv_paired == "Paired1")))) {
                autoF01004B0_val = libCore_gv_abilityData[lv_itAbilityIndex].lv_slot;
                if (autoF01004B0_val == "Basic Ability (Q)") {
                    lv_abilityVariationsQ[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsQ[lv_heroIndex];
                }
                else if (autoF01004B0_val == "Basic Ability (W)") {
                    lv_abilityVariationsW[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsW[lv_heroIndex];
                }
                else if (autoF01004B0_val == "Basic Ability (E)") {
                    lv_abilityVariationsE[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsE[lv_heroIndex];
                }
                else if (autoF01004B0_val == "Inventory (Active)") {
                    lv_abilityVariationsActive[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsActive[lv_heroIndex];
                }
                else if (autoF01004B0_val == "Trait (D)") {
                }
                else if (autoF01004B0_val == "Heroic Ability (R)") {
                }
                else if (autoF01004B0_val == "Mount (Z)") {
                }
                else if (autoF01004B0_val == "Hearthstone (B)") {
                }
                else {
                    lv_abilityVariationsPassive[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPassive[lv_heroIndex];
                }
            }
            else if ((lv_heroIsPaired == true) && (libCore_gv_abilityData[lv_itAbilityIndex].lv_paired == "Paired2")) {
                autoDB91DDA6_val = libCore_gv_abilityData[lv_itAbilityIndex].lv_slot;
                if (autoDB91DDA6_val == "Basic Ability (Q)") {
                    lv_abilityVariationsPairedQ[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedQ[lv_heroIndex];
                }
                else if (autoDB91DDA6_val == "Basic Ability (W)") {
                    lv_abilityVariationsPairedW[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedW[lv_heroIndex];
                }
                else if (autoDB91DDA6_val == "Basic Ability (E)") {
                    lv_abilityVariationsPairedE[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedE[lv_heroIndex];
                }
                else if (autoDB91DDA6_val == "Inventory (Active)") {
                    lv_abilityVariationsPairedActive[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedActive[lv_heroIndex];
                }
                else if (autoDB91DDA6_val == "Trait (D)") {
                }
                else if (autoDB91DDA6_val == "Heroic Ability (R)") {
                }
                else if (autoDB91DDA6_val == "Mount (Z)") {
                }
                else if (autoDB91DDA6_val == "Hearthstone (B)") {
                }
                else {
                    lv_abilityVariationsPairedPassive[lv_heroIndex] += 1;
                    libCore_gv_abilityData[lv_itAbilityIndex].lv_variationNumber = lv_abilityVariationsPairedPassive[lv_heroIndex];
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeAbilities_Init () {
    libCore_gt_DataInitializeAbilities = TriggerCreate("libCore_gt_DataInitializeAbilities_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Announcer VO Data 2
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeAnnouncerVOData2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_announcerPackID;
    string lv_instance;

    // Automatic Variable Declarations
    const int autoA7A5430B_ae = libCore_gv_bALMaxEnginePlayerCount;
    int autoA7A5430B_var;
    string auto2CB4CE62_userType;
    int auto2CB4CE62_i;
    string auto2B648057_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7A5430B_var = 1;
    for ( ; autoA7A5430B_var <= autoA7A5430B_ae; autoA7A5430B_var += 1 ) {
        libGame_gv_players[autoA7A5430B_var].lv_selectedAnnouncerVOPack = libCore_ge_AnnouncerVOPacks_ProtossFemale;
    }
    auto2CB4CE62_userType = "Announcer";
    auto2CB4CE62_i = 1;
    for ( ; auto2CB4CE62_i <= UserDataInstanceCount(auto2CB4CE62_userType) ; auto2CB4CE62_i += 1 ) {
        lv_instance = UserDataInstance(auto2CB4CE62_userType, auto2CB4CE62_i);
        lv_announcerPackID = libNtve_gf_UserDataInstanceGetIndex("Announcer", lv_instance);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_announcer = lv_instance;
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack] = SoundLink(UserDataGetSound("Announcer", lv_instance, "CoreAttack_Ally", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack] = SoundLink(UserDataGetSound("Announcer", lv_instance, "CoreAttack_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack] = SoundLink(UserDataGetSound("Announcer", lv_instance, "CoreAttack_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_CountdownRemain] = SoundLink(UserDataGetSound("Announcer", lv_instance, "CountdownRemain", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown30] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Countdown30sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown10] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Countdown10sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown5] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Countdown05sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown4] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Countdown04sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown3] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Countdown03sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown2] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Countdown02sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown1] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Countdown01sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_GameStart] = SoundLink(UserDataGetSound("Announcer", lv_instance, "GameStart", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_ChooseYourHero] = SoundLink(UserDataGetSound("Announcer", lv_instance, "HeroSelect", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_HeroSlain] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_HeroSlain", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_HeroSlainObserver] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_HeroSlain_Observer", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_HeroKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_DoubleKill] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_DoubleKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_TripleKill] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_TripleKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_QuadraKill] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_FourKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_PentaKill] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_MegaKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_TeamKill] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_TeamKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_TeamKill] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_TeamKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamKilled] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_TeamKill_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamKilled] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_TeamKill_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_AllyFirstBlood] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_FirstBloodAlly", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_FirstBlood_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Kill_FirstBlood_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame] = SoundLink(UserDataGetSound("Announcer", lv_instance, "PlayerAbandon", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame] = SoundLink(UserDataGetSound("Announcer", lv_instance, "PlayerRejoin", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Gravestomp] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Gravestomp", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_GravestompObserver] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Gravestomp_Observer", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed] = SoundLink(UserDataGetSound("Announcer", lv_instance, "FortLost", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed] = SoundLink(UserDataGetSound("Announcer", lv_instance, "FortDestroy", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed] = SoundLink(UserDataGetSound("Announcer", lv_instance, "KeepLost", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed] = SoundLink(UserDataGetSound("Announcer", lv_instance, "KeepDestroy", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamDestroysFort] = SoundLink(UserDataGetSound("Announcer", lv_instance, "FortDestroy_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamDestroysFort] = SoundLink(UserDataGetSound("Announcer", lv_instance, "FortDestroy_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamDestroysKeep] = SoundLink(UserDataGetSound("Announcer", lv_instance, "KeepDestroy_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamDestroysKeep] = SoundLink(UserDataGetSound("Announcer", lv_instance, "KeepDestroy_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Victory] = SoundLink(UserDataGetSound("Announcer", lv_instance, "EndingWin", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Defeat] = SoundLink(UserDataGetSound("Announcer", lv_instance, "EndingLose", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamWins] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Ending_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamWins] = SoundLink(UserDataGetSound("Announcer", lv_instance, "Ending_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeStart] = SoundLink(UserDataGetSound("Announcer", lv_instance, "SpreeStart", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem] = SoundLink(UserDataGetSound("Announcer", lv_instance, "SpreeFirstUpgrade", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Rampage] = SoundLink(UserDataGetSound("Announcer", lv_instance, "SpreeSecondUpgrade", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3Untouchable] = SoundLink(UserDataGetSound("Announcer", lv_instance, "SpreeThirdUpgrade", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStar] = SoundLink(UserDataGetSound("Announcer", lv_instance, "SpreeMax", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou] = SoundLink(UserDataGetSound("Announcer", lv_instance, "SpreeEnd", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeEndAlly] = SoundLink(UserDataGetSound("Announcer", lv_instance, "SpreeEnd_Ally", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_TalentUnlocked] = SoundLink(UserDataGetSound("Announcer", lv_instance, "TalentUnlock", 1), c_soundIndexAny);
        auto2B648057_val = GameTerrainSet();
        if (auto2B648057_val == "Storm_Slayn_BattleForSlayn") {
            libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EventStarts] = SoundLink("MapAnnouncer_VoidThrasherSpawns", -1);
            libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EventContinues] = SoundLink("MapAnnouncer_VoidThrasherAttacks", -1);
            libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EventEnds] = SoundLink("MapAnnouncer_VoidThrasherDies", -1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeAnnouncerVOData2_Init () {
    libCore_gt_DataInitializeAnnouncerVOData2 = TriggerCreate("libCore_gt_DataInitializeAnnouncerVOData2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data Heroes - Death Times
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroesDeathTimes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_bALDeathTimes[0] = 10.0;
    libCore_gv_bALDeathTimes[1] = 10.0;
    libCore_gv_bALDeathTimes[2] = 12.0;
    libCore_gv_bALDeathTimes[3] = 13.0;
    libCore_gv_bALDeathTimes[4] = 14.0;
    libCore_gv_bALDeathTimes[5] = 15.0;
    libCore_gv_bALDeathTimes[6] = 16.0;
    libCore_gv_bALDeathTimes[7] = 17.0;
    libCore_gv_bALDeathTimes[8] = 18.0;
    libCore_gv_bALDeathTimes[9] = 20.0;
    libCore_gv_bALDeathTimes[10] = 23.0;
    libCore_gv_bALDeathTimes[11] = 26.0;
    libCore_gv_bALDeathTimes[12] = 29.0;
    libCore_gv_bALDeathTimes[13] = 32.0;
    libCore_gv_bALDeathTimes[14] = 36.0;
    libCore_gv_bALDeathTimes[15] = 40.0;
    libCore_gv_bALDeathTimes[16] = 44.0;
    libCore_gv_bALDeathTimes[17] = 50.0;
    libCore_gv_bALDeathTimes[18] = 56.0;
    libCore_gv_bALDeathTimes[19] = 62.0;
    libCore_gv_bALDeathTimes[20] = 65.0;
    libCore_gv_bALDeathTimes[21] = 65.0;
    libCore_gv_bALDeathTimes[22] = 65.0;
    libCore_gv_bALDeathTimes[23] = 65.0;
    libCore_gv_bALDeathTimes[24] = 65.0;
    libCore_gv_bALDeathTimes[25] = 65.0;
    libCore_gv_bALDeathTimes[26] = 65.0;
    libCore_gv_bALDeathTimes[27] = 65.0;
    libCore_gv_bALDeathTimes[28] = 65.0;
    libCore_gv_bALDeathTimes[29] = 65.0;
    libCore_gv_bALDeathTimes[30] = 65.0;
    libCore_gv_bALMaxDeathTime = libCore_gv_bALDeathTimes[libCore_gv_bALMaxLevel];
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroesDeathTimes_Init () {
    libCore_gt_DataHeroesDeathTimes = TriggerCreate("libCore_gt_DataHeroesDeathTimes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Heroes
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;

    // Automatic Variable Declarations
    string auto7804382C_userType;
    int auto7804382C_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataFieldValueCount("Hero", "Skins") != libCore_gv_data_MaxHeroAllowedUserDataSkinCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_7D5D2167"), true);
    }

    auto7804382C_userType = "Hero";
    auto7804382C_i = 1;
    for ( ; auto7804382C_i <= UserDataInstanceCount(auto7804382C_userType) ; auto7804382C_i += 1 ) {
        lv_itInstance = UserDataInstance(auto7804382C_userType, auto7804382C_i);
        libCore_gf_DataInitializeHero(lv_itInstance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeHeroes_Init () {
    libCore_gt_DataInitializeHeroes = TriggerCreate("libCore_gt_DataInitializeHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Hero VO - Map Data Fields
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroVOMapDataFields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Revive, "Revive");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Healed, "Healed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Resurrected, "Resurrected");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Pissed, "Pissed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_GenericKill, "KillGeneric");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_TeamKilled, "TeamKilled");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Laugh, "Laugh");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_No, "No");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_EndEnemyKillingSpree, "EndEnemyKillSpree");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_TalentChosen, "SpecChosen");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Celebrate, "Celebrate");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_WorthIt, "WorthIt");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Comeback, "Comeback");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIRetreat, "AIRetreat");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIGoodJob, "AIGoodJob");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIOnMyWay, "AIOnMyWay");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIMercCapture, "AIMercCapture");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AICaution, "AICaution");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIAttack, "AIAttack");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIUhOh, "AIUhOh");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIHeal, "AIHeal");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackHere, "PingAttackHere");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendHere, "PingDefendHere");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackTown, "PingAttackTown");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendTown, "PingDefendTown");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackWatchTower, "PingAttackWatchTower");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendWatchTower, "PingDefendWatchTower");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackCore, "PingAttackCore");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendCore, "PingDefendCore");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackMercCamp, "PingAttackMercCamp");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingKillHero, "PingAttackHero");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAssistHero, "PingAssistHero");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAssistMe, "PingAssistMe");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroQuestion, "IntroQuestion");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroResponse, "IntroResponse");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroBoast, "IntroBoast");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroAgree, "IntroAgree");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHit, "GetHit");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHitLarge, "GetHitLarge");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHitSmall, "GetHitSmall");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Hello, "Hello");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Thanks, "Thanks");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_WellPlayed, "WellPlayed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Sorry, "Sorry");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Goodbye, "Goodbye");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Cheer, "Cheer");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_GlueTrial, "GlueTrial");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroVOMapDataFields_Init () {
    libCore_gt_DataHeroVOMapDataFields = TriggerCreate("libCore_gt_DataHeroVOMapDataFields_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Hero VO - Initialize Hero VO Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroVOInitializeHeroVOData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerindex;
    int lv_heroindex;
    int lv_eventindex;
    int lv_lineindex;
    string lv_heroCatalogLink;
    string lv_dataField;

    // Automatic Variable Declarations
    int auto85A70B6A_ae;
    const int auto85A70B6A_ai = 1;
    const int auto8BC305D0_ae = libCore_gv_bALMaxPlayers;
    const int auto8BC305D0_ai = 1;

    // Variable Initialization
    lv_dataField = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCore_gt_DataHeroVOMapDataFields, true, true);
    auto85A70B6A_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_heroindex = 1;
    for ( ; ( (auto85A70B6A_ai >= 0 && lv_heroindex <= auto85A70B6A_ae) || (auto85A70B6A_ai < 0 && lv_heroindex >= auto85A70B6A_ae) ) ; lv_heroindex += auto85A70B6A_ai ) {
        lv_playerindex = 1;
        for ( ; ( (auto8BC305D0_ai >= 0 && lv_playerindex <= auto8BC305D0_ae) || (auto8BC305D0_ai < 0 && lv_playerindex >= auto8BC305D0_ae) ) ; lv_playerindex += auto8BC305D0_ai ) {
            libCore_gf_DataHeroVOReloadHeroVODataForHero(lv_heroindex, lv_playerindex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroVOInitializeHeroVOData_Init () {
    libCore_gt_DataHeroVOInitializeHeroVOData = TriggerCreate("libCore_gt_DataHeroVOInitializeHeroVOData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Mount Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeMountData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_mountInstance;

    // Automatic Variable Declarations
    string auto6008447A_userType;
    int auto6008447A_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6008447A_userType = "Mount";
    auto6008447A_i = 1;
    for ( ; auto6008447A_i <= UserDataInstanceCount(auto6008447A_userType) ; auto6008447A_i += 1 ) {
        lv_mountInstance = UserDataInstance(auto6008447A_userType, auto6008447A_i);
        libCore_gf_DataMountsAddMountPlusVariationsToMountList(lv_mountInstance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeMountData_Init () {
    libCore_gt_DataInitializeMountData = TriggerCreate("libCore_gt_DataInitializeMountData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Skin Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeSkinData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_skinInstance;

    // Automatic Variable Declarations
    string auto1B11A511_userType;
    int auto1B11A511_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1B11A511_userType = "Skin";
    auto1B11A511_i = 1;
    for ( ; auto1B11A511_i <= UserDataInstanceCount(auto1B11A511_userType) ; auto1B11A511_i += 1 ) {
        lv_skinInstance = UserDataInstance(auto1B11A511_userType, auto1B11A511_i);
        libCore_gf_DataSkinsAddSkinPlusVariationsToSkinList(lv_skinInstance);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeSkinData_Init () {
    libCore_gt_DataInitializeSkinData = TriggerCreate("libCore_gt_DataInitializeSkinData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Talents
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_talentID;
    string lv_buttonID;
    int lv_behaviorCount;
    int lv_itTalentIndex;
    int lv_itBehavior;
    int lv_itPlayer;
    int lv_itPlayerResponse;
    int lv_itAdditionalTalent;
    string lv_itAbilButtonLink;
    string lv_behaviorLink;
    string lv_itInstance;
    string lv_abilitySlot;
    string lv_string;
    string lv_playerAsString;

    // Automatic Variable Declarations
    string autoA64728EF_userType;
    int autoA64728EF_i;
    int autoAA6E5A4E_ae;
    const int auto40BB86CE_ae = libCore_gv_dataHeroesMaxPlayerResponsesPerTalent;
    const int auto40BB86CE_ai = 1;
    const int autoAF451544_ae = libCore_gv_dataHeroesMaxTalentBehaviorsPerTalent;
    const int autoAF451544_ai = 1;
    const int auto5E88B459_ae = libCore_gv_dataHeroesMaxAdditionalTalentsPerTalent;
    const int auto5E88B459_ai = 1;
    string autoA4A3DBDB_val;

    // Variable Initialization
    lv_talentID = "";
    lv_buttonID = "";
    lv_string = "";
    lv_playerAsString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    autoA64728EF_userType = "Talent";
    autoA64728EF_i = 1;
    for ( ; autoA64728EF_i <= UserDataInstanceCount(autoA64728EF_userType) ; autoA64728EF_i += 1 ) {
        lv_itInstance = UserDataInstance(autoA64728EF_userType, autoA64728EF_i);
        libCore_gv_talents_TalentEntryCount += 1;
        lv_itTalentIndex += 1;
        if ((libCore_gv_talents_TalentEntryCount > libCore_gv_talents_MaxTalentEntryCount_C)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_14F70599"), true);
        }

        libCore_gv_talentData[lv_itTalentIndex].lv_talentLink = UserDataGetGameLink("Talent", lv_itInstance, "TalentLink", 1);
        lv_talentID = (libCore_gv_talentData[lv_itTalentIndex].lv_talentLink);
        lv_buttonID = (UserDataGetGameLink("Talent", lv_itInstance, "TalentButton", 1));
        if ((libCore_gv_talentData[lv_itTalentIndex].lv_talentLink == "")) {
            TextExpressionSetToken("Param/Expression/lib_Core_4AA490E0", "A", IntToText(lv_itTalentIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_4AA490E0"), true);
            libCore_gv_talentData[lv_itTalentIndex].lv_talentLink = null;
            continue;
        }
        else if ((CatalogEntryIsValid(c_gameCatalogTalent, libCore_gv_talentData[lv_itTalentIndex].lv_talentLink) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Core_3ABE4F58", "A", IntToText(lv_itTalentIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_3ABE4F58"), true);
            libCore_gv_talentData[lv_itTalentIndex].lv_talentLink = null;
            continue;
        }
        if ((lv_buttonID == "")) {
            TextExpressionSetToken("Param/Expression/lib_Core_C3CE0F30", "A", IntToText(lv_itTalentIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_C3CE0F30"), true);
            continue;
        }
        else if ((CatalogEntryIsValid(c_gameCatalogButton, lv_buttonID) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Core_A0F1B9F6", "A", IntToText(lv_itTalentIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_A0F1B9F6"), true);
            continue;
        }

        libCore_gv_talentData[lv_itTalentIndex].lv_buttonEntry = (lv_buttonID);
        libCore_gv_talentData[lv_itTalentIndex].lv_buttonIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Icon", c_playerAny));
        libCore_gv_talentData[lv_itTalentIndex].lv_buttonName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Name", c_playerAny));
        libCore_gv_talentData[lv_itTalentIndex].lv_buttonSimpleText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "SimpleDisplayText", c_playerAny));
        autoAA6E5A4E_ae = libCore_gv_bALMaxEnginePlayerCount;
        lv_itPlayer = 0;
        for ( ; lv_itPlayer <= autoAA6E5A4E_ae ; lv_itPlayer += 1 ) {
            lv_playerAsString = ("player=\"" + IntToString(lv_itPlayer) + "\"");
            lv_string = libCore_gf_ConvertTextToString(StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Tooltip", lv_itPlayer)));
            lv_string = StringReplaceWord(lv_string, "option=\"player\"", lv_playerAsString, c_stringReplaceAll, c_stringNoCase);
            libCore_gv_talentData[lv_itTalentIndex].lv_buttonTooltipText[lv_itPlayer] = StringToText(lv_string);
        }
        if ((CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "TooltipCooldownOverrideText", c_playerAny) != "")) {
            libCore_gv_talentData[lv_itTalentIndex].lv_buttonInfoText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "TooltipCooldownOverrideText", c_playerAny));
        }
        else {
            libCore_gv_talentData[lv_itTalentIndex].lv_buttonInfoText = null;
        }
        libCore_gv_talentData[lv_itTalentIndex].lv_prerequisiteTalentIndex = MaxI(0, libNtve_gf_UserDataInstanceGetIndex("Talent", UserDataGetUserInstance("Talent", lv_itInstance, "PrerequisiteTalent", 1)));
        libCore_gv_talentData[lv_itTalentIndex].lv_isQuest = (UserDataGetInt("GenericTrueFalse", UserDataGetUserInstance("Talent", lv_itInstance, "QuestDataIsQuest", 1), "True/Flase", 1) == 1);
        if ((libCore_gv_talentData[lv_itTalentIndex].lv_isQuest == true)) {
            libCore_gv_talentData[lv_itTalentIndex].lv_questTokenCounterBehavior = UserDataGetGameLink("Talent", lv_itInstance, "QuestDataTokenCounterBehavior", 1);
            if ((libCore_gv_talentData[lv_itTalentIndex].lv_questTokenCounterBehavior == "")) {
                TextExpressionSetToken("Param/Expression/lib_Core_0B1B3E5A", "A", IntToText(lv_itTalentIndex));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_0B1B3E5A"), true);
                libCore_gv_talentData[lv_itTalentIndex].lv_questTokenCounterBehavior = null;
            }
            else if ((CatalogEntryIsValid(c_gameCatalogBehavior, libCore_gv_talentData[lv_itTalentIndex].lv_questTokenCounterBehavior) == false)) {
                TextExpressionSetToken("Param/Expression/lib_Core_82C8E4B3", "A", IntToText(lv_itTalentIndex));
                TextExpressionSetToken("Param/Expression/lib_Core_82C8E4B3", "B", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, libCore_gv_talentData[lv_itTalentIndex].lv_questTokenCounterBehavior, "Name", c_playerAny)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_82C8E4B3"), true);
                libCore_gv_talentData[lv_itTalentIndex].lv_questTokenCounterBehavior = null;
            }
        }

        libCore_gv_talentData[lv_itTalentIndex].lv_item = UserDataGetGameLink("Talent", lv_itInstance, "TalentItem", 1);
        if ((libCore_gv_talentData[lv_itTalentIndex].lv_item == "")) {
            libCore_gv_talentData[lv_itTalentIndex].lv_item = null;
        }
        else {
            if ((CatalogEntryIsValid(c_gameCatalogUnit, libCore_gv_talentData[lv_itTalentIndex].lv_item) == false)) {
                TextExpressionSetToken("Param/Expression/lib_Core_1E4E6090", "A", IntToText(lv_itTalentIndex));
                TextExpressionSetToken("Param/Expression/lib_Core_1E4E6090", "B", StringToText(CatalogFieldValueGet(c_gameCatalogUnit, libCore_gv_talentData[lv_itTalentIndex].lv_item, "Name", c_playerAny)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_1E4E6090"), true);
                libCore_gv_talentData[lv_itTalentIndex].lv_item = null;
            }

        }
        libCore_gv_talentData[lv_itTalentIndex].lv_effectModification = UserDataGetGameLink("Talent", lv_itInstance, "TalentEffectModification", 1);
        if ((libCore_gv_talentData[lv_itTalentIndex].lv_effectModification == "")) {
            libCore_gv_talentData[lv_itTalentIndex].lv_effectModification = null;
        }
        else {
            if ((CatalogEntryIsValid(c_gameCatalogEffect, libCore_gv_talentData[lv_itTalentIndex].lv_effectModification) == false)) {
                TextExpressionSetToken("Param/Expression/lib_Core_57046B6F", "A", IntToText(lv_itTalentIndex));
                TextExpressionSetToken("Param/Expression/lib_Core_57046B6F", "B", StringToText(CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_talentData[lv_itTalentIndex].lv_effectModification, "Name", c_playerAny)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_57046B6F"), true);
                libCore_gv_talentData[lv_itTalentIndex].lv_effectModification = null;
            }
            else {
                if ((CatalogEntryScope(c_gameCatalogEffect, libCore_gv_talentData[lv_itTalentIndex].lv_effectModification) != "CEffectModifyPlayer")) {
                    TextExpressionSetToken("Param/Expression/lib_Core_7083F151", "A", IntToText(lv_itTalentIndex));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7083F151"), true);
                }

            }
        }
        libCore_gv_talentData[lv_itTalentIndex].lv_effectOnCreation = UserDataGetGameLink("Talent", lv_itInstance, "TalentEffectOnCreation", 1);
        if ((libCore_gv_talentData[lv_itTalentIndex].lv_effectOnCreation == "")) {
            libCore_gv_talentData[lv_itTalentIndex].lv_effectOnCreation = null;
        }
        else {
            if ((CatalogEntryIsValid(c_gameCatalogEffect, libCore_gv_talentData[lv_itTalentIndex].lv_effectOnCreation) == false)) {
                TextExpressionSetToken("Param/Expression/lib_Core_4199C5FF", "A", IntToText(lv_itTalentIndex));
                TextExpressionSetToken("Param/Expression/lib_Core_4199C5FF", "B", StringToText(CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_talentData[lv_itTalentIndex].lv_effectOnCreation, "Name", c_playerAny)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_4199C5FF"), true);
                libCore_gv_talentData[lv_itTalentIndex].lv_effectOnCreation = null;
            }

        }
        libCore_gv_talentData[lv_itTalentIndex].lv_effectOnRemove = UserDataGetGameLink("Talent", lv_itInstance, "TalentEffectOnRemove", 1);
        if ((libCore_gv_talentData[lv_itTalentIndex].lv_effectOnRemove == "")) {
            libCore_gv_talentData[lv_itTalentIndex].lv_effectOnRemove = null;
        }
        else {
            if ((CatalogEntryIsValid(c_gameCatalogEffect, libCore_gv_talentData[lv_itTalentIndex].lv_effectOnRemove) == false)) {
                TextExpressionSetToken("Param/Expression/lib_Core_EB753959", "A", IntToText(lv_itTalentIndex));
                TextExpressionSetToken("Param/Expression/lib_Core_EB753959", "B", StringToText(CatalogFieldValueGet(c_gameCatalogEffect, libCore_gv_talentData[lv_itTalentIndex].lv_effectOnRemove, "Name", c_playerAny)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_EB753959"), true);
                libCore_gv_talentData[lv_itTalentIndex].lv_effectOnRemove = null;
            }

        }
        lv_itPlayerResponse = 1;
        for ( ; ( (auto40BB86CE_ai >= 0 && lv_itPlayerResponse <= auto40BB86CE_ae) || (auto40BB86CE_ai < 0 && lv_itPlayerResponse >= auto40BB86CE_ae) ) ; lv_itPlayerResponse += auto40BB86CE_ai ) {
            libCore_gv_talentData[lv_itTalentIndex].lv_playerResponse[lv_itPlayerResponse] = UserDataGetGameLink("Talent", lv_itInstance, "TalentPlayerResponse", lv_itPlayerResponse);
            if ((libCore_gv_talentData[lv_itTalentIndex].lv_playerResponse[lv_itPlayerResponse] == "")) {
                libCore_gv_talentData[lv_itTalentIndex].lv_playerResponse[lv_itPlayerResponse] = null;
            }
            else {
                if ((CatalogEntryIsValid(c_gameCatalogPlayerResponse, libCore_gv_talentData[lv_itTalentIndex].lv_playerResponse[lv_itPlayerResponse]) == false)) {
                    TextExpressionSetToken("Param/Expression/lib_Core_E3698FAD", "A", IntToText(lv_itTalentIndex));
                    TextExpressionSetToken("Param/Expression/lib_Core_E3698FAD", "B", StringToText((libCore_gv_talentData[lv_itTalentIndex].lv_playerResponse[lv_itPlayerResponse])));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_E3698FAD"), true);
                    libCore_gv_talentData[lv_itTalentIndex].lv_playerResponse[lv_itPlayerResponse] = null;
                }
                else {
                    libCore_gv_talentData[lv_itTalentIndex].lv_playerResponseCount += 1;
                }
            }
        }
        lv_itBehavior = 1;
        for ( ; ( (autoAF451544_ai >= 0 && lv_itBehavior <= autoAF451544_ae) || (autoAF451544_ai < 0 && lv_itBehavior >= autoAF451544_ae) ) ; lv_itBehavior += autoAF451544_ai ) {
            if ((UserDataGetGameLink("Talent", lv_itInstance, "TalentBehavior", lv_itBehavior) != null)) {
                libCore_gv_talentData[lv_itTalentIndex].lv_behavior[lv_itBehavior] = UserDataGetGameLink("Talent", lv_itInstance, "TalentBehavior", lv_itBehavior);
            }

        }
        lv_itAdditionalTalent = 1;
        for ( ; ( (auto5E88B459_ai >= 0 && lv_itAdditionalTalent <= auto5E88B459_ae) || (auto5E88B459_ai < 0 && lv_itAdditionalTalent >= auto5E88B459_ae) ) ; lv_itAdditionalTalent += auto5E88B459_ai ) {
            libCore_gv_talentData[lv_itTalentIndex].lv_additionalTalentIndex[lv_itAdditionalTalent] = libNtve_gf_UserDataInstanceGetIndex("Talent", UserDataGetUserInstance("Talent", lv_itInstance, "TalentAdditionalTalent", lv_itAdditionalTalent));
            if ((libCore_gv_talentData[lv_itTalentIndex].lv_additionalTalentIndex[lv_itAdditionalTalent] < 1)) {
                libCore_gv_talentData[lv_itTalentIndex].lv_additionalTalentIndex[lv_itAdditionalTalent] = 0;
            }

        }
        libCore_gv_talentData[lv_itTalentIndex].lv_talentType = UserDataGetUserInstance("Talent", lv_itInstance, "TalentType", 1);
        autoA4A3DBDB_val = libCore_gv_talentData[lv_itTalentIndex].lv_talentType;
        if (autoA4A3DBDB_val == "Active") {
            libCore_gv_talentData[lv_itTalentIndex].lv_buttonHotkey = libCore_gf_AbilityTalentHotkeyTextExpanded("Inventory (Active)");
        }
        else if (autoA4A3DBDB_val == "Passive") {
            libCore_gv_talentData[lv_itTalentIndex].lv_buttonHotkey = libCore_gf_AbilityTalentHotkeyTextExpanded("Passive");
        }
        else {
            lv_abilitySlot = UserDataGetUserInstance("Ability", UserDataGetUserInstance("Talent", lv_itInstance, "AbilityHotkey", 1), "Slot", 1);
            libCore_gv_talentData[lv_itTalentIndex].lv_abilityIndex = libNtve_gf_UserDataInstanceGetIndex("Ability", UserDataGetUserInstance("Talent", lv_itInstance, "AbilityHotkey", 1));
            libCore_gv_talentData[lv_itTalentIndex].lv_buttonHotkey = libCore_gf_AbilityTalentHotkeyTextExpanded(lv_abilitySlot);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeTalents_Init () {
    libCore_gt_DataInitializeTalents = TriggerCreate("libCore_gt_DataInitializeTalents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats Behavior Data - Initialize
//--------------------------------------------------------------------------------------------------
bool libCore_gt_UnitStatsBehaviorDataInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behaviorEntry;

    // Automatic Variable Declarations
    int autoC82762D5_catalog;
    int autoC82762D5_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC82762D5_catalog = c_gameCatalogBehavior;
    autoC82762D5_i = 1;
    for ( ; autoC82762D5_i <= CatalogEntryCount(c_gameCatalogBehavior) ; autoC82762D5_i += 1 ) {
        lv_behaviorEntry = CatalogEntryGet(autoC82762D5_catalog, autoC82762D5_i);
        if ((UnitBehaviorHasFlag(lv_behaviorEntry, c_unitBehaviorFlagUser1) == true)) {
            libCore_gf_UnitStatsBehaviorDataInitializeBehavior(lv_behaviorEntry);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_UnitStatsBehaviorDataInitialize_Init () {
    libCore_gt_UnitStatsBehaviorDataInitialize = TriggerCreate("libCore_gt_UnitStatsBehaviorDataInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - XP - Initialize Level XP Values
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataXPInitializeLevelXPValues_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itLevel;
    fixed lv_totalXP;

    // Automatic Variable Declarations
    const int autoF66120F4_ae = libCore_gv_bALMaxLevel;
    const int autoF66120F4_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itLevel = 1;
    for ( ; ( (autoF66120F4_ai >= 0 && lv_itLevel <= autoF66120F4_ae) || (autoF66120F4_ai < 0 && lv_itLevel >= autoF66120F4_ae) ) ; lv_itLevel += autoF66120F4_ai ) {
        lv_totalXP += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, ("StandardHeroXPVeterancy"), "VeterancyLevelArray[" + IntToString((lv_itLevel-1)) + "].MinVeterancyXP", c_playerAny);
        libCore_gv_dataXPLevelXPValues[lv_itLevel] = lv_totalXP;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataXPInitializeLevelXPValues_Init () {
    libCore_gt_DataXPInitializeLevelXPValues = TriggerCreate("libCore_gt_DataXPInitializeLevelXPValues_Func");
}

void libCore_InitTriggers () {
    libCore_gt_InitializeCommandersMod_Init();
    libCore_gt_InitializeGameMod_Init();
    libCore_gt_InitializeCoreMod_Init();
    libCore_gt_InitializeData_Init();
    libCore_gt_InitializeMiscStuff_Init();
    libCore_gt_InitializeDataMiningAndDebugOutput_Init();
    libCore_gt_DataInitializeAbilities_Init();
    libCore_gt_DataInitializeAnnouncerVOData2_Init();
    libCore_gt_DataHeroesDeathTimes_Init();
    libCore_gt_DataInitializeHeroes_Init();
    libCore_gt_DataHeroVOMapDataFields_Init();
    libCore_gt_DataHeroVOInitializeHeroVOData_Init();
    libCore_gt_DataInitializeMountData_Init();
    libCore_gt_DataInitializeSkinData_Init();
    libCore_gt_DataInitializeTalents_Init();
    libCore_gt_UnitStatsBehaviorDataInitialize_Init();
    libCore_gt_DataXPInitializeLevelXPValues_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_InitLib_completed = false;

void libCore_InitLib () {
    if (libCore_InitLib_completed) {
        return;
    }

    libCore_InitLib_completed = true;

    libCore_InitLibraries();
    libCore_InitVariables();
    libCore_InitTriggers();
}

include "LibGame"
include "LibMeta"
include "LibSprt"
include "LibMapM"
include "LibSond"
include "LibUIUI"

