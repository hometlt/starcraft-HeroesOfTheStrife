include "LibCore_h"

//--------------------------------------------------------------------------------------------------
// Library: Game
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libGame_ge_GameDataRegion_OfflineTest = 0;
const int libGame_ge_GameDataRegion_EU = 1;
const int libGame_ge_GameDataRegion_NA = 2;
const int libGame_ge_GameDataRegion_KR = 3;
string libGame_ge_GameDataRegion_Ident (int lp_val);
const int libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalHero = 0;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalMerc = 1;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalMinion = 2;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalMonster = 3;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalStructure = 4;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorPhysicalSummon = 5;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorSpellHero = 6;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorSpellMerc = 7;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorSpellMinion = 8;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorSpellMonster = 9;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorSpellStructure = 10;
const int libGame_ge_CustomValueIndexes_UnitStatsArmorSpellSummon = 11;
const int libGame_ge_CustomValueIndexes_UnitStatsHealingReceived = 12;
const int libGame_ge_CustomValueIndexes_UnitStatsHealingDealt = 13;
const int libGame_ge_CustomValueIndexes_UnitStatsDamagePhysical = 14;
const int libGame_ge_CustomValueIndexes_UnitStatsDamageSpell = 15;
const int libGame_ge_CustomValueIndexes_UnitStatsRelentless = 16;
const int libGame_ge_CustomValueIndexes_UnitStatsLifestealPhysical = 17;
const int libGame_ge_CustomValueIndexes_UnitStatsLifestealSpell = 18;
const int libGame_ge_CustomValueIndexes_UnusedIndex19 = 19;
const int libGame_ge_CustomValueIndexes_UnusedIndex20 = 20;
const int libGame_ge_CustomValueIndexes_UnusedIndex21 = 21;
const int libGame_ge_CustomValueIndexes_UnusedIndex22 = 22;
const int libGame_ge_CustomValueIndexes_UnusedIndex23 = 23;
const int libGame_ge_CustomValueIndexes_UnusedIndex24 = 24;
const int libGame_ge_CustomValueIndexes_UnusedIndex25 = 25;
const int libGame_ge_CustomValueIndexes_UnusedIndex26 = 26;
const int libGame_ge_CustomValueIndexes_UnusedIndex27 = 27;
const int libGame_ge_CustomValueIndexes_UnusedIndex28 = 28;
const int libGame_ge_CustomValueIndexes_UnusedIndex29 = 29;
const int libGame_ge_CustomValueIndexes_UnusedIndex30 = 30;
const int libGame_ge_CustomValueIndexes_UnusedIndex31 = 31;
const int libGame_ge_CustomValueIndexes_MinionIndex = 32;
const int libGame_ge_CustomValueIndexes_TownIndex = 33;
const int libGame_ge_CustomValueIndexes_TownStructureIndex = 34;
const int libGame_ge_CustomValueIndexes_WatchTowerIndex = 35;
const int libGame_ge_CustomValueIndexes_JungleDefenderCreepCampIndex = 36;
const int libGame_ge_CustomValueIndexes_JungleLanerCreepCampIndex = 37;
const int libGame_ge_CustomValueIndexes_JungleDefenderAIIndex = 38;
const int libGame_ge_CustomValueIndexes_XPBuffAmount = 39;
const int libGame_ge_UnitStatsDamageType_Physical = 0;
const int libGame_ge_UnitStatsDamageType_Spell = 1;
const int libGame_ge_UnitStatsPowerType_DamagePhysical = 0;
const int libGame_ge_UnitStatsPowerType_DamageSpell = 1;
const int libGame_ge_UnitStatsPowerType_HealingDealt = 2;
const int libGame_ge_AnnouncemetPriorities_Critical = 0;
const int libGame_ge_AnnouncemetPriorities_High = 1;
const int libGame_ge_AnnouncemetPriorities_Normal = 2;
const int libGame_ge_AnnouncemetPriorities_Low = 3;
const int libGame_ge_BehaviorCategories_None = 0;
const int libGame_ge_BehaviorCategories_Avoidance = 1;
const int libGame_ge_BehaviorCategories_BuffSpellPower = 2;
const int libGame_ge_BehaviorCategories_DamageReduction = 3;
const int libGame_ge_BehaviorCategories_DebuffSpellPower = 4;
const int libGame_ge_BehaviorCategories_Dodge = 5;
const int libGame_ge_BehaviorCategories_HealReduction = 6;
const int libGame_ge_BehaviorCategories_HideNameplate = 7;
const int libGame_ge_BehaviorCategories_HideStatusFrame = 8;
const int libGame_ge_BehaviorCategories_HostileStasisRemoved = 9;
const int libGame_ge_BehaviorCategories_ImmunedToAllyDisplacement = 10;
const int libGame_ge_BehaviorCategories_ImmunedToEnemyDisplacement = 11;
const int libGame_ge_BehaviorCategories_KnockedOut = 12;
const int libGame_ge_BehaviorCategories_MindControl = 13;
const int libGame_ge_BehaviorCategories_PermanentMaxHealth = 14;
const int libGame_ge_BehaviorCategories_PersistentCloak = 15;
const int libGame_ge_BehaviorCategories_PseudoStructure = 16;
const int libGame_ge_BehaviorCategories_SpecialDeathState = 17;
const int libGame_ge_BehaviorCategories_StackingComboMarker = 18;
const int libGame_ge_BehaviorCategories_SuppressVisibility = 19;
const int libGame_ge_BehaviorCategories_Taunt = 20;
const int libGame_ge_BehaviorCategories_TemporaryCloak = 21;
const int libGame_ge_BehaviorCategories_UnitRemoved = 22;
const int libGame_ge_BehaviorCategories_Unreducible = 23;
const int libGame_ge_BehaviorCategories_UnrevealableCloak = 24;
const int libGame_ge_BehaviorCategories_VisionRemoval = 25;
string libGame_ge_BehaviorCategories_Ident (int lp_val);
const int libGame_ge_EffectHistoryAbilityTalentWeapon_Unknown = 0;
const int libGame_ge_EffectHistoryAbilityTalentWeapon_Ability = 1;
const int libGame_ge_EffectHistoryAbilityTalentWeapon_Talent = 2;
const int libGame_ge_EffectHistoryAbilityTalentWeapon_Weapon = 3;
string libGame_ge_EffectHistoryAbilityTalentWeapon_Ident (int lp_val);
const int libGame_ge_EffectHistoryDamagedOrHealed_Unknown = 0;
const int libGame_ge_EffectHistoryDamagedOrHealed_Damaged = 1;
const int libGame_ge_EffectHistoryDamagedOrHealed_Healed = 2;
string libGame_ge_EffectHistoryDamagedOrHealed_Ident (int lp_val);
const int libGame_ge_EncouragementStatCalloutThresholds_Null = 0;
const int libGame_ge_EncouragementStatCalloutThresholds_Display = 1;
const int libGame_ge_EncouragementStatCalloutThresholds_GreatJob = 2;
const int libGame_ge_EncouragementStatCalloutThresholds_Amazing = 3;
const int libGame_ge_EncouragementStatCalloutThresholds_Count = 4;
const int libGame_ge_EncouragementStatCallouts_Null = 0;
const int libGame_ge_EncouragementStatCallouts_TimeSpentAlive = 1;
const int libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered = 2;
const int libGame_ge_EncouragementStatCallouts_Takedowns = 3;
const int libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes = 4;
const int libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes = 5;
const int libGame_ge_EncouragementStatCallouts_MapTributesCollected = 6;
const int libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn = 7;
const int libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures = 8;
const int libGame_ge_EncouragementStatCallouts_MapSkullsCollected = 9;
const int libGame_ge_EncouragementStatCallouts_MercCampsCaptured = 10;
const int libGame_ge_EncouragementStatCallouts_DamageDoneToTowns = 11;
const int libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes = 12;
const int libGame_ge_EncouragementStatCallouts_Count = 13;
string libGame_ge_EncouragementStatCallouts_Ident (int lp_val);
const int libGame_ge_EncouragementDeathTipsNames_Null = 0;
const int libGame_ge_EncouragementDeathTipsNames_Gangups = 1;
const int libGame_ge_EncouragementDeathTipsNames_FollowMinions = 2;
const int libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns = 3;
const int libGame_ge_EncouragementDeathTipsNames_UseYourAbilities = 4;
const int libGame_ge_EncouragementDeathTipsNames_Moonwell = 5;
const int libGame_ge_EncouragementDeathTipsNames_Retreat = 6;
const int libGame_ge_EncouragementDeathTipsNames_TrainTalents = 7;
const int libGame_ge_EncouragementDeathTipsNames_Mount = 8;
const int libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath = 9;
const int libGame_ge_EncouragementDeathTipsNames_Count = 10;
string libGame_ge_EncouragementDeathTipsNames_Ident (int lp_val);
const int libGame_ge_HeroDeathRespawnOption_NormalRespawn = 0;
const int libGame_ge_HeroDeathRespawnOption_NoRespawn = 1;
const int libGame_ge_HeroDeathKillStingerQueueType_Ally = 0;
const int libGame_ge_HeroDeathKillStingerQueueType_Enemy = 1;
const int libGame_ge_LaneNamePreset_Top = 0;
const int libGame_ge_LaneNamePreset_Middle = 1;
const int libGame_ge_LaneNamePreset_Bottom = 2;
string libGame_ge_LaneNamePreset_Ident (int lp_val);
const int libGame_ge_QuestTokenMaximumTokenCountType_Limited = 0;
const int libGame_ge_QuestTokenMaximumTokenCountType_LimitedByPlayer = 1;
const int libGame_ge_QuestTokenMaximumTokenCountType_Unlimited = 2;
const int libGame_ge_QuestTokenMaximumTokenCountType_UnlimitedWithTargetCount = 3;
const int libGame_ge_BehaviorsQuestTalentHeroBasic_None = 0;
const int libGame_ge_BehaviorsQuestTalentHeroBasic_Talent = 1;
const int libGame_ge_BehaviorsQuestTalentHeroBasic_HeroBasic = 2;
const int libGame_ge_PlayerStatusCore_Unused = 0;
const int libGame_ge_PlayerStatusCore_ChoosingaHero = 1;
const int libGame_ge_PlayerStatusCore_Playing = 2;
const int libGame_ge_PlayerStatusCore_LefttheGame = 3;
const int libGame_ge_Faction_Neutral = 0;
const int libGame_ge_Faction_Order = 1;
const int libGame_ge_Faction_Chaos = 2;
const int libGame_ge_Faction_HostileCreeps = 3;
const int libGame_ge_XPSource_Debug = 0;
const int libGame_ge_XPSource_Trickle = 1;
const int libGame_ge_XPSource_Minion = 2;
const int libGame_ge_XPSource_Creep = 3;
const int libGame_ge_XPSource_Hero = 4;
const int libGame_ge_XPSource_Structure = 5;
const int libGame_ge_TownStates_Idle = 0;
const int libGame_ge_TownStates_Fighting = 1;
const int libGame_ge_TownStates_Leashing = 2;
const int libGame_ge_TownStates_Dead = 3;
const int libGame_ge_TownStructureTypes_None = 0;
const int libGame_ge_TownStructureTypes_TownHall = 1;
const int libGame_ge_TownStructureTypes_Wall = 2;
const int libGame_ge_TownStructureTypes_Gate = 3;
const int libGame_ge_TownStructureTypes_CannonTower = 4;
const int libGame_ge_TownStructureTypes_Moonwell = 5;
const int libGame_ge_TownStructureTypes_Core = 6;
const int libGame_ge_TownHallTypes_None = 0;
const int libGame_ge_TownHallTypes_FrontTown = 1;
const int libGame_ge_TownHallTypes_BackTown = 2;

// Constants
const int libGame_gv_teamOrderIndex_C = 1;
const int libGame_gv_teamChaosIndex_C = 2;
const int libGame_gv_unitStatsArmorValueMin = -25;
const int libGame_gv_unitStatsArmorValueMax = 75;
const int libGame_gv_unitStatsHealingTakenMaxValuePositive = 200;
const int libGame_gv_unitStatsHealingTakenMaxValueNegative = 100;
const int libGame_gv_unitStatsHealingTakenTotalValue = 300;
const int libGame_gv_unitStatsPowerMaxValuePositive = 200;
const int libGame_gv_unitStatsPowerMaxValueNegative = -99;
const int libGame_gv_cameraBound_MaxCount_C = 10;
const int libGame_gv_announcement_QueueMaxCount_C = 32;
const fixed libGame_gv_announcement_CoreTimerDuration_C = 2.0;
const fixed libGame_gv_announcement_QuickSoundOnlyTimerDuration_C = 1.625;
const fixed libGame_gv_announcement_KillAnnouncementDuration_C = 1.5;
const fixed libGame_gv_announcement_LongAnnouncementDuration_C = 4.0;
const fixed libGame_gv_announcement_NoDelay_C = 0.0625;
const fixed libGame_gv_announcement_KillAnnouncementTimerTreshold_C = 0.25;
const fixed libGame_gv_announcement_HeroTakedownVODelay_C = 2.0;
const int libGame_gv_announcement_MinimumLevelForTeamKillHeroVO_C = 8;
const int libGame_gv_behaviorCategoriesMaximumCategoryCount_C = 64;
const int libGame_gv_behaviorCategoriesMaximumBehaviorsPerCategory = 128;
const int libGame_gv_capturePointMaxCount_C = 15;
const fixed libGame_gv_deathRecap_MaxTimeElapsed_C = 9.9;
const int libGame_gv_deathRecap_MaxEffectsInHistroy_C = 30;
const int libGame_gv_deathRecap_MaxEffectsBars_C = 10;
const int libGame_gv_deathRecap_MaxMaxDamagersSort_C = 6;
const int libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C = 8;
const int libGame_gv_deathRecap_MaxMaxDamagers_C = 3;
const int libGame_gv_deathRecap_MaxMaxDamageAbils_C = 3;
const int libGame_gv_deathRecap_MaxEffectCombinePerSlot_C = 5;
const fixed libGame_gv_deathRecap_MaxEffectCombineTimeElapsed_C = 0.65;
const int libGame_gv_deathRecap_SpecialDamageEffectsCount_C = 1;
const int libGame_gv_effectHistoryMaxEffectsInHistory = 30;
const int libGame_gv_effectHistoryExistedEffectMaxAmount_C = 32;
const string libGame_gv_eventID_BehaviorCategories_C = "BehaviorCategories";
const string libGame_gv_eventParam_BehaviorCategories_Unit_C = "Unit";
const string libGame_gv_eventParam_BehaviorCategories_Behavior_C = "Behavior";
const string libGame_gv_eventParam_BehaviorCategories_Category_C = "Category";
const string libGame_gv_eventParam_BehaviorCategories_Change_C = "Change";
const string libGame_gv_eventID_CameraPannedFromScript_C = "Camera Panned From Script";
const string libGame_gv_eventParam_CameraPannedFromScript_Player_C = "Player";
const string libGame_gv_eventParam_CameraPannedFromScript_Point_C = "Point";
const string libGame_gv_eventID_CapturePointChangesOwner_C = "CapturePointChangesOwner";
const string libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C = "Capture Point Index";
const string libGame_gv_eventParam_CapturePointChangesOwner_AIOwner_C = "AIOwner";
const string libGame_gv_eventParam_CapturePointChangesOwner_PlayerOwner_C = "PlayerOwner";
const string libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C = "CapturingPlayers";
const string libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C = "HasMercLordTalent";
const string libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C = "CapturePointBecomesFullyOverCaptured";
const string libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C = "Capture Point Index";
const string libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_HasMercLordTalent_C = "Has Merc Lord Talent";
const string libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C = "JungleDefenderAIDefendersBeginFighting";
const string libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C = "Index";
const string libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C = "JungleDefenderAIDefendersEndFighting";
const string libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C = "Index";
const string libGame_gv_eventID_JungleDefenderAIDefenderKilled_C = "JungleDefenderAIDefenderKilled";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C = "Index";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C = "Unit";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingUnit_C = "Killing Unit";
const string libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C = "JungleDefenderAIAllDefendersKilled";
const string libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C = "Index";
const string libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingUnit_C = "Killing Unit";
const string libGame_gv_eventID_MetaDataDataBaseInitialization_C = "MetaDataDataBaseInitialization";
const string libGame_gv_eventID_GateOpenTimerStarted_C = "GateOpenTimerStart";
const string libGame_gv_eventID_TownDataInitialized_C = "TownDataInitialized";
const string libGame_gv_eventID_GameOverEvent_C = "GameOverEvent";
const string libGame_gv_eventID_HeroExitedTransport_C = "HeroExitedTransport";
const string libGame_gv_eventParam_HeroExitedTransport_Player_C = "PlayerExited";
const string libGame_gv_eventParam_HeroExitedTransport_Transport_C = "Transport";
const string libGame_gv_eventID_HeroEnteredTransport_C = "HeroEnteredTransport";
const string libGame_gv_eventParam_HeroEnteredTransport_Player_C = "PlayerEntering";
const string libGame_gv_eventParam_HeroEnteredTransport_Transport_C = "Transport";
const string libGame_gv_eventParam_HeroEnteredTransport_UnitEntered_C = "Cargo Unit Entered";
const string libGame_gv_eventID_HeroLifesteal_C = "HeroLifesteal";
const string libGame_gv_eventParam_HeroLifesteal_Hero_C = "Hero";
const string libGame_gv_eventParam_HeroLifesteal_Amount_C = "Amount";
const string libGame_gv_eventParam_HeroLifesteal_DamagingEffect_C = "DamagingEffect";
const string libGame_gv_eventID_HeroHealPrevented_C = "HeroHealPrevented";
const string libGame_gv_eventID_HeroHealPrevented_TargetUnit_C = "TargetUnit";
const string libGame_gv_eventID_HeroHealPrevented_Amount_C = "Amount";
const string libGame_gv_eventID_HeroHealPrevented_Buff_C = "Effect";
const string libGame_gv_eventID_HeroHealPrevented_Hero_C = "Hero";
const string libGame_gv_eventID_HeroLevelUp_C = "HeroLevelUp";
const string libGame_gv_eventParam_HeroLevelUp_Player_C = "Player";
const string libGame_gv_eventID_HeroParticipatedInNPCTakedown_C = "HeroParticipatedInNPCTakedown";
const string libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C = "DeadUnit";
const string libGame_gv_eventID_HeroParticipatedInTakedown_C = "HeroParticipatedInTakedown";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_LastHitPlayer_C = "LastHitPlayer";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C = "PlayerKilled";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C = "HeroKilled";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilledPosition_C = "HeroKilledPosition";
const string libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C = "HeroWitnessedAlliedNPCDeath";
const string libGame_gv_eventID_HeroPortedBackToTown_C = "HeroPortedBackToTown";
const string libGame_gv_eventParam_HeroPortedBackToTown_Player_C = "Player";
const string libGame_gv_eventParam_HeroPortedBackToTown_Unit_C = "Unit";
const string libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C = "SpecialCaseUnitParticipatedInNPCTakedown";
const string libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C = "PlayerParticipant";
const string libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C = "DeadUnit";
const string libGame_gv_eventID_HeroSpecialCaseMounting_C = "HeroSpecialCaseMounting";
const string libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C = "Player";
const string libGame_gv_eventID_HeroEntersSpecialDeathState_C = "HeroEntersSpecialDeathState";
const string libGame_gv_eventParam_HeroEntersSpecialDeathState_Hero_C = "Hero";
const string libGame_gv_eventID_HeroKilled_C = "HeroKilled";
const string libGame_gv_eventParam_HeroKilled_PlayerKilled_C = "PlayerKilled";
const string libGame_gv_eventParam_HeroKilled_PlayerKilling_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroKilled_KilledUnit_C = "KilledUnit";
const string libGame_gv_eventParam_HeroKilled_Location_C = "Location";
const string libGame_gv_eventID_HeroSpawn_C = "HeroSpawn";
const string libGame_gv_eventParam_HeroSpawn_Player_C = "Player";
const string libGame_gv_eventID_HeroRespawn_C = "HeroRespawn";
const string libGame_gv_eventParam_HeroRespawn_Player_C = "Player";
const string libGame_gv_eventParam_HeroRespawn_Hero_C = "Hero";
const string libGame_gv_eventID_RequestCustomRespawn_C = "RequestCustomRespawn";
const string libGame_gv_eventParam_RequestCustomRespawn_Player_C = "Player";
const string libGame_gv_eventParam_RequestCustomRespawn_RespawnMounted_C = "RespawnMounted";
const string libGame_gv_eventParam_RequestCustomRespawn_RespawnLocation_C = "RespawnLocation";
const string libGame_gv_eventParam_RequestCustomRespawn_RespawnHealthPercent_C = "RespawnHealthPercent";
const string libGame_gv_eventID_SpecialCaseTalentCooldownReset_C = "SpecialCaseTalentCooldownReset";
const string libGame_gv_eventParam_SpecialCaseTalentCooldownReset_Player_C = "Player";
const string libGame_gv_eventID_JungleCampSpawned_C = "JungleCampSpawned";
const string libGame_gv_eventParam_JungleCampSpawned_Camp_C = "Camp";
const string libGame_gv_eventID_JungleCampDefenderCreated_C = "JungleCampDefenderCreated";
const string libGame_gv_eventParam_JungleCampDefenderCreated_Unit_C = "Unit";
const string libGame_gv_eventID_JungleCampLanerCreated_C = "JungleCampLanerCreated";
const string libGame_gv_eventParam_JungleCampLanerCreated_C = "Unit";
const string libGame_gv_eventID_MercCampCaptured_C = "MercCampCaptured";
const string libGame_gv_eventParam_MercCampCaptured_Index_C = "Index";
const string libGame_gv_eventParam_MercCampCaptured_Owner_C = "Owner";
const string libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C = "CapturingPlayers";
const string libGame_gv_eventID_UnitCapturedMapObjective_C = "UnitCapturedMapObjective";
const string libGame_gv_eventParam_UnitCapturedMapObjective_Unit_C = "Unit That Captured Map Objective";
const string libGame_gv_eventID_MapTributeWarning_C = "MapTributeSpawnWarning";
const string libGame_gv_eventParam_MapTributeWarning_Position_C = "Position";
const string libGame_gv_eventID_MapTributeSpawned_C = "MapTributeSpawned";
const string libGame_gv_eventParam_MapTributeSpawned_Tribute_C = "Tribute";
const string libGame_gv_eventID_MapTributePickedup_C = "MapTributePickedUp";
const string libGame_gv_eventParam_MapTributePickedup_Player_C = "Player";
const string libGame_gv_eventParam_MapTributePickedup_Position_C = "Position";
const string libGame_gv_eventID_MapRavenCurseStarts_C = "MapRavenCurseStarts";
const string libGame_gv_eventParam_MapRavenCurseStarts_Team_C = "Team";
const string libGame_gv_eventID_MapRavenCurseEnds_C = "MapRavenCurseEnds";
const string libGame_gv_eventID_PlayerAchievesMultiKill_C = "PlayerAchievesMultiKill";
const string libGame_gv_eventParam_PlayerAchievesMultiKill_Player_C = "Player";
const string libGame_gv_eventParam_PlayerAchievesMultiKill_KillCount_C = "KillCount";
const string libGame_gv_eventID_QuestTokenCompleted_C = "QuestTokenCompleted";
const string libGame_gv_eventParam_QuestTokenCompleted_Behavior_C = "Behavior";
const string libGame_gv_eventParam_QuestTokenCompleted_Unit_C = "Unit";
const string libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C = "UnitEntersSafeZonePuntRegion";
const string libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C = "Unit";
const string libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C = "PuntPoint";
const string libGame_gv_eventID_UnitEntersSafeZoneRegion_C = "UnitEntersSafeZoneRegion";
const string libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C = "Unit";
const string libGame_gv_eventID_UnitExitsSafeZoneRegion_C = "UnitExitsSafeZoneRegion";
const string libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C = "Unit";
const string libGame_gv_eventID_AnnouncerVOInitiated_C = "Announcer VO Initiated";
const string libGame_gv_eventParam_AnnouncerVOInitiated_Event_C = "Event";
const string libGame_gv_eventParam_AnnouncerVOInitiated_Player_C = "Player";
const string libGame_gv_eventParam_AnnouncerVOInitiated_Sound_C = "Sound";
const string libGame_gv_eventID_PlayerChooseTalent_C = "PlayerChooseTalent";
const string libGame_gv_eventParam_PlayerChooseTalent_Player_C = "Player";
const string libGame_gv_eventParam_PlayerChooseTalent_TalentTier_C = "TalentTier";
const string libGame_gv_eventParam_PlayerChooseTalent_TalentColumn_C = "TalentColumn";
const string libGame_gv_eventParam_PlayerChooseTalent_TalentIndex_C = "TalentIndex";
const string libGame_gv_eventParam_PlayerChooseTalent_TalentLink_C = "TalentLink";
const string libGame_gv_eventID_PlayerSelectPrepickedTalent_C = "PlayerSelectPrepickedTalent";
const string libGame_gv_eventParam_PlayerSelectPrepickedTalent_Player_C = "Player";
const string libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentTier_C = "TalentTier";
const string libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentColumn_C = "TalentColumn";
const string libGame_gv_eventParam_PlayerSelectPrepickedTalent_TalentIndex_C = "TalentIndex";
const string libGame_gv_eventID_TeamLevelUp_C = "TeamLevelUp";
const string libGame_gv_eventParam_TeamLevelUp_Team_C = "Team";
const int libGame_gv_encouragement_NumberOfStatCalloutThresholds_C = 3;
const int libGame_gv_encouragement_NumberOfStatCallouts_C = 12;
const fixed libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C = 2.0;
const fixed libGame_gv_encouragement_DeathTipNearbyScanRadius_C = 10.0;
const fixed libGame_gv_encouragement_DeathTipNearbyHeroesTimeThreshold_C = 3.0;
const fixed libGame_gv_encouragement_DeathTipNearbyMinionsTimeThreshold_C = 1.5;
const fixed libGame_gv_encouragement_DeathTipEnemyMinionPercentDamageThreshold_C = 0.2;
const fixed libGame_gv_encouragement_DeathTipRecentHeroKillTimeout_C = 5.0;
const fixed libGame_gv_encouragement_DeathTipRecentStructureDamageTimeout_C = 3.0;
const int libGame_gv_encouragement_NumberOfDeathTips_C = 9;
const fixed libGame_gv_encouragement_PeriodicUpdateFrequency_C = 0.0625;
const fixed libGame_gv_encouragement_LowHealthPercentThreshold_C = 65.0;
const fixed libGame_gv_encouragement_LowManaPercentThreshold_C = 45.0;
const fixed libGame_gv_encouragement_SuperLowHealthPercentThreshold_C = 30.0;
const fixed libGame_gv_encouragement_MoonwellNearbyRangeThreshold_C = 35.0;
const int libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C = 10;
const fixed libGame_gv_encouragement_MountTipThresholdDistance_C = 30.0;
const int libGame_gv_encouragement_DeathTipMaxDisplayCount_C = 5;
const int libGame_gv_encouragement_DeathTipGamesPlayedThreshold_C = 40;
const fixed libGame_gv_heroSpawnDelay_C = 2.0;
const fixed libGame_gv_individualHeroSpawnMiniDelay_C = 0.5;
const fixed libGame_gv_gameOverCameraPanTime_C = 2.0;
const fixed libGame_gv_gameOverCoreAnimationWaitTime_C = 5.0;
const fixed libGame_gv_hallOfStormsKnockbackLaunchDistance = 12.0;
const fixed libGame_gv_heroDeathActionCamActivationDelay2 = 1.0;
const fixed libGame_gv_heroDeathMultikillTimeoutDuration2 = 8.0;
const fixed libGame_gv_heroDeathTeamKilledVODelay = 4.0;
const fixed libGame_gv_heroDeathRespawnCueSoundTiming = 2.0;
const fixed libGame_gv_heroDeathActionCamActivationDelay = 1.0;
const fixed libGame_gv_heroDeathMultikillTimeoutDuration = 8.0;
const fixed libGame_gv_heroDeathParticipatedTalentPointsModificator_C = 1.0;
const fixed libGame_gv_heroDeathNonParticipatedTalentPointsModificator_C = 0.2;
const fixed libGame_gv_heroDeathToastDisplayTime = 5.0;
const fixed libGame_gv_heroDeathKillStingerQueueTimerDuration = 0.125;
const int libGame_gv_mapLanesCountMax = 3;
const int libGame_gv_mapPointsCountMax = 30;
const int libGame_gv_laneMaxCount_C = 10;
const int libGame_gv_laneCustomLane = -1;
const fixed libGame_gv_teamAbandonedTheGameTimerDuration_C = 20.0;
const fixed libGame_gv_playerLeftAnnouncementTimerDuration_C = 5.0;
const int libGame_gv_loadoutMaximumLoadoutsPerHero = 3;
const int libGame_gv_loadoutMaximumCharsInName = 28;
const int libGame_gv_minionPeriodicCatapultsWavePeriod_C = 3;
const int libGame_gv_moonwellMaxMoonwellCount = 12;
const string libGame_gv_mountModelActor = "MountModel";
const fixed libGame_gv_bALScalingTimerDuration = 60.0;
const fixed libGame_gv_gameScore_HeroTakedownMultiplier = 2.0;
const fixed libGame_gv_gameScore_NPCTakedownMultiplier = 0.5;
const fixed libGame_gv_gameScore_HealScoreMultiplier = 0.05;
const int libGame_gv_scoreValues_MaxHeroSpecificValues_C = 100;
const int libGame_gv_teamfightTrackingCount = 2;
const fixed libGame_gv_teamfightTrackingRadius = 10.0;
const fixed libGame_gv_towerCoreUnderAttackAlertMinTime = 15.0;
const fixed libGame_gv_towerCoreUnderAttackAlertRepeatTime = 30.0;
const fixed libGame_gv_towerCoreUnderAttackScanPeriod = 1.0;
const fixed libGame_gv_towerCoreUnderAttackScanRange = 20.0;
const int libGame_gv_townMaxTownCount = 30;
const int libGame_gv_townMaxStructureCount = 63;
const int libGame_gv_watchTowersMaxCount = 10;

// Structures
struct libGame_gs_GameData {
    datetime lv_gameReleaseDate;
    int lv_gameVersion;
    string lv_gameVersionID;
    string lv_gameDate;
    string lv_gameMatchID;
    int lv_gameServer;
    string lv_gameServerID;
};

struct libGame_gs_AnnouncementQueue {
    timer lv_messageTimer;
    int lv_numberOfItemsInQueue;
    int[libGame_gv_announcement_QueueMaxCount_C + 1] lv_priority;
    int[libGame_gv_announcement_QueueMaxCount_C + 1] lv_announcerVOEvent;
    string[libGame_gv_announcement_QueueMaxCount_C + 1] lv_animName;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam1;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam2;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam3;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam4;
    string[libGame_gv_announcement_QueueMaxCount_C + 1] lv_icon;
    fixed[libGame_gv_announcement_QueueMaxCount_C + 1] lv_duration;
    bool[libGame_gv_announcement_QueueMaxCount_C + 1] lv_isKillAnnouncement;
};

struct libGame_gs_BehaviorCategories {
    string lv_categoryController;
    string[libGame_gv_behaviorCategoriesMaximumBehaviorsPerCategory + 1] lv_categoryBehaviors;
    int lv_currentBehaviorCount;
};

struct libGame_gs_CapturePoint {
    bool lv_enabled;
    unit lv_captureBeaconUnit;
    region lv_captureRegion;
    int lv_captureCounter;
    int lv_pointsNeededToCapture;
    int lv_maximumPoints;
    bool lv_decayToOwner;
    bool lv_rememberLastOwner;
    int lv_captureProgressBar;
    int lv_captureProgressBarDimmingFrame;
};

struct libGame_gs_DeathRecapMaxDamageAbil {
    string lv_button;
    int lv_amount;
};

struct libGame_gs_DeathRecapSpecialDamageAbility {
    string lv_ability;
};

struct libGame_gs_DeathRecapMaxDamager {
    int lv_player;
    int lv_amount;
    int lv_heroIndex;
    libGame_gs_DeathRecapMaxDamageAbil[libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C + 1] lv_maxDamageAbils;
    int lv_maxDamageAbilCount;
};

struct libGame_gs_DeathRecapEffectBar {
    int lv_effectPlayer;
    bool lv_nPCSource;
    bool lv_structureSource;
    bool lv_isHeal;
    string lv_effect;
    int lv_postEffectHealth;
    int lv_heroIndex;
    fixed lv_time;
    string lv_button;
    string lv_debugString;
    int lv_amount;
    int lv_amountAttempted;
    int lv_amountAbsorbed;
    int lv_amountOverkill;
    int lv_combinedNumOfEvents;
    fixed lv_combinedTimeDelta;
    string lv_abilityLink;
    string lv_unitType;
};

struct libGame_gs_DeathRecapData {
    libGame_gs_DeathRecapEffectBar[libGame_gv_deathRecap_MaxEffectsBars_C + 1] lv_effectBars;
    int lv_effectBarCount;
    int lv_effectEventCount;
    libGame_gs_DeathRecapMaxDamager[libGame_gv_deathRecap_MaxMaxDamagersSort_C + 1] lv_highestDamagers;
    int lv_highestDamagersCount;
    int lv_deadHeroStartHealth;
    int lv_deadHeroHighestHealth;
    int lv_deadHeroMaxHealth;
};

struct libGame_gs_EffectHistoryData {
    fixed lv_time;
    bool lv_isKill;
    int lv_damagedOrHealed;
    fixed lv_amount;
    fixed lv_amountAbsorbed;
    fixed lv_amountAttempted;
    string lv_talentLink;
    string lv_abilityLink;
    unit lv_casterUnit;
    int lv_originPlayer;
    int lv_abilityTalentWeapon;
    string lv_effectLink;
    string lv_buttonEntry;
};

struct libGame_gs_EffectHistoryExistedEffect {
    int lv_effectHistoryType;
    string lv_effect;
    string lv_buttonEntry;
};

struct libGame_gs_EncouragementRegisteredDeathTips {
    bool lv_isRegistered;
    fixed lv_registerTime;
};

struct libGame_gs_EncouragementDeathTipData {
    fixed lv_timeSpentAlive;
    bool lv_inCombat;
    timer lv_inCombatDurationTimer;
    timer lv_inCombatTimeoutTimer;
    bool lv_alliedHeroesNearby;
    timer lv_timeWithNoAlliedHeroesNearby;
    bool lv_alliedMinionsNearby;
    timer lv_timeWithNoAlliedMinionsNearby;
    fixed lv_enemyMinionDamageTaken;
    int lv_recentHeroKills;
    timer lv_recentHeroKillTimer;
    bool lv_recentStructureDamageTaken;
    timer lv_recentStructureDamageTimer;
    bool lv_usedAnAbility;
    bool lv_usedAMoonwell;
    fixed lv_timeSpentBelowLowHealthThreshold;
    fixed lv_timeSpentBelowLowManaThreshold;
    fixed lv_timeSpentBelowSuperLowHealthThresholdWithoutUsableMoonwellNearby;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingWasMounted;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingWasInCombat;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingUsedUnderworldGate;
    point[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingPosition;
    int lv_mountTipTrackingCurrentBufferIndex;
};

struct libGame_gs_HeroDeathKillStingerQueue {
    timer[libCore_gv_bALMaxTeams + 1] lv_killStingerTimer;
    int[libCore_gv_bALMaxTeams + 1] lv_numberOfItemsInQueue;
    int[libCore_gv_bALMaxTeams + 1] lv_nextPlayIndex;
    soundlink[libCore_gv_bALMaxTeams + 1][libCore_gv_bALMaxPlayersOnATeam + 1] lv_soundQueue;
};

struct libGame_gs_LaneInfo {
    int lv_laneCount;
    point[libGame_gv_mapLanesCountMax + 1][libGame_gv_mapPointsCountMax + 1] lv_lanePoints;
    int[libGame_gv_mapLanesCountMax + 1] lv_lanePointsCount;
    point[libCore_gv_bALMaxTeams + 1][libGame_gv_mapLanesCountMax + 1][libGame_gv_mapPointsCountMax + 1] lv_lanePointsForTeam;
    point[libCore_gv_bALMaxTeams + 1][libGame_gv_mapLanesCountMax + 1] lv_laneMinionSpawn;
};

struct libGame_gs_LaneData {
    int lv_laneNamePreset;
    text lv_laneName;
    int lv_waypointCount;
    point[61] lv_waypoints;
    int lv_structureCount;
    unit[11] lv_orderStructures;
    unit[11] lv_chaosStructures;
    fixed lv_spawnDelay;
    int[libCore_gv_bALMaxTeams + 1] lv_bruiserMinionLevel;
    bool lv_minionSpawningEnabled;
};

struct libGame_gs_LaneClosestPointInfo {
    int lv_closestIndex;
    int lv_secondaryIndex;
    point lv_closestPoint;
    fixed lv_closestDist;
};

struct libGame_gs_ClosestLaneInfo {
    libGame_gs_LaneClosestPointInfo[libGame_gv_laneMaxCount_C + 1] lv_laneData;
    int lv_closestLane;
    int lv_closestMinionLane;
};

struct libGame_gs_PlayerHeroBankData {
    bank lv_heroBank;
    int[libCore_gv_talents_MaxPrepickedTalentProfiles_C + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] lv_prepickedTalentColumn;
    string[libCore_gv_talents_MaxPrepickedTalentProfiles_C + 1] lv_prepickedTalentString;
    int lv_loadoutVariation;
    text[libGame_gv_loadoutMaximumLoadoutsPerHero + 1] lv_loadoutName;
    int[libGame_gv_loadoutMaximumLoadoutsPerHero + 1] lv_loadoutSkinItem;
    int[libGame_gv_loadoutMaximumLoadoutsPerHero + 1] lv_loadoutMountItem;
};

struct libGame_gs_PlayerBankData {
    bank lv_bank;
    int lv_lastGameVersion;
    string lv_lastGameDate;
};

struct libGame_gs_Player {
    string lv_bNet;
    int lv_playerStatus;
    int lv_victoryDefeat;
    text lv_playerName;
    text lv_heroName;
    int lv_playerAllySlot;
    int lv_playerEnemySlot;
    int lv_rosterSlot;
    timer lv_pingCooldownTimer;
    bool lv_playerisJoinedatStart;
    int lv_heroIndex;
    bool lv_noRespawn;
    playergroup lv_mutedPlayerGroupPing;
    playergroup lv_mutedPlayerGroupChat;
    playergroup lv_mutedPlayerGroupAnnouncements;
    int lv_metaDataPlayerIndex;
    int lv_talentPoints;
    bool lv_suppressLevelUpFXAndTeamXPTracking;
    bool lv_allowInput;
    bool lv_gameEndsForPlayer;
    timer lv_playerLeftAnnouncementTimer;
    bool lv_playerLeftAnnouncementPlayed;
    int lv_heroSelectionPressedIndex;
    string lv_heroSelectionPickingUnit;
    int lv_team;
    unit lv_heroUnit;
    unitgroup lv_heroUnitGroup;
    int lv_heroLevel;
    unit lv_selectedUnit;
    unitgroup lv_selectedUnitGroup;
    unit lv_activeVehicle;
    point lv_spawnPoint;
    int lv_faction;
    int lv_path;
    int lv_onMyWayPathDisplay;
    int lv_multikillStreak;
    timer lv_multikillTimer;
    int lv_killingSpreeCount;
    unit lv_cameraDeadUnitCameraTarget;
    unit lv_cameraPlayerUnitToFocusOn;
    unitgroup lv_cameraPlayerUnitGroupToFocusOn;
    int lv_cameraAllyPlayerToTrack;
    unit lv_cameraCurrentTarget;
    unitgroup lv_cameraCurrentTargetGroup;
    bool lv_cameraPlayerHasControl;
    bool lv_cameraForcedLock;
    bool lv_cameraCameraLockInterrupt;
    bool lv_vOPissedSoundIsPlaying;
    int lv_vOPissedSoundIndex;
    int lv_vOPissedClickCount;
    string lv_vOSoundSuffix;
    int lv_selectedAnnouncerVOPack;
    fixed lv_lowHPHPAmount;
    sound lv_lowHPStartSound;
    sound lv_lowHPBreathLoop;
    sound lv_lowHPHeartBeatLoop;
    bool lv_lowHPSoundPlaying;
    bool lv_isDead;
    timer lv_respawnTimer;
    timer lv_respawnSoundCueTimer;
    fixed lv_timeSpentDeath;
    timer lv_deathToastTimer;
    libGame_gs_PlayerBankData lv_bankData;
    libGame_gs_PlayerHeroBankData[libCore_gv_dataHeroesMaxHeroCount + 1] lv_bankDataHero;
    bool lv_suppressHeroAnnouncements;
    bool lv_heroUsesAnnouncementAlias;
    text lv_heroAnnouncementAliasText;
    string lv_heroAnnouncementAliasIcon;
    string lv_soundDeathAlertPrefix;
    fixed[libCore_gv_bALMaxEnginePlayerCount + 1] lv_lastTimeHeroWasWithingXPRadius;
    timer lv_recentDamageResetTimer;
    fixed[libCore_gv_bALMaxEnginePlayerCount + 1] lv_recentPlayerDamageReceived;
};

struct libGame_gs_ScoreValues {
    fixed lv_gameScore;
    fixed lv_mainKills;
    fixed lv_mainAssists;
    fixed lv_mainDeaths;
    fixed lv_siegeDamage;
    fixed lv_siegeDamageBuilding;
    fixed lv_siegeDamageMercenary;
    fixed lv_siegeDamageMercenaryDefender;
    fixed lv_siegeDamageMercenaryLaner;
    fixed lv_siegeDamageMinion;
    fixed lv_siegeDamageMonster;
    fixed lv_siegeDamageSummon;
    fixed lv_siegeDamageTypePhysical;
    fixed lv_siegeDamageTypeSpell;
    fixed lv_siegeDamageTypePercent;
    fixed lv_heroDamage;
    fixed lv_heroDamageHeroic;
    fixed lv_heroDamageHallucination;
    fixed lv_heroDamageVehicle;
    fixed lv_heroDamageShields;
    fixed lv_heroDamageTypePhysical;
    fixed lv_heroDamageTypeSpell;
    fixed lv_heroDamageTypePercent;
    fixed lv_support;
    fixed lv_supportHeal;
    fixed lv_supportHeroicDamageAbsorbed;
    fixed lv_supportHeroicDamagePrevented;
    fixed lv_supportHealingPrevented;
    fixed lv_tank;
    fixed lv_tankSustain;
    fixed lv_tankHeroicDamageTaken;
    fixed lv_tankHeroicDamageConsumedByPhysicalArmor;
    fixed lv_tankHeroicDamageConsumedBySpellArmor;
    fixed lv_tankHeroicDamageAbsorbed;
    fixed lv_tankDamageTypePhysical;
    fixed lv_tankDamageTypeSpell;
    fixed lv_tankDamageTypePercent;
    fixed lv_individualXP;
    fixed lv_individualXPHeroic;
    fixed lv_individualXPMinion;
    fixed lv_individualXPCamps;
    fixed lv_individualXPBuilding;
};

struct libGame_gs_TalentChoices {
    int lv_choosedTalentColumn;
    int lv_choosedTalentIndex;
};

struct libGame_gs_Team {
    unit lv_core;
    fixed lv_xPTotals;
    fixed lv_xPLevel;
    int lv_teamLevel;
    int lv_kills;
    int lv_revives;
    int lv_townKills;
    int lv_townsRemaining;
    int lv_map_MercCampCaptures;
    int lv_map_CursesPlacedOnEnemyTeam;
    playergroup lv_teamPlayerGroup;
    playergroup lv_teamPlayerGroupNoNPCPlayers;
    int lv_teamActivePlayersCount;
    int lv_nPCPlayer;
    int lv_multikillStreak;
    timer lv_multikillTimer;
    unit[libGame_gv_mapLanesCountMax + 1] lv_towerFort;
    unit[libGame_gv_mapLanesCountMax + 1] lv_towerKeep;
    bool[libGame_gv_mapLanesCountMax + 1] lv_towerFortandKeepDestroyed;
    timer lv_abandonedTheGame;
    region lv_baseRegion;
    revealer lv_baseRevealer;
};

struct libGame_gs_TownData {
    int lv_lane;
    int lv_owner;
    region lv_townRegion;
    int lv_structureCount;
    int[libGame_gv_townMaxStructureCount + 1] lv_structureTypes;
    unit[libGame_gv_townMaxStructureCount + 1] lv_structureUnits;
    string[libGame_gv_townMaxStructureCount + 1] lv_structureUnitIDs;
    point[libGame_gv_townMaxStructureCount + 1] lv_structureSpawnPoints;
    int lv_townHallIndex;
    point lv_townHallPosition;
    int lv_structuresAlive;
};

struct libGame_gs_WatchTowers {
    unit lv_watchTowerUnit;
    unit lv_captureBeaconUnit;
    region lv_captureRegion;
    int lv_captureCounter;
    bool lv_enabled;
    int lv_capturePointIndex;
};

// Variable Declarations
bool libGame_gv_xPTrickleEnabled;
timer libGame_gv_xPTrickleStartTimer;
bool libGame_gv_gAMEFirstBloodAvailable;
bool libGame_gv_aFK_UseAFKSystem;
libGame_gs_GameData libGame_gv_gameData;
string[libGame_gv_unitStatsHealingTakenTotalValue + 1] libGame_gv_unitStatsHealingTakenBehaviors;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_cameraFollowForced;
region[libGame_gv_cameraBound_MaxCount_C + 1] libGame_gv_cameraBound_Regions;
int libGame_gv_cameraBound_Count;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_cameraBound_CurrentCameraBoundForPlayer;
bool libGame_gv_announcement_SystemEnabled;
libGame_gs_AnnouncementQueue[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_announcementQueue;
libGame_gs_BehaviorCategories[libGame_gv_behaviorCategoriesMaximumCategoryCount_C + 1] libGame_gv_behaviorCategories;
int libGame_gv_behaviorCategoriesCurrentCategoryAmount;
int libGame_gv_capturePointCurrentCount;
libGame_gs_CapturePoint[libGame_gv_capturePointMaxCount_C + 1] libGame_gv_capturePoints;
string libGame_gv_capturePointLastCreatedCapturePointIndex_C;
libGame_gs_DeathRecapData[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_deathRecapDeathData;
libGame_gs_DeathRecapSpecialDamageAbility[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_deathRecapSpecialDamageAbilities;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_effectHistoryCalculatingEffectsCount;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_effectHistoryCalculatingAllowed;
libGame_gs_EffectHistoryData[libCore_gv_bALMaxEnginePlayerCount + 1][libGame_gv_effectHistoryMaxEffectsInHistory + 1] libGame_gv_effectHistoryData;
int libGame_gv_effectHistoryExistedEffectCurrentAmount;
libGame_gs_EffectHistoryExistedEffect[libGame_gv_effectHistoryExistedEffectMaxAmount_C + 1] libGame_gv_effectHistoryExistedEffect;
string libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C;
string libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C;
timer[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_encouragement_TimeSpentAliveTimer;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_encouragement_XPGathered;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_encouragement_TotalTeamXPGathered;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1][libGame_gv_encouragement_NumberOfStatCallouts_C + 1] libGame_gv_encouragement_CalloutStatTracking;
fixed[libGame_gv_encouragement_NumberOfStatCalloutThresholds_C + 1][libGame_gv_encouragement_NumberOfStatCallouts_C + 1] libGame_gv_encouragement_CalloutStatThresholds;
libGame_gs_EncouragementRegisteredDeathTips[libCore_gv_bALMaxEnginePlayerCount + 1][libGame_gv_encouragement_NumberOfDeathTips_C + 1] libGame_gv_encouragement_RegisteredDeathTips;
libGame_gs_EncouragementDeathTipData[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_encouragement_DeathTipData;
timer libGame_gv_missionTimer;
timer libGame_gv_jungleWatchTowerStartTimer;
timer libGame_gv_gameTimer;
timer libGame_gv_openTheGatesTimer;
bool libGame_gv_gameOverDetermineWinningTeamHasRun;
int libGame_gv_heroDeathRespawnSetting;
unit[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeathMurkyRespawnEggs;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeathMurkyRespawnEggDeathTimeStamp;
point[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeathMurkyRespawnEggPoint;
sound[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeath_DeathAmbientSound;
sound[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeath_DeathMusicSound;
bool libGame_gv_heroDeathRunDeathUIUpdates;
bool libGame_gv_heroDeath_UpdateStats;
bool libGame_gv_heroDeath_RespawnMounted;
bool[libCore_gv_bALMaxEnginePlayerCount + 1][libCore_gv_killingSpree_KillThresholdCount_C + 1] libGame_gv_heroDeathKillStreakRegistered;
libGame_gs_HeroDeathKillStingerQueue[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeathKillStingerQueue;
libGame_gs_LaneInfo libGame_gv_laneInfo;
int libGame_gv_laneCount;
libGame_gs_LaneData[libGame_gv_laneMaxCount_C + 1] libGame_gv_laneData;
libGame_gs_ClosestLaneInfo libGame_gv_closestLaneData;
string[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_coreMapLightingSpecial;
string[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_coreMapLightingCurrent;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_coreMapHeroDeathOverlay;
int libGame_gv_minionWaveSpawnCounter;
bool libGame_gv_minionSystemStarted;
bool libGame_gv_minionSystemPaused;
bool libGame_gv_minionSpawningEnabled;
bool libGame_gv_minionMapNeverSpawnsCatapults;
int libGame_gv_minionPeriodicCatapultsFirstWave;
bool libGame_gv_minionScalingEnabled;
int libGame_gv_spawnedMinionLane;
int libGame_gv_spawnedMinionFirstWaypointIndex;
int[libCore_gv_bALMaxPlayers + 1][libGame_gv_moonwellMaxMoonwellCount + 1] libGame_gv_moonwellTextTags;
unit[libCore_gv_bALMaxPlayers + 1][libGame_gv_moonwellMaxMoonwellCount + 1] libGame_gv_moonwellTextTagsUnit;
unitgroup[libCore_gv_bALMaxPlayers + 1] libGame_gv_moonwellTextTagsUnitGroup;
fixed[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_questTokenEventTime;
libGame_gs_Player[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_players;
unitgroup libGame_gv_heroes;
unitgroup[libCore_gv_bALMaxTeams + 1] libGame_gv_players_Heroes_AllTrackedHeroesForTeam;
int libGame_gv_preloadingCurrentValue;
int libGame_gv_preloadingMaxValue;
bool[libCore_gv_dataHeroesMaxHeroCount + 1] libGame_gv_preloadingHeroIsPreloaded;
bool[libCore_gv_dataMountsMaxMountCount + 1] libGame_gv_preloadingMountIsPreloaded;
bool libGame_gv_preloadingPreloadDuringOfflineTest;
timer libGame_gv_scalingTimer;
int libGame_gv_scalingTicks;
libGame_gs_ScoreValues[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_scoreValues;
libGame_gs_TalentChoices[libCore_gv_bALMaxEnginePlayerCount + 1][libCore_gv_dataHeroesMaxTalentTiers + 1] libGame_gv_talentChoices;
libGame_gs_Team[libCore_gv_bALMaxTeams + 1] libGame_gv_teams;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_teamfightTrackingNearbyAllyCount;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_teamfightTrackingNearbyEnemyCount;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_teamfightPlayerInTeamfight;
bool libGame_gv_towerMapPlaysCoreWarning;
bool[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreIsUnderAttack;
timer[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreAlertTimer;
timer[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreAlertCooldownTimer;
timer libGame_gv_towerMainCoreAlertTimer;
bool[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreAlertOnCooldown;
int[libCore_gv_bALMaxTeams + 1] libGame_gv_towerTeamCoreAlertPing;
int libGame_gv_townTownCount;
libGame_gs_TownData[libGame_gv_townMaxTownCount + 1] libGame_gv_townTownData;
int libGame_gv_watchTowersCurrentCount;
libGame_gs_WatchTowers[libGame_gv_watchTowersMaxCount + 1] libGame_gv_watchTowers;

// Function Declarations
int libGame_gf_CustomValueIndex (int lp_customValueIndex);
int libGame_gf_CustomValueGetAsInteger (int lp_customValueIndex, unit lp_unit);
int libGame_gf_UnitStatsValidHeroicArmorValueOfUnit (int lp_armorType, unit lp_unit);
int libGame_gf_UnitStatsCalculateValidHealingValue (int lp_healingTakenCurrentValue);
int libGame_gf_UnitStatsValidHealingReceived (unit lp_unit);
bool libGame_gf_UnitStatsUnitNeedsUpdateHealingReceived (unit lp_targetUnit);
bool libGame_gf_UnitStatsUnitHealingSuppressed (unit lp_unit);
void libGame_gf_UnitStatsUpdateHealing (unit lp_unit);
void libGame_gf_UnitStatsUpdateHealingReceivedBehaviors (unit lp_unit);
fixed libGame_gf_UnitStatsLifestealValue (unit lp_unit, int lp_type);
void libGame_gf_UnitStatsLifestealExecute (unit lp_unit, fixed lp_amount, string lp_damagingEffect, bool lp_critical);
void libGame_gf_UnitStatsLifestealCalculation (fixed lp_amount, fixed lp_percentValueAdditional, bool lp_percentValueIsModifier, bool lp_useOnSummoner, unit lp_triggeringUnit, unit lp_damagingUnit, string lp_damagingEffect);
int libGame_gf_UnitStatsPowerCustomValueIndex (int lp_powerType);
int libGame_gf_UnitStatsValidPowerValueOfUnit (int lp_powerType, unit lp_unit);
void libGame_gf_UnitStatsSummonedUnitUpdateStatsAllUnitsFromSummoner (unit lp_summoner, int lp_value, int lp_customValueIndex);
void libGame_gf_UnitStatsSummonedUnitUpdateStatsFromSummoner (unit lp_summoner, unit lp_summoned, int lp_value, int lp_customValueIndex);
void libGame_gf_UnitStatsSummonedUnitUpdateStatsFromSummonerBirth (unit lp_summoned);
int libGame_gf_UnitStatsAttributeValueOfBehavior (string lp_behavior, string lp_unitStatsArrtibute);
int libGame_gf_UnitStatsAttributeValueOfBehaviorOnUnit (string lp_behavior, string lp_unitStatsArrtibute, unit lp_unit);
void libGame_gf_UnitStatsChangeCustomValue (string lp_behavior, int lp_behaviorChange, unit lp_targetUnit);
void libGame_gf_UnitStatsChangeCustomValueOfBehavior (string lp_behavior, string lp_attribute, int lp_behaviorChange, int lp_customValueIndex, unit lp_unit);
void libGame_gf_CooldownUniversalHeroCDR (unit lp_unit, fixed lp_time, bool lp_reset, bool lp_ignoreCDRRequirment, bool lp_includeHeroic, bool lp_includeTrait);
void libGame_gf_CooldownDebugHeroCDR (int lp_player);
void libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary (int lp_player, point lp_point, fixed lp_duration, fixed lp_initialVelocity, fixed lp_decelerate, bool lp_smart);
void libGame_gf_CameraTrackNextAliveAllyForPlayer (int lp_player);
void libGame_gf_CameraTrackPreviousAliveAllyForPlayer (int lp_player);
void libGame_gf_CameraUpdateCameraForPlayer (int lp_player);
int libGame_gf_CameraBoundCCIndex (region lp_bound);
void libGame_gf_AddCameraBoundsCC (region lp_bounds);
void libGame_gf_SetCameraBoundsCC (int lp_index, region lp_bounds);
void libGame_gf_SetCameraBoundCCIndexForPlayer (int lp_player, int lp_boundsIndex);
void libGame_gf_SetCameraBoundCCForPlayer (int lp_player, region lp_bound);
void libGame_gf_AnnouncementAddItemForPlayerGroup (playergroup lp_playerGroup, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon, fixed lp_duration, bool lp_isKillAnnouncement);
void libGame_gf_AnnouncementClearQueueForPlayer (int lp_player);
void libGame_gf_AnnouncementInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon, fixed lp_duration, int lp_desiredInsertPosition, bool lp_isKillAnnouncement);
void libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer (int lp_player, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, string lp_icon);
void libGame_gf_AnnouncementPlayNextItemForPlayer (int lp_player);
void libGame_gf_BankInitializePlayerBankForPlayer (int lp_player);
void libGame_gf_BankInitializeHeroBankForPlayer (int lp_player, int lp_heroIndex);
bool libGame_gf_BehaviorCategoriesBehaviorExist (int lp_category, string lp_behaviorLink);
void libGame_gf_BehaviorCategoriesIncludeBehaviorInList (int lp_category, string lp_behavior);
void libGame_gf_BehaviorCategoriesRemoveCategoryBehaviorsFromUnit (int lp_category, unit lp_unit);
void libGame_gf_BehaviorCategoriesSetBehaviorCategoryController (int lp_category, string lp_behavior);
int libGame_gf_BehaviorCategoriesCoreCategoryPresetOfBehavior (string lp_behavior);
int libGame_gf_BehaviorCategoriesCoreCategoryIntegerOfBehavior (string lp_behavior);
int libGame_gf_BehaviorCategoriesCategoryPresetFromInteger (int lp_categoryNumber);
bool libGame_gf_BehaviorCategoriesUnitHasCategoryBehavior (unit lp_unit, int lp_category);
bool libGame_gf_BehaviorCategoriesUnitHasBehaviorFromCategory (unit lp_unit, int lp_category);
void libGame_gf_CapturePointChangeOwnership (int lp_capturePointIndex, int lp_newAIOwner, int lp_newPlayerOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent);
void libGame_gf_CapturePointCreate (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, bool lp_decayToOwner, bool lp_rememberLastOwner);
void libGame_gf_CapturePointEnable (int lp_capturePointIndex);
void libGame_gf_CapturePointDisable (int lp_capturePointIndex);
int libGame_gf_LastCreatedCapturePoint ();
bool libGame_gf_CapturePointFullyCaptured (int lp_capturePointIndex);
bool libGame_gf_DeathRecapCheckforCombineEvent (int lp_deadPlayer, int lp_currentEffectBarIndex, fixed lp_currentEffectInstanceTime, int lp_effectingPlayer, string lp_effectingUnitType, string lp_effectingSourceButton, bool lp_nPCSource, bool lp_structureSource);
void libGame_gf_DeathRecapAddSpecialDamageAbility (string lp_abilityLink);
void libGame_gf_DeathRecapSortMaxDamageAbils (int lp_deadPlayer, int lp_maxDamagerIndex, int lp_currentMaxDamagerAbilIndex);
void libGame_gf_DeathRecapSortMaxDamagers (int lp_deadPlayer);
void libGame_gf_DeathRecapAddMaxDamageAbilForPlayer (int lp_deadPlayer, int lp_maxDamagerIndex, string lp_effectingAbilityButton, int lp_effectAmount);
void libGame_gf_DeathRecapAddEffectInstanceForPlayer (int lp_deadPlayer, string lp_effect, int lp_effectingPlayer, string lp_effectingAbility, string lp_effectingUnitType, int lp_effectAmount, int lp_effectAmountAttempted, int lp_effectAmountAbsorbed, bool lp_isHeal, fixed lp_effectTime, string lp_debugString, string lp_sourceButton);
void libGame_gf_DeathRecapClearDeathRecapForPlayer (int lp_deadPlayer);
void libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer (unit lp_playerHero, int lp_deadPlayer);
bool libGame_gf_EffectHistoryCalculatingEffects (int lp_player);
bool libGame_gf_EffectHistoryEffectExist (string lp_effect);
int libGame_gf_EffectHistoryExistedEffectIndex (string lp_effect);
void libGame_gf_EffectHistoryAddEffectToExistedEffects (string lp_effectEntry, string lp_buttonEntry, int lp_effectType);
void libGame_gf_EffectHistoryAddEffectBehaviorToExistedEffects (string lp_effectEntry, string lp_buttonEntry, int lp_effectType);
void libGame_gf_EffectHistoryAddEffectInHistoryForPlayer (unit lp_casterUnit, unit lp_targetUnit, fixed lp_amount, fixed lp_amountAttempted, fixed lp_amountAbsorbed, int lp_damagedOrHealed, string lp_effectLink);
void libGame_gf_EffectHistoryClearHistoryIndexForPlayer (int lp_player, int lp_effectHistoryIndex);
void libGame_gf_EffectHistoryClearHistoryForPlayer (int lp_player);
void libGame_gf_BehaviorCategoriesChanges (trigger t);
void libGame_gf_SendEventBehaviorCategoriesChanges (string lp_behavior, int lp_category, int lp_change, unit lp_unit);
int libGame_gf_BehaviorCategoriesChangesChange ();
unit libGame_gf_BehaviorCategoriesChangesUnit ();
string libGame_gf_BehaviorCategoriesChangesBehavior ();
int libGame_gf_BehaviorCategoriesChangesCategory ();
void libGame_gf_CameraPannedFromScript (trigger t);
void libGame_gf_SendEventCameraPannedFromScript (int lp_player, point lp_point);
point libGame_gf_CameraPannedFromScriptPoint ();
int libGame_gf_CameraPannedFromScriptPlayer ();
void libGame_gf_CapturePointChangesOwner (trigger t);
void libGame_gf_SendEventCapturePointChangesOwner (int lp_capturePointIndex, int lp_aIOwner, int lp_playerOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent);
int libGame_gf_CapturePointChangesOwnerCapturePointIndex ();
int libGame_gf_CapturePointChangesOwnerAIOwner ();
int libGame_gf_CapturePointChangesOwnerNewOwnerPlayer ();
playergroup libGame_gf_CapturePointChangesOwnerCapturingPlayers ();
bool libGame_gf_CapturePointChangesOwnerHasMercLordTalent ();
void libGame_gf_CapturePointBecomesFullyOverCaptured (trigger t);
void libGame_gf_SendEventCapturePointBecomesFullyOverCaptured (int lp_capturePointIndex);
int libGame_gf_CapturePointBecomesFullyOverCapturedCapturePointIndex ();
void libGame_gf_JungleDefenderAIDefendersBeginFighting (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting (int lp_defenderAIIndex);
int libGame_gf_JungleDefenderAIDefendersBeginFightingIndex ();
void libGame_gf_JungleDefenderAIDefendersEndFighting (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefendersEndFighting (int lp_defenderAIIndex);
int libGame_gf_JungleDefenderAIDefendersEndFightingIndex ();
void libGame_gf_JungleDefenderAIDefenderKilled (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefenderKilled (int lp_defenderAIIndex, unit lp_unit, unit lp_killingUnit);
int libGame_gf_JungleDefenderAIDefenderKilledIndex ();
unit libGame_gf_JungleDefenderAIDefenderKilledUnit ();
unit libGame_gf_JungleDefenderAIDefenderKilledKillingUnit ();
void libGame_gf_JungleDefenderAIAllDefendersKilled (trigger t);
void libGame_gf_SendEventJungleDefenderAIAllDefendersKilled (int lp_defenderAIIndex, unit lp_killingUnit);
int libGame_gf_JungleDefenderAIAllDefendersKilledIndex ();
unit libGame_gf_JungleDefenderAIAllDefendersKilledKillingUnit ();
void libGame_gf_MetaDataDataBaseInitialization (trigger t);
void libGame_gf_SendEventMetaDataDataBaseInitialization ();
void libGame_gf_GateOpenTimerStarted (trigger t);
void libGame_gf_SendEventGateOpenTimerStarted ();
void libGame_gf_TownDataInitialized (trigger t);
void libGame_gf_SendEventTownDataInitialized ();
void libGame_gf_GameOverEvent (trigger t);
void libGame_gf_SendEventGameOverEvent ();
void libGame_gf_HeroExitedTransport (trigger t);
void libGame_gf_SendEventHeroExitedTransport (int lp_player, unit lp_transport);
int libGame_gf_HeroExitingTransportPlayerExiting ();
unit libGame_gf_HeroExitingTransportTransport ();
void libGame_gf_HeroEnteredTransport (trigger t);
void libGame_gf_SendEventHeroEnteredTransport (int lp_player, unit lp_transportUnit, unit lp_cargoUnit);
int libGame_gf_HeroEnteredTransportPlayerEntering ();
unit libGame_gf_HeroEnteredTransportTransport ();
unit libGame_gf_HeroEnteredTransportCargoUnit ();
void libGame_gf_HeroLifesteal (trigger t);
void libGame_gf_SendEventHeroLifesteal (unit lp_hero, fixed lp_healingAmount, string lp_damagingEffect);
unit libGame_gf_HeroLifestealHero ();
fixed libGame_gf_HeroLifestealAmount ();
string libGame_gf_HeroLifestealDamagingEffect ();
void libGame_gf_HeroHealPrevented (trigger t);
void libGame_gf_SendEventHeroHealPrevented (unit lp_targetUnit, fixed lp_amount, string lp_behavior, unit lp_hero);
unit libGame_gf_HeroHealPreventedTargetUnit ();
fixed libGame_gf_HeroHealPreventedAmount ();
string libGame_gf_HeroHealPreventedBehavior ();
unit libGame_gf_HeroHealPreventedHero ();
void libGame_gf_HeroLevelUp (trigger t);
void libGame_gf_SendEventHeroLevelUp (int lp_player);
int libGame_gf_HeroLevelUpPlayer ();
void libGame_gf_HeroParticipatedInNPCTakedown (trigger t);
void libGame_gf_SendEventHeroParticipatedInNPCTakedown (int lp_player, unit lp_unit);
int libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer ();
unit libGame_gf_HeroParticipatedInNPCTakedownMinion ();
void libGame_gf_HeroParticipatedInTakedown (trigger t);
void libGame_gf_SendEventHeroParticipatedInTakedown (int lp_lastHitPlayer, int lp_player, int lp_playerKilled, unit lp_heroKilled, point lp_heroKilledPosition);
int libGame_gf_HeroParticipatedInTakedownKillingPlayer ();
int libGame_gf_HeroParticipatedInTakedownLastHitPlayer ();
int libGame_gf_HeroParticipatedInTakedownKilledPlayer ();
int libGame_gf_HeroParticipatedInTakedownKilledHero ();
point libGame_gf_HeroParticipatedInTakedownKilledHeroPosition ();
void libGame_gf_HeroWitnessedAlliedNPCDeath (trigger t);
void libGame_gf_SendEventHeroWitnessedAlliedNPCDeath (int lp_player, unit lp_unit);
int libGame_gf_HeroWitnessedAlliedNPCDeathAlliedPlayer ();
unit libGame_gf_HeroWitnessedAlliedNPCDeathMinion ();
void libGame_gf_HeroPortedBackToTown (trigger t);
void libGame_gf_SendEventHeroPortedBackToTown (int lp_player, unit lp_unit);
int libGame_gf_HeroPortedBackToTownPlayer ();
unit libGame_gf_HeroPortedBackToTownUnit ();
void libGame_gf_SpecialCaseParticipatedInNPCTakedown (trigger t);
void libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown (int lp_player, unit lp_unit);
int libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant ();
unit libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion ();
void libGame_gf_HeroSpecialCaseMounting (trigger t);
void libGame_gf_SendEventHeroSpecialCaseMounting (int lp_player);
int libGame_gf_HeroSpecialCaseMountingPlayer ();
void libGame_gf_HeroEntersSpecialDeathState (trigger t);
void libGame_gf_SendEventHeroEntersSpecialDeathState (unit lp_hero);
unit libGame_gf_HeroEntersSpecialDeathStateHero ();
void libGame_gf_HeroKilled (trigger t);
void libGame_gf_SendEventHeroKilled (int lp_playerKilling, unit lp_killedUnit);
int libGame_gf_HeroKilledKillingPlayer ();
int libGame_gf_HeroKilledPlayer ();
unit libGame_gf_HeroKilledUnit ();
point libGame_gf_HeroKilledLocaiton ();
void libGame_gf_HeroSpawn (trigger t);
void libGame_gf_SendEventHeroSpawn (int lp_player);
int libGame_gf_HeroSpawnPlayer ();
void libGame_gf_HeroRespawn (trigger t);
void libGame_gf_SendEventHeroRespawn (int lp_player, unit lp_hero);
int libGame_gf_HeroRespawnPlayer ();
unit libGame_gf_HeroRespawnHero ();
void libGame_gf_RequestCustomRespawn (trigger t);
void libGame_gf_SendEventRequestCustomRespawn (int lp_player, bool lp_respawnMounted, point lp_respawnLocation, fixed lp_respawnHealthPercent);
int libGame_gf_RequestCustomRespawnPlayer ();
bool libGame_gf_RequestCustomRespawnRespawnMounted ();
point libGame_gf_RequestCustomRespawnRespawnLocation ();
fixed libGame_gf_RequestCustomRespawnRespawnHealthPercent ();
void libGame_gf_SpecialCaseTalentCooldownReset (trigger t);
void libGame_gf_SendEventSpecialCaseTalentCooldownReset (int lp_player);
int libGame_gf_SpecialCaseTalentCooldownResetPlayer ();
void libGame_gf_JungleCampSpawned (trigger t);
void libGame_gf_SendEventJungleCampSpawned (int lp_camp);
int libGame_gf_JungleCampSpawnedIndex ();
void libGame_gf_JungleCampDefenderCreated (trigger t);
void libGame_gf_SendEventJungleCampDefenderCreated (unit lp_unit);
unit libGame_gf_JungleCampDefenderUnit ();
void libGame_gf_JungleCampLanerCreated (trigger t);
void libGame_gf_SendEventJungleCampLanerCreated (unit lp_unit);
unit libGame_gf_JungleCampLanerUnit ();
void libGame_gf_MercCampCaptured (trigger t);
void libGame_gf_SendEventMercCampCaptured (int lp_camp, int lp_owner, playergroup lp_capturingPlayers);
int libGame_gf_MercCampCapturedIndex ();
int libGame_gf_MercCampCapturedOwner ();
playergroup libGame_gf_MercCampCapturedCapturingPlayers ();
void libGame_gf_MapObjectiveCapturedByUnit (trigger t);
void libGame_gf_SendEventMapObjectiveCapturedByUnit (unit lp_capturingUnit);
unit libGame_gf_MapObjectiveCapturingUnit ();
void libGame_gf_MapRavenLordTributeWarning (trigger t);
void libGame_gf_SendEventMapTributeWarning (point lp_position);
point libGame_gf_MapTributeWarningPosition ();
void libGame_gf_MapRavenLordTributeSpawned (trigger t);
void libGame_gf_SendEventMapTributeSpawned (unit lp_tribute);
unit libGame_gf_MapTributeSpawnedUnit ();
void libGame_gf_MapRavenLordTributePickedUp (trigger t);
void libGame_gf_SendEventMapTributePickedUp (int lp_player, point lp_positioin);
int libGame_gf_MapTributePickedUpPlayer ();
point libGame_gf_MapTributePickedUpPosition ();
void libGame_gf_MapRavenLordCurseStarts (trigger t);
void libGame_gf_SendEventMapRavenLordCurseStarts (int lp_team);
int libGame_gf_MapRavenLordCurseActivatedTeam ();
void libGame_gf_MapRavenLordCurseEnds (trigger t);
void libGame_gf_SendEventMapRavenLordCurseEnds ();
void libGame_gf_PlayerAchievesMultiKill (trigger t);
void libGame_gf_SendEventPlayerAchievesMultiKill (int lp_player, int lp_killCount);
int libGame_gf_PlayerAchievesMultiKillPlayer ();
int libGame_gf_PlayerAchievesMultiKillKillCount ();
void libGame_gf_QuestTokenCompleted (trigger t);
void libGame_gf_SendEventQuestTokenCompleted (string lp_questTokenBehavior, unit lp_unit);
string libGame_gf_QuestTokenCompletedBehavior ();
unit libGame_gf_QuestTokenCompletedUnit ();
void libGame_gf_UnitEntersSafeZonePuntRegion (trigger t);
void libGame_gf_SendEventUnitEntersSafeZonePuntRegion (unit lp_unit, point lp_puntPoint);
unit libGame_gf_UnitEntersSafeZonePuntRegionUnit ();
point libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint ();
void libGame_gf_UnitEntersSafeZoneRegion (trigger t);
void libGame_gf_SendEventUnitEntersSafeZoneRegion (unit lp_unit);
unit libGame_gf_UnitEntersSafeZoneRegionUnit ();
void libGame_gf_UnitExitsSafeZoneRegion (trigger t);
void libGame_gf_SendEventUnitExitsSafeZoneRegion (unit lp_unit);
unit libGame_gf_UnitExitsSafeZoneRegionUnit ();
void libGame_gf_AnnouncerVOInitiated (trigger t);
void libGame_gf_SendEventAnnouncerVOInitiated (sound lp_sound, int lp_player, int lp_announcerEvent);
int libGame_gf_AnnouncerVOInitiatedAnnouncerEvent ();
int libGame_gf_AnnouncerVOInitiatedAnnouncerPlayer ();
sound libGame_gf_AnnouncerVOInitiatedAnnouncerSound ();
void libGame_gf_PlayerChooseTalent (trigger t);
int libGame_gf_PlayerChooseTalentPlayer ();
int libGame_gf_PlayerChooseTalentTalentTier ();
int libGame_gf_PlayerChooseTalentTalentColumn ();
int libGame_gf_PlayerChooseTalentTalentIndex ();
string libGame_gf_PlayerChooseTalentTalentLink ();
void libGame_gf_SendEventPlayerChooseTalent (int lp_player, int lp_talentTier, int lp_talentColumn);
void libGame_gf_PlayerSelectPrepickedTalent (trigger t);
int libGame_gf_PlayerSelectPrepickedTalentPlayer ();
int libGame_gf_PlayerSelectPrepickedTalentTier ();
int libGame_gf_PlayerSelectPrepickedTalentColumn ();
int libGame_gf_PlayerSelectPrepickedTalentIndex ();
void libGame_gf_SendEventPlayerSelectPrepickedTalent (int lp_player, int lp_talentTier, int lp_talentColumn);
void libGame_gf_SendEventTeamGetLevelUp (int lp_team);
int libGame_gf_TeamLevelUpTeam ();
void libGame_gf_TeamLevelUp (trigger t);
text libGame_gf_EncouragementFormatStatCalloutText (int lp_calloutStatIndex, int lp_thresholdIndex, fixed lp_statValue);
int libGame_gf_EncouragementConvertIntegerToDeathTipNamePreset (int lp_int);
text libGame_gf_EncouragementGetDeathTipText (int lp_deathTip);
void libGame_gf_EncouragementDataTrackingRegisterMinionDamageForPlayer (int lp_player, fixed lp_damage);
void libGame_gf_EncouragementDataTrackingRegisterRecentHeroKillForPlayer (int lp_player);
void libGame_gf_EncouragementDataTrackingRegisterRecentStructureDamageForPlayer (int lp_player);
void libGame_gf_PlayGameOverStinger (int lp_winningTeam);
void libGame_gf_PlayVictoryDefeatVO (int lp_winningTeam);
void libGame_gf_GameOver (int lp_winningTeam);
playergroup libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit (playergroup lp_killingTeamGroup, int lp_killingPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathUpdateTeamStats (unit lp_deadHero, int lp_killingFaction);
void libGame_gf_HeroDeathUpdatePlayerStats (unit lp_deadHero, int lp_killingPlayer, playergroup lp_killingTeamGroup, playergroup lp_killingGroup);
void libGame_gf_HeroDeathAwardXP (unit lp_deadHero, int lp_killingPlayer, playergroup lp_awardGroup, playergroup lp_killingGroup, bool lp_takedownScored);
void libGame_gf_HeroDeathDeadTeamAnnouncements (unit lp_deadHero, playergroup lp_deadPlayerTeamGroup, int lp_killingFaction);
void libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement (int lp_deadPlayerTeam);
void libGame_gf_HeroDeathCheckToSeeIfLivingAlliesExist (unit lp_deadUnit, int lp_deadPlayerTeamNumber, playergroup lp_deadPlayersTeam);
void libGame_gf_HeroDeathResetRespawnTimerOfPlayerHero (int lp_player);
void libGame_gf_HeroDeathStartRespawnTimer (int lp_player, fixed lp_initialRespawnTime);
void libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer (bool lp_enableDisable, int lp_player);
void libGame_gf_HeroDeathUpdateUIElementsForDeath (bool lp_showOverlay, bool lp_registerwithAnnouncementUI, bool lp_showDeathRecapToast, int lp_player, int lp_killingPlayer);
void libGame_gf_HeroDeathUpdateUIElementsForRespawn (int lp_player);
void libGame_gf_HeroDeathPortHeroBackAndSetDeathState (int lp_player, point lp_portLocation);
void libGame_gf_HeroDeathModifyRespawnTimer (int lp_respawningPlayer, fixed lp_modificationAmount);
void libGame_gf_HeroDeathUpdateRespawnTimer (int lp_respawningPlayer, fixed lp_newRespawnTimerDuration);
void libGame_gf_HeroDeathRespawnHeroForPlayerAtPoint (int lp_player, bool lp_respawnMounted, point lp_respawnLocation, fixed lp_respawnHealthPercent);
void libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer (int lp_deadPlayer, unit lp_deadHero, int lp_killingTeamPlayer, bool lp_playerWasInvolvedInKill, fixed lp_xPValue);
void libGame_gf_HeroDeathHeroKilledAnnouncementToObserver (int lp_deadPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup (int lp_deadPlayer, unit lp_deadHero, playergroup lp_alliedPlayerGroup);
void libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer (int lp_deadPlayer);
void libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer (int lp_deadPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathCheckForKillingSpree (int lp_killingPlayer);
void libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement (int lp_player);
void libGame_gf_HeroDeathStartMultikillTimerForPlayer (int lp_player);
void libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer (soundlink lp_sound, int lp_queueType, int lp_player);
void libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer (int lp_queueType, int lp_player);
void libGame_gf_CalculateClosestLaneDataForLane (point lp_testPoint, int lp_curLane);
void libGame_gf_CalculateClosestLaneData (point lp_testPoint);
bool libGame_gf_LaneIndexIsValid (int lp_laneIndex);
void libGame_gf_SetCoreMapLighting (string lp_lighting, playergroup lp_players, fixed lp_blendtime);
void libGame_gf_LevelUpApplyHeroStatsForHeroSingleLevel (unit lp_heroUnit);
void libGame_gf_LevelUpResetHeroStats (unit lp_heroUnit);
void libGame_gf_LevelUpLevelUpHero (unit lp_hero);
void libGame_gf_LevelUpAddLevelEffectForPlayer (int lp_level, int lp_player);
void libGame_gf_LevelUpRemoveLevelEffectsForPlayer (int lp_player);
void libGame_gf_LoadoutNameUpdateNameOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_player, string lp_name);
void libGame_gf_LoadoutNameLoadNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout);
void libGame_gf_LoadoutNameLoadDefaultNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout);
void libGame_gf_LoadoutNameStoreLoadNameForPlayer (int lp_heroIndex, int lp_player, int lp_loadout);
void libGame_gf_LoadoutVariationUpdateVariationOfHeroForPlayer (int lp_heroIndex, int lp_loadoutVariation, int lp_player);
void libGame_gf_LoadoutVariationLoadVariationOfHeroForPlayer (int lp_heroIndex, int lp_player, bool lp_displayErrorMessage);
void libGame_gf_LoadoutVariationLoadDefaultVariationOfHeroForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_LoadoutVariationStoreVariationOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_variation);
void libGame_gf_LoadoutSkinsUpdateSkinOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_skin, int lp_player, bool lp_resetOnAccessError);
void libGame_gf_LoadoutSkinsLoadSkinOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_loadout, bool lp_displayErrorMessage);
void libGame_gf_LoadoutSkinsLoadDefaultSkinOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_loadout);
void libGame_gf_LoadoutSkinsStoreSkinOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_skinIndex, int lp_loadout);
void libGame_gf_LoadoutMountsUpdateMountOfHeroForPlayer (int lp_heroIndex, int lp_loadout, int lp_mount, int lp_player, bool lp_resetOnFalse);
void libGame_gf_LoadoutMountsLoadMountOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_loadout, bool lp_displayErrorMessage);
void libGame_gf_LoadoutMountsLoadDefaultMountOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_loadout);
void libGame_gf_LoadoutMountsStoreMountOfHeroForPlayer (int lp_heroIndex, int lp_player, int lp_mountIndex, int lp_loadout);
int libGame_gf_LoadoutGetPlayerVariation (int lp_player);
int libGame_gf_LoadoutGetPlayerSkin (int lp_player);
int libGame_gf_LoadoutGetPlayerMount (int lp_player);
bool libGame_gf_MinionSystemStarted ();
void libGame_gf_MinionTurnOnOffCatapults (bool lp_onOff);
void libGame_gf_MinionStartStopMinionSystem (bool lp_startStop);
void libGame_gf_MinionStartStopMinionSpawnCycle (bool lp_startStop);
void libGame_gf_MinionPauseUnpauseMinionSystem (bool lp_pauseUnpause);
void libGame_gf_MinionSpawnMinion (int lp_lane, int lp_owner, int lp_type, point lp_spawnPoint);
void libGame_gf_MinionSpawnWave (int lp_lane, int lp_owner);
void libGame_gf_MinionTurnMinionScalingOnOff (bool lp_onOff);
void libGame_gf_MinionPauseUnpauseMinionScaling (bool lp_pauseUnpause);
point libGame_gf_ClampSpawnedMinionPointsAgainstEnemyTowers (int lp_player, point lp_minPoint, point lp_maxPoint);
void libGame_gf_CalculateSpawnedMinionGoalPoints (int lp_ownerPlayer, point lp_positionofSpawner);
void libGame_gf_CalculateSpawnedMinionGoalPointsFromLane (int lp_ownerPlayer, point lp_positionofSpawner, int lp_lane);
void libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData (int lp_ownerPlayer);
void libGame_gf_ApplyMountBehaviorToHero (unit lp_hero);
void libGame_gf_SendMountActorMessagesToActor (int lp_mountIndex, actor lp_actor);
bool libGame_gf_MountEnabled (unit lp_hero);
void libGame_gf_BuildingDiesCameraShake (fixed lp_delay, string lp_intensity, playergroup lp_playerGroup);
int libGame_gf_TownsAliveinLane (int lp_team, int lp_lane);
bool libGame_gf_TownAliveInLane (int lp_team, int lp_lane);
bool libGame_gf_AllTownDeadInLane (int lp_team, int lp_lane);
void libGame_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer, fixed lp_killedUnitXPAward);
int libGame_gf_QuestTokenGetCurrentTokenCountForPlayer (string lp_tokenCounterBehavior, int lp_player);
int libGame_gf_QuestTokenGetMaximumTokenCountForPlayer (string lp_tokenCounterBehavior, int lp_player);
int libGame_gf_QuestTokenGetTargetTokenCountForPlayer (string lp_tokenCounterBehavior, int lp_player);
int libGame_gf_QuestTokenGetTokenCountType (string lp_tokenCounterBehavior);
int libGame_gf_QuestTokenGetTokenCountDeltaEvents (string lp_tokenCounterBehavior, unit lp_unit);
void libGame_gf_QuestTokenModifyTokenData (int lp_modification, string lp_tokenCounterBehavior, int lp_player);
void libGame_gf_QuestTokenResetTokenData (string lp_tokenCounterBehavior, int lp_player);
void libGame_gf_QuestTokenRemoveTokenData (string lp_tokenCounterBehavior, int lp_player, unit lp_unit);
int libGame_gf_QuestTokenQuestIsHeroTalent (string lp_tokenCounterBehavior, int lp_player);
bool libGame_gf_QuestTokenResetOnDeath (string lp_tokenCounterBehavior);
playergroup libGame_gf_AlliedPlayerGroupOfPlayer (int lp_player);
playergroup libGame_gf_EnemyPlayerGroupOfPlayer (int lp_player);
bool libGame_gf_TeamNumberIsValid (int lp_team);
void libGame_gf_GrantXPForPlayer (fixed lp_xP, int lp_player, int lp_source);
bool libGame_gf_PlayerIsHeroPlayer (int lp_player);
bool libGame_gf_UnitIsHero (unit lp_testUnit);
int libGame_gf_PlayersAliveOnTeam (int lp_team);
int libGame_gf_TeamNumberOfPlayer (int lp_player);
int libGame_gf_EnemyTeamNumberOfPlayer (int lp_player);
int libGame_gf_EnemyTeamNumberOfTeam (int lp_team);
int libGame_gf_ComputerPlayerInTeam (int lp_team);
int libGame_gf_GetPlayerNumberFromRosterSlot (int lp_rosterSlot);
unit libGame_gf_PlayerHeroUnit (int lp_player);
playergroup libGame_gf_PlayersOnTeamHeroes (int lp_team, bool lp_nPCOption);
int libGame_gf_PlayerGetPlayerTeam (int lp_player);
int libGame_gf_GetPlayerIDfromTeamSlot (int lp_slot, int lp_team);
void libGame_gf_SpawnHero (int lp_player);
void libGame_gf_SpawnHeroesForTeam (int lp_team);
void libGame_gf_SpawnHeroesForBothTeams ();
void libGame_gf_ShareUnshareVisionOfAlliesForPlayer (bool lp_onOff, int lp_player);
void libGame_gf_ReloadTrackedHeroesForTeam (int lp_team);
bool libGame_gf_TargetIsVehicle (unit lp_targetUnit);
void libGame_gf_PlayerResponseAddHeroPlayerResponsesToPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_PlayerResponseAddHeroTalentPlayerResponsesForPlayer (int lp_talentIndex, int lp_player);
void libGame_gf_PreloadingPreloadModel (string lp_modelEntry, point lp_point);
void libGame_gf_PreloadingPreloadStoreModels ();
void libGame_gf_PreloadingPreloadStoreModelWithVariations (string lp_modelEntry, point lp_point);
void libGame_gf_PreloadingPreloadHeroModels ();
void libGame_gf_PreloadingPreloadHeroIndividually (int lp_heroIndex, point lp_point);
void libGame_gf_UpdateScalingForUnit (unit lp_unit, int lp_desiredLevel, int lp_existingLevel);
void libGame_gf_CoreUpdateScaling ();
void libGame_gf_JungleUpdateScalingForCamp (int lp_camp, int lp_scalingTicks);
void libGame_gf_JungleUpdateScalingForCamps ();
void libGame_gf_ScoreValueTrackingAddDamage (unit lp_targetUnit, unit lp_damagingUnit, fixed lp_damageAmount, int lp_damageType);
void libGame_gf_ScoreValueTrackingAddAbsorbed (unit lp_targetUnit, unit lp_damagingUnit, fixed lp_absorbedAmount, string lp_absorbingBehavior, int lp_absorbingBehaviorOwner, int lp_damageType);
void libGame_gf_ScoreValueTrackingAddTankSustain (unit lp_targetUnit, fixed lp_amount);
void libGame_gf_ScoreValueTrackingAddTankConsumedByArmor (unit lp_targetUnit, int lp_damageType, fixed lp_amount);
void libGame_gf_ScoreValueTrackingAddTankHeroicDamagePrevented (unit lp_targetUnit, fixed lp_amount);
void libGame_gf_ScoreValueTrackingAddSupportHeal (unit lp_targetUnit, fixed lp_amount);
void libGame_gf_ScoreValueTrackingAddSupportHealingPrevented (int lp_player, fixed lp_amount);
void libGame_gf_ScoreValueTrackingAddSupportHeroicDamagePrevented (unit lp_targetUnit, fixed lp_amount);
void libGame_gf_ScoreValuesReportIntegerValueAndLog (int lp_player, string lp_score, int lp_value);
void libGame_gf_ScoreValuesReportRealValueAndLog (int lp_player, string lp_score, fixed lp_value);
void libGame_gf_ScoreValuesRecordXPContributionForPlayer (int lp_player, fixed lp_amount, bool lp_resetAFK);
void libGame_gf_ScoreValuesRecordGameScoreForPlayer (int lp_player, fixed lp_amount, fixed lp_scoreModifier, bool lp_resetAFK);
void libGame_gf_ShrubNearbyEnemyHeroRevealCheck (int lp_player, unit lp_unit, point lp_position);
void libGame_gf_DeactivateSkinForPlayer (int lp_skinIndex, int lp_player);
void libGame_gf_ActivateSkinForPlayer (int lp_skinIndex, int lp_player);
void libGame_gf_TalentsPrepickedLoadBuildsForPlayer (int lp_player, int lp_heroIndex, string lp_buildString);
void libGame_gf_TalentsPrepickedUpdatePrepickedTalentToPressedColumnOfPlayer (int lp_player, int lp_pressedColumn);
int libGame_gf_TalentsPrepickedGetValidTalentColumn (string lp_talentColumn, int lp_talentTier, int lp_heroIndex);
int libGame_gf_TalentsPrepickedGetSelectedTierDependsOnPlayerStatusOfPlayer (int lp_player);
void libGame_gf_TalentsPrepickedUpdateBuildStringOfPlayer (int lp_player, int lp_build);
void libGame_gf_TalentsPrepickedStoreBuildStringOfHeroForPlayer (int lp_heroIndex, int lp_player);
bool libGame_gf_TalentChoicesIsHeroicTalentTierOfHero (int lp_talentTier, int lp_heroID);
int libGame_gf_TalentChoicesGetNextTierOfPlayer (int lp_player);
int libGame_gf_TalentChoicesGetCurrentTierOfPlayer (int lp_player);
void libGame_gf_CoreAddHeroTalentForPlayer (int lp_talentIndex, int lp_player);
void libGame_gf_CoreResetHeroTalentsForPlayer (int lp_player);
void libGame_gf_CoreRemoveHeroTalentForPlayer (int lp_player, int lp_talentIndex);
void libGame_gf_TalentChoicesChooseTalentForPlayer (int lp_tierIndex, int lp_buttonIndex, int lp_talentIndex, int lp_player);
bool libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierOnlyLevel (int lp_player, int lp_tier);
bool libGame_gf_TalentChoicesPlayerCanChooseTalentFromTierAndColumn (int lp_player, int lp_tier, int lp_column);
bool libGame_gf_TalentChoicesPlayerHasTalent (int lp_player, int lp_talentIndex);
bool libGame_gf_TalentChoicesPlayerHasAnyTalentOnTier (int lp_player, int lp_tier);
void libGame_gf_TalentChoicesUpdateChoicePanelForPlayer (int lp_player);
void libGame_gf_TowerCreateCoreUnderAttackPing (unit lp_coreUnit, int lp_teamNumber);
void libGame_gf_TownAddStructureToTownArray (int lp_townIndex, unit lp_structureUnit, int lp_structurePresetValue, int lp_enemyTeam);
int libGame_gf_TownGetTownForUnit (unit lp_unit);
int libGame_gf_TownGetTownStructureIndexForUnit (unit lp_unit);
int libGame_gf_TownGetTownStructurePresetFromUnit (unit lp_unit);
int libGame_gf_TownGetTownHallPresetOfUnit (unit lp_unit);
int libGame_gf_TownGetTownFromPoint (point lp_point);
bool libGame_gf_TownTownIsAlive (int lp_town, int lp_player);
unit libGame_gf_TownTownHall (int lp_town);
bool libGame_gf_TownTownHallIsAlive (int lp_townIndex);
void libGame_gf_TownUpgradeBruiserMinions (int lp_town);
void libGame_gf_oldTownAnnounceTownDestroyed (unit lp_fortKeep);
void libGame_gf_TownUpdateMoonwellIcon (int lp_townIndex);
void libGame_gf_TownAnnounceTownDestroyed (int lp_town, int lp_townType);
unit libGame_gf_GetSummonerofSummonedUnit (unit lp_summonedUnit);
void libGame_gf_WatchTowersChangeWatchTowerOwnership (int lp_watchTower, int lp_newOwner);
int libGame_gf_WatchTowersGetWatchTowerIndexForUnit (unit lp_unit);

// Trigger Declarations
trigger libGame_gt_IncludeGame;
trigger libGame_gt_InitializePlayers;
trigger libGame_gt_InitializeGameSystems;
trigger libGame_gt_InitializeGameData;
trigger libGame_gt_UnitStatsHealingReceivedInitialization;
trigger libGame_gt_UnitStatsLifestealGeneralController;
trigger libGame_gt_UnitStatsBehaviorChangeCategory;
trigger libGame_gt_UnitStatsDamageTimer;
trigger libGame_gt_AnnouncementMessageTimerExpires;
trigger libGame_gt_InitializeBanks;
trigger libGame_gt_InitializeBehaviorCategories;
trigger libGame_gt_BehaviorCategoriesAddRemoveController;
trigger libGame_gt_BehaviorCategoriesDecloakUnrevealableCloak;
trigger libGame_gt_BehaviorCategoriesDecloakTemporaryCloak;
trigger libGame_gt_BehaviorCategoriesCleanseRemoveCCBehaviorCategoriesExpanded;
trigger libGame_gt_BehaviorCategoriesMovementController;
trigger libGame_gt_CapturePointLogic;
trigger libGame_gt_DimCapturePoint;
trigger libGame_gt_UnDimCapturePoint;
trigger libGame_gt_CCRecognitionRoot;
trigger libGame_gt_CCRecognitionStun;
trigger libGame_gt_CCRecognitionSilenced;
trigger libGame_gt_CCRecognitionStasis;
trigger libGame_gt_ColorBlindUpdate;
trigger libGame_gt_InitializeExistedEffects;
trigger libGame_gt_EffectHistoryDamageTaken;
trigger libGame_gt_EffectHistoryHealed;
trigger libGame_gt_EffectHistoryLifesteal;
trigger libGame_gt_EncouragementDataTrackingInCombatStart;
trigger libGame_gt_EncouragementDataTrackingInCombatTimeout;
trigger libGame_gt_RunAnimations;
trigger libGame_gt_OpenTheGatesOpenTheGatesTimerExpires;
trigger libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires;
trigger libGame_gt_SpawnMinions;
trigger libGame_gt_StartGame;
trigger libGame_gt_AnnounceCountdown;
trigger libGame_gt_DetermineWinningTeam;
trigger libGame_gt_HallOfStormsKnockbackLaunchMissile;
trigger libGame_gt_HallOfStormsKnockbackUnitEntersRegion;
trigger libGame_gt_HallOfStormsUnitEntersRegion;
trigger libGame_gt_HallOfStormsUnitExitsRegion;
trigger libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE;
trigger libGame_gt_HeroDeathHeroDies;
trigger libGame_gt_HeroDeathHeroRespawnTimerExpires;
trigger libGame_gt_HeroDeathTeamMultikillTimerExpires;
trigger libGame_gt_HeroDeathPlayerMultikillTimerExpires;
trigger libGame_gt_HeroDeathUpdateMultikillTimerUI;
trigger libGame_gt_HeroDeathKillStingerTimerExpires;
trigger libGame_gt_HeroDeathHeroDeathToastTimerExpires;
trigger libGame_gt_InitializeCodeLaneSystem;
trigger libGame_gt_PlayerLeavesGame;
trigger libGame_gt_PlayerRejoinsGame;
trigger libGame_gt_TeamAbandonedTheGameTimerExpires;
trigger libGame_gt_PlayerLeftAnnouncementTimerExpires;
trigger libGame_gt_LevelUpHeroGainsLevel;
trigger libGame_gt_MinionSpawnCycle;
trigger libGame_gt_HeroMoonwellCooldownOnOff;
trigger libGame_gt_HeroMoonwellDurationTextTagUpdates;
trigger libGame_gt_HeroMount;
trigger libGame_gt_HeroDismount;
trigger libGame_gt_CoreDiesGameOver;
trigger libGame_gt_MinionDies;
trigger libGame_gt_TownStructureDies;
trigger libGame_gt_TownStructureDiesSpecialCase;
trigger libGame_gt_CreepDies;
trigger libGame_gt_QuestTokenQuestIncreased;
trigger libGame_gt_QuestTokenQuestRefreshUI;
trigger libGame_gt_QuestTokenQuestReset;
trigger libGame_gt_QuestTokenQuestCompleted;
trigger libGame_gt_HeroKillCreditProximityTracking;
trigger libGame_gt_XPTrickle;
trigger libGame_gt_PreloadingPreloadStore;
trigger libGame_gt_PreloadingPreloadHeroes;
trigger libGame_gt_ScalingTimerExpiration;
trigger libGame_gt_JungleScalingTimerExpires;
trigger libGame_gt_CoreScalingTimerExpires;
trigger libGame_gt_ScoreValueTrackingDamage;
trigger libGame_gt_ScoreValueTrackingHeal;
trigger libGame_gt_ScoreValueTrackingLifesteal;
trigger libGame_gt_ShrubProximityRevealer;
trigger libGame_gt_PlayerChooseATalent;
trigger libGame_gt_TeamfightTracking;
trigger libGame_gt_TowerCoreIsUnderAttack;
trigger libGame_gt_TowerCoreUnderAttackAnnouncementOrder;
trigger libGame_gt_TowerCoreUnderAttackAnnouncementChaos;
trigger libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresOrder;
trigger libGame_gt_TowerCoreAlertAnnouncementCooldownExpiresChaos;
trigger libGame_gt_TowerCoreHasTakenDamage;
trigger libGame_gt_InitializeTownSystem;
trigger libGame_gt_UnitCreatedSummoned;
trigger libGame_gt_InitializeWatchTowers;
trigger libGame_gt_WatchTowersTurnOnWatchTowers;
trigger libGame_gt_WatchTowersOwnershipChanges;

// Library Initialization
void libGame_InitVariables ();

